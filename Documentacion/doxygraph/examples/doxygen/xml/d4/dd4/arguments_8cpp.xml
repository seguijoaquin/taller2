<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="d4/dd4/arguments_8cpp" kind="file">
    <compoundname>arguments.cpp</compoundname>
    <includes refid="df/d9b/arguments_8h" local="yes">arguments.h</includes>
    <includes refid="d9/de0/marshal_8h" local="yes">marshal.h</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="309">
        <label>qcstring.h</label>
      </node>
      <node id="311">
        <label>qfile.h</label>
      </node>
      <node id="320">
        <label>assert.h</label>
      </node>
      <node id="316">
        <label>qglobal.h</label>
      </node>
      <node id="306">
        <label>src/arguments.cpp</label>
        <link refid="arguments.cpp"/>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="320" relation="include">
        </childnode>
      </node>
      <node id="312">
        <label>sortdict.h</label>
        <link refid="d9/d21/sortdict_8h_source"/>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>qintdict.h</label>
      </node>
      <node id="319">
        <label>sys/types.h</label>
      </node>
      <node id="308">
        <label>qlist.h</label>
      </node>
      <node id="310">
        <label>marshal.h</label>
        <link refid="d9/de0/marshal_8h_source"/>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>store.h</label>
        <link refid="d5/d3f/store_8h_source"/>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="313">
        <label>qdict.h</label>
      </node>
      <node id="318">
        <label>portable.h</label>
        <link refid="d2/de2/portable_8h"/>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
      </node>
      <node id="317">
        <label>stdio.h</label>
      </node>
      <node id="307">
        <label>arguments.h</label>
        <link refid="df/d9b/arguments_8h_source"/>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;arguments.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;marshal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="d7/df8/class_argument_list_1a2a3058f54bea8d3f320bba8ec6ffcb2b" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list_1a2a3058f54bea8d3f320bba8ec6ffcb2b" kindref="member">ArgumentList::hasDocumentation</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="9"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDocs=FALSE;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>ArgumentListIterator<sp/>ali(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();!hasDocs<sp/>&amp;&amp;<sp/>(a=ali.current());++ali)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>hasDocs<sp/>=<sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a3f0aa4b21a40b3d36e6cf645504cf60b" kindref="member">hasDocumentation</ref>();<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasDocs;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="d7/df8/class_argument_list_1a57a064d6f3ba77dbc19ce8b768eb3909" refkind="member"><highlight class="normal"><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*<ref refid="d7/df8/class_argument_list_1a57a064d6f3ba77dbc19ce8b768eb3909" kindref="member">ArgumentList::deepCopy</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="21"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*argList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list_1a2f46f024604fbd06eb4f2d18f97f74c0" kindref="member">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>argList-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>QListIterator&lt;Argument&gt;<sp/>ali(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(a=ali.current());++ali)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>argList-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>(*a));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>argList-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>argList-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref><sp/><sp/>=<sp/><ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>argList-&gt;<ref refid="d7/df8/class_argument_list_1a3f023c090551e0ecaa588b25f895c047" kindref="member">pureSpecifier</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d7/df8/class_argument_list_1a3f023c090551e0ecaa588b25f895c047" kindref="member">pureSpecifier</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>argList-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref><sp/>=<sp/><ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>argList;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="d7/df8/class_argument_list_1afa737f8c786a4ea7e3e14d7baf063aea" refkind="member"><highlight class="normal"><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*<ref refid="d7/df8/class_argument_list_1afa737f8c786a4ea7e3e14d7baf063aea" kindref="member">ArgumentList::unmarshal</ref>(<ref refid="d7/db0/class_storage_intf" kindref="compound" tooltip="Abstract interface for file based memory storage operations.">StorageIntf</ref><sp/>*s)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>uint<sp/>i;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>uint<sp/>count<sp/>=<sp/>unmarshalUInt(s);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==NULL_LIST)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>null<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list_1a2f46f024604fbd06eb4f2d18f97f74c0" kindref="member">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>assert(count&lt;1000000);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;unmarshalArgumentList:<sp/>%d\n&quot;,count);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;count;i++)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref><sp/><sp/>=<sp/>unmarshalQCString(s);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/><sp/><sp/><sp/>=<sp/>unmarshalQCString(s);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref><sp/>=<sp/>unmarshalQCString(s);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/><sp/><sp/><sp/>=<sp/>unmarshalQCString(s);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref><sp/><sp/><sp/>=<sp/>unmarshalQCString(s);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref><sp/><sp/>=<sp/>unmarshalQCString(s);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref><sp/><sp/><sp/><sp/>=<sp/>unmarshalQCString(s);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;append(a);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>result-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>unmarshalBool(s);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>result-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref><sp/><sp/>=<sp/>unmarshalBool(s);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>result-&gt;<ref refid="d7/df8/class_argument_list_1a3f023c090551e0ecaa588b25f895c047" kindref="member">pureSpecifier</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>unmarshalBool(s);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>result-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref><sp/>=<sp/>unmarshalQCString(s);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArgumentList::marshal(<ref refid="d7/db0/class_storage_intf" kindref="compound" tooltip="Abstract interface for file based memory storage operations.">StorageIntf</ref><sp/>*s,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*argList)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argList==0)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>marshalUInt(s,NULL_LIST);<sp/></highlight><highlight class="comment">//<sp/>null<sp/>pointer<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>marshalUInt(s,argList-&gt;count());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argList-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>ali(*argList);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();(a=ali.current());++ali)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marshalQCString(s,a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marshalQCString(s,a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marshalQCString(s,a-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marshalQCString(s,a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marshalQCString(s,a-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marshalQCString(s,a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marshalQCString(s,a-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>marshalBool(s,argList-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>marshalBool(s,argList-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>marshalBool(s,argList-&gt;<ref refid="d7/df8/class_argument_list_1a3f023c090551e0ecaa588b25f895c047" kindref="member">pureSpecifier</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>marshalQCString(s,argList-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/arguments.cpp"/>
  </compounddef>
</doxygen>

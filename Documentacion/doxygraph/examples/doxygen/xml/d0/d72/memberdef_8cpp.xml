<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="d0/d72/memberdef_8cpp" kind="file">
    <compoundname>memberdef.cpp</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">qglobal.h</includes>
    <includes local="no">qregexp.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="yes">md5.h</includes>
    <includes refid="d4/d46/memberdef_8h" local="yes">memberdef.h</includes>
    <includes refid="d7/dfc/membername_8h" local="yes">membername.h</includes>
    <includes refid="d1/da1/doxygen_8h" local="yes">doxygen.h</includes>
    <includes refid="d8/d3c/util_8h" local="yes">util.h</includes>
    <includes refid="dd/dd8/code_8h" local="yes">code.h</includes>
    <includes refid="d2/d0d/message_8h" local="yes">message.h</includes>
    <includes refid="d8/dc3/htmlhelp_8h" local="yes">htmlhelp.h</includes>
    <includes refid="d8/dce/language_8h" local="yes">language.h</includes>
    <includes refid="d2/db9/outputlist_8h" local="yes">outputlist.h</includes>
    <includes refid="df/d24/example_8h" local="yes">example.h</includes>
    <includes refid="d9/d11/membergroup_8h" local="yes">membergroup.h</includes>
    <includes refid="d1/de6/groupdef_8h" local="yes">groupdef.h</includes>
    <includes refid="d8/d65/defargs_8h" local="yes">defargs.h</includes>
    <includes refid="de/d9c/docparser_8h" local="yes">docparser.h</includes>
    <includes refid="d6/d4a/dot_8h" local="yes">dot.h</includes>
    <includes refid="de/d07/searchindex_8h" local="yes">searchindex.h</includes>
    <includes refid="da/d55/parserintf_8h" local="yes">parserintf.h</includes>
    <includes refid="d9/de0/marshal_8h" local="yes">marshal.h</includes>
    <includes refid="db/db6/objcache_8h" local="yes">objcache.h</includes>
    <includes refid="d8/d75/vhdlscanner_8h" local="yes">vhdlscanner.h</includes>
    <includes refid="dd/dec/vhdldocgen_8h" local="yes">vhdldocgen.h</includes>
    <includes refid="df/d9b/arguments_8h" local="yes">arguments.h</includes>
    <includes refid="dd/d78/memberlist_8h" local="yes">memberlist.h</includes>
    <includes refid="d7/d97/namespacedef_8h" local="yes">namespacedef.h</includes>
    <includes refid="d4/d3a/filedef_8h" local="yes">filedef.h</includes>
    <includes refid="db/d16/config_8h" local="yes">config.h</includes>
    <incdepgraph>
      <node id="3368">
        <label>qcstring.h</label>
      </node>
      <node id="3361">
        <label>qregexp.h</label>
      </node>
      <node id="3381">
        <label>qgstring.h</label>
      </node>
      <node id="3414">
        <label>qfile.h</label>
      </node>
      <node id="3396">
        <label>outputgen.h</label>
        <link refid="df/d06/outputgen_8h_source"/>
        <childnode refid="3397" relation="include">
        </childnode>
        <childnode refid="3390" relation="include">
        </childnode>
        <childnode refid="3398" relation="include">
        </childnode>
        <childnode refid="3378" relation="include">
        </childnode>
      </node>
      <node id="3362">
        <label>assert.h</label>
      </node>
      <node id="3397">
        <label>qstack.h</label>
      </node>
      <node id="3402">
        <label>docparser.h</label>
        <link refid="de/d9c/docparser_8h_source"/>
        <childnode refid="3359" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3368" relation="include">
        </childnode>
        <childnode refid="3403" relation="include">
        </childnode>
        <childnode refid="3404" relation="include">
        </childnode>
      </node>
      <node id="3358">
        <label>src/memberdef.cpp</label>
        <link refid="memberdef.cpp"/>
        <childnode refid="3359" relation="include">
        </childnode>
        <childnode refid="3360" relation="include">
        </childnode>
        <childnode refid="3361" relation="include">
        </childnode>
        <childnode refid="3362" relation="include">
        </childnode>
        <childnode refid="3363" relation="include">
        </childnode>
        <childnode refid="3364" relation="include">
        </childnode>
        <childnode refid="3371" relation="include">
        </childnode>
        <childnode refid="3374" relation="include">
        </childnode>
        <childnode refid="3385" relation="include">
        </childnode>
        <childnode refid="3387" relation="include">
        </childnode>
        <childnode refid="3388" relation="include">
        </childnode>
        <childnode refid="3389" relation="include">
        </childnode>
        <childnode refid="3391" relation="include">
        </childnode>
        <childnode refid="3395" relation="include">
        </childnode>
        <childnode refid="3399" relation="include">
        </childnode>
        <childnode refid="3382" relation="include">
        </childnode>
        <childnode refid="3400" relation="include">
        </childnode>
        <childnode refid="3401" relation="include">
        </childnode>
        <childnode refid="3402" relation="include">
        </childnode>
        <childnode refid="3405" relation="include">
        </childnode>
        <childnode refid="3410" relation="include">
        </childnode>
        <childnode refid="3412" relation="include">
        </childnode>
        <childnode refid="3413" relation="include">
        </childnode>
        <childnode refid="3417" relation="include">
        </childnode>
        <childnode refid="3418" relation="include">
        </childnode>
        <childnode refid="3422" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3384" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3428" relation="include">
        </childnode>
      </node>
      <node id="3375">
        <label>qdatetime.h</label>
      </node>
      <node id="3377">
        <label>qstrlist.h</label>
      </node>
      <node id="3360">
        <label>qglobal.h</label>
      </node>
      <node id="3399">
        <label>example.h</label>
        <link refid="df/d24/example_8h_source"/>
        <childnode refid="3368" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
      </node>
      <node id="3380">
        <label>qstring.h</label>
      </node>
      <node id="3419">
        <label>stdlib.h</label>
      </node>
      <node id="3395">
        <label>outputlist.h</label>
        <link refid="d2/db9/outputlist_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3390" relation="include">
        </childnode>
        <childnode refid="3396" relation="include">
        </childnode>
      </node>
      <node id="3403">
        <label>docvisitor.h</label>
        <link refid="d2/d3c/docvisitor_8h_source"/>
      </node>
      <node id="3382">
        <label>membergroup.h</label>
        <link refid="d9/d11/membergroup_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3367" relation="include">
        </childnode>
      </node>
      <node id="3418">
        <label>vhdlscanner.h</label>
        <link refid="d8/d75/vhdlscanner_8h_source"/>
        <childnode refid="3412" relation="include">
        </childnode>
        <childnode refid="3359" relation="include">
        </childnode>
        <childnode refid="3419" relation="include">
        </childnode>
        <childnode refid="3362" relation="include">
        </childnode>
        <childnode refid="3386" relation="include">
        </childnode>
        <childnode refid="3420" relation="include">
        </childnode>
        <childnode refid="3421" relation="include">
        </childnode>
        <childnode refid="3414" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3422" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
      </node>
      <node id="3372">
        <label>sortdict.h</label>
        <link refid="d9/d21/sortdict_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3373" relation="include">
        </childnode>
      </node>
      <node id="3384">
        <label>memberlist.h</label>
        <link refid="dd/d78/memberlist_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3364" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3367" relation="include">
        </childnode>
      </node>
      <node id="3394">
        <label>qptrdict.h</label>
      </node>
      <node id="3391">
        <label>language.h</label>
        <link refid="d8/dce/language_8h_source"/>
        <childnode refid="3392" relation="include">
        </childnode>
      </node>
      <node id="3425">
        <label>entry.h</label>
        <link refid="d1/dc6/entry_8h_source"/>
        <childnode refid="3367" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3381" relation="include">
        </childnode>
      </node>
      <node id="3406">
        <label>qwaitcondition.h</label>
      </node>
      <node id="3405">
        <label>dot.h</label>
        <link refid="d6/d4a/dot_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3406" relation="include">
        </childnode>
        <childnode refid="3407" relation="include">
        </childnode>
        <childnode refid="3408" relation="include">
        </childnode>
        <childnode refid="3409" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
      </node>
      <node id="3412">
        <label>parserintf.h</label>
        <link refid="da/d55/parserintf_8h_source"/>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3377" relation="include">
        </childnode>
      </node>
      <node id="3376">
        <label>qcache.h</label>
      </node>
      <node id="3393">
        <label>classdef.h</label>
        <link refid="d1/da6/classdef_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3394" relation="include">
        </childnode>
        <childnode refid="3369" relation="include">
        </childnode>
      </node>
      <node id="3411">
        <label>qvector.h</label>
      </node>
      <node id="3388">
        <label>message.h</label>
        <link refid="d2/d0d/message_8h_source"/>
        <childnode refid="3359" relation="include">
        </childnode>
      </node>
      <node id="3385">
        <label>util.h</label>
        <link refid="d8/d3c/util_8h"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3386" relation="include">
        </childnode>
        <childnode refid="3367" relation="include">
        </childnode>
      </node>
      <node id="3373">
        <label>qintdict.h</label>
      </node>
      <node id="3379">
        <label>qiodevice.h</label>
      </node>
      <node id="3428">
        <label>config.h</label>
        <link refid="db/d16/config_8h_source"/>
        <childnode refid="3377" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3378" relation="include">
        </childnode>
      </node>
      <node id="3366">
        <label>sys/types.h</label>
      </node>
      <node id="3408">
        <label>qqueue.h</label>
      </node>
      <node id="3367">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="3368" relation="include">
        </childnode>
      </node>
      <node id="3421">
        <label>unistd.h</label>
      </node>
      <node id="3410">
        <label>searchindex.h</label>
        <link refid="de/d07/searchindex_8h_source"/>
        <childnode refid="3373" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3411" relation="include">
        </childnode>
      </node>
      <node id="3365">
        <label>qlist.h</label>
      </node>
      <node id="3378">
        <label>ftextstream.h</label>
        <link refid="df/d83/ftextstream_8h_source"/>
        <childnode refid="3359" relation="include">
        </childnode>
        <childnode refid="3379" relation="include">
        </childnode>
        <childnode refid="3380" relation="include">
        </childnode>
        <childnode refid="3381" relation="include">
        </childnode>
      </node>
      <node id="3413">
        <label>marshal.h</label>
        <link refid="d9/de0/marshal_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3414" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3415" relation="include">
        </childnode>
      </node>
      <node id="3374">
        <label>doxygen.h</label>
        <link refid="d1/da1/doxygen_8h_source"/>
        <childnode refid="3375" relation="include">
        </childnode>
        <childnode refid="3376" relation="include">
        </childnode>
        <childnode refid="3377" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3373" relation="include">
        </childnode>
        <childnode refid="3378" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3382" relation="include">
        </childnode>
        <childnode refid="3383" relation="include">
        </childnode>
        <childnode refid="3384" relation="include">
        </childnode>
      </node>
      <node id="3364">
        <label>memberdef.h</label>
        <link refid="d4/d46/memberdef_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3366" relation="include">
        </childnode>
        <childnode refid="3367" relation="include">
        </childnode>
        <childnode refid="3369" relation="include">
        </childnode>
      </node>
      <node id="3401">
        <label>defargs.h</label>
        <link refid="d8/d65/defargs_8h_source"/>
      </node>
      <node id="3427">
        <label>filedef.h</label>
        <link refid="d4/d3a/filedef_8h_source"/>
        <childnode refid="3390" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3373" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3369" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3384" relation="include">
        </childnode>
      </node>
      <node id="3400">
        <label>groupdef.h</label>
        <link refid="d1/de6/groupdef_8h_source"/>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3369" relation="include">
        </childnode>
      </node>
      <node id="3415">
        <label>store.h</label>
        <link refid="d5/d3f/store_8h_source"/>
        <childnode refid="3360" relation="include">
        </childnode>
        <childnode refid="3359" relation="include">
        </childnode>
        <childnode refid="3416" relation="include">
        </childnode>
      </node>
      <node id="3371">
        <label>membername.h</label>
        <link refid="d7/dfc/membername_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3364" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
      </node>
      <node id="3386">
        <label>ctype.h</label>
      </node>
      <node id="3398">
        <label>section.h</label>
        <link refid="d1/d2a/section_8h_source"/>
        <childnode refid="3372" relation="include">
        </childnode>
      </node>
      <node id="3389">
        <label>htmlhelp.h</label>
        <link refid="d8/dc3/htmlhelp_8h_source"/>
        <childnode refid="3377" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3390" relation="include">
        </childnode>
        <childnode refid="3378" relation="include">
        </childnode>
      </node>
      <node id="3409">
        <label>qthread.h</label>
      </node>
      <node id="3369">
        <label>definition.h</label>
        <link refid="df/da1/definition_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3367" relation="include">
        </childnode>
      </node>
      <node id="3390">
        <label>index.h</label>
        <link refid="d1/db5/index_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3368" relation="include">
        </childnode>
      </node>
      <node id="3383">
        <label>dirdef.h</label>
        <link refid="d6/d15/dirdef_8h_source"/>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3369" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
      </node>
      <node id="3417">
        <label>objcache.h</label>
        <link refid="db/db6/objcache_8h_source"/>
      </node>
      <node id="3387">
        <label>code.h</label>
        <link refid="dd/dd8/code_8h_source"/>
      </node>
      <node id="3370">
        <label>qdict.h</label>
      </node>
      <node id="3416">
        <label>portable.h</label>
        <link refid="d2/de2/portable_8h"/>
        <childnode refid="3366" relation="include">
        </childnode>
        <childnode refid="3359" relation="include">
        </childnode>
        <childnode refid="3360" relation="include">
        </childnode>
      </node>
      <node id="3407">
        <label>qmutex.h</label>
      </node>
      <node id="3363">
        <label>md5.h</label>
      </node>
      <node id="3404">
        <label>htmlattrib.h</label>
        <link refid="d0/d73/htmlattrib_8h_source"/>
        <childnode refid="3368" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
      </node>
      <node id="3359">
        <label>stdio.h</label>
      </node>
      <node id="3422">
        <label>vhdldocgen.h</label>
        <link refid="dd/dec/vhdldocgen_8h_source"/>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3368" relation="include">
        </childnode>
        <childnode refid="3423" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
      </node>
      <node id="3423">
        <label>layout.h</label>
        <link refid="db/d51/layout_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3367" relation="include">
        </childnode>
      </node>
      <node id="3420">
        <label>qarray.h</label>
      </node>
      <node id="3392">
        <label>translator.h</label>
        <link refid="d9/df1/translator_8h_source"/>
        <childnode refid="3393" relation="include">
        </childnode>
      </node>
      <node id="3426">
        <label>namespacedef.h</label>
        <link refid="d7/d97/namespacedef_8h_source"/>
        <childnode refid="3377" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3369" relation="include">
        </childnode>
      </node>
      <node id="3424">
        <label>arguments.h</label>
        <link refid="df/d9b/arguments_8h_source"/>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3368" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="d7/d7e/class_member_def_impl" prot="public">MemberDefImpl</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1ac66cc6a4e1d7c053d396a641dfe15d93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString addTemplateNames</definition>
        <argsstring>(const QCString &amp;s, const QCString &amp;n, const QCString &amp;t)</argsstring>
        <name>addTemplateNames</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="55" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="54" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1aaf0b66850f85b5f5ae2f67dd18dfb1ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool writeDefArgumentList</definition>
        <argsstring>(OutputList &amp;ol, ClassDef *cd, const QCString &amp;, MemberDef *md)</argsstring>
        <name>writeDefArgumentList</name>
        <param>
          <type><ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref> &amp;</type>
          <declname>ol</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="123" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="121" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1ae89c95bdf5d0d69aadce52945df9c231" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void writeExceptionListImpl</definition>
        <argsstring>(OutputList &amp;ol, ClassDef *cd, MemberDef *md, QCString const &amp;exception)</argsstring>
        <name>writeExceptionListImpl</name>
        <param>
          <type><ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref> &amp;</type>
          <declname>ol</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>QCString const &amp;</type>
          <declname>exception</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="371" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="369" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1aa9f9fd15714699bfa48606c9a1f15bcc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void writeExceptionList</definition>
        <argsstring>(OutputList &amp;ol, ClassDef *cd, MemberDef *md)</argsstring>
        <name>writeExceptionList</name>
        <param>
          <type><ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref> &amp;</type>
          <declname>ol</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="409" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="408" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1aec37b9f892260b1a95584e972fcd4a38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void writeTemplatePrefix</definition>
        <argsstring>(OutputList &amp;ol, ArgumentList *al)</argsstring>
        <name>writeTemplatePrefix</name>
        <param>
          <type><ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref> &amp;</type>
          <declname>ol</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="432" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="431" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1a0a8ffacc302979f9f812ab6608967287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString extractDirection</definition>
        <argsstring>(QCString &amp;docs)</argsstring>
        <name>extractDirection</name>
        <param>
          <type>QCString &amp;</type>
          <declname>docs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="452" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="451" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1a0fcfb1e72d24be27533f0a69fd651264" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString simplifyTypeForTable</definition>
        <argsstring>(const QCString &amp;s)</argsstring>
        <name>simplifyTypeForTable</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="2849" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="2848" bodyend="2864"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1a6db60e9842116de1faea7669b67f8050" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void invalidateCachedTypesInArgumentList</definition>
        <argsstring>(ArgumentList *al)</argsstring>
        <name>invalidateCachedTypesInArgumentList</name>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="4642" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="4641" bodyend="4652"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1a8957a15e73e2757a937773a4e883f334" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transferArgumentDocumentation</definition>
        <argsstring>(ArgumentList *decAl, ArgumentList *defAl)</argsstring>
        <name>transferArgumentDocumentation</name>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>decAl</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>defAl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="4695" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="4694" bodyend="4719"/>
      </memberdef>
      <memberdef kind="function" id="d0/d72/memberdef_8cpp_1a2d7b2e78ef187cdb77522ed843535d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void combineDeclarationAndDefinition</definition>
        <argsstring>(MemberDef *mdec, MemberDef *mdef)</argsstring>
        <name>combineDeclarationAndDefinition</name>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>mdec</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>mdef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" line="4722" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp" bodystart="4721" bodyend="4846"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1997-2013<sp/>by<sp/>Dimitri<sp/>van<sp/>Heesch.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and<sp/>distribute<sp/>this<sp/>software<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>documentation<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>is<sp/>hereby<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>granted.<sp/>No<sp/>representations<sp/>are<sp/>made<sp/>about<sp/>the<sp/>suitability<sp/>of<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>for<sp/>any<sp/>purpose.<sp/>It<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;<sp/>without<sp/>express<sp/>or<sp/>implied<sp/>warranty.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Documents<sp/>produced<sp/>by<sp/>Doxygen<sp/>are<sp/>derivative<sp/>works<sp/>derived<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>input<sp/>used<sp/>in<sp/>their<sp/>production;<sp/>they<sp/>are<sp/>not<sp/>affected<sp/>by<sp/>this<sp/>license.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qglobal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qregexp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;md5.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memberdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;membername.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doxygen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d3c/util_8h" kindref="compound" tooltip="A bunch of utility functions.">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;code.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;message.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;htmlhelp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;language.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;outputlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;example.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;membergroup.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;groupdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;defargs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;docparser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;searchindex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parserintf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;marshal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;objcache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vhdlscanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vhdldocgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arguments.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memberlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;namespacedef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filedef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MemberDef::s_indentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>addTemplateNames(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;n,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;t)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>QCString<sp/>clRealName=n;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0,i;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i=clRealName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">))!=-1)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>clRealName=clRealName.left(i);<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>template<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i=clRealName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">))!=-1)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>clRealName=clRealName.right(clRealName.length()-i-2);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=s.find(clRealName,p))!=-1)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>result+=s.mid(p,i-p);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>j=clRealName.length()+i;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.length()==j<sp/>||<sp/>(s.at(j)!=</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!isId(s.at(j))))</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>add<sp/>template<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>%s+%s\n&quot;,clRealName.data(),t.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=clRealName+t;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>template<sp/>names<sp/>already<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>%s\n&quot;,clRealName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=clRealName;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+clRealName.length();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>result+=s.right(s.length()-p);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;addTemplateNames(%s,%s,%s)=%s\n&quot;,s.data(),n.data(),t.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ol.startMemberDocName<sp/>has<sp/>already<sp/>been<sp/>done<sp/>before<sp/>this<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>this<sp/>function<sp/>returns<sp/>TRUE,<sp/>ol.endParameterList<sp/>will<sp/>be<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typical<sp/>sequence:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.startMemberDoc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.startMemberDocName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>---<sp/>enter<sp/>writeDefArgumentList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.endMemberDocName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.startParameterList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ol.startParameterType(first=TRUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ol.endParameterType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ol.startParameterName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ol.endParameterName(last==FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ol.startParameterType(first=FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ol.endParamtereType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ol.startParameterName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ol.endParameterName(last==TRUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>---<sp/>leave<sp/>writeDefArgumentList<sp/>with<sp/>return<sp/>value<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.endParameterList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.endMemberDoc(hasArgs=TRUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>For<sp/>an<sp/>empty<sp/>list<sp/>the<sp/>function<sp/>should<sp/>return<sp/>FALSE,<sp/>the<sp/>sequence<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.startMemberDoc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.startMemberDocName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>---<sp/>enter<sp/>writeDefArgumentList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>---<sp/>leave<sp/>writeDefArgumentList<sp/>with<sp/>return<sp/>value<sp/>FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.endMemberDocName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ol.endMemberDoc(hasArgs=FALSE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeDefArgumentList(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;<sp/></highlight><highlight class="comment">/*scopeName*/</highlight><highlight class="normal">,<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*defArgList=(md-&gt;isDocsForDefinition())<sp/>?<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;argumentList()<sp/>:<sp/>md-&gt;declArgumentList();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;writeDefArgumentList<sp/>`%s&apos;<sp/>isDocsForDefinition()=%d\n&quot;,md-&gt;name().data(),md-&gt;isDocsForDefinition());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defArgList==0<sp/>||<sp/>md-&gt;isProperty())<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>member<sp/>has<sp/>no<sp/>function<sp/>like<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;isDefine())<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>simple<sp/>argument<sp/>list<sp/>for<sp/>tcl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Tcl)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defArgList-&gt;count()==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=defArgList-&gt;first();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endMemberDocName();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startParameterList(FALSE);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startParameterType(TRUE,0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endParameterType();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startParameterName(FALSE);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a)<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty())</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">+a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>+</highlight><highlight class="stringliteral">&quot;?<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a=defArgList-&gt;next();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endParameterName(TRUE,FALSE,FALSE);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;writeDefArgList(%d)\n&quot;,defArgList-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ol.disableAllBut(OutputGenerator::Html);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>htmlOn<sp/><sp/>=<sp/>ol.<ref refid="df/dc8/class_output_list_1a63a7bebe83b904d00b2350863c7c7399" kindref="member">isEnabled</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>latexOn<sp/>=<sp/>ol.<ref refid="df/dc8/class_output_list_1a63a7bebe83b904d00b2350863c7c7399" kindref="member">isEnabled</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>html<sp/>and<sp/>latex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(htmlOn)<sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latexOn)<sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endMemberDocName();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startParameterList(!md-&gt;isObjCMethod());<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad32603ff4c4ba4d39e0bad7ede5924bf" kindref="member">enableAll</ref>();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>formats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;isObjCMethod())<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>start<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endMemberDocName();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;===&gt;<sp/>name=%s<sp/>isDefine=%d\n&quot;,md-&gt;name().data(),md-&gt;isDefine());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=defArgList-&gt;first();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>QCString<sp/>cName;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>cName=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>il=cName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir=cName.findRev(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(il!=-1<sp/>&amp;&amp;<sp/>ir!=-1<sp/>&amp;&amp;<sp/>ir&gt;il)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cName=cName.mid(il,ir-il+1);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;1.<sp/>cName=%s\n&quot;,cName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>())</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cName=tempArgListToString(cd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>());<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;2.<sp/>cName=%s\n&quot;,cName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>template<sp/>specifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cName.resize(0);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;~~~<sp/>%s<sp/>cName=%s\n&quot;,md-&gt;name().data(),cName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first=TRUE;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>paramTypeStarted=FALSE;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDefine<sp/>=<sp/>md-&gt;isDefine();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isDefine<sp/>||<sp/>first)<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startParameterType(first,0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paramTypeStarted=TRUE;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isDefine)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endParameterType();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startParameterName(TRUE);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;)(&quot;</highlight><highlight class="normal">),res(</highlight><highlight class="stringliteral">&quot;(.*\\*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vp=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.find(re);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wp=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.find(res);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>following<sp/>to<sp/>put<sp/>the<sp/>function<sp/>pointer<sp/>type<sp/>before<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasFuncPtrType=FALSE;<sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!md-&gt;isObjCMethod())<sp/></highlight><highlight class="comment">//<sp/>argument<sp/>has<sp/>an<sp/>IDL<sp/>attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasFuncPtrType)<sp/></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>a<sp/>function<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;a-&gt;type=`%s&apos;<sp/>a-&gt;name=`%s&apos;\n&quot;,a-&gt;type.data(),a-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>n=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(vp);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasFuncPtrType)<sp/>n=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(wp);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isObjCMethod())<sp/>{<sp/>n.prepend(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);<sp/>n.append(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cName.isEmpty())<sp/>n=addTemplateNames(n,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),cName);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),cd,md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),md,n);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>non-function<sp/>pointer<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>n=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isObjCMethod())<sp/>{<sp/>n.prepend(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);<sp/>n.append(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>!=</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cName.isEmpty())<sp/>n=addTemplateNames(n,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),cName);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),cd,md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),md,n);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isDefine)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paramTypeStarted)<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endParameterType();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramTypeStarted=FALSE;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startParameterName(defArgList-&gt;count()&lt;2);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasFuncPtrType)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.mid(wp,vp-wp));<sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>||<sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>&amp;&amp;<sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>==</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//<sp/>argument<sp/>has<sp/>a<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!hasFuncPtrType)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ol.docify(&quot;<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1aba5576798309803175cefaedf33b2a28" kindref="member">startEmphasis</ref>();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latexOn)<sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a5674d5d9336eb1f7f6cb83c058f5ad8f" kindref="member">endEmphasis</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latexOn)<sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>.isEmpty())</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasFuncPtrType)<sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>part<sp/>of<sp/>the<sp/>argument<sp/>type<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>comes<sp/>after<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),cd,md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md,a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.right(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.length()-vp));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>n=a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cName.isEmpty())<sp/>n=addTemplateNames(n,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),cName);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a848e77a8fd7af578497f7ee1ec163b98" kindref="member">startTypewriter</ref>();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),cd,md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),md,n,FALSE,TRUE,TRUE);<sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad83302c45e73f387c9dc13789df012f7" kindref="member">endTypewriter</ref>();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>a=defArgList-&gt;next();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a)<sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;isObjCMethod())<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>more<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isDefine)<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>key;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isObjCMethod()<sp/>&amp;&amp;<sp/>a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref>.length()&gt;=2)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>parameter<sp/>keyword<sp/>%s\n&quot;,a-&gt;attrib.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>[<sp/>and<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key=a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref>.mid(1,a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref>.length()-2);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key!=</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">)<sp/>key+=</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>normal<sp/>keywords<sp/>add<sp/>colon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endParameterName(FALSE,FALSE,!md-&gt;isObjCMethod());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paramTypeStarted)<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endParameterType();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startParameterType(FALSE,key);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramTypeStarted=TRUE;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>isDefine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endParameterName(FALSE,FALSE,TRUE);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>first=FALSE;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;isObjCMethod())<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>end<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad32603ff4c4ba4d39e0bad7ede5924bf" kindref="member">enableAll</ref>();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(htmlOn)<sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(latexOn)<sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/>ol.startParameterName(defArgList-&gt;count()&lt;2);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>ol.endParameterName(TRUE,defArgList-&gt;count()&lt;2,!md-&gt;isObjCMethod());</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;extraTypeChars())</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(md-&gt;extraTypeChars());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defArgList-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref>)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>const&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defArgList-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>volatile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defArgList-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref>.isEmpty())</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),<sp/></highlight><highlight class="comment">//<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fileScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defArgList-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref>,<sp/></highlight><highlight class="comment">//<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>autoBreak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeExceptionListImpl(</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,<sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md,<sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>)</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>ordinary<sp/>exception<sp/>spec<sp/>-<sp/>there<sp/>must<sp/>be<sp/>a<sp/>&apos;(&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>exception.find(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(-1!=index)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.exceptionEntry(exception.left(index),</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>++index;<sp/></highlight><highlight class="comment">//<sp/>paren<sp/>in<sp/>second<sp/>column<sp/>so<sp/>skip<sp/>it<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comma<sp/>=<sp/>exception.find(</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/>index);<sp/>-1!=comma;<sp/>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++comma;<sp/></highlight><highlight class="comment">//<sp/>include<sp/>comma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),cd,md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),md,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception.mid(index,comma-index));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.exceptionEntry(0,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index=comma;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comma<sp/>=<sp/>exception.find(</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/>index);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close<sp/>=<sp/>exception.find(</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">,<sp/>index);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(-1!=close)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/><ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>=removeRedundantWhiteSpace(exception.mid(index,close-index));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),cd,md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),md,<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.exceptionEntry(0,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(md-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>)<sp/>in<sp/>exception<sp/>list<sp/>on<sp/>member<sp/>%s&quot;</highlight><highlight class="normal">,qPrint(md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fallback<sp/>-<sp/>is<sp/>it<sp/>possible<sp/>to<sp/>get<sp/>here?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>warn(md-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>(<sp/>in<sp/>exception<sp/>list<sp/>on<sp/>member<sp/>%s&quot;</highlight><highlight class="normal">,qPrint(md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),cd,md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),md,<ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeExceptionList(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,<sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>QCString<sp/><ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>(QCString(md-&gt;excpString()).stripWhiteSpace());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">==exception.at(0))</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>an<sp/>UNO<sp/>IDL<sp/>attribute<sp/>-<sp/>need<sp/>special<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>exception.find(</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(-1<sp/>!=<sp/>index)<sp/></highlight><highlight class="comment">//<sp/>there<sp/>should<sp/>be<sp/>no<sp/>more<sp/>than<sp/>2<sp/>(set<sp/>/<sp/>get)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>omit<sp/>&apos;{&apos;<sp/>and<sp/>&apos;;&apos;<sp/>-&gt;<sp/>&quot;set<sp/>raises<sp/>(...)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeExceptionListImpl(ol,cd,md,exception.mid(oldIndex,index-oldIndex));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldIndex=index+1;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>exception.find(</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">,oldIndex);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>rest<sp/>is<sp/>now<sp/>just<sp/>&apos;}&apos;<sp/>-<sp/>omit<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>writeExceptionListImpl(ol,cd,md,exception);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeTemplatePrefix(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;template&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=al-&gt;first();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.length()!=0)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>a=al-&gt;next();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a)<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">QCString<sp/>extractDirection(QCString<sp/>&amp;docs)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;\\[[^\\]]+\\]&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>[...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(re.match(docs,0,&amp;l)==0)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>inPos<sp/><sp/>=<sp/>docs.find(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>1,FALSE);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outPos<sp/><sp/>=<sp/>docs.find(</highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">,1,FALSE);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>input<sp/><sp/>=<sp/><sp/>inPos!=-1<sp/>&amp;&amp;<sp/><sp/>inPos&lt;l;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>outPos!=-1<sp/>&amp;&amp;<sp/>outPos&lt;l;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input<sp/>||<sp/>output)<sp/></highlight><highlight class="comment">//<sp/>in,out<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>docs<sp/>=<sp/>docs.mid(l);<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input<sp/>&amp;&amp;<sp/>output)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[in,out]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[in]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[out]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QCString();</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemberDefImpl</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>MemberDefImpl();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/>~MemberDefImpl();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*def,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>p,<ref refid="d9/d49/types_8h_1ab16236bdd10ddf4d73a9847350f0017e" kindref="member" tooltip="Virtualness of a member.">Specifier</ref><sp/>v,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>s,<ref refid="d9/d49/types_8h_1a9d625fe894d9313ec78df1d78553f32e" kindref="member" tooltip="Kind of member relationship.">Relationship</ref><sp/>r,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType<sp/>mt,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tal,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/><sp/><sp/><sp/>*classDef;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>of<sp/>or<sp/>related<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/><sp/><sp/><sp/><sp/>*fileDef;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>of<sp/>file<sp/>definition<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nspace;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>namespace<sp/>this<sp/>member<sp/>is<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/>*enumScope;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enclosing<sp/>scope,<sp/>if<sp/>this<sp/>is<sp/>an<sp/>enum<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>livesInsideEnum;<sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/>*annEnumType;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>anonymous<sp/>enum<sp/>that<sp/>is<sp/>the<sp/>type<sp/>of<sp/>this<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*enumFields;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enumeration<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/>*redefines;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>members<sp/>that<sp/>this<sp/>member<sp/>redefines<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*redefinedBy;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>list<sp/>of<sp/>members<sp/>that<sp/>redefine<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/>*memDef;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>definition<sp/>for<sp/>this<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/>*memDec;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>declaration<sp/>for<sp/>this<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/><sp/>*relatedAlso;<sp/><sp/></highlight><highlight class="comment">//<sp/>points<sp/>to<sp/>class<sp/>marked<sp/>by<sp/>relatedAlso</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d31/class_example_s_dict" kindref="compound" tooltip="A sorted dictionary of Example objects.">ExampleSDict</ref><sp/>*exampleSDict;<sp/></highlight><highlight class="comment">//<sp/>a<sp/>dictionary<sp/>of<sp/>all<sp/>examples<sp/>for<sp/>quick<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>actual<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>accessorType;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>type<sp/>that<sp/>tell<sp/>how<sp/>to<sp/>get<sp/>to<sp/>this<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*accessorClass;<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>that<sp/>this<sp/>member<sp/>accesses<sp/>(for<sp/>anonymous<sp/>types)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>args;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>arguments/variable<sp/>array<sp/>specifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>def;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>definition<sp/>in<sp/>code<sp/>(fully<sp/>qualified<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>anc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HTML<sp/>anchor<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1ab16236bdd10ddf4d73a9847350f0017e" kindref="member" tooltip="Virtualness of a member.">Specifier</ref><sp/>virt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normal/virtual/pure<sp/>virtual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>prot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>protection<sp/>type<sp/>[Public/Protected/Private]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>decl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>declaration<sp/>in<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>bitfields;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>struct<sp/>member<sp/>bitfields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>read;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>property<sp/>read<sp/>accessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>write;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>property<sp/>write<sp/>accessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>exception;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exceptions<sp/>that<sp/>can<sp/>be<sp/>thrown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>initializer;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>extraTypeChars;<sp/><sp/></highlight><highlight class="comment">//<sp/>extra<sp/>type<sp/>info<sp/>found<sp/>after<sp/>the<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>enumBaseType;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>type<sp/>of<sp/>the<sp/>enum<sp/>(C++11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initLines;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>lines<sp/>in<sp/>the<sp/>initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64<sp/><sp/>memSpec;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>specifiers<sp/>present<sp/>for<sp/>this<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>MemberType<sp/>mtype;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>kind<sp/>of<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxInitLines;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>initializer<sp/>will<sp/>be<sp/>displayed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>userInitLines;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>of<sp/>explicit<sp/>\hideinitializer<sp/>or<sp/>\showinitializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/>*annMemb;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*defArgList;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>argument<sp/>list<sp/>of<sp/>this<sp/>member<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*declArgList;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>argument<sp/>list<sp/>of<sp/>this<sp/>member<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tArgList;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>argument<sp/>list<sp/>of<sp/>function<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*typeConstraints;<sp/></highlight><highlight class="comment">//<sp/>type<sp/>constraints<sp/>for<sp/>template<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*templateMaster;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>*defTmpArgLists;<sp/></highlight><highlight class="comment">//<sp/>lists<sp/>of<sp/>template<sp/>argument<sp/>lists<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(for<sp/>template<sp/>functions<sp/>in<sp/>nested<sp/>template<sp/>classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cachedAnonymousType;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>member<sp/>has<sp/>an<sp/>anonymous<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>its<sp/>type<sp/>then<sp/>this<sp/>is<sp/>computed<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>getClassDefOfAnonymousType()<sp/>and<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cached<sp/>here.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;MemberList&gt;</ref><sp/>*classSectionSDict;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>accessible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*groupAlias;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Member<sp/>containing<sp/>the<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grpId;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>group<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d32/class_member_group" kindref="compound" tooltip="A class representing a group of members.">MemberGroup</ref><sp/>*memberGroup;<sp/></highlight><highlight class="comment">//<sp/>group&apos;s<sp/>member<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*group;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>group<sp/>in<sp/>which<sp/>this<sp/>member<sp/>is<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d59/struct_grouping_1a9f0ec5ab376b083ebe3274ea79fd2d70" kindref="member" tooltip="Grouping priority.">Grouping::GroupPri_t</ref><sp/>grouppri;<sp/></highlight><highlight class="comment">//<sp/>priority<sp/>of<sp/>this<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>groupFileName;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>where<sp/>this<sp/>grouping<sp/>was<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupStartLine;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>line<sp/><sp/>&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*groupMember;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTypedefValCached;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cachedTypedefValue;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>cachedTypedefTemplSpec;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>cachedResolvedType;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inbody<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>inbodyLine;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>inbodyFile;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>inbodyDocs;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>documentation<sp/>inheritance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*docProvider;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>store<sp/>the<sp/>output<sp/>file<sp/>base<sp/>from<sp/>tag<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>explicitOutputFileBase;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>objective-c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>implOnly;<sp/></highlight><highlight class="comment">//<sp/>function<sp/>found<sp/>in<sp/>implementation<sp/>but<sp/>not<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDocumentedParams;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDocumentedReturnType;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDMember;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a9d625fe894d9313ec78df1d78553f32e" kindref="member" tooltip="Kind of member relationship.">Relationship</ref><sp/>related;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relationship<sp/>of<sp/>this<sp/>to<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stat;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>it<sp/>a<sp/>static<sp/>function?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>proto;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>it<sp/>a<sp/>prototype;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>docEnumValues;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>an<sp/>enum<sp/>with<sp/>documented<sp/>enum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>annScope;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>is<sp/>part<sp/>of<sp/>an<sp/>annoymous<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>annUsed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCallGraph;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCallerGraph;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>explExt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>was<sp/>explicitly<sp/>declared<sp/>external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tspec;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>is<sp/>a<sp/>template<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>groupHasDocs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>the<sp/>entry<sp/>that<sp/>caused<sp/>the<sp/>grouping<sp/>was<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>docsForDefinition;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TRUE<sp/>=&gt;<sp/>documentation<sp/>block<sp/>is<sp/>put<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FALSE<sp/>=&gt;<sp/>block<sp/>is<sp/>put<sp/>before<sp/>declaration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*category;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*categoryRelation;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>tagDataWritten;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">};</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">MemberDefImpl::MemberDefImpl()<sp/>:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>enumFields(0),</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>redefinedBy(0),</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>exampleSDict(0),</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>defArgList(0),</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>declArgList(0),</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>tArgList(0),</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>typeConstraints(0),</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>defTmpArgLists(0),</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>classSectionSDict(0),</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>category(0),</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>categoryRelation(0)</highlight></codeline>
<codeline lineno="608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">MemberDefImpl::~MemberDefImpl()</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>redefinedBy;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>exampleSDict;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>enumFields;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>defArgList;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tArgList;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>typeConstraints;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>defTmpArgLists;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>classSectionSDict;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>declArgList;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDefImpl::init(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*def,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>p,<ref refid="d9/d49/types_8h_1ab16236bdd10ddf4d73a9847350f0017e" kindref="member" tooltip="Virtualness of a member.">Specifier</ref><sp/>v,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>s,<ref refid="d9/d49/types_8h_1a9d625fe894d9313ec78df1d78553f32e" kindref="member" tooltip="Kind of member relationship.">Relationship</ref><sp/>r,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType<sp/>mt,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tal,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>classDef=0;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>fileDef=0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>redefines=0;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>relatedAlso=0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>redefinedBy=0;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>accessorClass=0;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>nspace=0;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>memDef=0;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>memDec=0;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>group=0;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>grpId=-1;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>exampleSDict=0;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>enumFields=0;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>enumScope=0;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>livesInsideEnum=FALSE;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>defTmpArgLists=0;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>hasCallGraph<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>hasCallerGraph<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>initLines=0;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>type=t;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mt==MemberType_Typedef)<sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>type.stripPrefix(&quot;struct<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>type.stripPrefix(&quot;class<sp/>&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>type.stripPrefix(&quot;union<sp/>&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>type=removeRedundantWhiteSpace(type);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>args=a;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>args=removeRedundantWhiteSpace(args);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.isEmpty())<sp/>decl=def-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+args;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>decl=type+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+def-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+args;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>memberGroup=0;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>virt=v;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>prot=p;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>related=r;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>stat=s;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>mtype=mt;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>exception=e;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>proto=FALSE;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>annScope=FALSE;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>memSpec=0;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>annMemb=0;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>annUsed=FALSE;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>annEnumType=0;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>groupAlias=0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>explExt=FALSE;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>tspec=FALSE;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>cachedAnonymousType=0;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>maxInitLines=Config_getInt(</highlight><highlight class="stringliteral">&quot;MAX_INITIALIZER_LINES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>userInitLines=-1;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>docEnumValues=FALSE;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>function<sp/>template<sp/>arguments<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tal)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>tArgList<sp/>=<sp/>tal-&gt;<ref refid="d7/df8/class_argument_list_1a57a064d6f3ba77dbc19ce8b768eb3909" kindref="member">deepCopy</ref>();</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>tArgList=0;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>member<sp/>al=%p\n&quot;,al);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>function<sp/>definition<sp/>arguments<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al)</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>defArgList<sp/>=<sp/>al-&gt;<ref refid="d7/df8/class_argument_list_1a57a064d6f3ba77dbc19ce8b768eb3909" kindref="member">deepCopy</ref>();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>defArgList=0;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>function<sp/>declaration<sp/>arguments<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!args.isEmpty())</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>declArgList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>stringToArgumentList(args,declArgList,&amp;extraTypeChars);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;setDeclArgList<sp/>%s<sp/>to<sp/>%s<sp/>const=%d\n&quot;,args.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>argListToString(declArgList).data(),declArgList-&gt;constSpecifier);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>declArgList<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>templateMaster<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>classSectionSDict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>docsForDefinition<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>isTypedefValCached<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>cachedTypedefValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//inbodyLine<sp/>=<sp/>-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>implOnly=FALSE;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>groupMember<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>hasDocumentedParams<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>hasDocumentedReturnType<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>docProvider<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>isDMember<sp/>=<sp/>def-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>().right(2).lower()==</highlight><highlight class="stringliteral">&quot;.d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>tagDataWritten<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>save<sp/>separate<sp/>written<sp/>status<sp/>for<sp/>file,<sp/>group,<sp/>class,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="753" refid="da/d09/class_member_def_1a3cda83ecd84802bf41b3d49f8252e62c" refkind="member"><highlight class="normal"><ref refid="da/d09/class_member_def_1a3cda83ecd84802bf41b3d49f8252e62c" kindref="member">MemberDef::MemberDef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*df,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dl,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dc,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*na,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>p,<ref refid="d9/d49/types_8h_1ab16236bdd10ddf4d73a9847350f0017e" kindref="member" tooltip="Virtualness of a member.">Specifier</ref><sp/>v,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>s,<ref refid="d9/d49/types_8h_1a9d625fe894d9313ec78df1d78553f32e" kindref="member" tooltip="Kind of member relationship.">Relationship</ref><sp/>r,MemberType<sp/>mt,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tal,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>:<sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref>(df,dl,dc,removeRedundantWhiteSpace(na))</highlight></codeline>
<codeline lineno="758"><highlight class="normal">{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MemberDef::MemberDef(%s)\n&quot;,na);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>m_impl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MemberDefImpl;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>m_impl-&gt;init(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,t,a,e,p,v,s,r,mt,tal,al);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>m_isConstructorCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>m_isDestructorCached<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><ref refid="da/d09/class_member_def_1a3cda83ecd84802bf41b3d49f8252e62c" kindref="member">MemberDef::MemberDef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>&amp;md)<sp/>:<sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref>(md)</highlight></codeline>
<codeline lineno="768"><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>m_impl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MemberDefImpl;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>m_isConstructorCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>m_isDestructorCached<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::deepCopy()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="776"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//MemberDef<sp/>*result<sp/>=<sp/>new<sp/>MemberDef(getDefFileName(),getDefLine(),name());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a3cda83ecd84802bf41b3d49f8252e62c" kindref="member">MemberDef</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>copy<sp/>everything<sp/>by<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>*result-&gt;m_impl<sp/>=<sp/>*m_impl;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>pointers<sp/>owned<sp/>by<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;redefinedBy=<sp/>0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;exampleSDict=0;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;enumFields=0;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;defArgList=0;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;tArgList=0;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;typeConstraints=0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;defTmpArgLists=0;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;classSectionSDict=0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>result-&gt;m_impl-&gt;declArgList=0;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>pointers<sp/>owned<sp/>by<sp/>the<sp/>object<sp/>by<sp/>deep<sp/>copies<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;redefinedBy)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mli(*m_impl-&gt;redefinedBy);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mli.toFirst();(md=mli.current());++mli)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;insertReimplementedBy(md);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;exampleSDict)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>ExampleSDict::Iterator<sp/>it(*m_impl-&gt;exampleSDict);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/de9/struct_example" kindref="compound" tooltip="Data associated with an example.">Example</ref><sp/>*e;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it.toFirst();(e=it.current());++it)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;addExample(e-&gt;anchor,e-&gt;name,e-&gt;file);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;enumFields)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mli(*m_impl-&gt;redefinedBy);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mli.toFirst();(md=mli.current());++mli)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;insertEnumField(md);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;defArgList)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;m_impl-&gt;defArgList<sp/>=<sp/>m_impl-&gt;defArgList-&gt;deepCopy();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;tArgList)</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;m_impl-&gt;tArgList<sp/>=<sp/>m_impl-&gt;tArgList-&gt;deepCopy();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;typeConstraints)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;m_impl-&gt;typeConstraints<sp/>=<sp/>m_impl-&gt;typeConstraints-&gt;deepCopy();</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>result-&gt;setDefinitionTemplateParameterLists(m_impl-&gt;defTmpArgLists);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classSectionSDict)</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;m_impl-&gt;classSectionSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;MemberList&gt;</ref>(7);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound" tooltip="Ordered dictionary of elements of type T.">SDict&lt;MemberList&gt;::IteratorDict</ref><sp/>it(*m_impl-&gt;classSectionSDict);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*ml;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it.toFirst();(ml=it.current());++it)</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;m_impl-&gt;classSectionSDict-&gt;append(it.currentKey(),ml);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;declArgList)</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;m_impl-&gt;declArgList<sp/>=<sp/>m_impl-&gt;declArgList-&gt;deepCopy();</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::moveTo(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope)</highlight></codeline>
<codeline lineno="850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/>setOuterScope(scope);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;classDef<sp/>=<sp/>(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>*)scope;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeFile)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;fileDef<sp/>=<sp/>(<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref>*)scope;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeNamespace)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;nspace<sp/>=<sp/>(<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>*)scope;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/>m_isConstructorCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="da/d09/class_member_def_1a2c5a0de011bf7fcfd2e97b66b6ea5a49" refkind="member"><highlight class="normal"><ref refid="da/d09/class_member_def_1a2c5a0de011bf7fcfd2e97b66b6ea5a49" kindref="member">MemberDef::~MemberDef</ref>()</highlight></codeline>
<codeline lineno="871"><highlight class="normal">{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_impl;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%p:<sp/>~MemberDef()\n&quot;,this);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>m_impl=0;</highlight></codeline>
<codeline lineno="875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setReimplements(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="878"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>m_impl-&gt;redefines<sp/>=<sp/>md;</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::insertReimplementedBy(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;templateMaster)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;templateMaster-&gt;insertReimplementedBy(md);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;redefinedBy==0)<sp/>m_impl-&gt;redefinedBy<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref>(MemberListType_redefinedBy);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;redefinedBy-&gt;findRef(md)==-1)<sp/></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;redefinedBy-&gt;inSort(md);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::reimplements()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="896"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;redefines;<sp/></highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*MemberDef::reimplementedBy()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="901"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;redefinedBy;<sp/></highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isReimplementedBy(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="906"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>m_impl-&gt;redefinedBy)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mi(*m_impl-&gt;redefinedBy);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mi.toFirst();(md=mi.current());++mi)</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*mcd<sp/>=<sp/>md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mcd)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==mcd<sp/>||<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a500d1c453352fa69a791749b2a5a2423" kindref="member" tooltip="Returns TRUE iff bcd is a direct or indirect base class of this class.">isBaseClass</ref>(mcd,TRUE))</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::insertEnumField(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;enumFields==0)<sp/>m_impl-&gt;enumFields=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref>(MemberListType_enumFields);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>m_impl-&gt;enumFields-&gt;append(md);</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::addExample(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*anchor,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nameStr,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s::addExample(%s,%s,%s)\n&quot;,name().data(),anchor,nameStr,file);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;exampleSDict==0)<sp/>m_impl-&gt;exampleSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d31/class_example_s_dict" kindref="compound" tooltip="A sorted dictionary of Example objects.">ExampleSDict</ref>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;exampleSDict-&gt;find(nameStr)==0)<sp/></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Add<sp/>reference<sp/>to<sp/>example<sp/>%s<sp/>to<sp/>member<sp/>%s\n&quot;,nameStr,name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/de9/struct_example" kindref="compound" tooltip="Data associated with an example.">Example</ref><sp/>*e=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/de9/struct_example" kindref="compound" tooltip="Data associated with an example.">Example</ref>;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;anchor=<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;name=nameStr;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;file=file;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;exampleSDict-&gt;inSort(nameStr,e);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::hasExamples()</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;exampleSDict==0)<sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;exampleSDict-&gt;count()&gt;0;</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958" refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" refkind="member"><highlight class="normal">QCString<sp/><ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">MemberDef::getOutputFileBase</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="959"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>separateMemberPages<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;SEPARATE_MEMBER_PAGES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>QCString<sp/>baseName;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Member:<sp/>%s:<sp/>templateMaster=%p<sp/>group=%p<sp/>classDef=%p<sp/>nspace=%p<sp/>fileDef=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name().data(),m_impl-&gt;templateMaster,m_impl-&gt;group,m_impl-&gt;classDef,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_impl-&gt;nspace,m_impl-&gt;fileDef);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;explicitOutputFileBase.isEmpty())</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;explicitOutputFileBase;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;templateMaster)</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;templateMaster-&gt;getOutputFileBase();</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;group)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>baseName=m_impl-&gt;group-&gt;getOutputFileBase();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef)</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>baseName=m_impl-&gt;classDef-&gt;getOutputFileBase();</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;nspace)</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>baseName=m_impl-&gt;nspace-&gt;getOutputFileBase();</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;fileDef)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>baseName=m_impl-&gt;fileDef-&gt;getOutputFileBase();</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseName.isEmpty())</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>warn(<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>inconsistency:<sp/>member<sp/>%s<sp/>does<sp/>not<sp/>belong<sp/>to<sp/>any&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>container!&quot;</highlight><highlight class="normal">,qPrint(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dummy&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(separateMemberPages)</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEnumScope())<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>value,<sp/>which<sp/>is<sp/>part<sp/>of<sp/>enum&apos;s<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseName+=</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+getEnumScope()-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseName+=</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>baseName;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012" refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" refkind="member"><highlight class="normal">QCString<sp/><ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">MemberDef::getReference</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1013"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>QCString<sp/>ref<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a266bc8f350de23e01335d4d674995dcf" kindref="member">Definition::getReference</ref>();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ref.isEmpty())</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ref;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;templateMaster)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;templateMaster-&gt;getReference();</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;group)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;group-&gt;getReference();</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef)</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;classDef-&gt;getReference();</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;nspace)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;nspace-&gt;getReference();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;fileDef)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;fileDef-&gt;getReference();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042" refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" refkind="member"><highlight class="normal">QCString<sp/><ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">MemberDef::anchor</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1043"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>QCString<sp/>result=m_impl-&gt;anc;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;groupAlias)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;groupAlias-&gt;anchor();</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;templateMaster)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;templateMaster-&gt;anchor();</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;enumScope<sp/>&amp;&amp;<sp/>m_impl-&gt;enumScope!=</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>recursion<sp/>for<sp/>C#&apos;s<sp/>public<sp/>enum<sp/>E<sp/>{<sp/>E,<sp/>F<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>result.prepend(m_impl-&gt;enumScope-&gt;anchor());</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;group)<sp/></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;groupMember)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=m_impl-&gt;groupMember-&gt;anchor();</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>().isEmpty())</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.prepend(</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_computeLinkableInProject()</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractStatic<sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_STATIC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>linkable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MemberDef::isLinkableInProject(name=%s)\n&quot;,name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1ab322705fb59551eb0e8aa3b08c4dfbee" kindref="member">isHidden</ref>())<sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;is<sp/>hidden\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;templateMaster)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;has<sp/>template<sp/>master\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>m_impl-&gt;templateMaster-&gt;isLinkableInProject()<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>||<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;name<sp/>invalid\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>valid<sp/>or<sp/>a<sp/>dummy<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" kindref="member">hasDocumentation</ref>()<sp/>&amp;&amp;<sp/>!<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())<sp/></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;no<sp/>docs<sp/>or<sp/>reference\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;group<sp/>&amp;&amp;<sp/>!m_impl-&gt;group-&gt;isLinkableInProject())<sp/></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;group<sp/>but<sp/>group<sp/>not<sp/>linkable!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>group<sp/>but<sp/>group<sp/>not<sp/>linkable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;group<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef<sp/>&amp;&amp;<sp/>!m_impl-&gt;classDef-&gt;isLinkableInProject())<sp/></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;in<sp/>a<sp/>class<sp/>but<sp/>class<sp/>not<sp/>linkable!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>class<sp/>but<sp/>class<sp/>not<sp/>linkable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;group<sp/>&amp;&amp;<sp/>m_impl-&gt;nspace<sp/>&amp;&amp;<sp/>!m_impl-&gt;related<sp/>&amp;&amp;<sp/>!m_impl-&gt;nspace-&gt;isLinkableInProject())<sp/></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;in<sp/>a<sp/>namespace<sp/>but<sp/>namespace<sp/>not<sp/>linkable!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>namespace<sp/>but<sp/>namespace<sp/>not<sp/>linkable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;group<sp/>&amp;&amp;<sp/>!m_impl-&gt;nspace<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!m_impl-&gt;related<sp/>&amp;&amp;<sp/>!m_impl-&gt;classDef<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;fileDef<sp/>&amp;&amp;<sp/>!m_impl-&gt;fileDef-&gt;isLinkableInProject())<sp/></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;in<sp/>a<sp/>file<sp/>but<sp/>file<sp/>not<sp/>linkable!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>file<sp/>(and<sp/>not<sp/>in<sp/>namespace)<sp/>but<sp/>file<sp/>not<sp/>linkable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!protectionLevelVisible(m_impl-&gt;prot)<sp/>&amp;&amp;<sp/>m_impl-&gt;mtype!=MemberType_Friend)<sp/></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;private<sp/>and<sp/>invisible!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>hidden<sp/>due<sp/>to<sp/>protection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;stat<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef==0<sp/>&amp;&amp;<sp/>!extractStatic)<sp/></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;static<sp/>and<sp/>invisible!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>hidden<sp/>due<sp/>to<sp/>staticness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;linkable!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>linkable!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136" refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">MemberDef::setDocumentation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*docFile,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>docLine,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stripWhiteSpace)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">Definition::setDocumentation</ref>(d,docFile,docLine,stripWhiteSpace);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142" refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">MemberDef::setBriefDescription</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*briefFile,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>briefLine)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">Definition::setBriefDescription</ref>(b,briefFile,briefLine);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148" refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">MemberDef::setInbodyDocumentation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inbodyFile,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inbodyLine)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition_1a829959b92985d0264b9fc17277bf91b4" kindref="member">Definition::setInbodyDocumentation</ref>(d,inbodyFile,inbodyLine);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setHidden(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>Definition::setHidden(b);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160" refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">MemberDef::isLinkableInProject</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1161"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isLinkableCached==0)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*that<sp/>=<sp/>(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>*)</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>that-&gt;_computeLinkableInProject();</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>ASSERT(m_isLinkableCached&gt;0);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_isLinkableCached==2;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171" refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">MemberDef::isLinkable</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1172"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;templateMaster)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;templateMaster-&gt;isLinkable();</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>()<sp/>||<sp/><ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>();</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setDefinitionTemplateParameterLists(<ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>*lists)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lists)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;defTmpArgLists)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_impl-&gt;defTmpArgLists;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;defTmpArgLists<sp/>=<sp/>copyArgumentLists(lists);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::writeLink(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*,<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd,<ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onlyText)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>();</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hideScopeNames<sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>QCString<sp/>sep<sp/>=<sp/>getLanguageSpecificSeparator(lang,TRUE);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>QCString<sp/>n<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hideScopeNames)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;enumScope<sp/>&amp;&amp;<sp/>m_impl-&gt;livesInsideEnum)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.prepend(m_impl-&gt;enumScope-&gt;displayName()+sep);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef<sp/>&amp;&amp;<sp/>gd<sp/>&amp;&amp;<sp/>!isRelated())<sp/></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.prepend(m_impl-&gt;classDef-&gt;displayName()+sep);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;nspace<sp/>&amp;&amp;<sp/>(gd<sp/>||<sp/>fd))<sp/></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.prepend(m_impl-&gt;nspace-&gt;displayName()+sep);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isObjCMethod())</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isStatic())<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;+<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;-<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!onlyText<sp/>&amp;&amp;<sp/><ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>())<sp/></highlight><highlight class="comment">//<sp/>write<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;mtype==MemberType_EnumValue<sp/>&amp;&amp;<sp/>getGroupDef()==0<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enum<sp/>value<sp/>is<sp/>not<sp/>grouped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getEnumScope()<sp/>&amp;&amp;<sp/>getEnumScope()-&gt;getGroupDef())<sp/></highlight><highlight class="comment">//<sp/>but<sp/>its<sp/>container<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*enumValGroup<sp/>=<sp/>getEnumScope()-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(enumValGroup-&gt;<ref refid="d5/dcc/class_definition_1a266bc8f350de23e01335d4d674995dcf" kindref="member">getReference</ref>(),</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumValGroup-&gt;<ref refid="d8/d09/class_group_def_1a67914ef80cfb1958b5b5f36b13866b83" kindref="member">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),n);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>(),<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),n);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>write<sp/>only<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a796018ee85949771252f36fea9a288d0" kindref="member">startBold</ref>();</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(n);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1aa3f855a4e60d2a7c6769b66d43c69b23" kindref="member">endBold</ref>();</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246" refid="da/d09/class_member_def_1a55dd478aba299892bdf1f4d22c21c95a" refkind="member"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*<ref refid="da/d09/class_member_def_1a55dd478aba299892bdf1f4d22c21c95a" kindref="member">MemberDef::getClassDefOfAnonymousType</ref>()<sp/></highlight></codeline>
<codeline lineno="1247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;cachedAnonymousType)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;cachedAnonymousType;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>QCString<sp/>cname;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClassDef()!=0)<sp/></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>cname=getClassDef()-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getNamespaceDef()!=0)</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>cname=getNamespaceDef()-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>QCString<sp/>ltype(m_impl-&gt;type);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>`static&apos;<sp/>keyword<sp/>from<sp/>ltype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(ltype.left(7)==&quot;static<sp/>&quot;)<sp/>ltype=ltype.right(ltype.length()-7);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>`friend&apos;<sp/>keyword<sp/>from<sp/>ltype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>ltype.stripPrefix(</highlight><highlight class="stringliteral">&quot;friend<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>r(</highlight><highlight class="stringliteral">&quot;@[0-9]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l,i=r.match(ltype,0,&amp;l);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;ltype=`%s&apos;<sp/>i=%d\n&quot;,ltype.data(),i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>the<sp/>last<sp/>anonymous<sp/>scope<sp/>in<sp/>the<sp/>member<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*annoClassDef=0;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>anonymous<sp/>scope<sp/>in<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>il=i-1,ir=i+l;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>anonymous<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(il&gt;=0<sp/>&amp;&amp;<sp/>(isId(ltype.at(il))<sp/>||<sp/>ltype.at(il)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>||<sp/>ltype.at(il)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">))<sp/>il--;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(il&gt;0)<sp/>il++;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(il&lt;0)<sp/>il=0;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ir&lt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ltype.length()<sp/>&amp;&amp;<sp/>(isId(ltype.at(ir))<sp/>||<sp/>ltype.at(ir)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>||<sp/>ltype.at(ir)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">))<sp/>ir++;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>annName<sp/>=<sp/>ltype.mid(il,ir-il);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>inside<sp/>a<sp/>class<sp/>or<sp/>namespace<sp/>try<sp/>to<sp/>prepend<sp/>the<sp/>scope<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cname.isEmpty()<sp/>&amp;&amp;<sp/>annName.left(cname.length()+2)!=cname+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>ts=stripAnonymousNamespaceScope(cname+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+annName);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>annoClassDef=getClass(ts);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>found<sp/>yet,<sp/>try<sp/>without<sp/>scope<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annoClassDef==0)</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>ts=stripAnonymousNamespaceScope(annName);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>annoClassDef=getClass(ts);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>m_impl-&gt;cachedAnonymousType<sp/>=<sp/>annoClassDef;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>annoClassDef;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1299" refid="da/d09/class_member_def_1acb939719f6b36bd3559d2881959e2907" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1acb939719f6b36bd3559d2881959e2907" kindref="member">MemberDef::isBriefSectionVisible</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1300"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractStatic<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_STATIC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hideUndocMembers<sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_UNDOC_MEMBERS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>briefMemberDesc<sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;BRIEF_MEMBER_DESC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>repeatBrief<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;REPEAT_BRIEF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hideFriendCompounds<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_FRIEND_COMPOUNDS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Member<sp/>%s<sp/>grpId=%d<sp/>docs=%s<sp/>file=%s<sp/>args=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0,&quot;&quot;,<sp/>//grpId,grpId==-1?&quot;&lt;none&gt;&quot;:Doxygen::memberDocDict[grpId]-&gt;data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&quot;&quot;,<sp/>//getFileDef()-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>argsString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><ref refid="d1/d12/struct_member_group_info" kindref="compound" tooltip="Data collected for a member group.">MemberGroupInfo</ref><sp/>*info<sp/>=<sp/>Doxygen::memGrpInfoDict[m_impl-&gt;grpId];</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;name=%s<sp/>m_impl-&gt;grpId=%d<sp/>info=%p\n&quot;,name().data(),m_impl-&gt;grpId,info);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>*pMemGrp<sp/>=<sp/>Doxygen::memberDocDict[grpId];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDocs<sp/>=<sp/><ref refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" kindref="member">hasDocumentation</ref>()<sp/>||<sp/></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>of<sp/>a<sp/>documented<sp/>member<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;grpId!=-1<sp/>&amp;&amp;<sp/>info<sp/>&amp;&amp;<sp/>!(info-&gt;doc.isEmpty()<sp/>&amp;&amp;<sp/>info-&gt;header.isEmpty()));</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>include<sp/>static<sp/>members<sp/>with<sp/>file/namespace<sp/>scope<sp/>if<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>enabled<sp/>in<sp/>the<sp/>config<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visibleIfStatic<sp/>=<sp/>!(getClassDef()==0<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isStatic()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!extractStatic</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>include<sp/>members<sp/>is<sp/>the<sp/>are<sp/>documented<sp/>or<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>HIDE_UNDOC_MEMBERS<sp/>is<sp/>NO<sp/>in<sp/>the<sp/>config<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visibleIfDocumented<sp/>=<sp/>(!hideUndocMembers<sp/>||<sp/></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasDocs<sp/>||<sp/></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isDocumentedFriendClass()</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hide<sp/>members<sp/>with<sp/>no<sp/>detailed<sp/>description<sp/>and<sp/>brief<sp/>descriptions<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visibleIfEnabled<sp/>=<sp/>!(hideUndocMembers<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!briefMemberDesc<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!repeatBrief</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hide<sp/>friend<sp/>(class|struct|union)<sp/>declarations<sp/>if<sp/>HIDE_FRIEND_COMPOUNDS<sp/>is<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visibleIfFriendCompound<sp/>=<sp/>!(hideFriendCompounds<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isFriend()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>class&quot;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>struct&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>union&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>include<sp/>members<sp/>that<sp/>are<sp/>non-private<sp/>unless<sp/>EXTRACT_PRIVATE<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>YES<sp/>or<sp/>the<sp/>member<sp/>is<sp/>part<sp/>of<sp/>a<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visibleIfPrivate<sp/>=<sp/>(protectionLevelVisible(protection())<sp/>||<sp/></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;mtype==MemberType_Friend</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hide<sp/>member<sp/>if<sp/>it<sp/>overrides<sp/>a<sp/>member<sp/>in<sp/>a<sp/>superclass<sp/>and<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>documentation<sp/>of<sp/>its<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>visibleIfDocVirtual<sp/>=<sp/>!reimplements()<sp/>||<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!Config_getBool(&quot;INHERIT_DOCS&quot;)<sp/>||<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasDocs;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>this<sp/>member<sp/>is<sp/>a<sp/>constructor<sp/>or<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cOrDTor<sp/>=<sp/>isConstructor()<sp/>||<sp/>isDestructor();</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hide<sp/>default<sp/>constructors<sp/>or<sp/>destructors<sp/>(no<sp/>args)<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visibleIfNotDefaultCDTor<sp/>=<sp/>!(cOrDTor<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;defArgList<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;defArgList-&gt;isEmpty()<sp/>||</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;defArgList-&gt;first()-&gt;type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!hasDocs</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;visibleIfStatic=%d<sp/>visibleIfDocumented=%d<sp/>visibleIfEnabled=%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;visibleIfPrivate=%d<sp/>visibltIfNotDefaultCDTor=%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;visibleIfFriendCompound=%d<sp/>!annScope=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>visibleIfStatic,visibleIfDocumented,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>visibleIfEnabled,visibleIfPrivate,visibleIfNotDefaultCDTor,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>visibleIfFriendCompound,!m_impl-&gt;annScope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visible<sp/>=<sp/>visibleIfStatic<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>visibleIfDocumented<sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visibleIfEnabled<sp/><sp/><sp/><sp/>&amp;&amp;<sp/>visibleIfPrivate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*visibleIfDocVirtual<sp/>&amp;&amp;*/</highlight><highlight class="normal"><sp/>visibleIfNotDefaultCDTor<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visibleIfFriendCompound<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!m_impl-&gt;annScope<sp/>&amp;&amp;<sp/>!<ref refid="d5/dcc/class_definition_1ab322705fb59551eb0e8aa3b08c4dfbee" kindref="member">isHidden</ref>();</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MemberDef::isBriefSectionVisible()<sp/>%d\n&quot;,visible);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visible;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394" refid="da/d09/class_member_def_1a87cfe68569ad2f06efc3835add6a6f7b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a87cfe68569ad2f06efc3835add6a6f7b" kindref="member">MemberDef::writeDeclaration</ref>(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd,<ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd,</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d4a/class_definition_intf_1ada60114bc621669dd8c19edfc6421766" kindref="member">DefType</ref><sp/>compoundType,<sp/></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*inheritedFrom,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inheritId)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s<sp/>MemberDef::writeDeclaration()<sp/>inGroup=%d\n&quot;,qualifiedName().data(),inGroup);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hide<sp/>enum<sp/>value,<sp/>since<sp/>they<sp/>appear<sp/>already<sp/>as<sp/>part<sp/>of<sp/>the<sp/>enum,<sp/>unless<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>explicitly<sp/>grouped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inGroup<sp/>&amp;&amp;<sp/>m_impl-&gt;mtype==MemberType_EnumValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hide<sp/>members<sp/>whose<sp/>brief<sp/>section<sp/>should<sp/>not<sp/>be<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!isBriefSectionVisible())<sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d=0;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>ASSERT<sp/>(cd!=0<sp/>||<sp/>nd!=0<sp/>||<sp/>fd!=0<sp/>||<sp/>gd!=0);<sp/></highlight><highlight class="comment">//<sp/>member<sp/>should<sp/>belong<sp/>to<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/>d=cd;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd)<sp/>d=nd;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)<sp/>d=fd;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>d=gd;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>_writeTagData(compoundType);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>QCString<sp/>cname<sp/><sp/>=<sp/>d-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>QCString<sp/>cdname<sp/>=<sp/>d-&gt;<ref refid="d5/dcc/class_definition_1ac4741f70f06baac174cf71b3e11d06ac" kindref="member">displayName</ref>();</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>QCString<sp/>cfname<sp/>=<sp/><ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>osname<sp/>=<sp/>cname;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>of<sp/>class<sp/>members<sp/>that<sp/>are<sp/>put<sp/>in<sp/>a<sp/>group<sp/>the<sp/>name<sp/>of<sp/>the<sp/>outerscope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>differs<sp/>from<sp/>the<sp/>cname.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(getOuterScope())<sp/>osname=getOuterScope()-&gt;name();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//HtmlHelp<sp/>*htmlHelp=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>hasHtmlHelp<sp/>=<sp/>Config_getBool(&quot;GENERATE_HTML&quot;)<sp/>&amp;&amp;<sp/>Config_getBool(&quot;GENERATE_HTMLHELP&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(hasHtmlHelp)<sp/>htmlHelp<sp/>=<sp/>HtmlHelp::getInstance();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>the<sp/>last<sp/>anonymous<sp/>scope<sp/>in<sp/>the<sp/>member<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*annoClassDef=<ref refid="da/d09/class_member_def_1a55dd478aba299892bdf1f4d22c21c95a" kindref="member">getClassDefOfAnonymousType</ref>();</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>ol.startMemberDeclaration();</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>new<sp/>member<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAnonymous<sp/>=<sp/>annoClassDef<sp/>||<sp/>m_impl-&gt;annMemb<sp/>||<sp/>m_impl-&gt;annEnumType;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>ol.startMemberItem(<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),<sp/></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isAnonymous<sp/>?<sp/>1<sp/>:<sp/>m_impl-&gt;tArgList<sp/>?<sp/>3<sp/>:<sp/>0,</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inheritId</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>detailed<sp/>description<sp/>we<sp/>need<sp/>to<sp/>write<sp/>the<sp/>anchor<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>detailsVisible<sp/>=<sp/>isDetailedSectionLinkable();</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detailsVisible<sp/>&amp;&amp;<sp/>!m_impl-&gt;annMemb)</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>doxyName=<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cname.isEmpty())<sp/></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doxyName.prepend(cdname+getLanguageSpecificSeparator(<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>doxyArgs=argsString();</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startDoxyAnchor(cfname,cname,<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),doxyName,doxyArgs);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annoClassDef<sp/>||<sp/>m_impl-&gt;annMemb)</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;s_indentLevel;j++)<sp/></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeNonBreakableSpace(3);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>write<sp/>template<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;tArgList<sp/>&amp;&amp;<sp/><ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Cpp)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isAnonymous)<sp/>ol.startMemberTemplateParams();</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>writeTemplatePrefix(ol,m_impl-&gt;tArgList);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isAnonymous)<sp/>ol.endMemberTemplateParams(<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),inheritId);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>write<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>QCString<sp/>ltype(m_impl-&gt;type);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;mtype==MemberType_Typedef)<sp/>ltype.prepend(</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isAlias())</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>ltype=</highlight><highlight class="stringliteral">&quot;using&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>`friend&apos;<sp/>keyword<sp/>from<sp/>ltype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>ltype.stripPrefix(</highlight><highlight class="stringliteral">&quot;friend<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>r(</highlight><highlight class="stringliteral">&quot;@[0-9]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>endAnonScopeNeeded=FALSE;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l,i=r.match(ltype,0,&amp;l);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="comment">//<sp/>member<sp/>has<sp/>an<sp/>anonymous<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;annoClassDef=%p<sp/>annMemb=%p<sp/>scopeName=`%s&apos;<sp/>anonymous=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>annoClassDef,annMemb,cname.data(),ltype.mid(i,l).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annoClassDef)<sp/></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>an<sp/>anonymous<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir=i+l;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startAnonTypeScope(s_indentLevel++);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>annoClassDef-&gt;<ref refid="d1/dcf/class_class_def_1ab9701f34d56e4dfee3e4ccd2fd6a6f5b" kindref="member">writeDeclaration</ref>(ol,m_impl-&gt;annMemb,inGroup,inheritedFrom,inheritId);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<sp/>startMemberItem(2)\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startMemberItem(<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),2,inheritId);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;<sp/>s_indentLevel-1;j++)<sp/></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeNonBreakableSpace(3);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>varName=ltype.right(ltype.length()-ir).stripWhiteSpace();</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;&gt;&gt;&gt;&gt;<sp/>indDepth=%d<sp/>ltype=`%s&apos;<sp/>varName=`%s&apos;\n&quot;,indDepth,ltype.data(),varName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varName.isEmpty()<sp/>&amp;&amp;<sp/>(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>||<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endAnonScopeNeeded=TRUE;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getAnonymousEnumType())<sp/></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>an<sp/>anonymous<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),<sp/></highlight><highlight class="comment">//<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fileScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ltype.left(i),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>autoBreak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getAnonymousEnumType()-&gt;writeEnumDeclaration(ol,cd,nd,fd,gd,compoundType);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol+=*getAnonymousEnumType()-&gt;enumDecl();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),d,m_impl-&gt;fileDef,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,ltype.right(ltype.length()-i-l),TRUE);<sp/></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ltype<sp/>=<sp/>ltype.left(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>{<sp/>...<sp/>}<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>removeAnonymousScopes(ltype.right(ltype.length()-i-l));</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),<sp/></highlight><highlight class="comment">//<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fileScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ltype,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>autoBreak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltype==</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>rename<sp/>type<sp/>from<sp/>enum<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>ltype=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isObjCMethod())</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltype.prepend(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltype.append(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),<sp/></highlight><highlight class="comment">//<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fileScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ltype,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>autoBreak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>htmlOn<sp/>=<sp/>ol.<ref refid="df/dc8/class_output_list_1a63a7bebe83b904d00b2350863c7c7399" kindref="member">isEnabled</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(htmlOn<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">/*Config_getBool(&quot;HTML_ALIGN_MEMBERS&quot;)<sp/>&amp;&amp;*/</highlight><highlight class="normal"><sp/>!ltype.isEmpty())</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ltype.isEmpty())<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(htmlOn)<sp/></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;annMemb)<sp/></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a73f9be626eea01f1ccd1b446dcf2c003" kindref="member">disableAllBut</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.writeNonBreakableSpace(3);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.insertMemberAlign(m_impl-&gt;tArgList!=0);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>write<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>&amp;&amp;<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>hide<sp/>anonymous<sp/>stuff<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Member<sp/>name=`%s<sp/>gd=%p<sp/>md-&gt;groupDef=%p<sp/>inGroup=%d<sp/>isLinkable()=%d\n&quot;,name().data(),gd,getGroupDef(),inGroup,isLinkable());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>||<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>name<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" kindref="member">hasDocumentation</ref>()<sp/>||<sp/><ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>has<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(m_impl-&gt;prot==Private<sp/>&amp;&amp;<sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_PRIVATE&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>m_impl-&gt;mtype!=MemberType_Friend)<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>hidden<sp/>due<sp/>to<sp/>protection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(isStatic()<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef==0<sp/>&amp;&amp;<sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_STATIC&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//<sp/>hidden<sp/>due<sp/>to<sp/>static-ness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;annMemb)</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;anchor=%s<sp/>ann_anchor=%s\n&quot;,anchor(),annMemb-&gt;anchor());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;annMemb-&gt;writeLink(ol,</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;annMemb-&gt;getClassDef(),</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;annMemb-&gt;getNamespaceDef(),</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;annMemb-&gt;getFileDef(),</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;annMemb-&gt;getGroupDef()</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;annMemb-&gt;setAnonymousUsed();</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setAnonymousUsed();</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;writeLink<sp/>%s-&gt;%d\n&quot;,name.data(),hasDocumentation());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*rcd<sp/>=<sp/>cd;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>()<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef)<sp/>rcd<sp/>=<sp/>m_impl-&gt;classDef;<sp/></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeLink(ol,rcd,nd,fd,gd);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isDocumentedFriendClass())</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>member<sp/>is<sp/>an<sp/>undocumented<sp/>friend<sp/>declaration<sp/>for<sp/>some<sp/>class,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>maybe<sp/>we<sp/>can<sp/>link<sp/>to<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeLink(ol,getClass(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()),0,0,0);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>a<sp/>brief<sp/>member<sp/>description<sp/>and<sp/>brief<sp/>member<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>descriptions<sp/>are<sp/>enabled<sp/>or<sp/>there<sp/>is<sp/>no<sp/>detailed<sp/>description.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;annMemb)<sp/><sp/></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;annMemb-&gt;setAnonymousUsed();</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setAnonymousUsed();</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*rcd<sp/>=<sp/>cd;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>()<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef)<sp/>rcd<sp/>=<sp/>m_impl-&gt;classDef;<sp/></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeLink(ol,rcd,nd,fd,gd,TRUE);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEnumerate()<sp/>&amp;&amp;<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>add<sp/>to<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>index<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//static<sp/>bool<sp/>separateMemPages<sp/>=<sp/>Config_getBool(&quot;SEPARATE_MEMBER_PAGES&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>cfname<sp/>=<sp/>getOutputFileBase();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>cfiname<sp/>=<sp/>d-&gt;getOutputFileBase();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Doxygen::indexList-&gt;addIndexItem(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cname,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>level1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>level2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>separateMemPages<sp/>?<sp/>cfname<sp/>:<sp/>cfiname,<sp/><sp/><sp/>//<sp/>contRef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cfname,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>memRef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>anchor(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>memberdef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;addIndexItem(d,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>write<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argsString()<sp/>&amp;&amp;<sp/>!isObjCMethod())<sp/></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isDefine())<sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),<sp/></highlight><highlight class="comment">//<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fileScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsString(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;annMemb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>autoBreak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keepSpaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_indentLevel</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>write<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(excpString())</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(excpString());</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>write<sp/>bitfields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;bitfields.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>add<sp/>bitfields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),d,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,m_impl-&gt;bitfields.simplifyWhiteSpace());</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasOneLineInitializer()</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//((maxInitLines&gt;0<sp/>&amp;&amp;<sp/>userInitLines==-1)<sp/>||<sp/>userInitLines&gt;0)<sp/>//<sp/>enabled<sp/>by<sp/>default<sp/>or<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>add<sp/>initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isDefine())<sp/></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.writeString(&quot;<sp/>=<sp/>&quot;);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),d,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,m_impl-&gt;initializer.simplifyWhiteSpace());</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeNonBreakableSpace(3);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),d,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,m_impl-&gt;initializer);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isAlias())<sp/></highlight><highlight class="comment">//<sp/>using<sp/>template<sp/>alias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),d,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,m_impl-&gt;type);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((isObjCMethod()<sp/>||<sp/>isObjCProperty())<sp/>&amp;&amp;<sp/>isImplementation())</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a848e77a8fd7af578497f7ee1ec163b98" kindref="member">startTypewriter</ref>();</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>[implementation]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad83302c45e73f387c9dc13789df012f7" kindref="member">endTypewriter</ref>();</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isProperty()<sp/>&amp;&amp;<sp/>(isSettable()<sp/>||<sp/>isGettable()))</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeLatexSpacing();</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a848e77a8fd7af578497f7ee1ec163b98" kindref="member">startTypewriter</ref>();</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>sl;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGettable())<sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSettable())<sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=sl.first();</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(s);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=sl.next();</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad83302c45e73f387c9dc13789df012f7" kindref="member">endTypewriter</ref>();</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEvent()<sp/>&amp;&amp;<sp/>(isAddable()<sp/>||<sp/>isRemovable()<sp/>||<sp/>isRaisable()))</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeLatexSpacing();</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a848e77a8fd7af578497f7ee1ec163b98" kindref="member">startTypewriter</ref>();</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>sl;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isAddable())<sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRemovable())<sp/>sl.append(</highlight><highlight class="stringliteral">&quot;remove&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRaisable())<sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;raise&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=sl.first();</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(s);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=sl.next();</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad83302c45e73f387c9dc13789df012f7" kindref="member">endTypewriter</ref>();</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detailsVisible<sp/>&amp;&amp;<sp/>!m_impl-&gt;annMemb)</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endDoxyAnchor(cfname,<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>());</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;endMember<sp/>%s<sp/>annoClassDef=%p<sp/>annEnumType=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name().data(),annoClassDef,annEnumType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/>ol.endMemberItem();</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endAnonScopeNeeded)<sp/></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endAnonTypeScope(--s_indentLevel);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>brief<sp/>description</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;BRIEF_MEMBER_DESC&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&amp;&amp;<sp/>!annMemb<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/ddb/class_doc_root" kindref="compound" tooltip="Root node of documentation tree.">DocRoot</ref><sp/>*rootNode<sp/>=<sp/>validatingParseDoc(<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>(),</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOuterScope()?getOuterScope():d,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,FALSE,0,TRUE,FALSE);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNode<sp/>&amp;&amp;<sp/>!rootNode-&gt;isEmpty())</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startMemberDescription(<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),inheritId);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeDoc(rootNode,getOuterScope()?getOuterScope():d,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detailsVisible)<sp/></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a73f9be626eea01f1ccd1b446dcf2c003" kindref="member">disableAllBut</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.endEmphasis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;group!=0<sp/>&amp;&amp;<sp/>gd==0)<sp/></highlight><highlight class="comment">//<sp/>forward<sp/>link<sp/>to<sp/>the<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startTextLink(<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>());</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>local<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startTextLink(0,<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>());</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(theTranslator-&gt;trMore());</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endTextLink();</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.startEmphasis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>RTF<sp/>we<sp/>need<sp/>to<sp/>add<sp/>an<sp/>extra<sp/>empty<sp/>paragraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a73f9be626eea01f1ccd1b446dcf2c003" kindref="member">disableAllBut</ref>(OutputGenerator::RTF);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad6c1fc2a1b67c59c1efb27fb59aa7e5f" kindref="member">startParagraph</ref>();</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6523eb013a6f759d505650de41855085" kindref="member">endParagraph</ref>();</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.endMemberDescription();</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>rootNode;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>ol.endMemberDeclaration(<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),inheritId);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>warnIfUndocumented();</highlight></codeline>
<codeline lineno="1813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDetailedSectionLinkable()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1816"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractAll<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_ALL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alwaysDetailedSec<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;ALWAYS_DETAILED_SEC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>repeatBrief<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;REPEAT_BRIEF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>briefMemberDesc<sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;BRIEF_MEMBER_DESC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hideUndocMembers<sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_UNDOC_MEMBERS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractStatic<sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_STATIC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>member<sp/>has<sp/>details<sp/>documentation<sp/>for<sp/>any<sp/>of<sp/>the<sp/>following<sp/>reasons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>docFilter<sp/>=<sp/></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>treat<sp/>everything<sp/>as<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extractAll<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>detailed<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty()<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>inbody<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty()<sp/>||</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>an<sp/>enum<sp/>with<sp/>values<sp/>that<sp/>are<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;mtype==MemberType_Enumeration<sp/>&amp;&amp;<sp/>m_impl-&gt;docEnumValues)<sp/>||<sp/><sp/></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>documented<sp/>enum<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;mtype==MemberType_EnumValue<sp/>&amp;&amp;<sp/>!<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty())<sp/>||<sp/></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>brief<sp/>description<sp/>that<sp/>is<sp/>part<sp/>of<sp/>the<sp/>detailed<sp/>description</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>brief<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(alwaysDetailedSec<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>visible<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(repeatBrief<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detailed<sp/>section<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!briefMemberDesc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>explicitly<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shown<sp/>in<sp/>brief<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>||</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>a<sp/>multi-line<sp/>initialization<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(initLines&gt;0<sp/>&amp;&amp;<sp/>initLines&lt;maxInitLines)<sp/>||<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(hasMultiLineInitializer()<sp/>&amp;&amp;<sp/>!hideUndocMembers)<sp/>||</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>one<sp/>or<sp/>more<sp/>documented<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;defArgList!=0<sp/>&amp;&amp;<sp/>m_impl-&gt;defArgList-&gt;hasDocumentation())<sp/>||</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>an<sp/>attribute<sp/>or<sp/>property<sp/>-<sp/>need<sp/>to<sp/>display<sp/>that<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;memSpec<sp/>&amp;<sp/>(Entry::Attribute|Entry::Property))<sp/>||</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>user<sp/>comments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::userComments</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>not<sp/>a<sp/>global<sp/>static<sp/>or<sp/>global<sp/>statics<sp/>should<sp/>be<sp/>extracted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>staticFilter<sp/>=<sp/>getClassDef()!=0<sp/>||<sp/>!isStatic()<sp/>||<sp/>extractStatic;<sp/></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>include<sp/>members<sp/>that<sp/>are<sp/>non-private<sp/>unless<sp/>EXTRACT_PRIVATE<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>YES<sp/>or<sp/>the<sp/>member<sp/>is<sp/>part<sp/>of<sp/>a<sp/><sp/><sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>privateFilter<sp/>=<sp/>protectionLevelVisible(protection())<sp/>||<sp/>m_impl-&gt;mtype==MemberType_Friend;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>is<sp/>part<sp/>of<sp/>an<sp/>anonymous<sp/>scope<sp/>that<sp/>is<sp/>the<sp/>type<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>another<sp/>member<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>inAnonymousScope<sp/>=<sp/>!briefDescription().isEmpty()<sp/>&amp;&amp;<sp/>annUsed;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hide<sp/>friend<sp/>(class|struct|union)<sp/>member<sp/>if<sp/>HIDE_FRIEND_COMPOUNDS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>friendCompoundFilter<sp/>=<sp/>!(Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_FRIEND_COMPOUNDS&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isFriend()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>class&quot;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>struct&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>union&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>((docFilter<sp/>&amp;&amp;<sp/>staticFilter<sp/>&amp;&amp;<sp/>privateFilter<sp/>&amp;&amp;<sp/>friendCompoundFilter<sp/>&amp;&amp;<sp/>!<ref refid="d5/dcc/class_definition_1ab322705fb59551eb0e8aa3b08c4dfbee" kindref="member">isHidden</ref>()));</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s::isDetailedSectionLinkable:<sp/>%d\n&quot;,name().data(),result);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDetailedSectionVisible(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inGroup,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inFile)</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1884"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>separateMemPages<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;SEPARATE_MEMBER_PAGES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inlineSimpleStructs<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;INLINE_SIMPLE_STRUCTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hideUndocMembers<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_UNDOC_MEMBERS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>groupFilter<sp/>=<sp/>getGroupDef()==0<sp/>||<sp/>inGroup<sp/>||<sp/>separateMemPages;<sp/></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fileFilter<sp/><sp/>=<sp/>getNamespaceDef()==0<sp/>||<sp/>!inFile;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simpleFilter<sp/>=<sp/>!hideUndocMembers<sp/>&amp;&amp;<sp/>inlineSimpleStructs<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getClassDef()!=0<sp/>&amp;&amp;<sp/>getClassDef()-&gt;isSimple();</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visible<sp/>=<sp/>isDetailedSectionLinkable()<sp/>&amp;&amp;<sp/>groupFilter<sp/>&amp;&amp;<sp/>fileFilter<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>();</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>visible<sp/>||<sp/>simpleFilter;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s::isDetailedSectionVisble:<sp/>%d<sp/>groupFilter=%d<sp/>fileFilter=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name().data(),result,groupFilter,fileFilter);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_getLabels(QStrList<sp/>&amp;sl,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*container)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1902"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inlineInfo<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;INLINE_INFO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1ab16236bdd10ddf4d73a9847350f0017e" kindref="member" tooltip="Virtualness of a member.">Specifier</ref><sp/>lvirt=virtualness();</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!isObjCMethod()<sp/>||<sp/>isOptional()<sp/>||<sp/>isRequired())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(protection()!=Public<sp/>||<sp/>lvirt!=Normal<sp/>||</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isFriend()<sp/>||<sp/>isRelated()<sp/>||<sp/></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isInline()<sp/>&amp;&amp;<sp/>inlineInfo)<sp/>||</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSignal()<sp/>||<sp/>isSlot()<sp/>||</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isStatic()<sp/>||<sp/></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;classDef<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef!=container<sp/>&amp;&amp;<sp/>container-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==TypeClass)<sp/>||</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;memSpec<sp/>&amp;<sp/>~Entry::Inline)!=0<sp/></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>member<sp/>specifier<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.writeLatexSpacing();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.startTypewriter();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.docify(&quot;<sp/>[&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>();</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>optVhdl<sp/>=<sp/>lang==SrcLangExt_VHDL;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optVhdl)</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(VhdlDocGen::trTypeString(getMemberSpecifiers()));</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFriend())<sp/>sl.append(</highlight><highlight class="stringliteral">&quot;friend&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRelated())<sp/>sl.append(</highlight><highlight class="stringliteral">&quot;related&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;INLINE_INFO&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>isInline())<sp/>sl.append(</highlight><highlight class="stringliteral">&quot;inline&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isExplicit())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;explicit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isMutable())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;mutable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isStatic())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;static&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isGettable())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isSettable())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isAddable())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(!isUNOProperty()<sp/>&amp;&amp;<sp/>isRemovable())<sp/>sl.append(</highlight><highlight class="stringliteral">&quot;remove&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isRaisable())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;raise&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isReadable())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isWritable())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isFinal())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;final&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isAbstract())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;abstract&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isOverride())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;override&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isInitonly())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;initonly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isSealed())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;sealed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isNew())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;new&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isOptional())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;optional&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isRequired())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isNonAtomic())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;nonatomic&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isObjCProperty())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;atomic&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mutual<sp/>exclusive<sp/>Objective<sp/>2.0<sp/>property<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isAssign())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;assign&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isCopy())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRetain())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;retain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isWeak())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;weak&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isStrong())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;strong&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isUnretained())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;unsafe_unretained&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isObjCMethod())</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(protection()==Protected)<sp/>sl.append(</highlight><highlight class="stringliteral">&quot;protected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(protection()==Private)<sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;private&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(protection()==Package)<sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;package&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(lvirt==Virtual)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;virtual&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lvirt==Pure)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;pure<sp/>virtual&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isSignal())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;signal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isSlot())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;slot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isDefault())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isDelete())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;delete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isNoExcept())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;noexcept&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isAttribute())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;attribute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isUNOProperty())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isReadonly())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;readonly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isBound())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;bound&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isUNOProperty()<sp/>&amp;&amp;<sp/>isRemovable())<sp/>sl.append(</highlight><highlight class="stringliteral">&quot;removable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isConstrained())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;constrained&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isTransient())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;transient&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isMaybeVoid())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;maybevoid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isMaybeDefault())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;maybedefault&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isMaybeAmbiguous())<sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;maybeambiguous&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(isPublished())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;published&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isObjCProperty()<sp/>&amp;&amp;<sp/>isImplementation())</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;implementation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==TypeClass<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;classDef!=container<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!isRelated()</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;inherited&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isObjCMethod()<sp/>&amp;&amp;<sp/>isImplementation())</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>sl.append(</highlight><highlight class="stringliteral">&quot;implementation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeCallGraph(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol)</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>call<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m_impl-&gt;hasCallGraph<sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CALL_GRAPH&quot;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(isFunction()<sp/>||<sp/>isSlot()<sp/>||<sp/>isSignal())<sp/>&amp;&amp;<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HAVE_DOT&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dff/class_dot_call_graph" kindref="compound" tooltip="Representation of an call graph.">DotCallGraph</ref><sp/>callGraph(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,FALSE);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callGraph.isTooBig())</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;Call<sp/>graph<sp/>for<sp/>&apos;%s&apos;<sp/>not<sp/>generated,<sp/>too<sp/>many<sp/>nodes.<sp/>Consider<sp/>increasing<sp/>DOT_GRAPH_MAX_NODES.\n&quot;</highlight><highlight class="normal">,qPrint(<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>()));</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!callGraph.isTrivial())</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>call<sp/>graph<sp/>for<sp/>function<sp/>%s\n&quot;</highlight><highlight class="normal">,qPrint(<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>()));</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad6c1fc2a1b67c59c1efb27fb59aa7e5f" kindref="member">startParagraph</ref>();</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startCallGraph();</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(theTranslator-&gt;trCallGraph());</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.endCallGraph(callGraph);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6523eb013a6f759d505650de41855085" kindref="member">endParagraph</ref>();<sp/></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad32603ff4c4ba4d39e0bad7ede5924bf" kindref="member">enableAll</ref>();</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeCallerGraph(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol)</highlight></codeline>
<codeline lineno="2037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m_impl-&gt;hasCallerGraph<sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CALLER_GRAPH&quot;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(isFunction()<sp/>||<sp/>isSlot()<sp/>||<sp/>isSignal())<sp/>&amp;&amp;<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HAVE_DOT&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/dff/class_dot_call_graph" kindref="compound" tooltip="Representation of an call graph.">DotCallGraph</ref><sp/>callerGraph(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>TRUE);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callerGraph.isTooBig())</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;Caller<sp/>graph<sp/>for<sp/>&apos;%s&apos;<sp/>not<sp/>generated,<sp/>too<sp/>many<sp/>nodes.<sp/>Consider<sp/>increasing<sp/>DOT_GRAPH_MAX_NODES.\n&quot;</highlight><highlight class="normal">,qPrint(<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>()));</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!callerGraph.isTrivial()<sp/>&amp;&amp;<sp/>!callerGraph.isTooBig())</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>caller<sp/>graph<sp/>for<sp/>function<sp/>%s\n&quot;</highlight><highlight class="normal">,qPrint(<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>()));</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad6c1fc2a1b67c59c1efb27fb59aa7e5f" kindref="member">startParagraph</ref>();</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startCallGraph();</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(theTranslator-&gt;trCallerGraph());</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.endCallGraph(callerGraph);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6523eb013a6f759d505650de41855085" kindref="member">endParagraph</ref>();</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad32603ff4c4ba4d39e0bad7ede5924bf" kindref="member">enableAll</ref>();</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeReimplements(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol)</highlight></codeline>
<codeline lineno="2062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bmd=reimplements();</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*bcd=0;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bmd<sp/>&amp;&amp;<sp/>(bcd=bmd-&gt;getClassDef()))</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>class<sp/>that<sp/>contains<sp/>a<sp/>member<sp/>that<sp/>is<sp/>reimplemented<sp/>by<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>())</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad6c1fc2a1b67c59c1efb27fb59aa7e5f" kindref="member">startParagraph</ref>();</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>reimplFromLine;<sp/></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bmd-&gt;virtualness()!=Pure<sp/>&amp;&amp;<sp/>bcd-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>()!=ClassDef::Interface)</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reimplFromLine<sp/>=<sp/>theTranslator-&gt;trReimplementedFromList(1);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reimplFromLine<sp/>=<sp/>theTranslator-&gt;trImplementedFromList(1);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>markerPos<sp/>=<sp/>reimplFromLine.find(</highlight><highlight class="stringliteral">&quot;@0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(markerPos!=-1)<sp/></highlight><highlight class="comment">//<sp/>should<sp/>always<sp/>pass<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(reimplFromLine.left(markerPos));<sp/></highlight><highlight class="comment">//text<sp/>left<sp/>from<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bmd-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>())<sp/></highlight><highlight class="comment">//<sp/>replace<sp/>marker<sp/>with<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Definition<sp/>*bd=bmd-&gt;group;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bd==0)<sp/>bd=bcd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(bmd-&gt;<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>(),bmd-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmd-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),bcd-&gt;<ref refid="d1/dcf/class_class_def_1a4c1949b6fda5e47ec3fea0e046df5f7b" kindref="member" tooltip="Returns the name as it is appears in the documentation.">displayName</ref>());</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.writeObjectLink(bcd-&gt;getReference(),bcd-&gt;getOutputFileBase(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bmd-&gt;anchor(),bcd-&gt;name());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bmd-&gt;<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>()<sp/>)<sp/></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePageRef(ol,bmd-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),bmd-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>());</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(bcd-&gt;<ref refid="d1/dcf/class_class_def_1ab690feb2a94737d5b69c819b9794749e" kindref="member" tooltip="If this class originated from a tagfile, this will return the tag file reference.">getReference</ref>(),bcd-&gt;<ref refid="d1/dcf/class_class_def_1a7bc3e33011d6da98a5fd202a1dbe75fb" kindref="member" tooltip="Returns the unique base name (without extension) of the class&amp;#39;s file on disk.">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,bcd-&gt;<ref refid="d1/dcf/class_class_def_1a4c1949b6fda5e47ec3fea0e046df5f7b" kindref="member" tooltip="Returns the name as it is appears in the documentation.">displayName</ref>());</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcd-&gt;<ref refid="d1/dcf/class_class_def_1acb4255cf08ddb71608af6467b6850783" kindref="member" tooltip="returns TRUE iff a link is possible to this item within this project.">isLinkableInProject</ref>()</highlight><highlight class="comment">/*<sp/>&amp;&amp;<sp/>!Config_getBool(&quot;PDF_HYPERLINKS&quot;)*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePageRef(ol,bcd-&gt;<ref refid="d1/dcf/class_class_def_1a7bc3e33011d6da98a5fd202a1dbe75fb" kindref="member" tooltip="Returns the unique base name (without extension) of the class&amp;#39;s file on disk.">getOutputFileBase</ref>(),bcd-&gt;<ref refid="d1/dcf/class_class_def_1a28f29dbbc5c2646bc64bae479fd7b905" kindref="member">anchor</ref>());</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(reimplFromLine.right(</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reimplFromLine.length()-markerPos-2));<sp/></highlight><highlight class="comment">//<sp/>text<sp/>right<sp/>from<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;translation<sp/>error:<sp/>no<sp/>marker<sp/>in<sp/>trReimplementsFromList()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6523eb013a6f759d505650de41855085" kindref="member">endParagraph</ref>();</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeReimplementedBy(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol)</highlight></codeline>
<codeline lineno="2121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*bml=reimplementedBy();</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bml)</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mli(*bml);</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bmd=0;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>count=0;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*bcd=0;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mli.toFirst();(bmd=mli.current())<sp/>&amp;&amp;<sp/>(bcd=bmd-&gt;getClassDef());++mli)</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>the<sp/>members<sp/>that<sp/>directly<sp/>inherit<sp/>from<sp/>md<sp/>and<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>the<sp/>member<sp/>and<sp/>class<sp/>are<sp/>visible<sp/>in<sp/>the<sp/>docs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bmd-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>()<sp/>&amp;&amp;<sp/>bcd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>()<sp/>)<sp/></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count&gt;0)</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mli.toFirst();</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>list<sp/>of<sp/>classes<sp/>that<sp/>overwrite<sp/>this<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad6c1fc2a1b67c59c1efb27fb59aa7e5f" kindref="member">startParagraph</ref>();</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>reimplInLine;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;virt==Pure<sp/>||<sp/>(m_impl-&gt;classDef<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef-&gt;compoundType()==ClassDef::Interface))</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reimplInLine<sp/>=<sp/>theTranslator-&gt;trImplementedInList(count);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reimplInLine<sp/>=<sp/>theTranslator-&gt;trReimplementedInList(count);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>marker(</highlight><highlight class="stringliteral">&quot;@[0-9]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0,newIndex,matchLen;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>replace<sp/>all<sp/>markers<sp/>in<sp/>reimplInLine<sp/>with<sp/>links<sp/>to<sp/>the<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((newIndex=marker.match(reimplInLine,index,&amp;matchLen))!=-1)</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(reimplInLine.mid(index,newIndex-index));</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint<sp/>entryIndex<sp/>=<sp/>reimplInLine.mid(newIndex+1,matchLen-1).toUInt(&amp;ok);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bmd=bml-&gt;at(entryIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count=0;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>entryIndex-th<sp/>documented<sp/>entry<sp/>in<sp/>the<sp/>inheritance<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mli.toLast();(bmd=mli.current())<sp/>&amp;&amp;<sp/>(bcd=bmd-&gt;getClassDef());--mli)</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bmd-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>()<sp/>&amp;&amp;<sp/>bcd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>())<sp/></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==entryIndex)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok<sp/>&amp;&amp;<sp/>bcd<sp/>&amp;&amp;<sp/>bmd)<sp/></highlight><highlight class="comment">//<sp/>write<sp/>link<sp/>for<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.writeObjectLink(bcd-&gt;getReference(),bcd-&gt;getOutputFileBase(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bmd-&gt;anchor(),bcd-&gt;name());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(bmd-&gt;<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>(),bmd-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmd-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),bcd-&gt;<ref refid="d1/dcf/class_class_def_1a4c1949b6fda5e47ec3fea0e046df5f7b" kindref="member" tooltip="Returns the name as it is appears in the documentation.">displayName</ref>());</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bmd-&gt;<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>()<sp/>)<sp/></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePageRef(ol,bmd-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),bmd-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>());</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++mli;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index=newIndex+matchLen;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(reimplInLine.right(reimplInLine.length()-index));</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6523eb013a6f759d505650de41855085" kindref="member">endParagraph</ref>();</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeCategoryRelation(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol)</highlight></codeline>
<codeline lineno="2196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef)<sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>be<sp/>a<sp/>member<sp/>of<sp/>a<sp/>class/category</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s:<sp/>category<sp/>%s<sp/>relation<sp/>%s<sp/>class=%s<sp/>categoryOf=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_impl-&gt;category<sp/>?<sp/>m_impl-&gt;category-&gt;name().data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_impl-&gt;categoryRelation<sp/>?<sp/>m_impl-&gt;categoryRelation-&gt;name().data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_impl-&gt;classDef-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_impl-&gt;classDef-&gt;categoryOf()<sp/>?<sp/>m_impl-&gt;classDef-&gt;categoryOf()-&gt;name().data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>text;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>ref;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>file;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>anc;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=-1;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;categoryRelation<sp/>&amp;&amp;<sp/>m_impl-&gt;categoryRelation-&gt;isLinkable())</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;category)</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>member<sp/>is<sp/>in<sp/>a<sp/>normal<sp/>class<sp/>and<sp/>implements<sp/>method<sp/>categoryRelation<sp/>from<sp/>category<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>link<sp/>to<sp/>method<sp/>&apos;categoryRelation&apos;<sp/>with<sp/>&apos;provided<sp/>by<sp/>category<sp/>&apos;category&apos;<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>theTranslator-&gt;trProvidedByCategory();</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>m_impl-&gt;category-&gt;displayName();</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef-&gt;categoryOf())</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>member<sp/>is<sp/>part<sp/>of<sp/>a<sp/>category<sp/>so<sp/>link<sp/>to<sp/>the<sp/>corresponding<sp/>class<sp/>member<sp/>of<sp/>the<sp/>class<sp/>we<sp/>extend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>link<sp/>to<sp/>method<sp/>&apos;categoryRelation&apos;<sp/>with<sp/>&apos;extends<sp/>class<sp/>&apos;classDef-&gt;categoryOf()&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>theTranslator-&gt;trExtendsClass();</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>m_impl-&gt;classDef-&gt;categoryOf()-&gt;displayName();</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i=text.find(</highlight><highlight class="stringliteral">&quot;@1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md<sp/>=<sp/>m_impl-&gt;categoryRelation;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/><sp/>=<sp/>md-&gt;<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>();</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>=<sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anc<sp/><sp/>=<sp/>md-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1<sp/>&amp;&amp;<sp/>!name.isEmpty())</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad6c1fc2a1b67c59c1efb27fb59aa7e5f" kindref="member">startParagraph</ref>();</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(text.left(i));</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(ref,file,anc,name);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(text.mid(i+2));</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6523eb013a6f759d505650de41855085" kindref="member">endParagraph</ref>();</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeExamples(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol)</highlight></codeline>
<codeline lineno="2249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>list<sp/>of<sp/>examples<sp/>that<sp/>use<sp/>this<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasExamples())</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startSimpleSect(BaseOutputDocInterface::Examples,0,0,theTranslator-&gt;trExamples()+</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startDescForItem();</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>writeExample(ol,m_impl-&gt;exampleSDict);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endDescForItem();</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endSimpleSect();</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeTypeConstraints(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol)</highlight></codeline>
<codeline lineno="2262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;typeConstraints)</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>writeTypeConstraints(ol,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,m_impl-&gt;typeConstraints);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeEnumValues(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*container,</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;cfname,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;ciname,</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;cname)</highlight></codeline>
<codeline lineno="2272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>enum,<sp/>we<sp/>also<sp/>write<sp/>the<sp/>documented<sp/>enum<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEnumerate())</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first=TRUE;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*fmdl=enumFieldList();</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;**<sp/>%s:<sp/>enum<sp/>values=%d\n&quot;,name().data(),fmdl!=0<sp/>?<sp/>fmdl-&gt;count()<sp/>:<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmdl)</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd=fmdl-&gt;first();</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fmd)</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Enum<sp/>%p:<sp/>isLinkable()=%d\n&quot;,fmd,fmd-&gt;isLinkable());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>())</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.startSimpleSect(BaseOutputDocInterface::EnumValues,0,0,theTranslator-&gt;trEnumerationValues()+&quot;:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.startDescForItem();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startDescTable(theTranslator-&gt;trEnumerationValues());</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.addIndexItem(fmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),ciname);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.addIndexItem(ciname,fmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Doxygen::indexList-&gt;addIndexItem(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciname,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>level1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;name(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>level2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separateMemPages<sp/>?<sp/>cfname<sp/>:<sp/>cfiname,<sp/><sp/><sp/>//<sp/>contRef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfname,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>memRef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;anchor(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>anchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>memberdef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;addIndexItem(container,fmd);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.writeListItem();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startDescTableTitle();<sp/></highlight><highlight class="comment">//<sp/>this<sp/>enables<sp/>emphasis!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startDoxyAnchor(cfname,cname,fmd-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),fmd-&gt;argsString());</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first=FALSE;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.startEmphasis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(fmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.endEmphasis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a73f9be626eea01f1ccd1b446dcf2c003" kindref="member">disableAllBut</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad32603ff4c4ba4d39e0bad7ede5924bf" kindref="member">enableAll</ref>();</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endDoxyAnchor(cfname,fmd-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>());</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endDescTableTitle();</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.newParagraph();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startDescTableData();</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasBrief<sp/>=<sp/>!fmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty();</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDetails<sp/>=<sp/>!fmd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty();</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasBrief)</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.generateDoc(fmd-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>(),</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOuterScope()?getOuterScope():container,</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd,fmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),TRUE,FALSE);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:PARA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!fmd-&gt;briefDescription().isEmpty()<sp/>&amp;&amp;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>!fmd-&gt;documentation().isEmpty())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ol.newParagraph();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasDetails)</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.generateDoc(fmd-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOuterScope()?getOuterScope():container,</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd,fmd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>()+</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,TRUE,FALSE);</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endDescTableData();</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd=fmdl-&gt;next();</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first)<sp/></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.endItemList();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.endDescTable();</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.endDescForItem();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.endSimpleSect();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.writeChar(&apos;\n&apos;);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362" refid="da/d09/class_member_def_1a480c55edf3118c9e657d3aa4eecf841b" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a480c55edf3118c9e657d3aa4eecf841b" kindref="member">MemberDef::writeDocumentation</ref>(<ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*ml,<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scName,</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*container,</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inGroup,</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showEnumValues,</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showInline</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>member<sp/>is<sp/>in<sp/>a<sp/>group<sp/>find<sp/>the<sp/>real<sp/>scope<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasParameterList<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inFile<sp/>=<sp/>container-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeFile;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDocs<sp/>=<sp/>isDetailedSectionVisible(inGroup,inFile);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MemberDef::writeDocumentation():<sp/>name=`%s&apos;<sp/>hasDocs=`%d&apos;<sp/>containerType=%d<sp/>inGroup=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name().data(),hasDocs,container-&gt;definitionType(),inGroup);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!hasDocs<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEnumValue()<sp/>&amp;&amp;<sp/>!showEnumValues)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>();</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;member=%s<sp/>lang=%d\n&quot;,name().data(),lang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>optVhdl<sp/>=<sp/>lang==SrcLangExt_VHDL;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/>QCString<sp/>sep<sp/>=<sp/>getLanguageSpecificSeparator(lang,TRUE);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/>QCString<sp/>scopeName<sp/>=<sp/>scName;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/>QCString<sp/>memAnchor<sp/>=<sp/><ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/>QCString<sp/>ciname<sp/>=<sp/>container-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==TypeGroup)</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClassDef())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName=getClassDef()-&gt;<ref refid="d1/dcf/class_class_def_1a4c1949b6fda5e47ec3fea0e046df5f7b" kindref="member" tooltip="Returns the name as it is appears in the documentation.">displayName</ref>();</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getNamespaceDef())<sp/>scopeName=getNamespaceDef()-&gt;<ref refid="d0/d07/class_namespace_def_1a73aea0ba8bfb92ae1e7876a2e9a9520a" kindref="member">displayName</ref>();</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getFileDef())<sp/><sp/><sp/><sp/><sp/><sp/>scopeName=getFileDef()-&gt;<ref refid="de/db0/class_file_def_1ab075e2ace8cba475de669e96ae19c7a2" kindref="member">displayName</ref>();</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>ciname<sp/>=<sp/>((<ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*)container)-&gt;groupTitle();</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==TypeFile<sp/>&amp;&amp;<sp/>getNamespaceDef())</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>member<sp/>is<sp/>in<sp/>a<sp/>namespace,<sp/>but<sp/>is<sp/>written<sp/>as<sp/>part<sp/>of<sp/>the<sp/>file<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>well,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>its<sp/>label<sp/>is<sp/>unique.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>memAnchor.prepend(</highlight><highlight class="stringliteral">&quot;file_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/>QCString<sp/>cname<sp/><sp/><sp/>=<sp/>container-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/>QCString<sp/>cfname<sp/><sp/>=<sp/><ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/>QCString<sp/>cfiname<sp/>=<sp/>container-&gt;<ref refid="d5/dcc/class_definition_1acabecdc6bfda2015811eed5f3436322d" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>member<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>QCString<sp/>doxyName=<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prepend<sp/>scope<sp/>if<sp/>there<sp/>is<sp/>any.<sp/>TODO:<sp/>make<sp/>this<sp/>optional<sp/>for<sp/>C<sp/>only<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scopeName.isEmpty())</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>doxyName.prepend(scopeName+sep);</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/>QCString<sp/>doxyArgs=argsString();</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/>QCString<sp/>ldef<sp/>=<sp/>definition();</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>QCString<sp/>title<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;member<sp/>`%s&apos;<sp/>def=`%s&apos;\n&quot;,name().data(),ldef.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEnumerate())<sp/></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(title.at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ldef<sp/>=<sp/>title<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;anonymous<sp/>enum&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;enumBaseType.isEmpty())</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ldef+=</highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal">+m_impl-&gt;enumBaseType;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ldef.prepend(</highlight><highlight class="stringliteral">&quot;enum<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEnumValue())</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ldef.at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ldef=ldef.mid(2);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0,l;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>r(</highlight><highlight class="stringliteral">&quot;@[0-9]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>htmlEndLabelTable=FALSE;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/>QStrList<sp/>sl;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>_getLabels(sl,container);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((isVariable()<sp/>||<sp/>isTypedef())<sp/>&amp;&amp;<sp/>(i=r.match(ldef,0,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>enum<sp/>type<sp/>and<sp/>insert<sp/>it<sp/>in<sp/>the<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/>QListIterator&lt;MemberDef&gt;<sp/>vmli(*ml);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*vmd;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(vmd=vmli.current())<sp/>&amp;&amp;<sp/>!found<sp/>;<sp/>++vmli)</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vmd-&gt;isEnumerate()<sp/>&amp;&amp;<sp/>ldef.mid(i,l)==vmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startDoxyAnchor(cfname,cname,memAnchor,doxyName,doxyArgs);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startMemberDoc(ciname,<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),memAnchor,<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),showInline);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),container,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,ldef.left(i));</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmd-&gt;writeEnumDeclaration(ol,getClassDef(),getNamespaceDef(),getFileDef(),getGroupDef(),<ref refid="da/d09/class_member_def_1ac8dc2b4ba2c56590b83dfd368f6a9004" kindref="member">definitionType</ref>());</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),container,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,ldef.right(ldef.length()-i-l));</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Anonymous<sp/>compound<sp/>`%s&apos;\n&quot;,cname.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startDoxyAnchor(cfname,cname,memAnchor,doxyName,doxyArgs);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startMemberDoc(ciname,<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),memAnchor,<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),showInline);</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>the<sp/>last<sp/>anonymous<sp/>compound<sp/>name<sp/>in<sp/>the<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si=ldef.find(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">),pi,ei=i+l;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si==-1)<sp/>si=0;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((pi=r.match(ldef,i+l,&amp;l))!=-1)<sp/></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i=pi;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei=i+l;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>si<sp/>characters<sp/>of<sp/>ldef<sp/>contain<sp/>compound<sp/>type<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.startMemberDocName(isObjCMethod());</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(ldef.left(si));</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>{<sp/>...<sp/>}<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>ei<sp/>characters<sp/>of<sp/>ldef<sp/>contain<sp/>pointer/reference<sp/>specifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ni=ldef.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,si);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ni&gt;=ei)<sp/>ei=ni+2;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),container,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,ldef.right(ldef.length()-ei));</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>not<sp/>an<sp/>enum<sp/>value<sp/>or<sp/>anonymous<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startDoxyAnchor(cfname,cname,memAnchor,doxyName,doxyArgs);</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startMemberDoc(ciname,<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),memAnchor,title,showInline);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=getClassDef();</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first=TRUE;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>();</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;defTmpArgLists<sp/>&amp;&amp;<sp/>lang==SrcLangExt_Cpp)<sp/></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>definition<sp/>has<sp/>explicit<sp/>template<sp/>parameter<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>ali(*m_impl-&gt;defTmpArgLists);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tal;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();(tal=ali.current());++ali)</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tal-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first)<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startMemberDocPrefixItem();</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeTemplatePrefix(ol,tal);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endMemberDocPrefixItem();</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>definition<sp/>gets<sp/>it<sp/>template<sp/>parameters<sp/>from<sp/>its<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(since<sp/>no<sp/>definition<sp/>was<sp/>found)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>lang==SrcLangExt_Cpp<sp/>&amp;&amp;<sp/>!isTemplateSpecialization())</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>tempParamLists;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a6f188c06597898555fac6353ce0d512b" kindref="member" tooltip="Returns the template parameter lists that form the template declaration of this class.">getTemplateParameterLists</ref>(tempParamLists);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;#tempParamLists=%d\n&quot;,tempParamLists.count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>ali(tempParamLists);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tal;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();(tal=ali.current());++ali)</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tal-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first)<sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startMemberDocPrefixItem();</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeTemplatePrefix(ol,tal);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endMemberDocPrefixItem();</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;tArgList<sp/>&amp;&amp;<sp/>lang==SrcLangExt_Cpp)<sp/></highlight><highlight class="comment">//<sp/>function<sp/>template<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startMemberDocPrefixItem();</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeTemplatePrefix(ol,m_impl-&gt;tArgList);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endMemberDocPrefixItem();</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sl.count()&gt;0)</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6a75284d21a037302ea3d7dc6e1558d4" kindref="member">disableAll</ref>();</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&lt;table<sp/>class=\&quot;mlabels\&quot;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;tr&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;td<sp/>class=\&quot;mlabels-left\&quot;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>htmlEndLabelTable=TRUE;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startMemberDocName(isObjCMethod());</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1ae9142dc99d3dfd86492e4055e52ae003" kindref="member" tooltip="Returns TRUE if this class is implemented in Objective-C.">isObjectiveC</ref>())</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>scope<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ep<sp/>=<sp/>ldef.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ep!=-1)<sp/></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp=ldef.findRev(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,ep);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp!=-1)</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ldef=ldef.left(sp+1)+ldef.mid(ep+2);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>keywords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dp<sp/>=<sp/>ldef.find(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp!=-1)</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ldef=ldef.left(dp+1);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=ldef.length();</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;start<sp/>&gt;%s&lt;\n&quot;,ldef.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=l-1;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&gt;=0<sp/>&amp;&amp;<sp/>(isId(ldef.at(i))<sp/>||<sp/>ldef.at(i)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))<sp/>i--;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&gt;=0<sp/>&amp;&amp;<sp/>isspace((uchar)ldef.at(i)))<sp/>i--;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0)</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>braches<sp/>around<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>tmp(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">+ldef.left(i+1)+</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">+ldef.mid(i+1));</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ldef=tmp;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;end<sp/><sp/><sp/>&gt;%s&lt;<sp/>i=%d\n&quot;,ldef.data(),i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isStatic())<sp/>ldef.prepend(</highlight><highlight class="stringliteral">&quot;+<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>ldef.prepend(</highlight><highlight class="stringliteral">&quot;-<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optVhdl)</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasParameterList=VhdlDocGen::writeVHDLTypeDocumentation(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,container,ol);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container,</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substitute(ldef,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,sep)</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasParameterList=writeDefArgumentList(ol,cd,scopeName,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasOneLineInitializer())<sp/></highlight><highlight class="comment">//<sp/>add<sp/>initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isDefine())<sp/></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.docify(&quot;<sp/>=<sp/>&quot;);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>init<sp/>=<sp/>m_impl-&gt;initializer.simplifyWhiteSpace();</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),container,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,init);</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeNonBreakableSpace(3);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),container,<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,m_impl-&gt;initializer);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(excpString())<sp/></highlight><highlight class="comment">//<sp/>add<sp/>exception<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeExceptionList(ol,cd,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasParameterList=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>call<sp/>endParameterList<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sl.count()&gt;0)</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startLabels();</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=sl.first();</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ns<sp/>=<sp/>sl.next();</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeLabel(s,ns==0);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s=ns;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endLabels();</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasParameterList)<sp/></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endParameterList();</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endMemberDoc(TRUE);</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endMemberDocName();</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endMemberDoc(FALSE);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>HTML<sp/>write<sp/>the<sp/>labels<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6a75284d21a037302ea3d7dc6e1558d4" kindref="member">disableAll</ref>();</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(htmlEndLabelTable)</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;/td&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;td<sp/>class=\&quot;mlabels-right\&quot;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startLabels();</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=sl.first();</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ns<sp/>=<sp/>sl.next();</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.writeLabel(s,ns==0);</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s=ns;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endLabels();</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;/td&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;/tr&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&lt;/table&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&lt;/div&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/>ol.endDoxyAnchor(cfname,memAnchor);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/>ol.startIndent();</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>multi-line<sp/>initializer<sp/>(if<sp/>any)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasMultiLineInitializer()</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//initLines&gt;0<sp/>&amp;&amp;<sp/>((initLines&lt;maxInitLines<sp/>&amp;&amp;<sp/>userInitLines==-1)<sp/>//<sp/>implicitly<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>initLines&lt;userInitLines<sp/>//<sp/>explicitly<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;md=%s<sp/>initLines=%d<sp/>init=`%s&apos;\n&quot;,name().data(),initLines,init.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a796018ee85949771252f36fea9a288d0" kindref="member">startBold</ref>();</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;mtype==MemberType_Define)</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(theTranslator-&gt;trDefineValue());</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(theTranslator-&gt;trInitialValue());</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1aa3f855a4e60d2a7c6769b66d43c69b23" kindref="member">endBold</ref>();</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d84/class_parser_interface" kindref="compound" tooltip="Abstract interface for programming language parsers.">ParserInterface</ref><sp/>*pIntf<sp/>=<sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1a69f9874c260df7559242ec5833051ac5" kindref="member" tooltip="Gets the interface to the parser associated with given extension.">getParser</ref>(<ref refid="d5/dcc/class_definition_1adf7dee9591ec45a66a9a87b9c1f2f1ee" kindref="member">getDefFileExtension</ref>());</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>pIntf-&gt;<ref refid="d5/d84/class_parser_interface_1aee4fccd1865a4e8a6b9f2896811104ca" kindref="member" tooltip="Resets the state of the code parser.">resetCodeParserState</ref>();</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ae9d700d50e148d13422052cd58243624" kindref="member">startCodeFragment</ref>();</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>pIntf-&gt;<ref refid="d5/d84/class_parser_interface_1a4ab2f3a321c3a1d90a2f1245d204dada" kindref="member" tooltip="Parses a source file or fragment with the goal to produce highlighted and cross-referenced output...">parseCode</ref>(ol,scopeName,m_impl-&gt;initializer,FALSE,0,getFileDef(),</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,-1,TRUE,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,FALSE,</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a9fccddf083f487654f6e6ce261fafff8" kindref="member">endCodeFragment</ref>();</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/>QCString<sp/>brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>();</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>QCString<sp/>detailed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>();</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*docArgList<sp/>=<sp/>m_impl-&gt;defArgList;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;templateMaster)</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>brief<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_impl-&gt;templateMaster-&gt;briefDescription();</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>detailed<sp/><sp/><sp/>=<sp/>m_impl-&gt;templateMaster-&gt;documentation();</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/>docArgList<sp/>=<sp/>m_impl-&gt;templateMaster-&gt;argumentList();</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>brief<sp/>description<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!brief.isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;REPEAT_BRIEF&quot;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;BRIEF_MEMBER_DESC&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1ad6c1fc2a1b67c59c1efb27fb59aa7e5f" kindref="member">startParagraph</ref>();</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.generateDoc(<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>(),</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOuterScope()?getOuterScope():container,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brief,FALSE,FALSE,0,TRUE,FALSE);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a6523eb013a6f759d505650de41855085" kindref="member">endParagraph</ref>();</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>detailed<sp/>description<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detailed.isEmpty()<sp/>||<sp/></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>vhdl<sp/>inline<sp/>code<sp/>with<sp/>or<sp/>without<sp/>option<sp/>INLINE_SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optVhdl<sp/>&amp;&amp;<sp/>VhdlDocGen::isMisc(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VhdlDocGen::writeSource(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,ol,cname);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.generateDoc(<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),getOuterScope()?getOuterScope():container,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,detailed+</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,TRUE,FALSE);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.generateDoc(<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>(),</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOuterScope()?getOuterScope():container,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>()+</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,TRUE,FALSE);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!brief.isEmpty()<sp/>&amp;&amp;<sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;REPEAT_BRIEF&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;BRIEF_MEMBER_DESC&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.generateDoc(<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>(),getOuterScope()?getOuterScope():container,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>()+</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,TRUE,FALSE);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;*****<sp/>defArgList=%p<sp/>name=%s<sp/>docs=%s<sp/>hasDocs=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>defArgList,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>defArgList?defArgList-&gt;hasDocumentation():-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(docArgList!=0<sp/>&amp;&amp;<sp/>docArgList-&gt;<ref refid="d7/df8/class_argument_list_1a2a3058f54bea8d3f320bba8ec6ffcb2b" kindref="member">hasDocumentation</ref>())</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>paramDocs;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>ali(*docArgList);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>parameter<sp/>documentation<sp/>into<sp/>a<sp/>list<sp/>of<sp/>@param<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();(a=ali.current());++ali)</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a3f0aa4b21a40b3d36e6cf645504cf60b" kindref="member">hasDocumentation</ref>())</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>direction<sp/>=<sp/>extractDirection(a-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramDocs+=</highlight><highlight class="stringliteral">&quot;@param&quot;</highlight><highlight class="normal">+direction+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+a-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>feed<sp/>the<sp/>result<sp/>to<sp/>the<sp/>documentation<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.generateDoc(</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOuterScope()?getOuterScope():container,</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memberDef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramDocs,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>docStr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indexWords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isExample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/>_writeEnumValues(ol,container,cfname,ciname,cname);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/>_writeReimplements(ol);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/>_writeReimplementedBy(ol);</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/>_writeCategoryRelation(ol);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/>_writeExamples(ol);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/>_writeTypeConstraints(ol);</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition_1a0d22dcffc0afca75f8ab31dd6261933f" kindref="member">writeSourceDef</ref>(ol,cname);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>writeSourceRefs(ol,cname);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>writeSourceReffedBy(ol,cname);</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition_1ad5ad17068a22165040e5b256c564c603" kindref="member">writeInlineCode</ref>(ol,cname);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/>_writeCallGraph(ol);</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/>_writeCallerGraph(ol);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::userComments)</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a73f9be626eea01f1ccd1b446dcf2c003" kindref="member">disableAllBut</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>cmd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;?<sp/>$root=$_SERVER[&apos;DOCUMENT_ROOT&apos;];<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;passthru(\&quot;$root/doxynotes<sp/>--lookup<sp/>&quot;</highlight><highlight class="normal">+</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>()+</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">+<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>()+</highlight><highlight class="stringliteral">&quot;\&quot;)<sp/>?&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(cmd);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/>ol.endIndent();</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>LaTeX<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Config_getBool(&quot;EXTRACT_ALL&quot;)<sp/>&amp;&amp;<sp/>!hasDocs)<sp/>ol.enable(OutputGenerator::Latex);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_ALL&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;WARN_IF_UNDOCUMENTED&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;WARN_NO_PARAMDOC&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!Doxygen::suppressDocWarnings)</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hasDocumentedParams())</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn_doc_error(<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;parameters<sp/>of<sp/>member<sp/>%s<sp/>are<sp/>not<sp/>(all)<sp/>documented&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qPrint(<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>()));</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hasDocumentedReturnType()<sp/>&amp;&amp;<sp/>isFunction()<sp/>&amp;&amp;<sp/><ref refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" kindref="member">hasDocumentation</ref>())</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn_doc_error(<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;return<sp/>type<sp/>of<sp/>member<sp/>%s<sp/>is<sp/>not<sp/>documented&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qPrint(<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>()));</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>strip<sp/>scope<sp/>and<sp/>field<sp/>name<sp/>from<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>example:<sp/>&quot;struct<sp/>N::S.v.c&quot;<sp/>will<sp/>become<sp/>&quot;struct<sp/>v&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>simplifyTypeForTable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="2849"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/>QCString<sp/>ts=removeAnonymousScopes(s);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ts.right(2)==</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)<sp/>ts<sp/>=<sp/>ts.left(ts.length()-2);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;[A-Z_a-z0-9]+::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,l;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(ts,0,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/>ts=ts.left(i)+ts.mid(i+l);</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/>i=ts.findRev(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/>ts<sp/>=<sp/>ts.left(i);</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/>i=ts.findRev(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/>ts<sp/>=<sp/>ts.right(ts.length()-i-1);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;simplifyTypeForTable(%s)-&gt;%s\n&quot;,s.data(),ts.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ts;</highlight></codeline>
<codeline lineno="2864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="2867"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2874"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*getClassFromType(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;type,<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;start,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;length)</highlight></codeline>
<codeline lineno="2875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos=0;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/>QCString<sp/>name;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/>QCString<sp/>templSpec;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=extractClassNameFromType(type,pos,name,templSpec,lang))!=-1)</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>name.length()+templSpec.length();</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!templSpec.isEmpty())</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/>=<sp/>getResolvedClass(scope,0,name+templSpec,&amp;md);</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/>cd<sp/>=<sp/>getResolvedClass(scope,0,name);</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start=i;</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length=l;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;getClassFromType:<sp/>type=%s<sp/>name=%s<sp/>start=%d<sp/>length=%d\n&quot;</highlight><highlight class="normal">,type.data(),name.data(),start,length);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cd;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md)</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start=i;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length=l;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;getClassFromType:<sp/>type=%s<sp/>name=%s<sp/>start=%d<sp/>length=%d\n&quot;</highlight><highlight class="normal">,type.data(),name.data(),start,length);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/>pos=i+l;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2909"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::writeMemberDocSimple(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*container)</highlight></codeline>
<codeline lineno="2911"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope<sp/><sp/>=<sp/>getOuterScope();</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/>QCString<sp/>doxyName<sp/><sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>QCString<sp/>doxyArgs<sp/><sp/>=<sp/>argsString();</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/>QCString<sp/>memAnchor<sp/>=<sp/><ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/>QCString<sp/>cfname<sp/><sp/><sp/><sp/>=<sp/><ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/>QCString<sp/>cname;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope)<sp/>cname<sp/><sp/><sp/>=<sp/>scope-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doxyName.at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>doxyName=</highlight><highlight class="stringliteral">&quot;__unnamed__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>m_impl-&gt;accessorClass;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;===&gt;<sp/>%s::anonymous:<sp/>%s\n&quot;,name().data(),cd?cd-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/>ol.startInlineMemberType();</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>ol.startDoxyAnchor(cfname,cname,memAnchor,doxyName,doxyArgs);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/>QCString<sp/>type<sp/>=<sp/>m_impl-&gt;accessorType;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.isEmpty())</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>m_impl-&gt;type;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTypedef())<sp/>type.prepend(</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/>QCString<sp/>ts<sp/>=<sp/>simplifyTypeForTable(type);</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/></highlight><highlight class="comment">//<sp/>cd<sp/>points<sp/>to<sp/>an<sp/>anonymous<sp/>struct<sp/>pointed<sp/>to<sp/>by<sp/>this<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>add<sp/>a<sp/>link<sp/>to<sp/>it<sp/>from<sp/>the<sp/>type<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefixes[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;struct<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;union<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;class<sp/>&quot;</highlight><highlight class="normal">,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**p<sp/>=<sp/>prefixes;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p)</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=qstrlen(*p);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ts.left(l)==*p)</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(*p);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i=l;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(cd-&gt;<ref refid="d1/dcf/class_class_def_1ab690feb2a94737d5b69c819b9794749e" kindref="member" tooltip="If this class originated from a tagfile, this will return the tag file reference.">getReference</ref>(),</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a7bc3e33011d6da98a5fd202a1dbe75fb" kindref="member" tooltip="Returns the unique base name (without extension) of the class&amp;#39;s file on disk.">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a28f29dbbc5c2646bc64bae479fd7b905" kindref="member">anchor</ref>(),ts.mid(i));</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>use<sp/>standard<sp/>auto<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),<sp/></highlight><highlight class="comment">//<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fileScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>autoBreak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/>ol.endDoxyAnchor(cfname,memAnchor);</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/>ol.endInlineMemberType();</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/>ol.startInlineMemberName();</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(doxyName);</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isVariable()<sp/>&amp;&amp;<sp/>argsString()<sp/>&amp;&amp;<sp/>!isObjCMethod())<sp/></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),getOuterScope(),<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,argsString());</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;bitfields.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>add<sp/>bitfields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),getOuterScope(),<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,m_impl-&gt;bitfields.simplifyWhiteSpace());</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/>ol.endInlineMemberName();</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/>ol.startInlineMemberDoc();</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/>QCString<sp/>brief<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>();</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/>QCString<sp/>detailed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>();</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>brief<sp/>description<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!brief.isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;REPEAT_BRIEF&quot;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;BRIEF_MEMBER_DESC&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.generateDoc(<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>(),</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOuterScope()?getOuterScope():container,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brief,FALSE,FALSE,0,TRUE,FALSE);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>detailed<sp/>description<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detailed.isEmpty())</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.generateDoc(<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOuterScope()?getOuterScope():container,</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detailed+</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,FALSE,FALSE,0,FALSE,FALSE);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/>ol.endInlineMemberDoc();</highlight></codeline>
<codeline lineno="3012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal">QCString<sp/>MemberDef::memberTypeName()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3015"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_impl-&gt;mtype)</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Define:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;macro<sp/>definition&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Function:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Variable:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Typedef:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;typedef&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Enumeration:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;enumeration&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_EnumValue:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;enumvalue&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Signal:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;signal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Slot:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;slot&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Friend:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;friend&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_DCOP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dcop&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Property:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Event:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;event&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Interface:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;interface&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Service:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;service&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::warnIfUndocumented()</highlight></codeline>
<codeline lineno="3037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;memberGroup)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/><sp/><sp/><sp/>*cd<sp/>=<sp/>getClassDef();</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd<sp/>=<sp/>getNamespaceDef();</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/><sp/><sp/><sp/><sp/>*fd<sp/>=<sp/>getFileDef();</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/><sp/><sp/><sp/><sp/>*gd<sp/>=<sp/>getGroupDef();</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d=0;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t=0;</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/>t=</highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal">,<sp/>d=cd;<sp/></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd)<sp/></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>t=</highlight><highlight class="stringliteral">&quot;namespace&quot;</highlight><highlight class="normal">,<sp/>d=nd;<sp/></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd)</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/>t=</highlight><highlight class="stringliteral">&quot;group&quot;</highlight><highlight class="normal">,<sp/>d=gd;</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/>t=</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">,<sp/>d=fd;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractAll<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_ALL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;warnIfUndoc:<sp/>d-&gt;isLinkable()=%d<sp/>isLinkable()=%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;isDocumentedFriendClass()=%d<sp/>name()=%s<sp/>prot=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;isLinkable(),isLinkable(),isDocumentedFriendClass(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>name().data(),prot);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!<ref refid="d5/dcc/class_definition_1a92f28d12009f388a30c5e564e5ea3493" kindref="member">hasUserDocumentation</ref>()<sp/>&amp;&amp;<sp/>!extractAll)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!isFriendClass()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;<sp/>d<sp/>&amp;&amp;<sp/>d-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>protectionLevelVisible(m_impl-&gt;prot)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>()</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/>warn_undoc(<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight><highlight class="stringliteral">&quot;Member<sp/>%s%s<sp/>(%s)<sp/>of<sp/>%s<sp/>%s<sp/>is<sp/>not<sp/>documented.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qPrint(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()),qPrint(argsString()),qPrint(memberTypeName()),t,qPrint(d-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()));</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isFriendClass()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3074"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(isFriend()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>class&quot;</highlight><highlight class="normal"><sp/>||<sp/>m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>struct&quot;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;type==</highlight><highlight class="stringliteral">&quot;friend<sp/>union&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDocumentedFriendClass()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3081"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*fcd=0;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>QCString<sp/>baseName=<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=baseName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/>baseName=baseName.left(i);</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(isFriendClass()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fcd=getClass(baseName))<sp/>&amp;&amp;<sp/>fcd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>());<sp/></highlight></codeline>
<codeline lineno="3088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3090" refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" kindref="member">MemberDef::hasDocumentation</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3091"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition_1a2332d001413c64148e41a6f89b80f015" kindref="member">Definition::hasDocumentation</ref>()<sp/>||<sp/></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;mtype==MemberType_Enumeration<sp/>&amp;&amp;<sp/>m_impl-&gt;docEnumValues)<sp/>||<sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>enum<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;defArgList!=0<sp/>&amp;&amp;<sp/>m_impl-&gt;defArgList-&gt;hasDocumentation());<sp/></highlight><highlight class="comment">//<sp/>has<sp/>doc<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="3098"><highlight class="preprocessor"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition_1a92f28d12009f388a30c5e564e5ea3493" kindref="member">MemberDef::hasUserDocumentation</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3099"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDocs<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a92f28d12009f388a30c5e564e5ea3493" kindref="member">Definition::hasUserDocumentation</ref>();</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasDocs;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3104"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setMemberGroup(<ref refid="da/d32/class_member_group" kindref="compound" tooltip="A class representing a group of members.">MemberGroup</ref><sp/>*grp)</highlight></codeline>
<codeline lineno="3107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/>m_impl-&gt;memberGroup<sp/>=<sp/>grp;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::visibleMemberGroup(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hideNoHeader)<sp/></highlight></codeline>
<codeline lineno="3112"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;memberGroup!=0<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!hideNoHeader<sp/>||<sp/>m_impl-&gt;memberGroup-&gt;header()!=</highlight><highlight class="stringliteral">&quot;[NOHEADER]&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="3115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal">QCString<sp/>MemberDef::getScopeString()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3118"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClassDef())<sp/>result=getClassDef()-&gt;<ref refid="d1/dcf/class_class_def_1a4c1949b6fda5e47ec3fea0e046df5f7b" kindref="member" tooltip="Returns the name as it is appears in the documentation.">displayName</ref>();</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getNamespaceDef())<sp/>result=getNamespaceDef()-&gt;<ref refid="d0/d07/class_namespace_def_1a73aea0ba8bfb92ae1e7876a2e9a9520a" kindref="member">displayName</ref>();</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="3126"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>escapeAnchor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;anchor)</highlight></codeline>
<codeline lineno="3127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>anchor.length(),i;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;l;i++)</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>anchor.at(i);</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c&gt;=</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c&lt;=</highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c&gt;=</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c&lt;=</highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=c;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexStr[]=</highlight><highlight class="stringliteral">&quot;0123456789ABCDEF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>escChar[]={<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>escChar[1]=hexStr[c&gt;&gt;4];</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>escChar[2]=hexStr[c&amp;0xf];</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=escChar;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3149"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setAnchor()</highlight></codeline>
<codeline lineno="3151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/>QCString<sp/>memAnchor<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;args.isEmpty())<sp/>memAnchor+=m_impl-&gt;args;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/>memAnchor.prepend(definition());<sp/></highlight><highlight class="comment">//<sp/>actually<sp/>the<sp/>method<sp/>name<sp/>is<sp/>now<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>twice,<sp/>which<sp/>is<sp/>silly,<sp/>but<sp/>we<sp/>keep<sp/>it<sp/>this<sp/>way<sp/>for<sp/>backward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>include<sp/>number<sp/>of<sp/>template<sp/>arguments<sp/>as<sp/>well,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>distinguish<sp/>between<sp/>two<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specializations<sp/>that<sp/>only<sp/>differ<sp/>in<sp/>the<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;tArgList)<sp/></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[20];</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/>qsnprintf(buf,20,</highlight><highlight class="stringliteral">&quot;%d:&quot;</highlight><highlight class="normal">,m_impl-&gt;tArgList-&gt;count());</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[19]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/>memAnchor.prepend(buf);</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>md5<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>uchar<sp/>md5_sig[16];</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/>QCString<sp/>sigStr(33);</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/>MD5Buffer((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)memAnchor.data(),memAnchor.length(),md5_sig);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;memAnchor=%s\n&quot;,memAnchor.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/>MD5SigToString(md5_sig,sigStr.data(),33);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>m_impl-&gt;anc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">+sigStr;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setGroupDef(<ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd,<ref refid="d7/d59/struct_grouping_1a9f0ec5ab376b083ebe3274ea79fd2d70" kindref="member" tooltip="Grouping priority.">Grouping::GroupPri_t</ref><sp/>pri,</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;fileName,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startLine,</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDocs,<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*member)</highlight></codeline>
<codeline lineno="3182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s<sp/>MemberDef::setGroupDef(%s)\n&quot;,name().data(),gd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/>m_impl-&gt;group=gd;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/>m_impl-&gt;grouppri=pri;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/>m_impl-&gt;groupFileName=fileName;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>m_impl-&gt;groupStartLine=startLine;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/>m_impl-&gt;groupHasDocs=hasDocs;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/>m_impl-&gt;groupMember=member;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="3191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setEnumScope(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>livesInsideEnum)<sp/></highlight></codeline>
<codeline lineno="3194"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/>m_impl-&gt;enumScope=md;<sp/></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/>m_impl-&gt;livesInsideEnum=livesInsideEnum;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getGroupDef())</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;group=md-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;grouppri=md-&gt;getGroupPri();</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;groupFileName=md-&gt;getGroupFileName();</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;groupStartLine=md-&gt;getGroupStartLine();</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;groupHasDocs=md-&gt;getGroupHasDocs();</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setMemberClass(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3209"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/>m_impl-&gt;classDef=cd;<sp/></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>m_isConstructorCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/>setOuterScope(cd);<sp/></highlight></codeline>
<codeline lineno="3214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setNamespace(<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd)<sp/></highlight></codeline>
<codeline lineno="3217"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/>m_impl-&gt;nspace=nd;<sp/></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/>setOuterScope(nd);<sp/></highlight></codeline>
<codeline lineno="3220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::createTemplateInstanceMember(</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*formalArgs,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*actualArgs)</highlight></codeline>
<codeline lineno="3224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Member<sp/>%s<sp/>%s<sp/>%s\n&quot;,typeString(),name().data(),argsString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*actualArgList<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;defArgList)</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/>actualArgList<sp/>=<sp/>m_impl-&gt;defArgList-&gt;deepCopy();</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>formal<sp/>arguments<sp/>with<sp/>actuals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>ali(*actualArgList);</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*arg;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(arg=ali.current());++ali)</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/>substituteTemplateArgumentsInString(arg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>,formalArgs,actualArgs);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>actualArgList-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substituteTemplateArgumentsInString(actualArgList-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref>,formalArgs,actualArgs);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/>QCString<sp/>methodName=<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(methodName.left(9)==</highlight><highlight class="stringliteral">&quot;operator<sp/>&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>methodName=substituteTemplateArgumentsInString(methodName,formalArgs,actualArgs);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*imd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a3cda83ecd84802bf41b3d49f8252e62c" kindref="member">MemberDef</ref>(</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),<ref refid="d5/dcc/class_definition_1abc16ee564cb0be049ec0f17e2adf0bca" kindref="member">getDefColumn</ref>(),</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substituteTemplateArgumentsInString(m_impl-&gt;type,formalArgs,actualArgs),<sp/></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>methodName,<sp/></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substituteTemplateArgumentsInString(m_impl-&gt;args,formalArgs,actualArgs),<sp/></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;exception,<sp/>m_impl-&gt;prot,</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impl-&gt;virt,<sp/>m_impl-&gt;stat,<sp/>m_impl-&gt;related,<sp/>m_impl-&gt;mtype,<sp/>0,<sp/>0</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>imd-&gt;setArgumentList(actualArgList);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>imd-&gt;setDefinition(substituteTemplateArgumentsInString(m_impl-&gt;def,formalArgs,actualArgs));</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/>imd-&gt;setBodyDef(<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>());</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/>imd-&gt;setBodySegment(<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),<ref refid="d5/dcc/class_definition_1a11056f29c65e1dddc184036bce5d5456" kindref="member">getEndBodyLine</ref>());</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//imd-&gt;setBodyMember(this);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>init<sp/>other<sp/>member<sp/>variables<sp/>(if<sp/>needed).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>reimplemented<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imd;<sp/></highlight></codeline>
<codeline lineno="3265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::hasOneLineInitializer()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3268"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s:<sp/>init=%s,<sp/>initLines=%d<sp/>maxInitLines=%d<sp/>userInitLines=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name().data(),m_impl-&gt;initializer.data(),m_impl-&gt;initLines,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_impl-&gt;maxInitLines,m_impl-&gt;userInitLines);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_impl-&gt;initializer.isEmpty()<sp/>&amp;&amp;<sp/>m_impl-&gt;initLines==0<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>one<sp/>line<sp/>initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((m_impl-&gt;maxInitLines&gt;0<sp/>&amp;&amp;<sp/>m_impl-&gt;userInitLines==-1)<sp/>||<sp/>m_impl-&gt;userInitLines&gt;0);<sp/></highlight><highlight class="comment">//<sp/>enabled<sp/>by<sp/>default<sp/>or<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::hasMultiLineInitializer()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3277"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;initLines=%d<sp/>userInitLines=%d<sp/>maxInitLines=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>initLines,userInitLines,maxInitLines);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;initLines&gt;0<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((m_impl-&gt;initLines&lt;m_impl-&gt;maxInitLines<sp/>&amp;&amp;<sp/>m_impl-&gt;userInitLines==-1)<sp/></highlight><highlight class="comment">//<sp/>implicitly<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>m_impl-&gt;initLines&lt;m_impl-&gt;userInitLines<sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setInitializer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*initializer)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3287"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/>m_impl-&gt;initializer=initializer;<sp/></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=m_impl-&gt;initializer.length();</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=l-1;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&gt;=0<sp/>&amp;&amp;<sp/>isspace((uchar)m_impl-&gt;initializer.at(p)))<sp/>p--;</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/>m_impl-&gt;initializer=m_impl-&gt;initializer.left(p+1);</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/>m_impl-&gt;initLines=m_impl-&gt;initializer.contains(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s::setInitializer(%s)\n&quot;,name().data(),m_impl-&gt;initializer.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::addListReference(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*)</highlight></codeline>
<codeline lineno="3298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>optimizeOutputForC<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;OPTIMIZE_OUTPUT_FOR_C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//static<sp/>bool<sp/>hideScopeNames<sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(&quot;HIDE_SCOPE_NAMES&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//static<sp/>bool<sp/>optimizeOutputJava<sp/>=<sp/>Config_getBool(&quot;OPTIMIZE_OUTPUT_JAVA&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//static<sp/>bool<sp/>fortranOpt<sp/>=<sp/>Config_getBool(&quot;OPTIMIZE_FOR_FORTRAN&quot;);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>();</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/>visited=TRUE;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/>QCString<sp/>memLabel;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optimizeOutputForC)<sp/></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>memLabel=theTranslator-&gt;trGlobal(TRUE,TRUE);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang==SrcLangExt_Fortran)</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/>memLabel=theTranslator-&gt;trSubprogram(TRUE,TRUE);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/>memLabel=theTranslator-&gt;trMember(TRUE,TRUE);</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/>QCString<sp/>memName<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*pd=getOuterScope();</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/>QCString<sp/>pdName<sp/>=<sp/>pd-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>?<sp/></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>*)pd)-&gt;displayName()<sp/>:<sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/>QCString<sp/>sep<sp/>=<sp/>getLanguageSpecificSeparator(lang,TRUE);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/>QCString<sp/>memArgs;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isRelated()<sp/></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&amp;&amp;<sp/>commented<sp/>out<sp/>as<sp/>a<sp/>result<sp/>of<sp/>bug<sp/>597016</highlight></codeline>
<codeline lineno="3327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="3328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!hideScopeNames<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>there<sp/>is<sp/>a<sp/>scope</highlight></codeline>
<codeline lineno="3329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pd<sp/>&amp;&amp;<sp/>pd!=Doxygen::globalScope)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>we<sp/>can<sp/>show<sp/>it</highlight></codeline>
<codeline lineno="3330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="3331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pd=getClassDef())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>it&apos;s<sp/>a<sp/>class<sp/>so<sp/>we</highlight></codeline>
<codeline lineno="3332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>show<sp/>the<sp/>scope<sp/>anyway</highlight></codeline>
<codeline lineno="3333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isObjCMethod())</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pd!=Doxygen::globalScope)<sp/>memName.prepend(pdName+sep);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memArgs<sp/>=<sp/>argsString();</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ListItemInfo&gt;</ref><sp/>*xrefItems<sp/>=<sp/>xrefListItems();</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xrefItems)</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/>addRefItem(xrefItems,</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>()+argsString(),<sp/></highlight><highlight class="comment">//<sp/>argsString<sp/>is<sp/>needed<sp/>for<sp/>overloaded<sp/>functions<sp/>(see<sp/>bug<sp/>609624)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memLabel,</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>()+</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">+<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),memName,memArgs);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*MemberDef::getSectionList(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="3358"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[20];</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/>sprintf(key,</highlight><highlight class="stringliteral">&quot;%p&quot;</highlight><highlight class="normal">,d);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(d!=0<sp/>&amp;&amp;<sp/>m_impl-&gt;classSectionSDict)<sp/>?<sp/>m_impl-&gt;classSectionSDict-&gt;find(key)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setSectionList(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d,<sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*sl)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3365"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MemberDef::setSectionList(%p,%p)<sp/>name=%s\n&quot;,d,sl,name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[20];</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/>sprintf(key,</highlight><highlight class="stringliteral">&quot;%p&quot;</highlight><highlight class="normal">,d);</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classSectionSDict==0)<sp/></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;classSectionSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;MemberList&gt;</ref>(7);</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/>m_impl-&gt;classSectionSDict-&gt;append(key,sl);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><ref refid="d9/d49/types_8h_1ab16236bdd10ddf4d73a9847350f0017e" kindref="member" tooltip="Virtualness of a member.">Specifier</ref><sp/>MemberDef::virtualness(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3377"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count&gt;25)<sp/></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>warn(<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>inconsistency:<sp/>recursion<sp/>detected<sp/>in<sp/>overload<sp/>relation<sp/>for<sp/>member<sp/>%s!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,qPrint(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Normal;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1ab16236bdd10ddf4d73a9847350f0017e" kindref="member" tooltip="Virtualness of a member.">Specifier</ref><sp/>v<sp/>=<sp/>m_impl-&gt;virt;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd<sp/>=<sp/>reimplements();</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rmd<sp/>&amp;&amp;<sp/>v==Normal)</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>rmd-&gt;virtualness(count+1)==Normal<sp/>?<sp/>Normal<sp/>:<sp/>Virtual;</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/>rmd<sp/>=<sp/>rmd-&gt;reimplements();</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_writeTagData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DefType<sp/>compoundType)</highlight></codeline>
<codeline lineno="3397"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>typeMask<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>compoundType;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m_impl-&gt;tagDataWritten)<sp/>&amp;<sp/>typeMask)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>member<sp/>already<sp/>written<sp/>for<sp/>this<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateTagFile<sp/>=<sp/>!Config_getString(</highlight><highlight class="stringliteral">&quot;GENERATE_TAGFILE&quot;</highlight><highlight class="normal">).isEmpty();</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>tag<sp/>file<sp/>information<sp/>of<sp/>this<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateTagFile<sp/>&amp;&amp;<sp/><ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>())</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;member<sp/>kind=\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_impl-&gt;mtype)</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Define:<sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;define&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_EnumValue:<sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;enumvalue&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Property:<sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Event:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;event&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Variable:<sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Typedef:<sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;typedef&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Enumeration:<sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;enumeration&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Function:<sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Signal:<sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;signal&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Friend:<sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;friend&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_DCOP:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dcop&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Slot:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;slot&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Interface:<sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;interface&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MemberType_Service:<sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;service&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;prot!=Public)</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>protection=\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;prot==Protected)<sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;protected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;prot==Package)<sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;package&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Private<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;private&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;virt!=Normal)</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>virtualness=\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;virt==Virtual)<sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;virtual&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Pure<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pure&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isStatic())</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>static=\&quot;yes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;type&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(typeString())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/type&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;name&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/name&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;anchorfile&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>()+Doxygen::htmlFileExtension)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/anchorfile&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;anchor&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/anchor&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>idStr<sp/>=<sp/>id();</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!idStr.isEmpty())</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;clangid&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(idStr)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/clangid&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;arglist&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(argsString())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/arglist&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1a252f2febf6695acc7ac5800c683f2770" kindref="member">writeDocAnchorsToTagFile</ref>();</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;/member&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/>_addToSearchIndex();</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*fmdl=m_impl-&gt;enumFields;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmdl)</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mli(*fmdl);</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd;</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mli.toFirst();(fmd=mli.current());++mli)</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fmd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Config_getString(</highlight><highlight class="stringliteral">&quot;GENERATE_TAGFILE&quot;</highlight><highlight class="normal">).isEmpty())</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;member<sp/>kind=\&quot;enumvalue\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;name&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(fmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/name&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;anchorfile&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>()+Doxygen::htmlFileExtension)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/anchorfile&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;anchor&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(fmd-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/anchor&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>idStr<sp/>=<sp/>fmd-&gt;id();</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!idStr.isEmpty())</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;clangid&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(idStr)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/clangid&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&lt;arglist&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>convertToXML(fmd-&gt;argsString())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/arglist&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;/member&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;m_impl-&gt;tagDataWritten<sp/>|=<sp/>typeMask;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;_addToSearchIndex();</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/>m_impl-&gt;tagDataWritten<sp/>|=<sp/>typeMask;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"></highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_computeIsConstructor()</highlight></codeline>
<codeline lineno="3486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/>m_isConstructorCached=1;<sp/></highlight><highlight class="comment">//<sp/>FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef)<sp/></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;isDMember)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_isConstructorCached<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==</highlight><highlight class="stringliteral">&quot;this&quot;</highlight><highlight class="normal"><sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_PHP)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>PHP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_isConstructorCached<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==</highlight><highlight class="stringliteral">&quot;__construct&quot;</highlight><highlight class="normal"><sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Python)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_isConstructorCached<sp/>=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Tcl)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>Tcl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_isConstructorCached<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==</highlight><highlight class="stringliteral">&quot;constructor&quot;</highlight><highlight class="normal"><sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>other<sp/>languages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>locName<sp/>=<sp/>m_impl-&gt;classDef-&gt;localName();</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=locName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==-1)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>template<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isConstructorCached<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==locName<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isConstructorCached<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==locName.left(i)<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isConstructor()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3529"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isConstructorCached==0)</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*that<sp/>=<sp/>(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>*)</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/>that-&gt;_computeIsConstructor();</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/>ASSERT(m_isConstructorCached&gt;0);</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_isConstructorCached==2;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_computeIsDestructor()</highlight></codeline>
<codeline lineno="3541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDestructor;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;isDMember)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/>isDestructor<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==</highlight><highlight class="stringliteral">&quot;~this&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_PHP)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>PHP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/>isDestructor<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==</highlight><highlight class="stringliteral">&quot;__destruct&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Tcl)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>Tcl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/>isDestructor<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==</highlight><highlight class="stringliteral">&quot;destructor&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==</highlight><highlight class="stringliteral">&quot;__del__&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Python)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/>isDestructor=TRUE;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>other<sp/>languages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>isDestructor<sp/>=</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)!=-1<sp/>||<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)!=-1)<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>!<sp/>is<sp/>for<sp/>C++/CLI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">)==-1;<sp/></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/>m_isDestructorCached<sp/>=<sp/>isDestructor<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDestructor()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3570"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isDestructorCached==0)</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*that=(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>*)</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/>that-&gt;_computeIsDestructor();</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/>ASSERT(m_isDestructorCached&gt;0);</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_isDestructorCached==2;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::writeEnumDeclaration(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;typeDecl,</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd,<ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd,<sp/></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DefType<sp/>compoundType)</highlight></codeline>
<codeline lineno="3583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enumMemCount=0;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*fmdl=m_impl-&gt;enumFields;</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/>uint<sp/>numVisibleEnumValues=0;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmdl)</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd=fmdl-&gt;first();</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fmd)</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd-&gt;<ref refid="da/d09/class_member_def_1acb939719f6b36bd3559d2881959e2907" kindref="member">isBriefSectionVisible</ref>())<sp/>numVisibleEnumValues++;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmd=fmdl-&gt;next();</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numVisibleEnumValues==0<sp/>&amp;&amp;<sp/>!<ref refid="da/d09/class_member_def_1acb939719f6b36bd3559d2881959e2907" kindref="member">isBriefSectionVisible</ref>())<sp/></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/>QCString<sp/>n<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=n.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/>n=n.right(n.length()-i-2);<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>scope<sp/>(TODO:<sp/>is<sp/>this<sp/>needed?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n[0]!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>an<sp/>anonymous<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>()<sp/>||<sp/>hasDocumentedEnumValues())</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_writeTagData(compoundType);</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeLink(typeDecl,cd,nd,fd,gd);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a796018ee85949771252f36fea9a288d0" kindref="member">startBold</ref>();</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(n);</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1aa3f855a4e60d2a7c6769b66d43c69b23" kindref="member">endBold</ref>();</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a188c7a8f0a0dc35ec5ea0f8b4a491d33" kindref="member">writeChar</ref>(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_impl-&gt;enumBaseType.isEmpty())</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a188c7a8f0a0dc35ec5ea0f8b4a491d33" kindref="member">writeChar</ref>(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a188c7a8f0a0dc35ec5ea0f8b4a491d33" kindref="member">writeChar</ref>(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(m_impl-&gt;enumBaseType);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a188c7a8f0a0dc35ec5ea0f8b4a491d33" kindref="member">writeChar</ref>(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/>uint<sp/>enumValuesPerLine<sp/>=<sp/>(uint)Config_getInt(</highlight><highlight class="stringliteral">&quot;ENUM_VALUES_PER_LINE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numVisibleEnumValues&gt;0<sp/>&amp;&amp;<sp/>enumValuesPerLine&gt;0)</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;{<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmdl)</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd=fmdl-&gt;first();</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fmdVisible<sp/>=<sp/>fmd-&gt;<ref refid="da/d09/class_member_def_1acb939719f6b36bd3559d2881959e2907" kindref="member">isBriefSectionVisible</ref>();</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fmd)</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmdVisible)</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>html<sp/>we<sp/>start<sp/>a<sp/>new<sp/>line<sp/>after<sp/>a<sp/>number<sp/>of<sp/>items<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numVisibleEnumValues&gt;enumValuesPerLine</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(enumMemCount%enumValuesPerLine)==0</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a73f9be626eea01f1ccd1b446dcf2c003" kindref="member">disableAllBut</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.lineBreak();<sp/></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&amp;#160;&amp;#160;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd-&gt;<ref refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" kindref="member">hasDocumentation</ref>())<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>value<sp/>has<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;_writeTagData(compoundType);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;writeLink(typeDecl,cd,nd,fd,gd);</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>docs<sp/>for<sp/>this<sp/>enum<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a796018ee85949771252f36fea9a288d0" kindref="member">startBold</ref>();</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(fmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1aa3f855a4e60d2a7c6769b66d43c69b23" kindref="member">endBold</ref>();</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd-&gt;hasOneLineInitializer())<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>value<sp/>has<sp/>initializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//typeDecl.writeString(&quot;<sp/>=<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.parseText(fmd-&gt;initializer());</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prevVisible<sp/>=<sp/>fmdVisible;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd=fmdl-&gt;next();</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd<sp/>&amp;&amp;<sp/>(fmdVisible=fmd-&gt;<ref refid="da/d09/class_member_def_1acb939719f6b36bd3559d2881959e2907" kindref="member">isBriefSectionVisible</ref>()))<sp/></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevVisible)</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>to<sp/>prevent<sp/>too<sp/>long<sp/>lines<sp/>in<sp/>LaTeX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumMemCount++;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numVisibleEnumValues&gt;enumValuesPerLine)</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a73f9be626eea01f1ccd1b446dcf2c003" kindref="member">disableAllBut</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.lineBreak();<sp/></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/>typeDecl.<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setArgumentList(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al)<sp/></highlight></codeline>
<codeline lineno="3700"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;defArgList)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_impl-&gt;defArgList;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/>m_impl-&gt;defArgList<sp/>=<sp/>al;</highlight></codeline>
<codeline lineno="3703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setDeclArgumentList(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al)</highlight></codeline>
<codeline lineno="3706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;declArgList)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_impl-&gt;declArgList;</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/>m_impl-&gt;declArgList<sp/>=<sp/>al;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setTypeConstraints(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al)</highlight></codeline>
<codeline lineno="3712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;typeConstraints)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_impl-&gt;typeConstraints;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/>m_impl-&gt;typeConstraints<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/>m_impl-&gt;typeConstraints-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/>ArgumentListIterator<sp/>ali(*al);</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a;</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(a=ali.current());++ali)</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;typeConstraints-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>(*a));</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="3726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/>m_impl-&gt;type<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setAccessorType(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="3731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/>m_impl-&gt;accessorClass<sp/>=<sp/>cd;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/>m_impl-&gt;accessorType<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::findSectionsInDocumentation()</highlight></codeline>
<codeline lineno="3737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/>docFindSections(<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),</highlight><highlight class="keyword">this</highlight><highlight class="normal">,0,<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>());<sp/><sp/></highlight></codeline>
<codeline lineno="3739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::enableCallGraph(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>e)<sp/></highlight></codeline>
<codeline lineno="3742"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/>m_impl-&gt;hasCallGraph=e;<sp/></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e)<sp/>Doxygen::parseSourcesNeeded<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::enableCallerGraph(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>e)<sp/></highlight></codeline>
<codeline lineno="3748"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/>m_impl-&gt;hasCallerGraph=e;<sp/></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e)<sp/>Doxygen::parseSourcesNeeded<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="3754"><highlight class="preprocessor"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::protectionVisible()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3755"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;prot==Public<sp/>||<sp/></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;prot==Private<sp/><sp/><sp/>&amp;&amp;<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_PRIVATE&quot;</highlight><highlight class="normal">))<sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;prot==Protected<sp/>&amp;&amp;<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_PROTECTED&quot;</highlight><highlight class="normal">))<sp/>||</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_impl-&gt;prot==Package<sp/><sp/><sp/>&amp;&amp;<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_PACKAGE&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3762"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="3764"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">MemberDef::setInbodyDocumentation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*docs,</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*docFile,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>docLine)</highlight></codeline>
<codeline lineno="3766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/>m_impl-&gt;inbodyDocs<sp/>=<sp/>docs;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/>m_impl-&gt;inbodyDocs<sp/>=<sp/>m_impl-&gt;inbodyDocs.stripWhiteSpace();</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/>m_impl-&gt;inbodyLine<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/>m_impl-&gt;inbodyFile<sp/>=<sp/><ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3773"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isObjCMethod()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3775"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef-&gt;isObjectiveC()<sp/>&amp;&amp;<sp/>isFunction())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight></codeline>
<codeline lineno="3778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isObjCProperty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3781"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;classDef<sp/>&amp;&amp;<sp/>m_impl-&gt;classDef-&gt;isObjectiveC()<sp/>&amp;&amp;<sp/>isProperty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight></codeline>
<codeline lineno="3784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight></codeline>
<codeline lineno="3786" refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" refkind="member"><highlight class="normal">QCString<sp/><ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">MemberDef::qualifiedName</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3787"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isObjCMethod())</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>qm;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isStatic())<sp/>qm=</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>qm=</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/>qm+=</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/>qm+=m_impl-&gt;classDef-&gt;name()+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/>qm+=<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/>qm+=</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qm;</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" kindref="member">Definition::qualifiedName</ref>();</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="3802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setTagInfo(<ref refid="d3/dc3/struct_tag_info" kindref="compound" tooltip="This struct is used to capture the tag file information for an Entry.">TagInfo</ref><sp/>*ti)</highlight></codeline>
<codeline lineno="3805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ti)</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s:<sp/>Setting<sp/>tag<sp/>name=%s<sp/>anchor=%s\n&quot;,name().data(),ti-&gt;tagName.data(),ti-&gt;anchor.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;anc=ti-&gt;anchor;</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition_1a9548c1e2218ce2730c6c3e31bdac6452" kindref="member">setReference</ref>(ti-&gt;tagName);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;explicitOutputFileBase<sp/>=<sp/>stripExtension(ti-&gt;fileName);</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal">QCString<sp/>MemberDef::objCMethodName(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>localLink,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showStatic)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3816"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/>QCString<sp/>qm;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(showStatic)</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isStatic())<sp/>qm=</highlight><highlight class="stringliteral">&quot;+<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>qm=</highlight><highlight class="stringliteral">&quot;-<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/>qm+=<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!localLink)<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>method<sp/>of<sp/>same<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/>qm+=</highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/>qm+=m_impl-&gt;classDef-&gt;name();</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>qm+=</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qm;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::declaration()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3833"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;decl;<sp/></highlight></codeline>
<codeline lineno="3835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::definition()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3838"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;def;</highlight></codeline>
<codeline lineno="3840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::extraTypeChars()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3843"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;extraTypeChars;</highlight></codeline>
<codeline lineno="3845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::typeString()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3848"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;type;<sp/></highlight></codeline>
<codeline lineno="3850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::argsString()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3853"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;args;<sp/></highlight></codeline>
<codeline lineno="3855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::excpString()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3858"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;exception;<sp/></highlight></codeline>
<codeline lineno="3860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::bitfieldString()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3863"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;bitfields;<sp/></highlight></codeline>
<codeline lineno="3865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;MemberDef::initializer()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3868"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;initializer;<sp/></highlight></codeline>
<codeline lineno="3870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MemberDef::initializerLines()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3873"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;initLines;<sp/></highlight></codeline>
<codeline lineno="3875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal">uint64<sp/>MemberDef::getMemberSpecifiers()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3878"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;memSpec;<sp/></highlight></codeline>
<codeline lineno="3880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*MemberDef::getClassDef()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3883"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;classDef;<sp/></highlight></codeline>
<codeline lineno="3885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/>*MemberDef::getFileDef()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3888"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;fileDef;<sp/></highlight></codeline>
<codeline lineno="3890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>*<sp/>MemberDef::getNamespaceDef()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3893"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;nspace;<sp/></highlight></codeline>
<codeline lineno="3895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"></highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::getReadAccessor()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3898"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;read;<sp/></highlight></codeline>
<codeline lineno="3900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::getWriteAccessor()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3903"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;write;<sp/></highlight></codeline>
<codeline lineno="3905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*MemberDef::getGroupDef()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3908"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;group;<sp/></highlight></codeline>
<codeline lineno="3910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><ref refid="d7/d59/struct_grouping_1a9f0ec5ab376b083ebe3274ea79fd2d70" kindref="member" tooltip="Grouping priority.">Grouping::GroupPri_t</ref><sp/>MemberDef::getGroupPri()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3913"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;grouppri;<sp/></highlight></codeline>
<codeline lineno="3915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MemberDef::getGroupFileName()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3918"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;groupFileName;<sp/></highlight></codeline>
<codeline lineno="3920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MemberDef::getGroupStartLine()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3923"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;groupStartLine;<sp/></highlight></codeline>
<codeline lineno="3925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::getGroupHasDocs()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3928"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;groupHasDocs;<sp/></highlight></codeline>
<codeline lineno="3930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>MemberDef::protection()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3933"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;prot;<sp/></highlight></codeline>
<codeline lineno="3935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal">MemberType<sp/>MemberDef::memberType()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3938"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype;<sp/></highlight></codeline>
<codeline lineno="3940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isSignal()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3943"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Signal;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isSlot()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3948"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Slot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isVariable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3953"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Variable;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isEnumerate()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3958"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Enumeration;<sp/></highlight></codeline>
<codeline lineno="3960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isEnumValue()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3963"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_EnumValue;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isTypedef()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3968"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Typedef;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isFunction()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3973"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Function;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isFunctionPtr()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3978"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Variable<sp/>&amp;&amp;<sp/>QCString(argsString()).find(</highlight><highlight class="stringliteral">&quot;)(&quot;</highlight><highlight class="normal">)!=-1;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDefine()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3983"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Define;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isFriend()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3988"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Friend;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDCOP()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3993"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_DCOP;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isProperty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3998"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Property;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isEvent()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4003"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;mtype==MemberType_Event;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isRelated()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4008"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;related<sp/>==<sp/>Related;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isForeign()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4013"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;related<sp/>==<sp/>Foreign;<sp/></highlight></codeline>
<codeline lineno="4015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isStatic()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4018"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;stat;<sp/></highlight></codeline>
<codeline lineno="4020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isInline()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4023"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Inline)!=0;<sp/></highlight></codeline>
<codeline lineno="4025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isExplicit()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4028"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Explicit)!=0;<sp/></highlight></codeline>
<codeline lineno="4030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isMutable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4033"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Mutable)!=0;<sp/></highlight></codeline>
<codeline lineno="4035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isGettable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4038"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Gettable)!=0;<sp/></highlight></codeline>
<codeline lineno="4040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isSettable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4043"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Settable)!=0;<sp/></highlight></codeline>
<codeline lineno="4045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isAddable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4048"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Addable)!=0;<sp/></highlight></codeline>
<codeline lineno="4050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isRemovable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4053"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Removable)!=0;<sp/></highlight></codeline>
<codeline lineno="4055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isRaisable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4058"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Raisable)!=0;<sp/></highlight></codeline>
<codeline lineno="4060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isReadable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4063"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Readable)!=0;<sp/></highlight></codeline>
<codeline lineno="4065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isWritable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4068"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Writable)!=0;<sp/></highlight></codeline>
<codeline lineno="4070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isFinal()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4073"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Final)!=0;<sp/></highlight></codeline>
<codeline lineno="4075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isNew()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4078"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::New)!=0;<sp/></highlight></codeline>
<codeline lineno="4080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isSealed()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4083"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Sealed)!=0;<sp/></highlight></codeline>
<codeline lineno="4085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isOverride()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4088"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Override)!=0;<sp/></highlight></codeline>
<codeline lineno="4090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isInitonly()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4093"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Initonly)!=0;<sp/></highlight></codeline>
<codeline lineno="4095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isAbstract()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4098"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Abstract)!=0;<sp/></highlight></codeline>
<codeline lineno="4100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isOptional()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4103"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Optional)!=0;<sp/></highlight></codeline>
<codeline lineno="4105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isRequired()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4108"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Required)!=0;<sp/></highlight></codeline>
<codeline lineno="4110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isNonAtomic()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4113"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::NonAtomic)!=0;<sp/></highlight></codeline>
<codeline lineno="4115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isCopy()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4118"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Copy)!=0;<sp/></highlight></codeline>
<codeline lineno="4120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isAssign()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4123"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Assign)!=0;<sp/></highlight></codeline>
<codeline lineno="4125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isRetain()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4128"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Retain)!=0;<sp/></highlight></codeline>
<codeline lineno="4130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isWeak()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4133"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Weak)!=0;<sp/></highlight></codeline>
<codeline lineno="4135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isStrong()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4138"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Strong)!=0;<sp/></highlight></codeline>
<codeline lineno="4140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isUnretained()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4143"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Unretained)!=0;<sp/></highlight></codeline>
<codeline lineno="4145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isAlias()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4148"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Alias)!=0;</highlight></codeline>
<codeline lineno="4150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDefault()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4153"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Default)!=0;</highlight></codeline>
<codeline lineno="4155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDelete()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4158"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Delete)!=0;</highlight></codeline>
<codeline lineno="4160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isNoExcept()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4163"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::NoExcept)!=0;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isAttribute()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4168"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Attribute)!=0;</highlight></codeline>
<codeline lineno="4170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isUNOProperty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4173"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Property)!=0;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isReadonly()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4178"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Readonly)!=0;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isBound()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4183"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Bound)!=0;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isConstrained()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4188"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Constrained)!=0;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isTransient()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4193"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Transient)!=0;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isMaybeVoid()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4198"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::MaybeVoid)!=0;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isMaybeDefault()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4203"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::MaybeDefault)!=0;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isMaybeAmbiguous()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4208"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::MaybeAmbiguous)!=0;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isPublished()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4213"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_impl-&gt;memSpec&amp;Entry::Published)!=0;</highlight></codeline>
<codeline lineno="4215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"></highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isImplementation()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4219"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;implOnly;<sp/></highlight></codeline>
<codeline lineno="4221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isExternal()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4224"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;explExt;<sp/></highlight></codeline>
<codeline lineno="4226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isTemplateSpecialization()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4229"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;tspec;<sp/></highlight></codeline>
<codeline lineno="4231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::hasDocumentedParams()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4234"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;hasDocumentedParams;<sp/></highlight></codeline>
<codeline lineno="4236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::hasDocumentedReturnType()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4239"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;hasDocumentedReturnType;<sp/></highlight></codeline>
<codeline lineno="4241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::showInCallGraph()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4244"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isFunction()<sp/>||<sp/></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSlot()<sp/>||<sp/></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isConstructor()<sp/>||</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isDestructor()<sp/>||<sp/></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isObjCMethod();</highlight></codeline>
<codeline lineno="4250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*MemberDef::relatedAlso()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4253"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;relatedAlso;<sp/></highlight></codeline>
<codeline lineno="4255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::hasDocumentedEnumValues()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4258"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;docEnumValues;<sp/></highlight></codeline>
<codeline lineno="4260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::getAnonymousEnumType()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4263"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;annEnumType;<sp/></highlight></codeline>
<codeline lineno="4265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isDocsForDefinition()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4268"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;docsForDefinition;<sp/></highlight></codeline>
<codeline lineno="4270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::getEnumScope()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4273"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;enumScope;<sp/></highlight></codeline>
<codeline lineno="4275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*MemberDef::enumFieldList()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4278"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;enumFields;<sp/></highlight></codeline>
<codeline lineno="4280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><ref refid="d0/d31/class_example_s_dict" kindref="compound" tooltip="A sorted dictionary of Example objects.">ExampleSDict</ref><sp/>*MemberDef::getExamples()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4283"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;exampleSDict;<sp/></highlight></codeline>
<codeline lineno="4285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isPrototype()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4288"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;proto;<sp/></highlight></codeline>
<codeline lineno="4290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*MemberDef::argumentList()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4293"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;defArgList;<sp/></highlight></codeline>
<codeline lineno="4295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*MemberDef::declArgumentList()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4298"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;declArgList;<sp/></highlight></codeline>
<codeline lineno="4300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*MemberDef::templateArguments()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4303"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;tArgList;<sp/></highlight></codeline>
<codeline lineno="4305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>*MemberDef::definitionTemplateParameterLists()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4308"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;defTmpArgLists;<sp/></highlight></codeline>
<codeline lineno="4310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MemberDef::getMemberGroupId()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4313"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;grpId;<sp/></highlight></codeline>
<codeline lineno="4315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><ref refid="da/d32/class_member_group" kindref="compound" tooltip="A class representing a group of members.">MemberGroup</ref><sp/>*MemberDef::getMemberGroup()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4318"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;memberGroup;<sp/></highlight></codeline>
<codeline lineno="4320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::fromAnonymousScope()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4323"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;annScope;<sp/></highlight></codeline>
<codeline lineno="4325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::anonymousDeclShown()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4328"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;annUsed;<sp/></highlight></codeline>
<codeline lineno="4330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setAnonymousUsed()<sp/></highlight></codeline>
<codeline lineno="4333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/>m_impl-&gt;annUsed<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="4335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::hasCallGraph()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4338"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;hasCallGraph;<sp/></highlight></codeline>
<codeline lineno="4340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::hasCallerGraph()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4343"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;hasCallerGraph;<sp/></highlight></codeline>
<codeline lineno="4345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::templateMaster()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4348"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;templateMaster;<sp/></highlight></codeline>
<codeline lineno="4350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MemberDef::isTypedefValCached()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4353"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;isTypedefValCached;<sp/></highlight></codeline>
<codeline lineno="4355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*MemberDef::getCachedTypedefVal()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4358"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;cachedTypedefValue;<sp/></highlight></codeline>
<codeline lineno="4360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal">QCString<sp/>MemberDef::getCachedTypedefTemplSpec()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4363"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;cachedTypedefTemplSpec;<sp/></highlight></codeline>
<codeline lineno="4365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal">QCString<sp/>MemberDef::getCachedResolvedTypedef()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4368"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MemberDef::getCachedResolvedTypedef()=%s<sp/>m_impl=%p\n&quot;,m_impl-&gt;cachedResolvedType.data(),m_impl);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;cachedResolvedType;<sp/></highlight></codeline>
<codeline lineno="4371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::memberDefinition()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4374"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;memDef;<sp/></highlight></codeline>
<codeline lineno="4376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::memberDeclaration()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4379"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;memDec;<sp/></highlight></codeline>
<codeline lineno="4381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::inheritsDocsFrom()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4384"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;docProvider;<sp/></highlight></codeline>
<codeline lineno="4386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::getGroupAlias()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4389"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;groupAlias;<sp/></highlight></codeline>
<codeline lineno="4391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setMemberType(MemberType<sp/>t)</highlight></codeline>
<codeline lineno="4394"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/>m_impl-&gt;mtype=t;<sp/></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"></highlight></codeline>
<codeline lineno="4399"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setDefinition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d)</highlight></codeline>
<codeline lineno="4400"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/>m_impl-&gt;def=d;<sp/></highlight></codeline>
<codeline lineno="4402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setFileDef(<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd)</highlight></codeline>
<codeline lineno="4405"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/>m_impl-&gt;fileDef=fd;<sp/></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/>m_isConstructorCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/>m_isDestructorCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setProtection(<ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>p)</highlight></codeline>
<codeline lineno="4413"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/>m_impl-&gt;prot=p;<sp/></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setMemberSpecifiers(uint64<sp/>s)</highlight></codeline>
<codeline lineno="4419"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/>m_impl-&gt;memSpec=s;<sp/></highlight></codeline>
<codeline lineno="4421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::mergeMemberSpecifiers(uint64<sp/>s)</highlight></codeline>
<codeline lineno="4424"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/>m_impl-&gt;memSpec|=s;<sp/></highlight></codeline>
<codeline lineno="4426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setBitfields(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="4429"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/>m_impl-&gt;bitfields<sp/>=<sp/>s;<sp/></highlight></codeline>
<codeline lineno="4431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setMaxInitLines(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lines)</highlight></codeline>
<codeline lineno="4434"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines!=-1)</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;userInitLines=lines;<sp/></highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setExplicitExternal(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4442"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>m_impl-&gt;explExt=b;<sp/></highlight></codeline>
<codeline lineno="4444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setReadAccessor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*r)</highlight></codeline>
<codeline lineno="4447"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/>m_impl-&gt;read=r;<sp/></highlight></codeline>
<codeline lineno="4449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setWriteAccessor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*w)</highlight></codeline>
<codeline lineno="4452"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/>m_impl-&gt;write=w;<sp/></highlight></codeline>
<codeline lineno="4454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"></highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setTemplateSpecialization(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4457"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/>m_impl-&gt;tspec=b;<sp/></highlight></codeline>
<codeline lineno="4459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::makeRelated()</highlight></codeline>
<codeline lineno="4462"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/>m_impl-&gt;related<sp/>=<sp/>Related;<sp/></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::makeForeign()</highlight></codeline>
<codeline lineno="4468"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/>m_impl-&gt;related<sp/>=<sp/>Foreign;<sp/></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setHasDocumentedParams(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4474"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/>m_impl-&gt;hasDocumentedParams<sp/>=<sp/>b;<sp/></highlight></codeline>
<codeline lineno="4476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setHasDocumentedReturnType(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4479"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/>m_impl-&gt;hasDocumentedReturnType<sp/>=<sp/>b;<sp/></highlight></codeline>
<codeline lineno="4481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setInheritsDocsFrom(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="4484"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>m_impl-&gt;docProvider<sp/>=<sp/>md;<sp/></highlight></codeline>
<codeline lineno="4486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setArgsString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*as)</highlight></codeline>
<codeline lineno="4489"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/>m_impl-&gt;args<sp/>=<sp/>as;<sp/></highlight></codeline>
<codeline lineno="4491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setRelatedAlso(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd)</highlight></codeline>
<codeline lineno="4494"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/>m_impl-&gt;relatedAlso=cd;<sp/></highlight></codeline>
<codeline lineno="4496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setEnumClassScope(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd)</highlight></codeline>
<codeline lineno="4499"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/>m_impl-&gt;classDef<sp/>=<sp/>cd;<sp/></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/>m_isConstructorCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="4503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setDocumentedEnumValues(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="4506"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/>m_impl-&gt;docEnumValues=value;<sp/></highlight></codeline>
<codeline lineno="4508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setAnonymousEnumType(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="4511"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/>m_impl-&gt;annEnumType<sp/>=<sp/>md;<sp/></highlight></codeline>
<codeline lineno="4513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setPrototype(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="4516"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/>m_impl-&gt;proto=p;<sp/></highlight></codeline>
<codeline lineno="4518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setMemberGroupId(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4521"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/>m_impl-&gt;grpId=id;<sp/></highlight></codeline>
<codeline lineno="4523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::makeImplementationDetail()</highlight></codeline>
<codeline lineno="4526"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/>m_impl-&gt;implOnly=TRUE;<sp/></highlight></codeline>
<codeline lineno="4528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setFromAnonymousScope(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4531"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/>m_impl-&gt;annScope=b;<sp/></highlight></codeline>
<codeline lineno="4533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setFromAnonymousMember(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*m)</highlight></codeline>
<codeline lineno="4536"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/>m_impl-&gt;annMemb=m;<sp/></highlight></codeline>
<codeline lineno="4538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setTemplateMaster(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mt)</highlight></codeline>
<codeline lineno="4541"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/>m_impl-&gt;templateMaster=mt;<sp/></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/>m_isLinkableCached<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="4544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setDocsForDefinition(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4547"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/>m_impl-&gt;docsForDefinition<sp/>=<sp/>b;<sp/></highlight></codeline>
<codeline lineno="4549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"></highlight></codeline>
<codeline lineno="4551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setGroupAlias(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="4552"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/>m_impl-&gt;groupAlias<sp/>=<sp/>md;<sp/></highlight></codeline>
<codeline lineno="4554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::invalidateTypedefValCache()</highlight></codeline>
<codeline lineno="4557"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/>m_impl-&gt;isTypedefValCached=FALSE;<sp/></highlight></codeline>
<codeline lineno="4559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setMemberDefinition(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="4562"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/>m_impl-&gt;memDef=md;<sp/></highlight></codeline>
<codeline lineno="4564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setMemberDeclaration(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="4567"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/>m_impl-&gt;memDec=md;<sp/></highlight></codeline>
<codeline lineno="4569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*MemberDef::category()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4572"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;category;</highlight></codeline>
<codeline lineno="4574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setCategory(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*def)</highlight></codeline>
<codeline lineno="4577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/>m_impl-&gt;category<sp/>=<sp/>def;</highlight></codeline>
<codeline lineno="4579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*MemberDef::categoryRelation()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4582"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;categoryRelation;</highlight></codeline>
<codeline lineno="4584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setCategoryRelation(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md)</highlight></codeline>
<codeline lineno="4587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/>m_impl-&gt;categoryRelation<sp/>=<sp/>md;</highlight></codeline>
<codeline lineno="4589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::setEnumBaseType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;type)</highlight></codeline>
<codeline lineno="4592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/>m_impl-&gt;enumBaseType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="4594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal">QCString<sp/>MemberDef::enumBaseType()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4597"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_impl-&gt;enumBaseType;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::cacheTypedefVal(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>*val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;<sp/>templSpec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;resolvedType)</highlight></codeline>
<codeline lineno="4603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/>m_impl-&gt;isTypedefValCached=TRUE;<sp/></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/>m_impl-&gt;cachedTypedefValue=val;<sp/></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/>m_impl-&gt;cachedTypedefTemplSpec=templSpec;<sp/></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/>m_impl-&gt;cachedResolvedType=resolvedType;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MemberDef::cacheTypedefVal=%s<sp/>m_impl=%p\n&quot;,m_impl-&gt;cachedResolvedType.data(),m_impl);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"></highlight></codeline>
<codeline lineno="4611"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::copyArgumentNames(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bmd)</highlight></codeline>
<codeline lineno="4612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*arguments<sp/>=<sp/>bmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;defArgList<sp/>&amp;&amp;<sp/>arguments)</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>aliDst(*m_impl-&gt;defArgList);</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>aliSrc(*arguments);</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*argDst,<sp/>*argSrc;</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(argDst=aliDst.current())<sp/>&amp;&amp;<sp/>(argSrc=aliSrc.current());++aliDst,++aliSrc)</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argDst-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>argSrc-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*arguments<sp/>=<sp/>bmd-&gt;declArgumentList();</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_impl-&gt;declArgList<sp/>&amp;&amp;<sp/>arguments)</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>aliDst(*m_impl-&gt;declArgList);</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>aliSrc(*arguments);</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*argDst,<sp/>*argSrc;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(argDst=aliDst.current())<sp/>&amp;&amp;<sp/>(argSrc=aliSrc.current());++aliDst,++aliSrc)</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argDst-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>argSrc-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"></highlight></codeline>
<codeline lineno="4641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invalidateCachedTypesInArgumentList(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al)</highlight></codeline>
<codeline lineno="4642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al)</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>ali(*al);</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();(a=ali.current());++ali)</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>.resize(0);</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::invalidateCachedArgumentTypes()</highlight></codeline>
<codeline lineno="4655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/>invalidateCachedTypesInArgumentList(m_impl-&gt;defArgList);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/>invalidateCachedTypesInArgumentList(m_impl-&gt;declArgList);</highlight></codeline>
<codeline lineno="4658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"></highlight><highlight class="comment">//----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"></highlight></codeline>
<codeline lineno="4662" refid="da/d09/class_member_def_1aec31a151e35b9512b33a4592fedf423d" refkind="member"><highlight class="normal">QCString<sp/><ref refid="da/d09/class_member_def_1aec31a151e35b9512b33a4592fedf423d" kindref="member">MemberDef::displayName</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="4663"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">Definition::name</ref>();<sp/></highlight></codeline>
<codeline lineno="4665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MemberDef::_addToSearchIndex()</highlight></codeline>
<codeline lineno="4668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>search<sp/>index<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::searchIndex<sp/>&amp;&amp;<sp/><ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>())</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;setCurrentDoc(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),FALSE);</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>ln=<ref refid="d5/dcc/class_definition_1ae4fa9ca0807ec16be5b9b4606a5f4ba9" kindref="member">localName</ref>(),qn=<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;addWord(ln,TRUE);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ln!=qn)</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;addWord(qn,TRUE);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClassDef())</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;addWord(getClassDef()-&gt;<ref refid="da/d09/class_member_def_1aec31a151e35b9512b33a4592fedf423d" kindref="member">displayName</ref>(),TRUE);</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getNamespaceDef())</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;addWord(getNamespaceDef()-&gt;<ref refid="da/d09/class_member_def_1aec31a151e35b9512b33a4592fedf423d" kindref="member">displayName</ref>(),TRUE);</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight><highlight class="comment">//----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transferArgumentDocumentation(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*decAl,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*defAl)</highlight></codeline>
<codeline lineno="4695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decAl<sp/>&amp;&amp;<sp/>defAl)</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>decAli(*decAl);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>defAli(*defAl);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*decA,*defA;</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(decAli.toFirst(),defAli.toFirst();</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(decA=decAli.current())<sp/>&amp;&amp;<sp/>(defA=defAli.current());</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++decAli,++defAli)</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Argument<sp/>decA-&gt;name=%s<sp/>(doc=%s)<sp/>defA-&gt;name=%s<sp/>(doc=%s)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>decA-&gt;name.data(),decA-&gt;docs.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>defA-&gt;name.data(),defA-&gt;docs.data()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!defA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty())</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref><sp/>=<sp/>defA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.copy();</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!decA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty())</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref><sp/>=<sp/>decA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.copy();</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>combineDeclarationAndDefinition(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mdec,<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mdef)</highlight></codeline>
<codeline lineno="4722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;mdec=%s<sp/>isPrototype()=%d\n&quot;,mdec-&gt;name().data(),mdec-&gt;isPrototype());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(mdef-&gt;isFunction()<sp/>&amp;&amp;<sp/>!mdef-&gt;isStatic()<sp/>&amp;&amp;<sp/>!mdef-&gt;isPrototype())<sp/>||</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(mdef-&gt;isVariable()<sp/>&amp;&amp;<sp/>!mdef-&gt;isExternal()<sp/>&amp;&amp;<sp/>!mdef-&gt;isStatic())</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;mdef=(%p,%s)<sp/>mdec=(%p,%s)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mdef,<sp/>mdef<sp/>?<sp/>mdef-&gt;name().data()<sp/>:<sp/>&quot;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mdec,<sp/>mdec<sp/>?<sp/>mdec-&gt;name().data()<sp/>:<sp/>&quot;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdefAl<sp/>=<sp/>mdef-&gt;argumentList();</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdecAl<sp/>=<sp/>mdec-&gt;argumentList();</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchArguments2(mdef-&gt;getOuterScope(),mdef-&gt;getFileDef(),mdefAl,</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;getOuterScope(),mdec-&gt;getFileDef(),mdecAl,</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">/*<sp/>match<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>member<sp/>%s:<sp/>definition<sp/>in<sp/>%s<sp/>(doc=`%s&apos;)<sp/>and<sp/>declaration<sp/>in<sp/>%s<sp/>(doc=`%s&apos;)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mn-&gt;memberName(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mdef-&gt;getFileDef()-&gt;name().data(),mdef-&gt;documentation().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mdec-&gt;getFileDef()-&gt;name().data(),mdec-&gt;documentation().data()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>merge<sp/>argument<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transferArgumentDocumentation(mdecAl,mdefAl);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"></highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>documentation<sp/>between<sp/>function<sp/>definition<sp/>and<sp/>declaration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mdec-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty())</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(mdec-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),mdec-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),mdec-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>());</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mdef-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty())</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(mdef-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),mdef-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),mdef-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>());</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mdef-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;transferring<sp/>docs<sp/>mdef-&gt;mdec<sp/>(%s-&gt;%s)\n&quot;,mdef-&gt;argsString(),mdec-&gt;argsString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(mdef-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),mdef-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),mdef-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>());</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;setDocsForDefinition(mdef-&gt;isDocsForDefinition());</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdefAl!=0)</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdefAlComb<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(mdef-&gt;argsString(),mdefAlComb);</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transferArgumentDocumentation(mdefAl,mdefAlComb);</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;setArgumentList(mdefAlComb);</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mdec-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;transferring<sp/>docs<sp/>mdec-&gt;mdef<sp/>(%s-&gt;%s)\n&quot;,mdec-&gt;argsString(),mdef-&gt;argsString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(mdec-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),mdec-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),mdec-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>());</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;setDocsForDefinition(mdec-&gt;isDocsForDefinition());</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdecAl!=0)</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdecAlComb<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(mdec-&gt;argsString(),mdecAlComb);</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transferArgumentDocumentation(mdecAl,mdecAlComb);</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;setDeclArgumentList(mdecAlComb);</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mdef-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(mdef-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>(),mdef-&gt;<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),mdef-&gt;<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>());</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mdec-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(mdec-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>(),mdec-&gt;<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),mdec-&gt;<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>());</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdec-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()!=-1<sp/>&amp;&amp;<sp/>mdef-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()==-1)</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;body<sp/>mdec-&gt;mdef<sp/>%d-%d\n&quot;,mdec-&gt;getStartBodyLine(),mdef-&gt;getEndBodyLine());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;setBodySegment(mdec-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),mdec-&gt;<ref refid="d5/dcc/class_definition_1a11056f29c65e1dddc184036bce5d5456" kindref="member">getEndBodyLine</ref>());</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;setBodyDef(mdec-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>());</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mdef-&gt;setBodyMember(mdec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdef-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()!=-1<sp/>&amp;&amp;<sp/>mdec-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()==-1)</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;body<sp/>mdef-&gt;mdec<sp/>%d-%d\n&quot;,mdef-&gt;getStartBodyLine(),mdec-&gt;getEndBodyLine());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;setBodySegment(mdef-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),mdef-&gt;<ref refid="d5/dcc/class_definition_1a11056f29c65e1dddc184036bce5d5456" kindref="member">getEndBodyLine</ref>());</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;setBodyDef(mdef-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>());</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mdec-&gt;setBodyMember(mdef);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;mergeMemberSpecifiers(mdef-&gt;getMemberSpecifiers());</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;mergeMemberSpecifiers(mdec-&gt;getMemberSpecifiers());</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>group<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdec-&gt;getGroupDef()==0<sp/>&amp;&amp;<sp/>mdef-&gt;getGroupDef()!=0)</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;setGroupDef(mdef-&gt;getGroupDef(),</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;getGroupPri(),</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;<ref refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" kindref="member">hasDocumentation</ref>(),</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdef-&gt;getGroupDef()==0<sp/>&amp;&amp;<sp/>mdec-&gt;getGroupDef()!=0)</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;setGroupDef(mdec-&gt;getGroupDef(),</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;getGroupPri(),</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;<ref refid="da/d09/class_member_def_1ac662db7a0c2689f70ec87f6c595bc033" kindref="member">hasDocumentation</ref>(),</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;mergeRefItems(mdef);</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;mergeRefItems(mdec);</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"></highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;setMemberDeclaration(mdec);</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;setMemberDefinition(mdef);</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;enableCallGraph(mdec-&gt;hasCallGraph()<sp/>||<sp/>mdef-&gt;hasCallGraph());</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;enableCallerGraph(mdec-&gt;hasCallerGraph()<sp/>||<sp/>mdef-&gt;hasCallerGraph());</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;enableCallGraph(mdec-&gt;hasCallGraph()<sp/>||<sp/>mdef-&gt;hasCallGraph());</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;enableCallerGraph(mdec-&gt;hasCallerGraph()<sp/>||<sp/>mdef-&gt;hasCallerGraph());</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/memberdef.cpp"/>
  </compounddef>
</doxygen>

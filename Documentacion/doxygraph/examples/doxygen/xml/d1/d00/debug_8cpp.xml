<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="d1/d00/debug_8cpp" kind="file">
    <compoundname>debug.cpp</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">qdict.h</includes>
    <includes refid="db/d16/debug_8h" local="yes">debug.h</includes>
    <incdepgraph>
      <node id="778">
        <label>stdarg.h</label>
      </node>
      <node id="777">
        <label>src/debug.cpp</label>
        <link refid="debug.cpp"/>
        <childnode refid="778" relation="include">
        </childnode>
        <childnode refid="779" relation="include">
        </childnode>
        <childnode refid="780" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
      </node>
      <node id="781">
        <label>debug.h</label>
        <link refid="db/d16/debug_8h_source"/>
      </node>
      <node id="780">
        <label>qdict.h</label>
      </node>
      <node id="779">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="df/da0/struct_label_map" prot="public">LabelMap</innerclass>
    <innerclass refid="db/dc1/class_label_mapper" prot="public">LabelMapper</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d1/d00/debug_8cpp_1a7a3b93a6a59a1b5519be6dbb94ac3f80" prot="public" static="yes" mutable="no">
        <type>LabelMap</type>
        <definition>LabelMap s_labels[]</definition>
        <argsstring>[]</argsstring>
        <name>s_labels</name>
        <initializer>=
{
  { &quot;findmembers&quot;,  Debug::FindMembers  },
  { &quot;functions&quot;,    Debug::Functions    },
  { &quot;variables&quot;,    Debug::Variables    },
  { &quot;preprocessor&quot;, Debug::Preprocessor },
  { &quot;classes&quot;,      Debug::Classes      },
  { &quot;commentcnv&quot;,   Debug::CommentCnv   },
  { &quot;commentscan&quot;,  Debug::CommentScan  },
  { &quot;validate&quot;,     Debug::Validate     },
  { &quot;printtree&quot;,    Debug::PrintTree    },
  { &quot;time&quot;,         Debug::Time         },
  { &quot;extcmd&quot;,       Debug::ExtCmd       },
  { &quot;markdown&quot;,     Debug::Markdown     },
  { &quot;filteroutput&quot;, Debug::FilterOutput },
  { 0,             (Debug::DebugMask)0  }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/debug.cpp" line="50" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/debug.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d00/debug_8cpp_1a2a73849d6cfb04b5f6bd8c4e14d9d8a1" prot="public" static="yes" mutable="no">
        <type>LabelMapper</type>
        <definition>LabelMapper g_labelMapper</definition>
        <argsstring></argsstring>
        <name>g_labelMapper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/debug.cpp" line="75" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/debug.cpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/d00/debug_8cpp_1ab0e7c1c65faa8a93f66df97413e4056e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int labelToEnumValue</definition>
        <argsstring>(const char *l)</argsstring>
        <name>labelToEnumValue</name>
        <param>
          <type>const char *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/debug.cpp" line="94" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/debug.cpp" bodystart="93" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>debug.cpp,v<sp/>1.7<sp/>2001/03/19<sp/>19:27:40<sp/>root<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1997-2013<sp/>by<sp/>Dimitri<sp/>van<sp/>Heesch.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and<sp/>distribute<sp/>this<sp/>software<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>documentation<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>is<sp/>hereby<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>granted.<sp/>No<sp/>representations<sp/>are<sp/>made<sp/>about<sp/>the<sp/>suitability<sp/>of<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>for<sp/>any<sp/>purpose.<sp/>It<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;<sp/>without<sp/>express<sp/>or<sp/>implied<sp/>warranty.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Documents<sp/>produced<sp/>by<sp/>Doxygen<sp/>are<sp/>derivative<sp/>works<sp/>derived<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>input<sp/>used<sp/>in<sp/>their<sp/>production;<sp/>they<sp/>are<sp/>not<sp/>affected<sp/>by<sp/>this<sp/>license.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qdict.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LabelMap</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>Debug::DebugMask<sp/>event;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LabelMap<sp/>s_labels[]<sp/>=</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;findmembers&quot;</highlight><highlight class="normal">,<sp/><sp/>Debug::FindMembers<sp/><sp/>},</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;functions&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>Debug::Functions<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;variables&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>Debug::Variables<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;preprocessor&quot;</highlight><highlight class="normal">,<sp/>Debug::Preprocessor<sp/>},</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;classes&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>Debug::Classes<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;commentcnv&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>Debug::CommentCnv<sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;commentscan&quot;</highlight><highlight class="normal">,<sp/><sp/>Debug::CommentScan<sp/><sp/>},</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;validate&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>Debug::Validate<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;printtree&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>Debug::PrintTree<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::Time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;extcmd&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::ExtCmd<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;markdown&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>Debug::Markdown<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;filteroutput&quot;</highlight><highlight class="normal">,<sp/>Debug::FilterOutput<sp/>},</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Debug::DebugMask)0<sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keyword">class<sp/></highlight><highlight class="normal">LabelMapper</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>LabelMapper()<sp/>:<sp/>m_map(17)<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_map.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LabelMap<sp/>*p<sp/>=<sp/>s_labels;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p-&gt;name)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_map.insert(p-&gt;name,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Debug::DebugMask(p-&gt;event));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::DebugMask<sp/>*find(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_map.find(s);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>QDict&lt;Debug::DebugMask&gt;<sp/>m_map;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LabelMapper<sp/>g_labelMapper;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">Debug::DebugMask<sp/>Debug::curMask<sp/>=<sp/>Debug::Quiet;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Debug::curPrio<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Debug::print(DebugMask<sp/>mask,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,...)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((curMask&amp;mask)<sp/>&amp;&amp;<sp/>prio&lt;=curPrio)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,fmt);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>vfprintf(stdout,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>labelToEnumValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*l)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>QCString<sp/>label=l;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>Debug::DebugMask<sp/>*</highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>g_labelMapper.find(label.lower());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*event;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Debug::setFlag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lab)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>curMask<sp/>=<sp/>(DebugMask)(curMask<sp/>|<sp/>labelToEnumValue(lab));<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Debug::clearFlag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lab)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>curMask<sp/>=<sp/>(DebugMask)(curMask<sp/>&amp;<sp/>~labelToEnumValue(lab));</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Debug::setPriority(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>curPrio<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Debug::isFlagSet(DebugMask<sp/>mask)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(curMask<sp/>&amp;<sp/>mask)!=0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/debug.cpp"/>
  </compounddef>
</doxygen>

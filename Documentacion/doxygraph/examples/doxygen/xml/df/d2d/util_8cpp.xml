<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="df/d2d/util_8cpp" kind="file">
    <compoundname>util.cpp</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">math.h</includes>
    <includes local="yes">md5.h</includes>
    <includes local="no">qregexp.h</includes>
    <includes local="no">qfileinfo.h</includes>
    <includes local="no">qdir.h</includes>
    <includes local="no">qdatetime.h</includes>
    <includes local="no">qcache.h</includes>
    <includes refid="d8/d3c/util_8h" local="yes">util.h</includes>
    <includes refid="d2/d0d/message_8h" local="yes">message.h</includes>
    <includes refid="d1/da6/classdef_8h" local="yes">classdef.h</includes>
    <includes refid="d4/d3a/filedef_8h" local="yes">filedef.h</includes>
    <includes refid="d1/da1/doxygen_8h" local="yes">doxygen.h</includes>
    <includes refid="d2/db9/outputlist_8h" local="yes">outputlist.h</includes>
    <includes refid="d8/d65/defargs_8h" local="yes">defargs.h</includes>
    <includes refid="d8/dce/language_8h" local="yes">language.h</includes>
    <includes refid="db/d16/config_8h" local="yes">config.h</includes>
    <includes refid="d8/dc3/htmlhelp_8h" local="yes">htmlhelp.h</includes>
    <includes refid="df/d24/example_8h" local="yes">example.h</includes>
    <includes refid="df/dfc/version_8h" local="yes">version.h</includes>
    <includes refid="d1/de6/groupdef_8h" local="yes">groupdef.h</includes>
    <includes refid="d1/d02/reflist_8h" local="yes">reflist.h</includes>
    <includes refid="dd/d66/pagedef_8h" local="yes">pagedef.h</includes>
    <includes refid="db/d16/debug_8h" local="yes">debug.h</includes>
    <includes refid="de/d07/searchindex_8h" local="yes">searchindex.h</includes>
    <includes refid="dd/d66/textdocvisitor_8h" local="yes">textdocvisitor.h</includes>
    <includes refid="d2/de2/portable_8h" local="yes">portable.h</includes>
    <includes refid="da/d55/parserintf_8h" local="yes">parserintf.h</includes>
    <includes refid="d4/de5/bufstr_8h" local="yes">bufstr.h</includes>
    <includes refid="d5/db2/image_8h" local="yes">image.h</includes>
    <includes refid="dd/d72/growbuf_8h" local="yes">growbuf.h</includes>
    <includes refid="d1/dc6/entry_8h" local="yes">entry.h</includes>
    <includes refid="df/d9b/arguments_8h" local="yes">arguments.h</includes>
    <includes refid="dd/d78/memberlist_8h" local="yes">memberlist.h</includes>
    <includes refid="d2/df8/classlist_8h" local="yes">classlist.h</includes>
    <includes refid="d7/d97/namespacedef_8h" local="yes">namespacedef.h</includes>
    <includes refid="d7/dfc/membername_8h" local="yes">membername.h</includes>
    <includes refid="dc/dd6/filename_8h" local="yes">filename.h</includes>
    <includes refid="d9/d11/membergroup_8h" local="yes">membergroup.h</includes>
    <includes refid="d6/d15/dirdef_8h" local="yes">dirdef.h</includes>
    <incdepgraph>
      <node id="5204">
        <label>qcstring.h</label>
      </node>
      <node id="5196">
        <label>qregexp.h</label>
      </node>
      <node id="5223">
        <label>qgstring.h</label>
      </node>
      <node id="5251">
        <label>image.h</label>
        <link refid="d5/db2/image_8h_source"/>
        <childnode refid="5248" relation="include">
        </childnode>
      </node>
      <node id="5227">
        <label>outputgen.h</label>
        <link refid="df/d06/outputgen_8h_source"/>
        <childnode refid="5228" relation="include">
        </childnode>
        <childnode refid="5212" relation="include">
        </childnode>
        <childnode refid="5229" relation="include">
        </childnode>
        <childnode refid="5220" relation="include">
        </childnode>
      </node>
      <node id="5228">
        <label>qstack.h</label>
      </node>
      <node id="5245">
        <label>docparser.h</label>
        <link refid="de/d9c/docparser_8h_source"/>
        <childnode refid="5206" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5204" relation="include">
        </childnode>
        <childnode refid="5244" relation="include">
        </childnode>
        <childnode refid="5246" relation="include">
        </childnode>
      </node>
      <node id="5199">
        <label>qdatetime.h</label>
      </node>
      <node id="5219">
        <label>qstrlist.h</label>
      </node>
      <node id="5252">
        <label>growbuf.h</label>
        <link refid="dd/d72/growbuf_8h_source"/>
        <childnode refid="5191" relation="include">
        </childnode>
        <childnode refid="5253" relation="include">
        </childnode>
      </node>
      <node id="5248">
        <label>qglobal.h</label>
      </node>
      <node id="5256">
        <label>classlist.h</label>
        <link refid="d2/df8/classlist_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5207" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
      </node>
      <node id="5235">
        <label>example.h</label>
        <link refid="df/d24/example_8h_source"/>
        <childnode refid="5204" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
      </node>
      <node id="5222">
        <label>qstring.h</label>
      </node>
      <node id="5226">
        <label>outputlist.h</label>
        <link refid="d2/db9/outputlist_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5212" relation="include">
        </childnode>
        <childnode refid="5227" relation="include">
        </childnode>
      </node>
      <node id="5191">
        <label>stdlib.h</label>
      </node>
      <node id="5236">
        <label>version.h</label>
        <link refid="df/dfc/version_8h_source"/>
      </node>
      <node id="5244">
        <label>docvisitor.h</label>
        <link refid="d2/d3c/docvisitor_8h_source"/>
      </node>
      <node id="5224">
        <label>membergroup.h</label>
        <link refid="d9/d11/membergroup_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
        <childnode refid="5203" relation="include">
        </childnode>
      </node>
      <node id="5190">
        <label>src/util.cpp</label>
        <link refid="util.cpp"/>
        <childnode refid="5191" relation="include">
        </childnode>
        <childnode refid="5192" relation="include">
        </childnode>
        <childnode refid="5193" relation="include">
        </childnode>
        <childnode refid="5194" relation="include">
        </childnode>
        <childnode refid="5195" relation="include">
        </childnode>
        <childnode refid="5196" relation="include">
        </childnode>
        <childnode refid="5197" relation="include">
        </childnode>
        <childnode refid="5198" relation="include">
        </childnode>
        <childnode refid="5199" relation="include">
        </childnode>
        <childnode refid="5200" relation="include">
        </childnode>
        <childnode refid="5201" relation="include">
        </childnode>
        <childnode refid="5205" relation="include">
        </childnode>
        <childnode refid="5207" relation="include">
        </childnode>
        <childnode refid="5211" relation="include">
        </childnode>
        <childnode refid="5218" relation="include">
        </childnode>
        <childnode refid="5226" relation="include">
        </childnode>
        <childnode refid="5230" relation="include">
        </childnode>
        <childnode refid="5231" relation="include">
        </childnode>
        <childnode refid="5233" relation="include">
        </childnode>
        <childnode refid="5234" relation="include">
        </childnode>
        <childnode refid="5235" relation="include">
        </childnode>
        <childnode refid="5236" relation="include">
        </childnode>
        <childnode refid="5237" relation="include">
        </childnode>
        <childnode refid="5238" relation="include">
        </childnode>
        <childnode refid="5239" relation="include">
        </childnode>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5241" relation="include">
        </childnode>
        <childnode refid="5243" relation="include">
        </childnode>
        <childnode refid="5247" relation="include">
        </childnode>
        <childnode refid="5249" relation="include">
        </childnode>
        <childnode refid="5250" relation="include">
        </childnode>
        <childnode refid="5251" relation="include">
        </childnode>
        <childnode refid="5252" relation="include">
        </childnode>
        <childnode refid="5254" relation="include">
        </childnode>
        <childnode refid="5255" relation="include">
        </childnode>
        <childnode refid="5215" relation="include">
        </childnode>
        <childnode refid="5256" relation="include">
        </childnode>
        <childnode refid="5257" relation="include">
        </childnode>
        <childnode refid="5258" relation="include">
        </childnode>
        <childnode refid="5259" relation="include">
        </childnode>
        <childnode refid="5224" relation="include">
        </childnode>
        <childnode refid="5225" relation="include">
        </childnode>
      </node>
      <node id="5193">
        <label>errno.h</label>
      </node>
      <node id="5250">
        <label>bufstr.h</label>
        <link refid="d4/de5/bufstr_8h_source"/>
        <childnode refid="5248" relation="include">
        </childnode>
        <childnode refid="5204" relation="include">
        </childnode>
        <childnode refid="5191" relation="include">
        </childnode>
      </node>
      <node id="5214">
        <label>sortdict.h</label>
        <link refid="d9/d21/sortdict_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5213" relation="include">
        </childnode>
      </node>
      <node id="5215">
        <label>memberlist.h</label>
        <link refid="dd/d78/memberlist_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5216" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
        <childnode refid="5203" relation="include">
        </childnode>
      </node>
      <node id="5209">
        <label>qptrdict.h</label>
      </node>
      <node id="5231">
        <label>language.h</label>
        <link refid="d8/dce/language_8h_source"/>
        <childnode refid="5232" relation="include">
        </childnode>
      </node>
      <node id="5254">
        <label>entry.h</label>
        <link refid="d1/dc6/entry_8h_source"/>
        <childnode refid="5203" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5223" relation="include">
        </childnode>
      </node>
      <node id="5198">
        <label>qdir.h</label>
      </node>
      <node id="5249">
        <label>parserintf.h</label>
        <link refid="da/d55/parserintf_8h_source"/>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5219" relation="include">
        </childnode>
      </node>
      <node id="5259">
        <label>filename.h</label>
        <link refid="dc/dd6/filename_8h_source"/>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5211" relation="include">
        </childnode>
      </node>
      <node id="5200">
        <label>qcache.h</label>
      </node>
      <node id="5207">
        <label>classdef.h</label>
        <link refid="d1/da6/classdef_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5209" relation="include">
        </childnode>
        <childnode refid="5210" relation="include">
        </childnode>
      </node>
      <node id="5242">
        <label>qvector.h</label>
      </node>
      <node id="5205">
        <label>message.h</label>
        <link refid="d2/d0d/message_8h_source"/>
        <childnode refid="5206" relation="include">
        </childnode>
      </node>
      <node id="5201">
        <label>util.h</label>
        <link refid="d8/d3c/util_8h"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5192" relation="include">
        </childnode>
        <childnode refid="5203" relation="include">
        </childnode>
      </node>
      <node id="5213">
        <label>qintdict.h</label>
      </node>
      <node id="5221">
        <label>qiodevice.h</label>
      </node>
      <node id="5233">
        <label>config.h</label>
        <link refid="db/d16/config_8h_source"/>
        <childnode refid="5219" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5220" relation="include">
        </childnode>
      </node>
      <node id="5217">
        <label>sys/types.h</label>
      </node>
      <node id="5239">
        <label>pagedef.h</label>
        <link refid="dd/d66/pagedef_8h_source"/>
        <childnode refid="5210" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
      </node>
      <node id="5253">
        <label>string.h</label>
      </node>
      <node id="5243">
        <label>textdocvisitor.h</label>
        <link refid="dd/d66/textdocvisitor_8h_source"/>
        <childnode refid="5244" relation="include">
        </childnode>
        <childnode refid="5245" relation="include">
        </childnode>
        <childnode refid="5228" relation="include">
        </childnode>
        <childnode refid="5204" relation="include">
        </childnode>
        <childnode refid="5220" relation="include">
        </childnode>
      </node>
      <node id="5203">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="5204" relation="include">
        </childnode>
      </node>
      <node id="5241">
        <label>searchindex.h</label>
        <link refid="de/d07/searchindex_8h_source"/>
        <childnode refid="5213" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5242" relation="include">
        </childnode>
      </node>
      <node id="5202">
        <label>qlist.h</label>
      </node>
      <node id="5220">
        <label>ftextstream.h</label>
        <link refid="df/d83/ftextstream_8h_source"/>
        <childnode refid="5206" relation="include">
        </childnode>
        <childnode refid="5221" relation="include">
        </childnode>
        <childnode refid="5222" relation="include">
        </childnode>
        <childnode refid="5223" relation="include">
        </childnode>
      </node>
      <node id="5194">
        <label>math.h</label>
      </node>
      <node id="5218">
        <label>doxygen.h</label>
        <link refid="d1/da1/doxygen_8h_source"/>
        <childnode refid="5199" relation="include">
        </childnode>
        <childnode refid="5200" relation="include">
        </childnode>
        <childnode refid="5219" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5213" relation="include">
        </childnode>
        <childnode refid="5220" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
        <childnode refid="5224" relation="include">
        </childnode>
        <childnode refid="5225" relation="include">
        </childnode>
        <childnode refid="5215" relation="include">
        </childnode>
      </node>
      <node id="5216">
        <label>memberdef.h</label>
        <link refid="d4/d46/memberdef_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5217" relation="include">
        </childnode>
        <childnode refid="5203" relation="include">
        </childnode>
        <childnode refid="5210" relation="include">
        </childnode>
      </node>
      <node id="5230">
        <label>defargs.h</label>
        <link refid="d8/d65/defargs_8h_source"/>
      </node>
      <node id="5211">
        <label>filedef.h</label>
        <link refid="d4/d3a/filedef_8h_source"/>
        <childnode refid="5212" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5213" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5210" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
        <childnode refid="5215" relation="include">
        </childnode>
      </node>
      <node id="5237">
        <label>groupdef.h</label>
        <link refid="d1/de6/groupdef_8h_source"/>
        <childnode refid="5214" relation="include">
        </childnode>
        <childnode refid="5210" relation="include">
        </childnode>
      </node>
      <node id="5258">
        <label>membername.h</label>
        <link refid="d7/dfc/membername_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5216" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
      </node>
      <node id="5192">
        <label>ctype.h</label>
      </node>
      <node id="5229">
        <label>section.h</label>
        <link refid="d1/d2a/section_8h_source"/>
        <childnode refid="5214" relation="include">
        </childnode>
      </node>
      <node id="5234">
        <label>htmlhelp.h</label>
        <link refid="d8/dc3/htmlhelp_8h_source"/>
        <childnode refid="5219" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5212" relation="include">
        </childnode>
        <childnode refid="5220" relation="include">
        </childnode>
      </node>
      <node id="5238">
        <label>reflist.h</label>
        <link refid="d1/d02/reflist_8h_source"/>
        <childnode refid="5213" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
      </node>
      <node id="5210">
        <label>definition.h</label>
        <link refid="df/da1/definition_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5203" relation="include">
        </childnode>
      </node>
      <node id="5212">
        <label>index.h</label>
        <link refid="d1/db5/index_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5204" relation="include">
        </childnode>
      </node>
      <node id="5197">
        <label>qfileinfo.h</label>
      </node>
      <node id="5225">
        <label>dirdef.h</label>
        <link refid="d6/d15/dirdef_8h_source"/>
        <childnode refid="5214" relation="include">
        </childnode>
        <childnode refid="5210" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
      </node>
      <node id="5240">
        <label>debug.h</label>
        <link refid="db/d16/debug_8h_source"/>
      </node>
      <node id="5208">
        <label>qdict.h</label>
      </node>
      <node id="5247">
        <label>portable.h</label>
        <link refid="d2/de2/portable_8h"/>
        <childnode refid="5217" relation="include">
        </childnode>
        <childnode refid="5206" relation="include">
        </childnode>
        <childnode refid="5248" relation="include">
        </childnode>
      </node>
      <node id="5195">
        <label>md5.h</label>
      </node>
      <node id="5246">
        <label>htmlattrib.h</label>
        <link refid="d0/d73/htmlattrib_8h_source"/>
        <childnode refid="5204" relation="include">
        </childnode>
        <childnode refid="5202" relation="include">
        </childnode>
      </node>
      <node id="5206">
        <label>stdio.h</label>
      </node>
      <node id="5232">
        <label>translator.h</label>
        <link refid="d9/df1/translator_8h_source"/>
        <childnode refid="5207" relation="include">
        </childnode>
      </node>
      <node id="5257">
        <label>namespacedef.h</label>
        <link refid="d7/d97/namespacedef_8h_source"/>
        <childnode refid="5219" relation="include">
        </childnode>
        <childnode refid="5208" relation="include">
        </childnode>
        <childnode refid="5214" relation="include">
        </childnode>
        <childnode refid="5210" relation="include">
        </childnode>
      </node>
      <node id="5255">
        <label>arguments.h</label>
        <link refid="df/d9b/arguments_8h_source"/>
        <childnode refid="5202" relation="include">
        </childnode>
        <childnode refid="5204" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="db/d8f/class_access_stack" prot="public">AccessStack</innerclass>
    <innerclass refid="d3/d6a/struct_access_stack_1_1_access_elem" prot="private">AccessStack::AccessElem</innerclass>
    <innerclass refid="d4/d2f/struct_find_file_cache_elem" prot="public">FindFileCacheElem</innerclass>
    <innerclass refid="d8/def/struct_lang2_ext_map" prot="public">Lang2ExtMap</innerclass>
    <innerclass refid="d1/dc3/struct_marker" prot="public">Marker</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="df/d2d/util_8cpp_1a43e71ffb78a97be1c4c57b2e8233d3cc" prot="public" static="no">
        <name>ENABLE_TRACINGSUPPORT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="65" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d2d/util_8cpp_1a9040e9171d4f2922d9f53f4de3c87646" prot="public" static="no">
        <name>ALGO_COUNT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="82" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d2d/util_8cpp_1a3a4f7129ef14857d63fc04f561aa7e92" prot="public" static="no">
        <name>ALGO_CRC16</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="83" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d2d/util_8cpp_1ac604c569fe2c513a5cb3692df78db41f" prot="public" static="no">
        <name>ALGO_MD5</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="84" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d2d/util_8cpp_1aed1e19508995f49551aeeabead626e5d" prot="public" static="no">
        <name>MAP_ALGO</name>
        <initializer>ALGO_MD5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="88" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d2d/util_8cpp_1a3bcba7d94ad097efd01a67432ec74e17" prot="public" static="no">
        <name>REL_PATH_TO_ROOT</name>
        <initializer>&quot;../../&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="90" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d2d/util_8cpp_1a6fbd908903ad34f115e0726001be8753" prot="public" static="no">
        <name>MATCH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2885" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d2d/util_8cpp_1aba93bf80d1a72561fe6c31b59f172fbc" prot="public" static="no">
        <name>NOMATCH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2886" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d2d/util_8cpp_1af22d5ba911a6c2ccdfb3ba88e52da81f" prot="public" static="no">
        <name>HEXTONUM</name>
        <param><defname>x</defname></param>
        <initializer>(((x)&gt;=&apos;0&apos; &amp;&amp; (x)&lt;=&apos;9&apos;) ? ((x)-&apos;0&apos;) :       \
                     ((x)&gt;=&apos;a&apos; &amp;&amp; (x)&lt;=&apos;f&apos;) ? ((x)-&apos;a&apos;+10) :    \
                     ((x)&gt;=&apos;A&apos; &amp;&amp; (x)&lt;=&apos;F&apos;) ? ((x)-&apos;A&apos;+10) : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7493"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a225f155c4a7035d82bee0b83dec4ae50" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int maxInheritanceDepth</definition>
        <argsstring></argsstring>
        <name>maxInheritanceDepth</name>
        <initializer>= 100000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="147" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a40f8bcc0b54964bcb6fefce151489a56" prot="public" static="yes" mutable="no">
        <type>QDict&lt; <ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> &gt;</type>
        <definition>QDict&lt;MemberDef&gt; g_resolvedTypedefs</definition>
        <argsstring></argsstring>
        <name>g_resolvedTypedefs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="511" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a2a190db9bcecd8a2dfb6b96a2e8b9049" prot="public" static="yes" mutable="no">
        <type>QDict&lt; <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> &gt;</type>
        <definition>QDict&lt;Definition&gt; g_visitedNamespaces</definition>
        <argsstring></argsstring>
        <name>g_visitedNamespaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="512" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a76cb87e7ea8b6d0ffb94d32046b2e698" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_STACK_SIZE</definition>
        <argsstring></argsstring>
        <name>MAX_STACK_SIZE</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="868" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a419de37bf062b329c22225b3b5ca9574" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char constScope[]</definition>
        <argsstring>[]</argsstring>
        <name>constScope</name>
        <initializer>= { &apos;c&apos;, &apos;o&apos;, &apos;n&apos;, &apos;s&apos;, &apos;t&apos;, &apos;:&apos; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1642" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a91948c292467017555c6d8487fbb97df" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char virtualScope[]</definition>
        <argsstring>[]</argsstring>
        <name>virtualScope</name>
        <initializer>= { &apos;v&apos;, &apos;i&apos;, &apos;r&apos;, &apos;t&apos;, &apos;u&apos;, &apos;a&apos;, &apos;l&apos;, &apos;:&apos; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1643" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a9f61465a0f3db3c3ac8e5670ec98743f" prot="public" static="yes" mutable="no">
        <type>QDict&lt; int &gt;</type>
        <definition>QDict&lt;int&gt; g_extLookup</definition>
        <argsstring></argsstring>
        <name>g_extLookup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6593" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a7c2c4bcb75891da159e5344a9a9a4057" prot="public" static="yes" mutable="no">
        <type>struct Lang2ExtMap</type>
        <definition>struct Lang2ExtMap 
 g_lang2extMap[]</definition>
        <argsstring>[]</argsstring>
        <name>g_lang2extMap</name>
        <initializer>=
{

  { &quot;idl&quot;,         &quot;c&quot;,       SrcLangExt_IDL      },
  { &quot;java&quot;,        &quot;c&quot;,       SrcLangExt_Java     },
  { &quot;javascript&quot;,  &quot;c&quot;,       SrcLangExt_JS       },
  { &quot;csharp&quot;,      &quot;c&quot;,       SrcLangExt_CSharp   },
  { &quot;d&quot;,           &quot;c&quot;,       SrcLangExt_D        },
  { &quot;php&quot;,         &quot;c&quot;,       SrcLangExt_PHP      },
  { &quot;objective-c&quot;, &quot;c&quot;,       SrcLangExt_ObjC     },
  { &quot;c&quot;,           &quot;c&quot;,       SrcLangExt_Cpp      },
  { &quot;c++&quot;,         &quot;c&quot;,       SrcLangExt_Cpp      },
  { &quot;python&quot;,      &quot;python&quot;,  SrcLangExt_Python   },
  { &quot;fortran&quot;,     &quot;fortran&quot;, SrcLangExt_Fortran  },
  { &quot;vhdl&quot;,        &quot;vhdl&quot;,    SrcLangExt_VHDL     },
  { &quot;dbusxml&quot;,     &quot;dbusxml&quot;, SrcLangExt_XML      },
  { &quot;tcl&quot;,         &quot;tcl&quot;,     SrcLangExt_Tcl      },
  { &quot;md&quot;,          &quot;md&quot;,      SrcLangExt_Markdown },
  { 0,             0,        (<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member">SrcLangExt</ref>)0        }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6620"/>
      </memberdef>
      <memberdef kind="variable" id="df/d2d/util_8cpp_1a99e9ff68dd937e1c2fe89f19688b3163" prot="public" static="yes" mutable="no">
        <type>QDict&lt; void &gt;</type>
        <definition>QDict&lt;void&gt; aliasesProcessed</definition>
        <argsstring></argsstring>
        <name>aliasesProcessed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6896" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6896" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="df/d2d/util_8cpp_1aa16e34240606f622b272b2b3e26d33e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString removeAnonymousScopes</definition>
        <argsstring>(const QCString &amp;s)</argsstring>
        <name>removeAnonymousScopes</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all anonymous scopes from string s Possible examples: <verbatim>   &quot;bla::@10::blep&quot;      =&gt; &quot;bla::blep&quot;
   &quot;bla::@10::@11::blep&quot; =&gt; &quot;bla::blep&quot;
   &quot;@10::blep&quot;           =&gt; &quot;blep&quot;
   &quot; @10::blep&quot;          =&gt; &quot;blep&quot;
   &quot;@9::@10::blep&quot;       =&gt; &quot;blep&quot;
   &quot;bla::@1&quot;             =&gt; &quot;bla&quot;
   &quot;bla::@1::@2&quot;         =&gt; &quot;bla&quot;
   &quot;bla @1&quot;              =&gt; &quot;bla&quot;
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="164" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="163" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a282a5c0b26c41bd804e5201fde95e873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString replaceAnonymousScopes</definition>
        <argsstring>(const QCString &amp;s, const char *replacement)</argsstring>
        <name>replaceAnonymousScopes</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="191" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="190" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a3b3bee35d0b539f857173e0a14ecbf63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripAnonymousNamespaceScope</definition>
        <argsstring>(const QCString &amp;s)</argsstring>
        <name>stripAnonymousNamespaceScope</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="218" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="217" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a1cf0aaa212c55e4d7e2fd3356da26647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void writePageRef</definition>
        <argsstring>(OutputDocInterface &amp;od, const char *cn, const char *mn)</argsstring>
        <name>writePageRef</name>
        <param>
          <type><ref refid="d2/d1a/class_output_doc_interface" kindref="compound">OutputDocInterface</ref> &amp;</type>
          <declname>od</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="246" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="245" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a5530a73bd518581ac62e4eee5bc2f6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString generateMarker</definition>
        <argsstring>(int id)</argsstring>
        <name>generateMarker</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a place holder for a position in a list. Used for translators to be able to specify different elements orders depending on whether text flows from left to right or visa versa. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="265" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aa178c58a1c963dc392cbe84210cc35e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString stripFromPath</definition>
        <argsstring>(const QCString &amp;path, QStrList &amp;l)</argsstring>
        <name>stripFromPath</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>QStrList &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="272" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="271" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ac7a97256c349c1f4f1d18d7a7098c081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripFromPath</definition>
        <argsstring>(const QCString &amp;path)</argsstring>
        <name>stripFromPath</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>strip part of <emphasis>path</emphasis> if it matches one of the paths in the Config_getList(&quot;STRIP_FROM_PATH&quot;) list </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="296" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a3d790f4b8fa74cbafd6c4b34d4573093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripFromIncludePath</definition>
        <argsstring>(const QCString &amp;path)</argsstring>
        <name>stripFromIncludePath</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>strip part of <emphasis>path</emphasis> if it matches one of the paths in the Config_getList(&quot;INCLUDE_PATH&quot;) list </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="304" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a826cc396ba482fb9ef1990104f9c1026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int guessSection</definition>
        <argsstring>(const char *name)</argsstring>
        <name>guessSection</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>try to determine if <emphasis>name</emphasis> is a source or a header file name by looking at the extension. A number of variations is allowed in both upper and lower case) If anyone knows or uses another extension please let me know :-) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="313" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="312" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a44ec4c46de86375d0a7d9101418dfd69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString resolveTypeDef</definition>
        <argsstring>(Definition *context, const QCString &amp;qualifiedName, Definition **typedefContext)</argsstring>
        <name>resolveTypeDef</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>qualifiedName</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> **</type>
          <declname>typedefContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="345" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="343" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a687ed6d894bc05a24ef10c2b394be05b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
        <definition>ClassDef* getClass</definition>
        <argsstring>(const char *n)</argsstring>
        <name>getClass</name>
        <param>
          <type>const char *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a class definition given its name. Returns 0 if the class is not found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="470" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="469" bodyend="484"/>
        <references refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" compoundref="d9/d21/sortdict_8h" startline="232" endline="235">SDict&lt; T &gt;::find</references>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a83c56d8eed21c4535823375f28fd62be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d07/class_namespace_def" kindref="compound">NamespaceDef</ref> *</type>
        <definition>NamespaceDef* getResolvedNamespace</definition>
        <argsstring>(const char *name)</argsstring>
        <name>getResolvedNamespace</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="487" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="486" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aab4b602a8c8c409778ee664c66c58dab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
        <definition>static ClassDef * getResolvedClassRec</definition>
        <argsstring>(Definition *scope, FileDef *fileScope, const char *n, MemberDef **pTypeDef, QCString *pTemplSpec, QCString *pResolvedType)</argsstring>
        <name>getResolvedClassRec</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> **</type>
          <declname>pTypeDef</declname>
        </param>
        <param>
          <type>QCString *</type>
          <declname>pTemplSpec</declname>
        </param>
        <param>
          <type>QCString *</type>
          <declname>pResolvedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="521" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1371" bodyend="1553"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a683de911662abcb10445d328c9ff6602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isAccessibleFromWithExpScope</definition>
        <argsstring>(Definition *scope, FileDef *fileScope, Definition *item, const QCString &amp;explicitScopePart)</argsstring>
        <name>isAccessibleFromWithExpScope</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>explicitScopePart</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="523" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1048" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a4bb8991dbbb933326d311315a1a656e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
        <definition>ClassDef* newResolveTypedef</definition>
        <argsstring>(FileDef *fileScope, MemberDef *md, MemberDef **pMemType, QCString *pTemplSpec, QCString *pResolvedType, ArgumentList *actTemplParams)</argsstring>
        <name>newResolveTypedef</name>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>md</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> **</type>
          <declname>pMemType</declname>
        </param>
        <param>
          <type>QCString *</type>
          <declname>pTemplSpec</declname>
        </param>
        <param>
          <type>QCString *</type>
          <declname>pResolvedType</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>actTemplParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the class representing the value of the typedef represented by <emphasis>md</emphasis> within file <emphasis>fileScope</emphasis>.</para><para><ref refid="df/de9/struct_example" kindref="compound">Example</ref>: typedef A T; will return the class representing A if it is a class.</para><para><ref refid="df/de9/struct_example" kindref="compound">Example</ref>: typedef int T; will return 0, since &quot;int&quot; is not a class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="536" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="532" bodyend="658"/>
        <references refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" compoundref="d0/d72/memberdef_8cpp" startline="3786" endline="3802">MemberDef::qualifiedName</references>
        <references refid="d1/dcf/class_class_def_1a1cf3d48d5fdfce179f11d463d379d5f9" compoundref="de/d89/classdef_8cpp" startline="4352" endline="4355">ClassDef::isTemplate</references>
        <references refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" compoundref="de/d89/classdef_8cpp" startline="4327" endline="4330">ClassDef::templateArguments</references>
        <references refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" compoundref="d3/dea/definition_8cpp" startline="1284" endline="1322">Definition::qualifiedName</references>
        <references refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" compoundref="d3/dea/definition_8cpp" startline="1731" endline="1734">Definition::getDefFileName</references>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1abe5757e983c7353f45241870eae40523" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString substTypedef</definition>
        <argsstring>(Definition *scope, FileDef *fileScope, const QCString &amp;name, MemberDef **pTypeDef=0)</argsstring>
        <name>substTypedef</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> **</type>
          <declname>pTypeDef</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitutes a simple unqualified <emphasis>name</emphasis> within <emphasis>scope</emphasis>. Returns the value of the typedef or <emphasis>name</emphasis> if no typedef was found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="665" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="663" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae3899567ef86167fefd3df06bb6b8448" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
        <definition>static Definition* endOfPathIsUsedClass</definition>
        <argsstring>(SDict&lt; Definition &gt; *cl, const QCString &amp;localName)</argsstring>
        <name>endOfPathIsUsedClass</name>
        <param>
          <type><ref refid="d1/d50/class_s_dict" kindref="compound">SDict</ref>&lt; <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> &gt; *</type>
          <declname>cl</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>localName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="728" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="727" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a0f6acebe75b0c13e786030cb3e8d7875" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
        <definition>static Definition* followPath</definition>
        <argsstring>(Definition *start, FileDef *fileScope, const QCString &amp;path)</argsstring>
        <name>followPath</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starting with scope <emphasis>start</emphasis>, the string <emphasis>path</emphasis> is interpreted as a part of a qualified scope name (e.g. A::B::C), and the scope is searched. If found the scope definition is returned, otherwise 0 is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="750" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="749" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a98ceddba7d49652005cc96e4ad044a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool accessibleViaUsingClass</definition>
        <argsstring>(const SDict&lt; Definition &gt; *cl, FileDef *fileScope, Definition *item, const QCString &amp;explicitScopePart=&quot;&quot;)</argsstring>
        <name>accessibleViaUsingClass</name>
        <param>
          <type>const <ref refid="d1/d50/class_s_dict" kindref="compound">SDict</ref>&lt; <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> &gt; *</type>
          <declname>cl</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>explicitScopePart</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="810" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="805" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a95bb166492384267a4dc404db0e50c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool accessibleViaUsingNamespace</definition>
        <argsstring>(const NamespaceSDict *nl, FileDef *fileScope, Definition *item, const QCString &amp;explicitScopePart=&quot;&quot;)</argsstring>
        <name>accessibleViaUsingNamespace</name>
        <param>
          <type>const <ref refid="d4/d8d/class_namespace_s_dict" kindref="compound">NamespaceSDict</ref> *</type>
          <declname>nl</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>explicitScopePart</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="832" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="828" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a2a7c36bd6228f82d0c3869e12df93e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isAccessibleFrom</definition>
        <argsstring>(Definition *scope, FileDef *fileScope, Definition *item)</argsstring>
        <name>isAccessibleFrom</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="946" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="945" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a84e80a5dfaa2db05ad8b5d2e8d0f58f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int computeQualifiedIndex</definition>
        <argsstring>(const QCString &amp;name)</argsstring>
        <name>computeQualifiedIndex</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1201" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1200" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae1a9824d030b2b4322694a75df95aad8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void getResolvedSymbol</definition>
        <argsstring>(Definition *scope, FileDef *fileScope, Definition *d, const QCString &amp;explicitScopePart, ArgumentList *actTemplParams, int &amp;minDistance, ClassDef *&amp;bestMatch, MemberDef *&amp;bestTypedef, QCString &amp;bestTemplSpec, QCString &amp;bestResolvedType)</argsstring>
        <name>getResolvedSymbol</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>explicitScopePart</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>actTemplParams</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>minDistance</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *&amp;</type>
          <declname>bestMatch</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *&amp;</type>
          <declname>bestTypedef</declname>
        </param>
        <param>
          <type>QCString &amp;</type>
          <declname>bestTemplSpec</declname>
        </param>
        <param>
          <type>QCString &amp;</type>
          <declname>bestResolvedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1217" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1206" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aa041c49444fc0dcd4adf04007f6944db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
        <definition>ClassDef* getResolvedClass</definition>
        <argsstring>(Definition *scope, FileDef *fileScope, const char *n, MemberDef **pTypeDef, QCString *pTemplSpec, bool mayBeUnlinkable, bool mayBeHidden, QCString *pResolvedType)</argsstring>
        <name>getResolvedClass</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> **</type>
          <declname>pTypeDef</declname>
        </param>
        <param>
          <type>QCString *</type>
          <declname>pTemplSpec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mayBeUnlinkable</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mayBeHidden</declname>
        </param>
        <param>
          <type>QCString *</type>
          <declname>pResolvedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1569" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1560" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a43ae178eba60495e58259411b16e560a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool findOperator</definition>
        <argsstring>(const QCString &amp;s, int i)</argsstring>
        <name>findOperator</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1615" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1614" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1adf9889aab1fe10144e637d5a7a7e214c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool findOperator2</definition>
        <argsstring>(const QCString &amp;s, int i)</argsstring>
        <name>findOperator2</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1629" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1628" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a0940360aa6d41fd2496603fc565e3996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString removeRedundantWhiteSpace</definition>
        <argsstring>(const QCString &amp;s)</argsstring>
        <name>removeRedundantWhiteSpace</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1647" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1646" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aa3f77785aa54c6197698ba648fadcb61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int findParameterList</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>findParameterList</name>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the position in the string where a function parameter list begins, or -1 if one is not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1832" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1831" bodyend="1868"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae0c5a702c29f403e331441abfe289d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rightScopeMatch</definition>
        <argsstring>(const QCString &amp;scope, const QCString &amp;name)</argsstring>
        <name>rightScopeMatch</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1871" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1870" bodyend="1877"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a373928f3b61089f84cb4ee946474792f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool leftScopeMatch</definition>
        <argsstring>(const QCString &amp;scope, const QCString &amp;name)</argsstring>
        <name>leftScopeMatch</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1880" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1879" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ad81e61def70543ff0ef310ba845877c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linkifyText</definition>
        <argsstring>(const TextGeneratorIntf &amp;out, Definition *scope, FileDef *fileScope, Definition *self, const char *text, bool autoBreak, bool external, bool keepSpaces, int indentLevel)</argsstring>
        <name>linkifyText</name>
        <param>
          <type>const <ref refid="d0/dcf/class_text_generator_intf" kindref="compound">TextGeneratorIntf</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>autoBreak</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>external</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepSpaces</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indentLevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="1893" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="1889" bodyend="2076"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a29321ce871a89cd71c769f9e368cb3d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void writeExample</definition>
        <argsstring>(OutputList &amp;ol, ExampleSDict *ed)</argsstring>
        <name>writeExample</name>
        <param>
          <type><ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref> &amp;</type>
          <declname>ol</declname>
        </param>
        <param>
          <type><ref refid="d0/d31/class_example_s_dict" kindref="compound">ExampleSDict</ref> *</type>
          <declname>ed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2080" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2079" bodyend="2121"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1abb89bf626f89e1024c94ca211e741cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString argListToString</definition>
        <argsstring>(ArgumentList *al, bool useCanonicalType, bool showDefVals)</argsstring>
        <name>argListToString</name>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>al</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useCanonicalType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>showDefVals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2125" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2124" bodyend="2166"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a1f0fa95139f78a31647fa8cec8848bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString tempArgListToString</definition>
        <argsstring>(ArgumentList *al)</argsstring>
        <name>tempArgListToString</name>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2169" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2168" bodyend="2206"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1adac72b4ea3bea5b95361196b902c93cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setAnchors</definition>
        <argsstring>(MemberList *ml)</argsstring>
        <name>setAnchors</name>
        <param>
          <type><ref refid="dd/d13/class_member_list" kindref="compound">MemberList</ref> *</type>
          <declname>ml</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2211" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2210" bodyend="2231"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae019f2737460a8c3eaad5264f8fe57a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filterCRLF</definition>
        <argsstring>(char *buf, int len)</argsstring>
        <name>filterCRLF</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>takes the <emphasis>buf</emphasis> of the given length <emphasis>len</emphasis> and converts CR LF (DOS) or CR (MAC) line ending to LF (Unix). Returns the length of the converted content (i.e. the same as <emphasis>len</emphasis> (Unix, MAC) or smaller (DOS). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2241" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2240" bodyend="2262"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ad3a1dd1cb768d3dd7741f2fde889f28c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString getFilterFromList</definition>
        <argsstring>(const char *name, const QStrList &amp;filterList, bool &amp;found)</argsstring>
        <name>getFilterFromList</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QStrList &amp;</type>
          <declname>filterList</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>found</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2265" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2264" bodyend="2294"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a188c1467dbdf01fbdb87e08ce49fb759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString getFileFilter</definition>
        <argsstring>(const char *name, bool isSourceCode)</argsstring>
        <name>getFileFilter</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isSourceCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>looks for a filter for the file <emphasis>name</emphasis>. Returns the name of the filter if there is a match for the file name, otherwise an empty string. In case <emphasis>inSourceCode</emphasis> is TRUE then first the source filter list is considered. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2302" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2301" bodyend="2327"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a45ec91133f956ee7c2212c8842965995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString transcodeCharacterStringToUTF8</definition>
        <argsstring>(const QCString &amp;input)</argsstring>
        <name>transcodeCharacterStringToUTF8</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2331" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2330" bodyend="2368"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ac528180e248269aca3e4480772ba3014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString fileToString</definition>
        <argsstring>(const char *name, bool filter, bool isSourceCode)</argsstring>
        <name>fileToString</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isSourceCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reads a file with name <emphasis>name</emphasis> and returns it as a string. If <emphasis>filter</emphasis> is TRUE the file will be filtered by any user specified input filter. If <emphasis>name</emphasis> is &quot;-&quot; the string will be read from standard input. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2375" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2374" bodyend="2467"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ab756d2158c17cfe62c5c51a7cf09d4a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString dateToString</definition>
        <argsstring>(bool includeTime)</argsstring>
        <name>dateToString</name>
        <param>
          <type>bool</type>
          <declname>includeTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2470" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2469" bodyend="2480"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a76a75ed644eb3f75d36151f9d82f862f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString yearToString</definition>
        <argsstring>()</argsstring>
        <name>yearToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2483" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2482" bodyend="2488"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a649670159a00e0a1c323df1b40bf01e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int minClassDistance</definition>
        <argsstring>(const ClassDef *cd, const ClassDef *bcd, int level)</argsstring>
        <name>minClassDistance</name>
        <param>
          <type>const <ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>bcd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2495" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2494" bodyend="2521"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae9cce565bd53fe5056cbcd82798b7eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member">Protection</ref></type>
        <definition>Protection classInheritedProtectionLevel</definition>
        <argsstring>(ClassDef *cd, ClassDef *bcd, Protection prot, int level)</argsstring>
        <name>classInheritedProtectionLevel</name>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>bcd</declname>
        </param>
        <param>
          <type><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member">Protection</ref></type>
          <declname>prot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2524" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2523" bodyend="2553"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a949b754cbc6833e0fcddc38528e5edee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString trimTemplateSpecifiers</definition>
        <argsstring>(const QCString &amp;namespaceName, const QCString &amp;className, const QCString &amp;s)</argsstring>
        <name>trimTemplateSpecifiers</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>namespaceName</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>className</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2575" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2570" bodyend="2636"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ad7033dc7b0f50dde9c4b769efd81a66c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int findScopePattern</definition>
        <argsstring>(const QCString &amp;pattern, const QCString &amp;s, int p, int *len)</argsstring>
        <name>findScopePattern</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>pattern to look for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to search in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>position to start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>resulting pattern length </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>position on which string is found, or -1 if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2647" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2645" bodyend="2699"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a0edd1e8d26782b3c1f69c7147deabdea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString trimScope</definition>
        <argsstring>(const QCString &amp;name, const QCString &amp;s)</argsstring>
        <name>trimScope</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2702" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2701" bodyend="2724"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a7208faccc88fae56288cfee1d1c6981c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trimBaseClassScope</definition>
        <argsstring>(BaseClassList *bcl, QCString &amp;s, int level=0)</argsstring>
        <name>trimBaseClassScope</name>
        <param>
          <type><ref refid="d7/d46/class_base_class_list" kindref="compound">BaseClassList</ref> *</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type>QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2728" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2727" bodyend="2747"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a28ac6dbcdb288699accc1a8db6f56cd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stripIrrelevantString</definition>
        <argsstring>(QCString &amp;target, const QCString &amp;str)</argsstring>
        <name>stripIrrelevantString</name>
        <param>
          <type>QCString &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2827" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2826" bodyend="2858"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a8070b1f687b313f291d1f5cd292daddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stripIrrelevantConstVolatile</definition>
        <argsstring>(QCString &amp;s)</argsstring>
        <name>stripIrrelevantConstVolatile</name>
        <param>
          <type>QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>According to the C++ spec and Ivan Vecerina:</para><para>Parameter declarations that differ only in the presence or absence of const and/or volatile are equivalent.</para><para>So the following example, show what is stripped by this routine for const. The same is done for volatile.</para><para><programlisting><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>param<sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><sp/><sp/>T<sp/>param<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>relevant</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>param<sp/><sp/><sp/><sp/>-&gt;<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>param<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>needed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>param<sp/><sp/><sp/><sp/>-&gt;<sp/><sp/><sp/>T*<sp/>param<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>relevant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>param<sp/><sp/><sp/><sp/>-&gt;<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>param<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>needed</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2876" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2875" bodyend="2881"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aed6ce6365638e2fa9b0aa35214b2c555" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool matchArgument</definition>
        <argsstring>(const Argument *srcA, const Argument *dstA, const QCString &amp;className, const QCString &amp;namespaceName, NamespaceSDict *usingNamespaces, SDict&lt; Definition &gt; *usingClasses)</argsstring>
        <name>matchArgument</name>
        <param>
          <type>const <ref refid="d1/dee/struct_argument" kindref="compound">Argument</ref> *</type>
          <declname>srcA</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dee/struct_argument" kindref="compound">Argument</ref> *</type>
          <declname>dstA</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>className</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>namespaceName</declname>
        </param>
        <param>
          <type><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound">NamespaceSDict</ref> *</type>
          <declname>usingNamespaces</declname>
        </param>
        <param>
          <type><ref refid="d1/d50/class_s_dict" kindref="compound">SDict</ref>&lt; <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> &gt; *</type>
          <declname>usingClasses</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="2896" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="2891" bodyend="3156"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae18778f301f6c4ca18a9d6d533f9cd23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool matchArguments</definition>
        <argsstring>(ArgumentList *srcAl, ArgumentList *dstAl, const char *cl, const char *ns, bool checkCV, NamespaceSDict *usingNamespaces, SDict&lt; Definition &gt; *usingClasses)</argsstring>
        <name>matchArguments</name>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>srcAl</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>dstAl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ns</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkCV</declname>
        </param>
        <param>
          <type><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound">NamespaceSDict</ref> *</type>
          <declname>usingNamespaces</declname>
        </param>
        <param>
          <type><ref refid="d1/d50/class_s_dict" kindref="compound">SDict</ref>&lt; <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> &gt; *</type>
          <declname>usingClasses</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matches the arguments list srcAl with the argument list dstAl Returns TRUE if the argument lists are equal. Two argument list are considered equal if the number of arguments is equal and the types of all arguments are equal. Furthermore the const and volatile specifiers stored in the list should be equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3170" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3166" bodyend="3259"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a5b4fd5c937a0d1bb806033635f35cc99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString stripDeclKeywords</definition>
        <argsstring>(const QCString &amp;s)</argsstring>
        <name>stripDeclKeywords</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3287" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3286" bodyend="3297"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a756035505ab5a2b23971701fc4ba8c71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString extractCanonicalType</definition>
        <argsstring>(Definition *d, FileDef *fs, QCString type)</argsstring>
        <name>extractCanonicalType</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>QCString</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3300" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3459" bodyend="3527"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aa73eddf8538614ab7f28f4213082f62f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString getCanonicalTemplateSpec</definition>
        <argsstring>(Definition *d, FileDef *fs, const QCString &amp;spec)</argsstring>
        <name>getCanonicalTemplateSpec</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3303" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3302" bodyend="3319"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aedfa8287739668cad65b1264de086b2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString getCanonicalTypeForIdentifier</definition>
        <argsstring>(Definition *d, FileDef *fs, const QCString &amp;word, QCString *tSpec, int count=0)</argsstring>
        <name>getCanonicalTypeForIdentifier</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>word</declname>
        </param>
        <param>
          <type>QCString *</type>
          <declname>tSpec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3325" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3322" bodyend="3457"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a3ac48d84ed92323f6d228264cb2f389b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString extractCanonicalArgType</definition>
        <argsstring>(Definition *d, FileDef *fs, const Argument *arg)</argsstring>
        <name>extractCanonicalArgType</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dee/struct_argument" kindref="compound">Argument</ref> *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3530" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3529" bodyend="3550"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a839a151d47b7141d4b6bc4b6ba02aa3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool matchArgument2</definition>
        <argsstring>(Definition *srcScope, FileDef *srcFileScope, Argument *srcA, Definition *dstScope, FileDef *dstFileScope, Argument *dstA)</argsstring>
        <name>matchArgument2</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>srcScope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>srcFileScope</declname>
        </param>
        <param>
          <type><ref refid="d1/dee/struct_argument" kindref="compound">Argument</ref> *</type>
          <declname>srcA</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>dstScope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>dstFileScope</declname>
        </param>
        <param>
          <type><ref refid="d1/dee/struct_argument" kindref="compound">Argument</ref> *</type>
          <declname>dstA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3556" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3552" bodyend="3610"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a9895714a00c6f6def7009f5eed2b41d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool matchArguments2</definition>
        <argsstring>(Definition *srcScope, FileDef *srcFileScope, ArgumentList *srcAl, Definition *dstScope, FileDef *dstFileScope, ArgumentList *dstAl, bool checkCV)</argsstring>
        <name>matchArguments2</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>srcScope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>srcFileScope</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>srcAl</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>dstScope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>dstFileScope</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>dstAl</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkCV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3618" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3614" bodyend="3693"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a339f745180ea309e1ff7eb4329ad2b73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mergeArguments</definition>
        <argsstring>(ArgumentList *srcAl, ArgumentList *dstAl, bool forceNameOverwrite)</argsstring>
        <name>mergeArguments</name>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>srcAl</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>dstAl</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceNameOverwrite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3700" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3699" bodyend="3828"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a3257cf0decfc1a61b9bbe31d21c513fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findMembersWithSpecificName</definition>
        <argsstring>(MemberName *mn, const char *args, bool checkStatics, FileDef *currentFile, bool checkCV, const char *forceTagFile, QList&lt; MemberDef &gt; &amp;members)</argsstring>
        <name>findMembersWithSpecificName</name>
        <param>
          <type><ref refid="da/d7e/class_member_name" kindref="compound">MemberName</ref> *</type>
          <declname>mn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkStatics</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>currentFile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkCV</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>forceTagFile</declname>
        </param>
        <param>
          <type><ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> &gt; &amp;</type>
          <declname>members</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3837" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3830" bodyend="3875"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1af698cc2202f27d48b5509da3763ebc83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool getDefs</definition>
        <argsstring>(const QCString &amp;scName, const QCString &amp;memberName, const char *args, MemberDef *&amp;md, ClassDef *&amp;cd, FileDef *&amp;fd, NamespaceDef *&amp;nd, GroupDef *&amp;gd, bool forceEmptyScope, FileDef *currentFile, bool checkCV, const char *forceTagFile)</argsstring>
        <name>getDefs</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>scName</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>memberName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *&amp;</type>
          <declname>md</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *&amp;</type>
          <declname>cd</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *&amp;</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="d0/d07/class_namespace_def" kindref="compound">NamespaceDef</ref> *&amp;</type>
          <declname>nd</declname>
        </param>
        <param>
          <type><ref refid="d8/d09/class_group_def" kindref="compound">GroupDef</ref> *&amp;</type>
          <declname>gd</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceEmptyScope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>currentFile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkCV</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>forceTagFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for a member definition given its name `memberName&apos; as a string. memberName may also include a (partial) scope to indicate the scope in which the member is located.</para><para>The parameter `scName&apos; is a string representing the name of the scope in which the link was found.</para><para>In case of a function args contains a string representation of the argument list. Passing 0 means the member has no arguments. Passing &quot;()&quot; means any argument list will do, but &quot;()&quot; is preferred.</para><para>The function returns TRUE if the member is known and documented or FALSE if it is not. If TRUE is returned parameter `md&apos; contains a pointer to the member definition. Furthermore exactly one of the parameter `cd&apos;, `nd&apos;, or `fd&apos; will be non-zero:<itemizedlist>
<listitem><para>if `cd&apos; is non zero, the member was found in a class pointed to by cd.</para></listitem><listitem><para>if `nd&apos; is non zero, the member was found in a namespace pointed to by nd.</para></listitem><listitem><para>if `fd&apos; is non zero, the member was found in the global namespace of file fd. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="3912" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="3899" bodyend="4264"/>
        <references refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" compoundref="d9/d21/sortdict_8h" startline="232" endline="235">SDict&lt; T &gt;::find</references>
        <references refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" compoundref="de/d89/classdef_8cpp" startline="2579" endline="2589">ClassDef::isLinkable</references>
        <references refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" compoundref="de/d89/classdef_8cpp" startline="4337" endline="4340">ClassDef::getFileDef</references>
        <references refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" compoundref="d0/d72/memberdef_8cpp" startline="1171" endline="1181">MemberDef::isLinkable</references>
        <references refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" compoundref="df/da1/definition_8h" startline="109" endline="109">Definition::name</references>
        <references refid="d0/d07/class_namespace_def_1a5bbc047ff9799f2f74668168afacc0b2" compoundref="d7/d1c/namespacedef_8cpp" startline="1083" endline="1086">NamespaceDef::isLinkable</references>
        <references refid="d8/d09/class_group_def_1a9338f966e744542f22c5bbc630b80f95" compoundref="d6/d42/groupdef_8cpp" startline="1501" endline="1504">GroupDef::isLinkable</references>
        <references refid="de/db0/class_file_def_1af677cee8c349fa10532b0aa5c09df396" compoundref="d4/d3a/filedef_8h" startline="116" endline="116">FileDef::isLinkable</references>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ab51f8eda70bdf06f6d1602d34e988b2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool getScopeDefs</definition>
        <argsstring>(const char *docScope, const char *scope, ClassDef *&amp;cd, NamespaceDef *&amp;nd)</argsstring>
        <name>getScopeDefs</name>
        <param>
          <type>const char *</type>
          <declname>docScope</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *&amp;</type>
          <declname>cd</declname>
        </param>
        <param>
          <type><ref refid="d0/d07/class_namespace_def" kindref="compound">NamespaceDef</ref> *&amp;</type>
          <declname>nd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for a scope definition given its name as a string via parameter <computeroutput>scope</computeroutput>.</para><para>The parameter <computeroutput>docScope</computeroutput> is a string representing the name of the scope in which the <computeroutput>scope</computeroutput> string was found.</para><para>The function returns TRUE if the scope is known and documented or FALSE if it is not. If TRUE is returned exactly one of the parameter <computeroutput>cd</computeroutput>, <computeroutput>nd</computeroutput> will be non-zero:<itemizedlist>
<listitem><para>if <computeroutput>cd</computeroutput> is non zero, the scope was a class pointed to by cd.</para></listitem><listitem><para>if <computeroutput>nd</computeroutput> is non zero, the scope was a namespace pointed to by nd. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4282" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4280" bodyend="4326"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a8e975b2170ce769882c4bbb8f2cb8b94" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool isLowerCase</definition>
        <argsstring>(QCString &amp;s)</argsstring>
        <name>isLowerCase</name>
        <param>
          <type>QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4329" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4328" bodyend="4335"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a5029dfc5624dcd50befef2d9670fa56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool resolveRef</definition>
        <argsstring>(const char *scName, const char *name, bool inSeeBlock, Definition **resContext, MemberDef **resMember, bool lookForSpecialization, FileDef *currentFile, bool checkScope)</argsstring>
        <name>resolveRef</name>
        <param>
          <type>const char *</type>
          <declname>scName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inSeeBlock</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> **</type>
          <declname>resContext</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> **</type>
          <declname>resMember</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lookForSpecialization</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>currentFile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkScope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an object to reference to given its name and context <simplesect kind="post"><para>return value TRUE implies *resContext!=0 or *resMember!=0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4349" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4340" bodyend="4509"/>
        <references refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" compoundref="d9/d21/sortdict_8h" startline="232" endline="235">SDict&lt; T &gt;::find</references>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1af20aa0206cec2bb8a7aa60f239f1874c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString linkToText</definition>
        <argsstring>(SrcLangExt lang, const char *link, bool isFileName)</argsstring>
        <name>linkToText</name>
        <param>
          <type><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member">SrcLangExt</ref></type>
          <declname>lang</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4512" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4511" bodyend="4533"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ab8d1f87424617aa5fef20523d230148e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool resolveLink</definition>
        <argsstring>(const char *scName, const char *lr, bool, Definition **resContext, QCString &amp;resAnchor)</argsstring>
        <name>resolveLink</name>
        <param>
          <type>const char *</type>
          <declname>scName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>lr</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> **</type>
          <declname>resContext</declname>
        </param>
        <param>
          <type>QCString &amp;</type>
          <declname>resAnchor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4611" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4605" bodyend="4701"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a846491242dae5d7cd22b1297142492cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool generateLink</definition>
        <argsstring>(OutputDocInterface &amp;od, const char *clName, const char *lr, bool inSeeBlock, const char *lt)</argsstring>
        <name>generateLink</name>
        <param>
          <type><ref refid="d2/d1a/class_output_doc_interface" kindref="compound">OutputDocInterface</ref> &amp;</type>
          <declname>od</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>clName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>lr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inSeeBlock</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4713" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4711" bodyend="4751"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a5cdc975a2ed4e0437af0eaaebbc9c7ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void generateFileRef</definition>
        <argsstring>(OutputDocInterface &amp;od, const char *name, const char *text)</argsstring>
        <name>generateFileRef</name>
        <param>
          <type><ref refid="d2/d1a/class_output_doc_interface" kindref="compound">OutputDocInterface</ref> &amp;</type>
          <declname>od</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4754" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4753" bodyend="4766"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a5cd0c29aa3d0d0c80614896ba56ccd49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCache&lt; FindFileCacheElem &gt;</type>
        <definition>static QCache&lt;FindFileCacheElem&gt; g_findFileDefCache</definition>
        <argsstring>(5000)</argsstring>
        <name>g_findFileDefCache</name>
        <param>
          <type>5000</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4806"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a0cf19d261e77047fb63376980cbf866a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
        <definition>FileDef* findFileDef</definition>
        <argsstring>(const FileNameDict *fnDict, const char *n, bool &amp;ambig)</argsstring>
        <name>findFileDef</name>
        <param>
          <type>const <ref refid="dd/d0f/class_file_name_dict" kindref="compound">FileNameDict</ref> *</type>
          <declname>fnDict</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>ambig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4809" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4808" bodyend="4897"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a1641b930420737442bb27e082999da69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString showFileDefMatches</definition>
        <argsstring>(const FileNameDict *fnDict, const char *n)</argsstring>
        <name>showFileDefMatches</name>
        <param>
          <type>const <ref refid="dd/d0f/class_file_name_dict" kindref="compound">FileNameDict</ref> *</type>
          <declname>fnDict</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4902" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4901" bodyend="4926"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a967d9e508c8a67d803c071d6c4795f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString substituteKeywords</definition>
        <argsstring>(const QCString &amp;s, const char *title, const char *projName, const char *projNum, const char *projBrief)</argsstring>
        <name>substituteKeywords</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>projName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>projNum</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>projBrief</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4932" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4930" bodyend="4944"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae052d7dcea3289dd204d8d425cf9d4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getPrefixIndex</definition>
        <argsstring>(const QCString &amp;name)</argsstring>
        <name>getPrefixIndex</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the character index within <emphasis>name</emphasis> of the first prefix in Config_getList(&quot;IGNORE_PREFIX&quot;) that matches <emphasis>name</emphasis> at the left hand side, or zero if no match was found </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4953" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4952" bodyend="4970"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1adf2e3636bdac3f34789cb592bb4a178f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initBaseClassHierarchy</definition>
        <argsstring>(BaseClassList *bcl)</argsstring>
        <name>initBaseClassHierarchy</name>
        <param>
          <type><ref refid="d7/d46/class_base_class_list" kindref="compound">BaseClassList</ref> *</type>
          <declname>bcl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4975" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4974" bodyend="4987"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a85a1facc6e1b98c37768fb0f60f0c25e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initClassHierarchy</definition>
        <argsstring>(ClassSDict *cl)</argsstring>
        <name>initClassHierarchy</name>
        <param>
          <type><ref refid="d9/d3d/class_class_s_dict" kindref="compound">ClassSDict</ref> *</type>
          <declname>cl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="4992" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="4991" bodyend="5000"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a20b745f614829c8c25c02d39a80d8f24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hasVisibleRoot</definition>
        <argsstring>(BaseClassList *bcl)</argsstring>
        <name>hasVisibleRoot</name>
        <param>
          <type><ref refid="d7/d46/class_base_class_list" kindref="compound">BaseClassList</ref> *</type>
          <declname>bcl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5005" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5004" bodyend="5017"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a819b8849906edd907d8c927b539ecab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString escapeCharsInString</definition>
        <argsstring>(const char *name, bool allowDots, bool allowUnderscore)</argsstring>
        <name>escapeCharsInString</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowDots</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowUnderscore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5023" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5022" bodyend="5084"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ad56bdeac9b90ebfb48869e67de702c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString convertNameToFile</definition>
        <argsstring>(const char *name, bool allowDots, bool allowUnderscore)</argsstring>
        <name>convertNameToFile</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowDots</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowUnderscore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function determines the file name on disk of an item given its name, which could be a class name with template arguments, so special characters need to be escaped. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5091" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5090" bodyend="5170"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a7f9d59487b4095a00a753a99657df2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString relativePathToRoot</definition>
        <argsstring>(const char *name)</argsstring>
        <name>relativePathToRoot</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5173" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5172" bodyend="5192"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a6740f34b1a63d71b615ed15f3ccec73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createSubDirs</definition>
        <argsstring>(QDir &amp;d)</argsstring>
        <name>createSubDirs</name>
        <param>
          <type>QDir &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5195" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5194" bodyend="5209"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a99ce0f316902ba135f970cba1731ed97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void extractNamespaceName</definition>
        <argsstring>(const QCString &amp;scopeName, QCString &amp;className, QCString &amp;namespaceName, bool allowEmptyClass)</argsstring>
        <name>extractNamespaceName</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>scopeName</declname>
        </param>
        <param>
          <type>QCString &amp;</type>
          <declname>className</declname>
        </param>
        <param>
          <type>QCString &amp;</type>
          <declname>namespaceName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowEmptyClass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input is a scopeName, output is the scopename split into a namespace part (as large as possible) and a classname part. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5217" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5214" bodyend="5261"/>
        <references refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" compoundref="df/da1/definition_8h" startline="109" endline="109">Definition::name</references>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a1dc6b9f0a9cc58498da6f8d4ffe120c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString insertTemplateSpecifierInScope</definition>
        <argsstring>(const QCString &amp;scope, const QCString &amp;templ)</argsstring>
        <name>insertTemplateSpecifierInScope</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>templ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5264" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5263" bodyend="5290"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a34ffc62b74a8539f1e95cfd4719dbfdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripScope</definition>
        <argsstring>(const char *name)</argsstring>
        <name>stripScope</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5342" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5341" bodyend="5418"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1acee8d851ab3a9590ac348bdb857aba26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString convertToXML</definition>
        <argsstring>(const char *s)</argsstring>
        <name>convertToXML</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a string to an XML-encoded string </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5423" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5422" bodyend="5443"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a840bf02d2e17207eede155a24c4a4667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString convertToHtml</definition>
        <argsstring>(const char *s, bool keepEntities)</argsstring>
        <name>convertToHtml</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepEntities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a string to a HTML-encoded string </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5447" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5446" bodyend="5490"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a1d3351bfe41b27098aaba31876a54d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString convertToJSString</definition>
        <argsstring>(const char *s)</argsstring>
        <name>convertToJSString</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5493" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5492" bodyend="5510"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a1f47842c9ec880090ee422c4e4684126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString convertCharEntitiesToUTF8</definition>
        <argsstring>(const QCString &amp;s)</argsstring>
        <name>convertCharEntitiesToUTF8</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5514" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5513" bodyend="5682"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ad8c71fbab856bc37ae54d2d369535b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString getOverloadDocs</definition>
        <argsstring>()</argsstring>
        <name>getOverloadDocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the standard string that is generated when the \overload command is used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5688" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5687" bodyend="5693"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ab9fb5edf9486a3ae8501418f2549a02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addMembersToMemberGroup</definition>
        <argsstring>(MemberList *ml, MemberGroupSDict **ppMemberGroupSDict, Definition *context)</argsstring>
        <name>addMembersToMemberGroup</name>
        <param>
          <type><ref refid="dd/d13/class_member_list" kindref="compound">MemberList</ref> *</type>
          <declname>ml</declname>
        </param>
        <param>
          <type><ref refid="dc/d1e/class_member_group_s_dict" kindref="compound">MemberGroupSDict</ref> **</type>
          <declname>ppMemberGroupSDict</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5698" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5695" bodyend="5782"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a337616be3bea43c6c1a7c898bdbfda7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int extractClassNameFromType</definition>
        <argsstring>(const QCString &amp;type, int &amp;pos, QCString &amp;name, QCString &amp;templSpec, SrcLangExt lang)</argsstring>
        <name>extractClassNameFromType</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>QCString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>QCString &amp;</type>
          <declname>templSpec</declname>
        </param>
        <param>
          <type><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member">SrcLangExt</ref></type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extracts a (sub-)string from <emphasis>type</emphasis> starting at <emphasis>pos</emphasis> that could form a class. The index of the match is returned and the found class <emphasis>name</emphasis> and a template argument list <emphasis>templSpec</emphasis>. If -1 is returned there are no more matches. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5790" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5789" bodyend="5861"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1af51d62b1c1dd99d83c3acae8ef302f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString normalizeNonTemplateArgumentsInString</definition>
        <argsstring>(const QCString &amp;name, Definition *context, const ArgumentList *formalArgs)</argsstring>
        <name>normalizeNonTemplateArgumentsInString</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>formalArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5867" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5863" bodyend="5916"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a928208745b8d52e1ef9599e3bc5007cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString substituteTemplateArgumentsInString</definition>
        <argsstring>(const QCString &amp;name, ArgumentList *formalArgs, ArgumentList *actualArgs)</argsstring>
        <name>substituteTemplateArgumentsInString</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>formalArgs</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>actualArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitutes any occurrence of a formal argument from argument list <emphasis>formalArgs</emphasis> in <emphasis>name</emphasis> by the corresponding actual argument in argument list <emphasis>actualArgs</emphasis>. The result after substitution is returned as a string. The argument <emphasis>name</emphasis> is used to prevent recursive substitution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="5929" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="5925" bodyend="6024"/>
        <references refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" compoundref="df/d9b/arguments_8h" startline="65">Argument::type</references>
        <references refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" compoundref="df/d9b/arguments_8h" startline="67">Argument::name</references>
        <references refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" compoundref="df/d9b/arguments_8h" startline="69">Argument::defval</references>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a76a3a3e6464790c52fbdab33a7ee675f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; *</type>
        <definition>QList&lt;ArgumentList&gt;* copyArgumentLists</definition>
        <argsstring>(const QList&lt; ArgumentList &gt; *srcLists)</argsstring>
        <name>copyArgumentLists</name>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; *</type>
          <declname>srcLists</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a deep copy of the list of argument lists <emphasis>srcLists</emphasis>. Will allocate memory, that is owned by the caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6030" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6029" bodyend="6041"/>
        <references refid="d7/df8/class_argument_list_1a57a064d6f3ba77dbc19ce8b768eb3909" compoundref="d4/dd4/arguments_8cpp" startline="20" endline="37">ArgumentList::deepCopy</references>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a195c37037adf1a2af69ad01cf8d72cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripTemplateSpecifiersFromScope</definition>
        <argsstring>(const QCString &amp;fullName, bool parentOnly, QCString *pLastScopeStripped)</argsstring>
        <name>stripTemplateSpecifiersFromScope</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>fullName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>parentOnly</declname>
        </param>
        <param>
          <type>QCString *</type>
          <declname>pLastScopeStripped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Strips template specifiers from scope <emphasis>fullName</emphasis>, except those that make up specialized classes. The switch <emphasis>parentOnly</emphasis> determines whether or not a template &quot;at the end&quot; of a scope should be considered, e.g. with <emphasis>parentOnly</emphasis> is <computeroutput>TRUE</computeroutput>, A&lt;T&gt;::B&lt;S&gt; will try to strip &lt;T&gt; and not &lt;S&gt;, while <emphasis>parentOnly</emphasis> is <computeroutput>FALSE</computeroutput> will strip both unless A&lt;T&gt; or B&lt;S&gt; are specialized template classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6053" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6050" bodyend="6100"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a0baa021dae80e22593292b12ef2f721f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString mergeScopes</definition>
        <argsstring>(const QCString &amp;leftScope, const QCString &amp;rightScope)</argsstring>
        <name>mergeScopes</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>leftScope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>rightScope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merges two scope parts together. The parts may (partially) overlap. Example1: <computeroutput>A::B</computeroutput> and <computeroutput>B::C</computeroutput> will result in <computeroutput>A::B::C</computeroutput> <linebreak/>
 Example2: <computeroutput>A</computeroutput> and <computeroutput>B</computeroutput> will be <computeroutput>A::B</computeroutput> <linebreak/>
 Example3: <computeroutput>A::B</computeroutput> and B will be <computeroutput>A::B</computeroutput> </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>leftScope</parametername>
</parameternamelist>
<parameterdescription>
<para>the left hand part of the scope. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rightScope</parametername>
</parameternamelist>
<parameterdescription>
<para>the right hand part of the scope. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the merged scope. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6112" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6111" bodyend="6137"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1afd249e264b966d05a54b740e3d43ad6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getScopeFragment</definition>
        <argsstring>(const QCString &amp;s, int p, int *l)</argsstring>
        <name>getScopeFragment</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a fragment from scope <emphasis>s</emphasis>, starting at position <emphasis>p</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the scope name as a string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the start position (0 is the first). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting length of the fragment. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the location of the fragment, or -1 if non is found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6147" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6146" bodyend="6189"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1affec8a98e6ced187a7a0030dbe7c7758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d41/class_page_def" kindref="compound">PageDef</ref> *</type>
        <definition>PageDef* addRelatedPage</definition>
        <argsstring>(const char *name, const QCString &amp;ptitle, const QCString &amp;doc, QList&lt; SectionInfo &gt; *, const char *fileName, int startLine, const QList&lt; ListItemInfo &gt; *sli, GroupDef *gd, TagInfo *tagInfo, SrcLangExt lang)</argsstring>
        <name>addRelatedPage</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>ptitle</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type><ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d5/d5b/struct_section_info" kindref="compound">SectionInfo</ref> &gt; *</type>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startLine</declname>
        </param>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d8/dd5/struct_list_item_info" kindref="compound">ListItemInfo</ref> &gt; *</type>
          <declname>sli</declname>
        </param>
        <param>
          <type><ref refid="d8/d09/class_group_def" kindref="compound">GroupDef</ref> *</type>
          <declname>gd</declname>
        </param>
        <param>
          <type><ref refid="d3/dc3/struct_tag_info" kindref="compound">TagInfo</ref> *</type>
          <declname>tagInfo</declname>
        </param>
        <param>
          <type><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member">SrcLangExt</ref></type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6202" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6193" bodyend="6265"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1adaebd06e5e7fe38ba6aca4ea66b380a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addRefItem</definition>
        <argsstring>(const QList&lt; ListItemInfo &gt; *sli, const char *key, const char *prefix, const char *name, const char *title, const char *args)</argsstring>
        <name>addRefItem</name>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d8/dd5/struct_list_item_info" kindref="compound">ListItemInfo</ref> &gt; *</type>
          <declname>sli</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6272" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6269" bodyend="6305"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ac348157ae6cff94177fad19f74285a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addGroupListToTitle</definition>
        <argsstring>(OutputList &amp;ol, Definition *d)</argsstring>
        <name>addGroupListToTitle</name>
        <param>
          <type><ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref> &amp;</type>
          <declname>ol</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6308" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6307" bodyend="6327"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a717287667951a0d1383eb164a6997886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void filterLatexString</definition>
        <argsstring>(FTextStream &amp;t, const char *str, bool insideTabbing, bool insidePre, bool insideItem)</argsstring>
        <name>filterLatexString</name>
        <param>
          <type><ref refid="dc/d3c/class_f_text_stream" kindref="compound">FTextStream</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insideTabbing</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insidePre</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insideItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6331" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6329" bodyend="6410"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a60c8b32cb8bd7c872962695ec685188b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString rtfFormatBmkStr</definition>
        <argsstring>(const char *name)</argsstring>
        <name>rtfFormatBmkStr</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6414" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6413" bodyend="6451"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a6caaf6973fe475a05ad718e56f5ac571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripExtension</definition>
        <argsstring>(const char *fName)</argsstring>
        <name>stripExtension</name>
        <param>
          <type>const char *</type>
          <declname>fName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6454" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6453" bodyend="6461"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ada009b0ab6b42ff39d4fd82e36702281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replaceNamespaceAliases</definition>
        <argsstring>(QCString &amp;scope, int i)</argsstring>
        <name>replaceNamespaceAliases</name>
        <param>
          <type>QCString &amp;</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6465" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6464" bodyend="6477"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a6a5c62a160a8872a9a241fde1e002ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripPath</definition>
        <argsstring>(const char *s)</argsstring>
        <name>stripPath</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6480" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6479" bodyend="6493"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aea05ebaaec2477660122c5f1faeeb11e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool containsWord</definition>
        <argsstring>(const QCString &amp;s, const QCString &amp;word)</argsstring>
        <name>containsWord</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>returns <computeroutput>TRUE</computeroutput> iff string <emphasis>s</emphasis> contains word <emphasis>w</emphasis> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6497" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6496" bodyend="6506"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae3f2bfd6dffce3eafb116177f8373323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool findAndRemoveWord</definition>
        <argsstring>(QCString &amp;s, const QCString &amp;word)</argsstring>
        <name>findAndRemoveWord</name>
        <param>
          <type>QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>word</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6509" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6508" bodyend="6526"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ad0b372f3669056d6a88f41daeb3a3865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripLeadingAndTrailingEmptyLines</definition>
        <argsstring>(const QCString &amp;s, int &amp;docLine)</argsstring>
        <name>stripLeadingAndTrailingEmptyLines</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>docLine</declname>
        </param>
        <briefdescription>
<para>Special version of QCString::stripWhiteSpace() that only strips completely blank lines. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be stripped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>docLine</parametername>
</parameternamelist>
<parameterdescription>
<para>the line number corresponding to the start of the string. This will be adjusted based on the number of lines stripped from the start. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The stripped string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6537" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6536" bodyend="6570"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae4f8196aff5be2c0b8046c45e3830fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool updateLanguageMapping</definition>
        <argsstring>(const QCString &amp;extension, const QCString &amp;language)</argsstring>
        <name>updateLanguageMapping</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>language</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6623" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6622" bodyend="6655"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a87fb21e07b359f00a4e3774a6eb736e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initDefaultExtensionMapping</definition>
        <argsstring>()</argsstring>
        <name>initDefaultExtensionMapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6658" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6657" bodyend="6690"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a8f34b8445ef5e51a5517bdac43e109fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member">SrcLangExt</ref></type>
        <definition>SrcLangExt getLanguageFromFileName</definition>
        <argsstring>(const QCString fileName)</argsstring>
        <name>getLanguageFromFileName</name>
        <param>
          <type>const QCString</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6693" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6692" bodyend="6710"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a9e614b356c99f09fedff100978b0d250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
        <definition>MemberDef* getMemberFromSymbol</definition>
        <argsstring>(Definition *scope, FileDef *fileScope, const char *n)</argsstring>
        <name>getMemberFromSymbol</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6716" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6714" bodyend="6783"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a070878d94aead2c1ac26282044d96002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkIfTypedef</definition>
        <argsstring>(Definition *scope, FileDef *fileScope, const char *n)</argsstring>
        <name>checkIfTypedef</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true iff the given name string appears to be a typedef in scope. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6787" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6786" bodyend="6794"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ad7c938544f5ad1c9714118c9f54d130a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* writeUtf8Char</definition>
        <argsstring>(FTextStream &amp;t, const char *s)</argsstring>
        <name>writeUtf8Char</name>
        <param>
          <type><ref refid="dc/d3c/class_f_text_stream" kindref="compound">FTextStream</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6797" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6796" bodyend="6813"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a4de2a8efcd2cc728b57016fd0d9bde01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nextUtf8CharPosition</definition>
        <argsstring>(const QCString &amp;utf8Str, int len, int startPos)</argsstring>
        <name>nextUtf8CharPosition</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>utf8Str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6816" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6815" bodyend="6849"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a336a6313626a3a3931e2086fd507bedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString parseCommentAsText</definition>
        <argsstring>(const Definition *scope, const MemberDef *md, const QCString &amp;doc, const QCString &amp;fileName, int lineNr)</argsstring>
        <name>parseCommentAsText</name>
        <param>
          <type>const <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const <ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineNr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6853" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6851" bodyend="6892"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae8205a28d9566082d02995badf546eac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString expandAliasRec</definition>
        <argsstring>(const QCString s)</argsstring>
        <name>expandAliasRec</name>
        <param>
          <type>const QCString</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6898" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7025" bodyend="7085"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a7c5aa66a1696f651ebd86a1f3d5ab1dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString replaceAliasArguments</definition>
        <argsstring>(const QCString &amp;aliasValue, const QCString &amp;argList)</argsstring>
        <name>replaceAliasArguments</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>aliasValue</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>argList</declname>
        </param>
        <briefdescription>
<para>Replaces the markers in an alias definition <emphasis>aliasValue</emphasis> with the corresponding values found in the comma separated argument list <emphasis>argList</emphasis> and the returns the result after recursive alias expansion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="6913" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="6912" bodyend="7001"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ac15892862151a248bb5f1e91a9613521" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString escapeCommas</definition>
        <argsstring>(const QCString &amp;s)</argsstring>
        <name>escapeCommas</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7004" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7003" bodyend="7023"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a5a09b86816d14f2eba51c1881515c1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int countAliasArguments</definition>
        <argsstring>(const QCString argList)</argsstring>
        <name>countAliasArguments</name>
        <param>
          <type>const QCString</type>
          <declname>argList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7088" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7087" bodyend="7097"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae73894d660bec634889b6b384ea0d103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString extractAliasArgs</definition>
        <argsstring>(const QCString &amp;args, int pos)</argsstring>
        <name>extractAliasArgs</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7100" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7099" bodyend="7127"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1adfe765ed96224eb7635f41015d904a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString resolveAliasCmd</definition>
        <argsstring>(const QCString aliasCmd)</argsstring>
        <name>resolveAliasCmd</name>
        <param>
          <type>const QCString</type>
          <declname>aliasCmd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7130" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7129" bodyend="7137"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a71979ea7f1ea055bcf2c250946fb448b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString expandAlias</definition>
        <argsstring>(const QCString &amp;aliasName, const QCString &amp;aliasValue)</argsstring>
        <name>expandAlias</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>aliasName</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>aliasValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7140" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7139" bodyend="7150"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ab039c4fe39394abf6f1816972aef7805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void writeTypeConstraints</definition>
        <argsstring>(OutputList &amp;ol, Definition *d, ArgumentList *al)</argsstring>
        <name>writeTypeConstraints</name>
        <param>
          <type><ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref> &amp;</type>
          <declname>ol</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7153" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7152" bodyend="7171"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aac9ad7a212ab079ff3ac8860577a3132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stackTrace</definition>
        <argsstring>()</argsstring>
        <name>stackTrace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7176" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7175" bodyend="7200"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a48e644a07440dc66aac4cf3821d136d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int transcodeCharacterBuffer</definition>
        <argsstring>(const char *fileName, BufStr &amp;srcBuf, int size, const char *inputEncoding, const char *outputEncoding)</argsstring>
        <name>transcodeCharacterBuffer</name>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="d5/d64/class_buf_str" kindref="compound">BufStr</ref> &amp;</type>
          <declname>srcBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>inputEncoding</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>outputEncoding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7204" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7202" bodyend="7237"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a8431777070a52ef9bfe41e6607f86e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool readInputFile</definition>
        <argsstring>(const char *fileName, BufStr &amp;inBuf)</argsstring>
        <name>readInputFile</name>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="d5/d64/class_buf_str" kindref="compound">BufStr</ref> &amp;</type>
          <declname>inBuf</declname>
        </param>
        <briefdescription>
<para>read a file name <emphasis>fileName</emphasis> and optionally filter and transcode it </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7241" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7240" bodyend="7329"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a747a6ad366ae4d5d42f0c551079d0bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString filterTitle</definition>
        <argsstring>(const QCString &amp;title)</argsstring>
        <name>filterTitle</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>title</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7333" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7332" bodyend="7345"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ab0a2456090eff61e17727c1f4d4aee2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool patternMatch</definition>
        <argsstring>(const QFileInfo &amp;fi, const QStrList *patList)</argsstring>
        <name>patternMatch</name>
        <param>
          <type>const QFileInfo &amp;</type>
          <declname>fi</declname>
        </param>
        <param>
          <type>const QStrList *</type>
          <declname>patList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7352" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7351" bodyend="7379"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a6a89c2d2257aa4b8cbc36b855ea29fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString externalLinkTarget</definition>
        <argsstring>()</argsstring>
        <name>externalLinkTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7412" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7411" bodyend="7415"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a06ba0c2593b3fd5f103151bd342e206f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString externalRef</definition>
        <argsstring>(const QCString &amp;relPath, const QCString &amp;ref, bool href)</argsstring>
        <name>externalRef</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>relPath</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>href</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7418" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7417" bodyend="7441"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ab85eeb013280173f4ec086e10dd164ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void writeColoredImgData</definition>
        <argsstring>(const char *dir, ColoredImgDataItem data[])</argsstring>
        <name>writeColoredImgData</name>
        <param>
          <type>const char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="da/d06/struct_colored_img_data_item" kindref="compound">ColoredImgDataItem</ref></type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Writes the intensity only bitmap representated by <emphasis>data</emphasis> as an image to directory <emphasis>dir</emphasis> using the colors defined by HTML_COLORSTYLE_*. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7447" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7446" bodyend="7469"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a6b67fcaeae3bead793c4c1ea68149424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString replaceColorMarkers</definition>
        <argsstring>(const char *str)</argsstring>
        <name>replaceColorMarkers</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Replaces any markers of the form ##AA in input string <emphasis>str</emphasis> by new markers of the form #AABBCC, where #AABBCC represents a valid color, based on the intensity represented by hex number AA and the current HTML_COLORSTYLE_* settings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7477" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7476" bodyend="7518"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ad35d4038b3882fdd09976d28f4a043bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool copyFile</definition>
        <argsstring>(const QCString &amp;src, const QCString &amp;dest)</argsstring>
        <name>copyFile</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Copies the contents of file with name <emphasis>src</emphasis> to the newly created file with name <emphasis>dest</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns TRUE if successful. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7524" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7523" bodyend="7550"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1ae46139270fc05ae4a1e0ff2c5bc69e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString extractBlock</definition>
        <argsstring>(const QCString text, const QCString marker)</argsstring>
        <name>extractBlock</name>
        <param>
          <type>const QCString</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const QCString</type>
          <declname>marker</declname>
        </param>
        <briefdescription>
<para>Returns the section of text, in between a pair of markers. </para>        </briefdescription>
        <detaileddescription>
<para>Full lines are returned, excluding the lines on which the markers appear. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7556" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7555" bodyend="7589"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a969690ca9b1155540d43631f499b3880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString langToString</definition>
        <argsstring>(SrcLangExt lang)</argsstring>
        <name>langToString</name>
        <param>
          <type><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member">SrcLangExt</ref></type>
          <declname>lang</declname>
        </param>
        <briefdescription>
<para>Returns a string representation of <emphasis>lang</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7593" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7592" bodyend="7613"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1aab590e3dd52a9375bb3afe31dc6f8609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString getLanguageSpecificSeparator</definition>
        <argsstring>(SrcLangExt lang, bool classScope)</argsstring>
        <name>getLanguageSpecificSeparator</name>
        <param>
          <type><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member">SrcLangExt</ref></type>
          <declname>lang</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>classScope</declname>
        </param>
        <briefdescription>
<para>Returns the scope separator to use given the programming language <emphasis>lang</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7617" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7616" bodyend="7630"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a3a775021310e25718452bfe250b2f999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString correctURL</definition>
        <argsstring>(const QCString &amp;url, const QCString &amp;relPath)</argsstring>
        <name>correctURL</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>relPath</declname>
        </param>
        <briefdescription>
<para>Corrects <ref refid="dd/d89/struct_u_r_l" kindref="compound">URL</ref> <emphasis>url</emphasis> according to the relative path <emphasis>relPath</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the corrected <ref refid="dd/d89/struct_u_r_l" kindref="compound">URL</ref>. For absolute URLs no correction will be done. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7636" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7635" bodyend="7645"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a1e07db76938eb8a2bb8c79b2d0ec4980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool protectionLevelVisible</definition>
        <argsstring>(Protection prot)</argsstring>
        <name>protectionLevelVisible</name>
        <param>
          <type><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member">Protection</ref></type>
          <declname>prot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7650" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7649" bodyend="7657"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1adac892ac420e7c1aab28a1d50d7b05fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>QCString stripIndentation</definition>
        <argsstring>(const QCString &amp;s)</argsstring>
        <name>stripIndentation</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7662" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7661" bodyend="7725"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1a1ddb475583a333a435d7198cddc76935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fileVisibleInIndex</definition>
        <argsstring>(FileDef *fd, bool &amp;genSourceFile)</argsstring>
        <name>fileVisibleInIndex</name>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>genSourceFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7729" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7728" bodyend="7738"/>
      </memberdef>
      <memberdef kind="function" id="df/d2d/util_8cpp_1afcbcbddb21f68c44fa7e6a9c5b54795d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addDocCrossReference</definition>
        <argsstring>(MemberDef *src, MemberDef *dst)</argsstring>
        <name>addDocCrossReference</name>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" line="7741" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp" bodystart="7740" bodyend="7781"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1997-2013<sp/>by<sp/>Dimitri<sp/>van<sp/>Heesch.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and<sp/>distribute<sp/>this<sp/>software<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>documentation<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>is<sp/>hereby<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>granted.<sp/>No<sp/>representations<sp/>are<sp/>made<sp/>about<sp/>the<sp/>suitability<sp/>of<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>for<sp/>any<sp/>purpose.<sp/>It<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;<sp/>without<sp/>express<sp/>or<sp/>implied<sp/>warranty.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Documents<sp/>produced<sp/>by<sp/>Doxygen<sp/>are<sp/>derivative<sp/>works<sp/>derived<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>input<sp/>used<sp/>in<sp/>their<sp/>production;<sp/>they<sp/>are<sp/>not<sp/>affected<sp/>by<sp/>this<sp/>license.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;md5.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qregexp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qfileinfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qdir.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qdatetime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qcache.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d3c/util_8h" kindref="compound" tooltip="A bunch of utility functions.">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;message.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;classdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filedef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doxygen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;outputlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;defargs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;language.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;htmlhelp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;example.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;version.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;groupdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;reflist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pagedef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;searchindex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doxygen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;textdocvisitor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/de2/portable_8h" kindref="compound" tooltip="Portable versions of functions that are platform dependent.">portable.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parserintf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bufstr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;image.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;growbuf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;entry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arguments.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memberlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;classlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;namespacedef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;membername.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filename.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;membergroup.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dirdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ENABLE_TRACINGSUPPORT<sp/>0</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_OS_MAC_)<sp/>&amp;&amp;<sp/>ENABLE_TRACINGSUPPORT</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRACINGSUPPORT</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACINGSUPPORT</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;execinfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>selects<sp/>one<sp/>of<sp/>the<sp/>name<sp/>to<sp/>sub-dir<sp/>mapping<sp/>algorithms<sp/>that<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>select<sp/>a<sp/>sub<sp/>directory<sp/>when<sp/>CREATE_SUBDIRS<sp/>is<sp/>set<sp/>to<sp/>YES.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALGO_COUNT<sp/>1</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALGO_CRC16<sp/>2</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALGO_MD5<sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>MAP_ALGO<sp/>ALGO_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>MAP_ALGO<sp/>ALGO_CRC16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_ALGO<sp/>ALGO_MD5</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REL_PATH_TO_ROOT<sp/>&quot;../../&quot;</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextGeneratorOLImpl<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">TextGeneratorOLImpl::TextGeneratorOLImpl(<ref refid="d2/d1a/class_output_doc_interface" kindref="compound" tooltip="Interface used for generating documentation.">OutputDocInterface</ref><sp/>&amp;od)<sp/>:<sp/>m_od(od)<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextGeneratorOLImpl::writeString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepSpaces)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="101"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;TextGeneratorOlImpl::writeString(&apos;%s&apos;,%d)\n&quot;,s,keepSpaces);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keepSpaces)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p=s;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cs[2];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs[1]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>m_od.writeNonBreakableSpace(1);<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>cs[0]=c,m_od.<ref refid="df/d27/class_base_output_doc_interface_1ad7d3f6631bd157739170690e669b3e75" kindref="member">docify</ref>(cs);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>m_od.<ref refid="df/d27/class_base_output_doc_interface_1ad7d3f6631bd157739170690e669b3e75" kindref="member">docify</ref>(s);<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextGeneratorOLImpl::writeBreak(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="126"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>m_od.lineBreak(</highlight><highlight class="stringliteral">&quot;typebreak&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;indent;i++)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>m_od.writeNonBreakableSpace(3);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextGeneratorOLImpl::writeLink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extRef,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*anchor,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="138"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;TextGeneratorOlImpl::writeLink(&apos;%s&apos;)\n&quot;,text);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>m_od.<ref refid="df/d27/class_base_output_doc_interface_1a3537423635807fe140ec5be1a2198060" kindref="member">writeObjectLink</ref>(extRef,file,anchor,text);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>inheritance<sp/>tree<sp/>of<sp/>depth<sp/>of<sp/>100000<sp/>should<sp/>be<sp/>enough<sp/>for<sp/>everyone<sp/>:-)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxInheritanceDepth<sp/>=<sp/>100000;<sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="d8/d3c/util_8h_1aa16e34240606f622b272b2b3e26d33e4" refkind="member"><highlight class="normal">QCString<sp/>removeAnonymousScopes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;[<sp/>:]*@[0-9]+[:<sp/>]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,l,sl=s.length();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(s,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>result+=s.mid(p,i-p);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=i;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b1=FALSE,b2=FALSE;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c&lt;i+l<sp/>&amp;&amp;<sp/>s.at(c)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(c++)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>b1=TRUE;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>c=i+l-1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c&gt;=i<sp/>&amp;&amp;<sp/>s.at(c)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(c--)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>b2=TRUE;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b1<sp/>&amp;&amp;<sp/>b2)<sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>result+=s.right(sl-p);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;removeAnonymousScopes(`%s&apos;)=`%s&apos;\n&quot;,s.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replace<sp/>anonymous<sp/>scopes<sp/>with<sp/>__anonymous__<sp/>or<sp/>replacement<sp/>if<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">QCString<sp/>replaceAnonymousScopes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*replacement)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;@[0-9]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,l,sl=s.length();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(s,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>result+=s.mid(p,i-p);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replacement)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=replacement;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;__anonymous__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>result+=s.right(sl-p);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;replaceAnonymousScopes(`%s&apos;)=`%s&apos;\n&quot;,s.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>strip<sp/>anonymous<sp/>left<sp/>hand<sp/>side<sp/>part<sp/>of<sp/>the<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">QCString<sp/>stripAnonymousNamespaceScope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0,l;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>QCString<sp/>newScope;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=getScopeFragment(s,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Scope<sp/>fragment<sp/>%s\n&quot;,s.mid(i,l).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::namespaceSDict-&gt;find(s.left(i+l))!=0)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(i)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newScope.isEmpty())<sp/>newScope+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newScope+=s.mid(i,l);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newScope.isEmpty())<sp/>newScope+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newScope+=s.right(s.length()-i);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;stripAnonymousNamespaceScope(`%s&apos;)=`%s&apos;\n&quot;,s.data(),newScope.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newScope;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writePageRef(<ref refid="d2/d1a/class_output_doc_interface" kindref="compound" tooltip="Interface used for generating documentation.">OutputDocInterface</ref><sp/>&amp;od,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cn,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mn)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>od.<ref refid="d2/d1a/class_output_doc_interface_1aba5fd4dd5b0360723e62fedc7d353f29" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>od.<ref refid="d2/d1a/class_output_doc_interface_1a9fbc5bc49aefab5a46f18864f396f011" kindref="member">disable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>od.<ref refid="d2/d1a/class_output_doc_interface_1a9fbc5bc49aefab5a46f18864f396f011" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;PDF_HYPERLINKS&quot;</highlight><highlight class="normal">))<sp/>od.<ref refid="d2/d1a/class_output_doc_interface_1a9fbc5bc49aefab5a46f18864f396f011" kindref="member">disable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;RTF_HYPERLINKS&quot;</highlight><highlight class="normal">))<sp/>od.<ref refid="d2/d1a/class_output_doc_interface_1a9fbc5bc49aefab5a46f18864f396f011" kindref="member">disable</ref>(OutputGenerator::RTF);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>od.startPageRef();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>od.<ref refid="df/d27/class_base_output_doc_interface_1ad7d3f6631bd157739170690e669b3e75" kindref="member">docify</ref>(theTranslator-&gt;trPageAbbreviation());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>od.endPageRef(cn,mn);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>od.<ref refid="d2/d1a/class_output_doc_interface_1a4fb05016264d9c9f0946c2fd8e7b8e56" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="d8/d3c/util_8h_1a5530a73bd518581ac62e4eee5bc2f6db" refkind="member"><highlight class="normal">QCString<sp/>generateMarker(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>result.sprintf(</highlight><highlight class="stringliteral">&quot;@%d&quot;</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>stripFromPath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;path,QStrList<sp/>&amp;l)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>at<sp/>all<sp/>the<sp/>strings<sp/>in<sp/>the<sp/>list<sp/>and<sp/>strip<sp/>the<sp/>longest<sp/>match<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=l.first();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>QCString<sp/>potential;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>prefix<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefix.length()<sp/>&gt;<sp/>length<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qstricmp(path.left(prefix.length()),prefix)==0)<sp/></highlight><highlight class="comment">//<sp/>case<sp/>insensitive<sp/>compare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>prefix.length();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>potential<sp/>=<sp/>path.right(path.length()-prefix.length());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>l.next();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>potential;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="d8/d3c/util_8h_1ac7a97256c349c1f4f1d18d7a7098c081" refkind="member"><highlight class="normal">QCString<sp/>stripFromPath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;path)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stripFromPath(path,Config_getList(</highlight><highlight class="stringliteral">&quot;STRIP_FROM_PATH&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="d8/d3c/util_8h_1a3d790f4b8fa74cbafd6c4b34d4573093" refkind="member"><highlight class="normal">QCString<sp/>stripFromIncludePath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;path)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stripFromPath(path,Config_getList(</highlight><highlight class="stringliteral">&quot;STRIP_FROM_INC_PATH&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="d8/d3c/util_8h_1a826cc396ba482fb9ef1990104f9c1026" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guessSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>QCString<sp/>n=((QCString)name).lower();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n.right(2)==</highlight><highlight class="stringliteral">&quot;.c&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/></highlight><highlight class="comment">//<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(3)==</highlight><highlight class="stringliteral">&quot;.cc&quot;</highlight><highlight class="normal"><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.cxx&quot;</highlight><highlight class="normal"><sp/><sp/>||</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.cpp&quot;</highlight><highlight class="normal"><sp/><sp/>||</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.c++&quot;</highlight><highlight class="normal"><sp/><sp/>||</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(5)==</highlight><highlight class="stringliteral">&quot;.java&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(2)==</highlight><highlight class="stringliteral">&quot;.m&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(2)==</highlight><highlight class="stringliteral">&quot;.M&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(3)==</highlight><highlight class="stringliteral">&quot;.mm&quot;</highlight><highlight class="normal"><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(3)==</highlight><highlight class="stringliteral">&quot;.ii&quot;</highlight><highlight class="normal"><sp/><sp/><sp/>||<sp/></highlight><highlight class="comment">//<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.ixx&quot;</highlight><highlight class="normal"><sp/><sp/>||</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.ipp&quot;</highlight><highlight class="normal"><sp/><sp/>||</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.i++&quot;</highlight><highlight class="normal"><sp/><sp/>||</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.inl&quot;</highlight><highlight class="normal"><sp/><sp/>||</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.xml&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Entry::SOURCE_SEC;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n.right(2)==</highlight><highlight class="stringliteral">&quot;.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/>||<sp/></highlight><highlight class="comment">//<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(3)==</highlight><highlight class="stringliteral">&quot;.hh&quot;</highlight><highlight class="normal"><sp/><sp/>||</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.hxx&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.hpp&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.h++&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.idl&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(4)==</highlight><highlight class="stringliteral">&quot;.ddl&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n.right(5)==</highlight><highlight class="stringliteral">&quot;.pidl&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Entry::HEADER_SEC;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">QCString<sp/>resolveTypeDef(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;qualifiedName,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>**typedefContext)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&lt;&lt;resolveTypeDef(%s,%s)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>?<sp/>context-&gt;name().data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;,qualifiedName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qualifiedName.isEmpty())<sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>qualified<sp/>name<sp/>empty!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*mContext=context;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typedefContext)<sp/>*typedefContext=context;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>qualified<sp/>name<sp/>has<sp/>a<sp/>scope<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopeIndex<sp/>=<sp/>qualifiedName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>QCString<sp/>resName=qualifiedName;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeIndex!=-1)<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>scope<sp/>part<sp/>for<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>resName=qualifiedName.right(qualifiedName.length()-scopeIndex-2);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resName.isEmpty())</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>qualifiedName<sp/>was<sp/>of<sp/>form<sp/>A::<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>qualified<sp/>name<sp/>of<sp/>form<sp/>A::!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mContext<sp/>&amp;&amp;<sp/>md==0)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>1:<sp/>get<sp/>the<sp/>right<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*resScope=mContext;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeIndex!=-1)<sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>split-off<sp/>scope<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>resScopeName<sp/>=<sp/>qualifiedName.left(scopeIndex);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;resScopeName=`%s&apos;\n&quot;,resScopeName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look-up<sp/>scope<sp/>in<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is,ps=0;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((is=getScopeFragment(resScopeName,ps,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>qualScopePart<sp/>=<sp/>resScopeName.mid(is,l);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>tmp<sp/>=<sp/>resolveTypeDef(mContext,qualScopePart);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tmp.isEmpty())<sp/>qualScopePart=tmp;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resScope<sp/>=<sp/>resScope-&gt;findInnerCompound(qualScopePart);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;qualScopePart=`%s&apos;<sp/>resScope=%p\n&quot;,qualScopePart.data(),resScope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resScope==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps=is+l;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;resScope=%s\n&quot;,resScope?resScope-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>2:<sp/>get<sp/>the<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resScope)<sp/></highlight><highlight class="comment">//<sp/>no<sp/>scope<sp/>or<sp/>scope<sp/>found<sp/>in<sp/>the<sp/>current<sp/>context<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scope<sp/>found:<sp/>%s,<sp/>look<sp/>for<sp/>typedef<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>resScope-&gt;qualifiedName().data(),resName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref><sp/>*mnd=0;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resScope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnd=Doxygen::memberNameSDict;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnd=Doxygen::functionNameSDict;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=mnd-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(resName);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*tmd=0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minDist=-1;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(tmd=mni.current());++mni)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>member<sp/>%s<sp/>resScope=%s<sp/>outerScope=%s<sp/>mContext=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tmd-&gt;name().data(),<sp/>resScope-&gt;name().data(),<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tmd-&gt;getOuterScope()-&gt;name().data(),<sp/>mContext);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmd-&gt;isTypedef()<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>tmd-&gt;getOuterScope()==resScope*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist=isAccessibleFrom(resScope,0,tmd);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist!=-1<sp/>&amp;&amp;<sp/>(md==0<sp/>||<sp/>dist&lt;minDist))</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md<sp/>=<sp/>tmd;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>mContext=mContext-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>3:<sp/>get<sp/>the<sp/>member&apos;s<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;resolveTypeDef:<sp/>Found<sp/>typedef<sp/>name<sp/>`%s&apos;<sp/>in<sp/>scope<sp/>`%s&apos;<sp/>value=`%s&apos;<sp/>args=&apos;%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qualifiedName.data(),context-&gt;name().data(),md-&gt;typeString(),md-&gt;argsString()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>result=md-&gt;typeString();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>args<sp/>=<sp/>md-&gt;argsString();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.find(</highlight><highlight class="stringliteral">&quot;)(&quot;</highlight><highlight class="normal">)!=-1)<sp/></highlight><highlight class="comment">//<sp/>typedef<sp/>of<sp/>a<sp/>function/member<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=args;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.find(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)!=-1)<sp/></highlight><highlight class="comment">//<sp/>typedef<sp/>of<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=args;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typedefContext)<sp/>*typedefContext=md-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;resolveTypeDef:<sp/>Typedef<sp/>`%s&apos;<sp/>not<sp/>found<sp/>in<sp/>scope<sp/>`%s&apos;!\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qualifiedName.data(),context<sp/>?<sp/>context-&gt;name().data()<sp/>:<sp/>&quot;&lt;global&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="d8/d3c/util_8h_1af038b3c55db4fa840af0ee26464bb72a" refkind="member"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*getClass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n==0<sp/>||<sp/>n[0]==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>QCString<sp/>name=n;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*result<sp/>=<sp/>Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(result==0<sp/>&amp;&amp;<sp/>!exact)<sp/>//<sp/>also<sp/>try<sp/>generic<sp/>and<sp/>protocol<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>result<sp/>=<sp/>Doxygen::classSDict-&gt;find(name+&quot;-g&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(result==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>result<sp/>=<sp/>Doxygen::classSDict-&gt;find(name+&quot;-p&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getClass(%s)=%s\n&quot;,n,result?result-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*getResolvedNamespace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name==0<sp/>||<sp/>name[0]==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>QCString<sp/>*subst<sp/>=<sp/>Doxygen::namespaceAliasDict[name];</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subst)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;<sp/></highlight><highlight class="comment">//<sp/>recursion<sp/>detection<sp/>guard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*newSubst;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((newSubst=Doxygen::namespaceAliasDict[*subst])<sp/>&amp;&amp;<sp/>count&lt;10)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subst=newSubst;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==10)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;possible<sp/>recursive<sp/>namespace<sp/>alias<sp/>detected<sp/>for<sp/>%s!\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(subst-&gt;data());</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;MemberDef&gt;<sp/>g_resolvedTypedefs;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;Definition&gt;<sp/>g_visitedNamespaces;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*getResolvedClassRec(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>**pTypeDef,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>*pTemplSpec,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>*pResolvedType</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isAccessibleFromWithExpScope(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;explicitScopePart);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="d8/d3c/util_8h_1a68f1506abbd9c7495e2bf9dce51c6b20" refkind="member"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*newResolveTypedef(<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>**pMemType,QCString<sp/>*pTemplSpec,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>*pResolvedType,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*actTemplParams)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;newResolveTypedef(md=%p,cachedVal=%p)\n&quot;,md,md-&gt;getCachedTypedefVal());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCached<sp/>=<sp/>md-&gt;isTypedefValCached();<sp/></highlight><highlight class="comment">//<sp/>value<sp/>already<sp/>cached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isCached)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Already<sp/>cached<sp/>%s-&gt;%s<sp/>[%s]\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;getCachedTypedefVal()?md-&gt;getCachedTypedefVal()-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;getCachedResolvedTypedef()?md-&gt;getCachedResolvedTypedef().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTemplSpec)<sp/><sp/><sp/><sp/>*pTemplSpec<sp/><sp/><sp/><sp/>=<sp/>md-&gt;getCachedTypedefTemplSpec();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pResolvedType)<sp/>*pResolvedType<sp/>=<sp/>md-&gt;getCachedResolvedTypedef();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md-&gt;getCachedTypedefVal();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>typedef\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>QCString<sp/>qname<sp/>=<sp/>md-&gt;<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_resolvedTypedefs.find(qname))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>typedef<sp/>already<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>g_resolvedTypedefs.insert(qname,md);<sp/></highlight><highlight class="comment">//<sp/>put<sp/>on<sp/>the<sp/>trace<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*typeClass<sp/>=<sp/>md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>QCString<sp/>type<sp/>=<sp/>md-&gt;typeString();<sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>&quot;value&quot;<sp/>of<sp/>the<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeClass<sp/>&amp;&amp;<sp/>typeClass-&gt;<ref refid="d1/dcf/class_class_def_1a1cf3d48d5fdfce179f11d463d379d5f9" kindref="member" tooltip="Returns TRUE if this class is a template.">isTemplate</ref>()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actTemplParams<sp/>&amp;&amp;<sp/>actTemplParams-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>substituteTemplateArgumentsInString(type,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeClass-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>(),actTemplParams);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>QCString<sp/>typedefValue<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tl=type.length();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip=tl-1;<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>*<sp/>and<sp/>&amp;<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ip&gt;=0<sp/>&amp;&amp;<sp/>(type.at(ip)==</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>||<sp/>type.at(ip)==</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>||<sp/>type.at(ip)==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>ip--;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>type=type.left(ip+1);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;const<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>leading<sp/>&quot;const&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;struct<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>leading<sp/>&quot;struct&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;union<sp/>&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>leading<sp/>&quot;union&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp=0;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>tl=type.length();<sp/></highlight><highlight class="comment">//<sp/>length<sp/>may<sp/>have<sp/>been<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp&lt;tl<sp/>&amp;&amp;<sp/>type.at(sp)==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>sp++;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*memTypeDef<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/>*result<sp/>=<sp/>getResolvedClassRec(md-&gt;getOuterScope(),</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileScope,type,&amp;memTypeDef,0,pResolvedType);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>type<sp/>is<sp/>a<sp/>typedef<sp/>then<sp/>return<sp/>what<sp/>it<sp/>resolves<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memTypeDef<sp/>&amp;&amp;<sp/>memTypeDef-&gt;isTypedef())<sp/></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>result=newResolveTypedef(fileScope,memTypeDef,pMemType,pTemplSpec);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memTypeDef<sp/>&amp;&amp;<sp/>memTypeDef-&gt;isEnumerate()<sp/>&amp;&amp;<sp/>pMemType)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>*pMemType<sp/>=<sp/>memTypeDef;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;type=%s<sp/>result=%p\n&quot;,type.data(),result);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result==0)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>unspecialized<sp/>version<sp/>if<sp/>type<sp/>is<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si=type.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=type.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si==-1<sp/>&amp;&amp;<sp/>i!=-1)<sp/></highlight><highlight class="comment">//<sp/>typedef<sp/>of<sp/>a<sp/>template<sp/>=&gt;<sp/>try<sp/>the<sp/>unspecialized<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTemplSpec)<sp/>*pTemplSpec<sp/>=<sp/>type.mid(i);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getResolvedClassRec(md-&gt;getOuterScope(),fileScope,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type.left(i),0,0,pResolvedType);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;result=%p<sp/>pRresolvedType=%s<sp/>sp=%d<sp/>ip=%d<sp/>tl=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>result,pResolvedType?pResolvedType-&gt;data():&quot;&lt;none&gt;&quot;,sp,ip,tl);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si!=-1)<sp/></highlight><highlight class="comment">//<sp/>A::B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i=type.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,si);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==-1)<sp/></highlight><highlight class="comment">//<sp/>Something<sp/>like<sp/>A&lt;T&gt;::B<sp/>=&gt;<sp/>lookup<sp/>A::B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i=type.length();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Something<sp/>like<sp/>A&lt;T&gt;::B&lt;S&gt;<sp/>=&gt;<sp/>lookup<sp/>A::B,<sp/>spec=&lt;S&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTemplSpec)<sp/>*pTemplSpec<sp/>=<sp/>type.mid(i);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getResolvedClassRec(md-&gt;getOuterScope(),fileScope,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stripTemplateSpecifiersFromScope(type.left(i),FALSE),0,0,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pResolvedType);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(result)<sp/>ip=si+sp+1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pResolvedType)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pResolvedType=result-&gt;<ref refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;*pResolvedType=%s\n&quot;,pResolvedType-&gt;data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp&gt;0)<sp/><sp/><sp/><sp/>pResolvedType-&gt;prepend(typedefValue.left(sp));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ip&lt;tl-1)<sp/>pResolvedType-&gt;append(typedefValue.right(tl-ip-1));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pResolvedType=typedefValue;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remember<sp/>computed<sp/>value<sp/>for<sp/>next<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&amp;&amp;<sp/>result-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>()!=</highlight><highlight class="stringliteral">&quot;&lt;code&gt;&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>check<sp/>is<sp/>needed<sp/>to<sp/>prevent<sp/>that<sp/>temporary<sp/>classes<sp/>that<sp/>are<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>introduced<sp/>while<sp/>parsing<sp/>code<sp/>fragments<sp/>are<sp/>being<sp/>cached<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;setting<sp/>cached<sp/>typedef<sp/>%p<sp/>in<sp/>result<sp/>%p\n&quot;,md,result);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;==&gt;<sp/>%s<sp/>(%s,%d)\n&quot;,result-&gt;name().data(),result-&gt;getDefFileName().data(),result-&gt;getDefLine());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;*pResolvedType=%s\n&quot;,pResolvedType?pResolvedType-&gt;data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;cacheTypedefVal(result,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTemplSpec<sp/>?<sp/>*pTemplSpec<sp/>:<sp/>QCString(),</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pResolvedType<sp/>?<sp/>*pResolvedType<sp/>:<sp/>QCString()</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>g_resolvedTypedefs.remove(qname);<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>from<sp/>the<sp/>trace<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>substTypedef(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>**pTypeDef=0)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>QCString<sp/>result=name;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lookup<sp/>scope<sp/>fragment<sp/>in<sp/>the<sp/>symbol<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><ref refid="d9/d4a/class_definition_intf" kindref="compound" tooltip="Abstract interface for a Definition or DefinitionList.">DefinitionIntf</ref><sp/>*di<sp/>=<sp/>Doxygen::symbolMap-&gt;find(name);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bestMatch=0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==DefinitionIntf::TypeSymbolList)<sp/></highlight><highlight class="comment">//<sp/>multi<sp/>symbols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>the<sp/>best<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d0b/class_definition_list_iterator" kindref="compound" tooltip="An iterator for Definition objects in a DefinitionList.">DefinitionListIterator</ref><sp/>dli(*(<ref refid="da/d39/class_definition_list" kindref="compound" tooltip="A list of Definition objects.">DefinitionList</ref>*)di);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minDistance=10000;<sp/></highlight><highlight class="comment">//<sp/>init<sp/>at<sp/>&quot;infinite&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dli.toFirst();(d=dli.current());++dli)<sp/></highlight><highlight class="comment">//<sp/>foreach<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>look<sp/>at<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>also<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md<sp/>=<sp/>(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*)d;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isTypedef())<sp/></highlight><highlight class="comment">//<sp/>d<sp/>is<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>accessibility<sp/>of<sp/>typedef<sp/>within<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>isAccessibleFromWithExpScope(scope,fileScope,d,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance!=-1<sp/>&amp;&amp;<sp/>distance&lt;minDistance)<sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>definition<sp/>is<sp/>accessible<sp/>and<sp/>a<sp/>better<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance=distance;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>md;<sp/></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==DefinitionIntf::TypeMember)<sp/></highlight><highlight class="comment">//<sp/>single<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref>*)di;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>also<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md<sp/>=<sp/>(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*)di;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isTypedef())<sp/></highlight><highlight class="comment">//<sp/>d<sp/>is<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>accessibility<sp/>of<sp/>typedef<sp/>within<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>isAccessibleFromWithExpScope(scope,fileScope,d,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance!=-1)<sp/></highlight><highlight class="comment">//<sp/>definition<sp/>is<sp/>accessible<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>md;<sp/></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bestMatch)<sp/></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>bestMatch-&gt;typeString();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTypeDef)<sp/>*pTypeDef=bestMatch;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;substTypedef(%s,%s)=%s\n&quot;,scope?scope-&gt;name().data():&quot;&lt;global&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*endOfPathIsUsedClass(<ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;Definition&gt;</ref><sp/>*cl,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;localName)</highlight></codeline>
<codeline lineno="728"><highlight class="normal">{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cl)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound" tooltip="Ordered dictionary of elements of type T.">SDict&lt;Definition&gt;::Iterator</ref><sp/>cli(*cl);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d5/dcc/class_definition_1ae4fa9ca0807ec16be5b9b4606a5f4ba9" kindref="member">localName</ref>()==localName)</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cd;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*followPath(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*start,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;path)</highlight></codeline>
<codeline lineno="750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is,ps;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*current=start;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>ps=0;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;followPath:<sp/>start=&apos;%s&apos;<sp/>path=&apos;%s&apos;\n&quot;,start?start-&gt;name().data():&quot;&lt;none&gt;&quot;,path.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>part<sp/>of<sp/>the<sp/>explicit<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((is=getScopeFragment(path,ps,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>resolve<sp/>the<sp/>part<sp/>if<sp/>it<sp/>is<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*typeDef=0;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>qualScopePart<sp/>=<sp/>substTypedef(current,fileScope,path.mid(is,l),&amp;typeDef);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/>qualScopePart=%s\n&quot;,qualScopePart.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeDef)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*type<sp/>=<sp/>newResolveTypedef(fileScope,typeDef);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>type<sp/>%s\n&quot;,type-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*next<sp/>=<sp/>current-&gt;findInnerCompound(qualScopePart);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;++<sp/>Looking<sp/>for<sp/>%s<sp/>inside<sp/>%s<sp/>result<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>qualScopePart.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>current-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>next?next-&gt;name().data():&quot;&lt;null&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next==0)<sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>follow<sp/>the<sp/>path<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;==&gt;<sp/>next==0!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeNamespace)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>endOfPathIsUsedClass(</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*)current)-&gt;getUsedClasses(),qualScopePart);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeFile)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>endOfPathIsUsedClass(</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*)current)-&gt;getUsedClasses(),qualScopePart);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>continue<sp/>to<sp/>follow<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;==&gt;<sp/>current<sp/>=<sp/>%p\n&quot;,current);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>ps=is+l;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;followPath(start=%s,path=%s)<sp/>result=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>start-&gt;name().data(),path.data(),current?current-&gt;name().data():&quot;&lt;null&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;<sp/></highlight><highlight class="comment">//<sp/>path<sp/>could<sp/>be<sp/>followed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>accessibleViaUsingClass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;Definition&gt;</ref><sp/>*cl,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item,</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;explicitScopePart=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;accessibleViaUsingClass(%p)\n&quot;,cl);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cl)<sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>class<sp/>was<sp/>imported<sp/>via<sp/>a<sp/>using<sp/>statement<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound" tooltip="Ordered dictionary of elements of type T.">SDict&lt;Definition&gt;::Iterator</ref><sp/>cli(*cl);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*ucd;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>explicitScopePartEmpty<sp/>=<sp/>explicitScopePart.isEmpty();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(ucd=cli.current());++cli)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>via<sp/>used<sp/>class<sp/>%s\n&quot;,ucd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*sc<sp/>=<sp/>explicitScopePartEmpty<sp/>?<sp/>ucd<sp/>:<sp/>followPath(ucd,fileScope,explicitScopePart);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc<sp/>&amp;&amp;<sp/>sc==item)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Try<sp/>via<sp/>used<sp/>class<sp/>done\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>accessibleViaUsingNamespace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*nl,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item,</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;explicitScopePart=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;void&gt;<sp/>visitedDict;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nl)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>used<sp/>namespaces<sp/>for<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*nl);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*und;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nli.toFirst();(und=nli.current());++nli,count++)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;[Trying<sp/>via<sp/>used<sp/>namespace<sp/>%s:<sp/>count=%d/%d\n&quot;,und-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>count,nl-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*sc<sp/>=<sp/>explicitScopePart.isEmpty()<sp/>?<sp/>und<sp/>:<sp/>followPath(und,fileScope,explicitScopePart);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc<sp/>&amp;&amp;<sp/>item-&gt;getOuterScope()==sc)<sp/></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;]<sp/>found<sp/>it\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>key=und-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(und-&gt;getUsedNamespaces()<sp/>&amp;&amp;<sp/>visitedDict.<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(key)==0)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visitedDict.insert(key,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0x08);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessibleViaUsingNamespace(und-&gt;getUsedNamespaces(),fileScope,item,explicitScopePart))</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;]<sp/>found<sp/>it<sp/>via<sp/>recursion\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visitedDict.remove(key);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;]<sp/>Try<sp/>via<sp/>used<sp/>namespace<sp/>done\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_STACK_SIZE<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="keyword">class<sp/></highlight><highlight class="normal">AccessStack</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>AccessStack()<sp/>:<sp/>m_index(0)<sp/>{}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_index&lt;MAX_STACK_SIZE)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_elements[m_index].scope<sp/><sp/><sp/><sp/><sp/>=<sp/>scope;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_elements[m_index].fileScope<sp/>=<sp/>fileScope;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_elements[m_index].item<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_index++;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;expScope)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_index&lt;MAX_STACK_SIZE)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_elements[m_index].scope<sp/><sp/><sp/><sp/><sp/>=<sp/>scope;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_elements[m_index].fileScope<sp/>=<sp/>fileScope;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_elements[m_index].item<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_elements[m_index].expScope<sp/><sp/>=<sp/>expScope;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_index++;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop()</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_index&gt;0)<sp/>m_index--;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>find(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;m_index;i++)</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AccessElem<sp/>*e<sp/>=<sp/>&amp;m_elements[i];</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;scope==scope<sp/>&amp;&amp;<sp/>e-&gt;fileScope==fileScope<sp/>&amp;&amp;<sp/>e-&gt;item==item)<sp/></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>find(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;expScope)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;m_index;i++)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AccessElem<sp/>*e<sp/>=<sp/>&amp;m_elements[i];</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;scope==scope<sp/>&amp;&amp;<sp/>e-&gt;fileScope==fileScope<sp/>&amp;&amp;<sp/>e-&gt;item==item<sp/>&amp;&amp;<sp/>e-&gt;expScope==expScope)<sp/></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AccessElem</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>expScope;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_index;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>AccessElem<sp/>m_elements[MAX_STACK_SIZE];</highlight></codeline>
<codeline lineno="940"><highlight class="normal">};</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>&quot;distance&quot;<sp/>(=number<sp/>of<sp/>levels<sp/>up)<sp/>from<sp/>item<sp/>to<sp/>scope,<sp/>or<sp/>-1</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*<sp/>if<sp/>item<sp/>in<sp/>not<sp/>inside<sp/>scope.<sp/></highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isAccessibleFrom(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item)</highlight></codeline>
<codeline lineno="946"><highlight class="normal">{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&lt;isAccesibleFrom(scope=%s,item=%s<sp/>itemScope=%s)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scope-&gt;name().data(),item-&gt;name().data(),item-&gt;getOuterScope()-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>AccessStack<sp/>accessStack;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessStack.find(scope,fileScope,item))</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>accessStack.push(scope,fileScope,item);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result=0;<sp/></highlight><highlight class="comment">//<sp/>assume<sp/>we<sp/>found<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*itemScope=item-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>memberAccessibleFromScope<sp/>=<sp/></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(item-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itemScope<sp/>&amp;&amp;<sp/>itemScope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accessible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>*)scope)-&gt;isAccessibleMember((<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*)item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nestedClassInsideBaseClass<sp/>=<sp/></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(item-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>nested<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itemScope<sp/>&amp;&amp;<sp/>itemScope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>&amp;&amp;<sp/><sp/></highlight><highlight class="comment">//<sp/>inside<sp/>a<sp/>base<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>of<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>*)scope)-&gt;isBaseClass((<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>*)itemScope,TRUE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemScope==scope<sp/>||<sp/>memberAccessibleFromScope<sp/>||<sp/>nestedClassInsideBaseClass)<sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>it\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nestedClassInsideBaseClass)<sp/>result++;<sp/></highlight><highlight class="comment">//<sp/>penalty<sp/>for<sp/>base<sp/>class<sp/>to<sp/>prevent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>preferred<sp/>over<sp/>nested<sp/>class<sp/>in<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>bug<sp/>686956</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope==Doxygen::globalScope)</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileScope)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;Definition&gt;</ref><sp/>*cl<sp/>=<sp/>fileScope-&gt;getUsedClasses();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessibleViaUsingClass(cl,fileScope,item))<sp/></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>via<sp/>used<sp/>class\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*nl<sp/>=<sp/>fileScope-&gt;getUsedNamespaces();</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessibleViaUsingNamespace(nl,fileScope,item))<sp/></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>via<sp/>used<sp/>namespace\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>reached<sp/>global<sp/>scope\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>result=-1;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>found<sp/>in<sp/>path<sp/>to<sp/>globalScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>searching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>scope<sp/>is<sp/>a<sp/>namespace,<sp/>which<sp/>is<sp/>using<sp/>other<sp/>classes<sp/>and<sp/>namespaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeNamespace)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nscope<sp/>=<sp/>(<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>*)scope;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>%s<sp/>is<sp/>namespace<sp/>with<sp/>%d<sp/>used<sp/>classes\n&quot;,nscope-&gt;name().data(),nscope-&gt;getUsedClasses());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;Definition&gt;</ref><sp/>*cl<sp/>=<sp/>nscope-&gt;getUsedClasses();</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessibleViaUsingClass(cl,fileScope,item))<sp/></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>via<sp/>used<sp/>class\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*nl<sp/>=<sp/>nscope-&gt;getUsedNamespaces();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessibleViaUsingNamespace(nl,fileScope,item))<sp/></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>via<sp/>used<sp/>namespace\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>repeat<sp/>for<sp/>the<sp/>parent<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>i=isAccessibleFrom(scope-&gt;getOuterScope(),fileScope,item);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>result=%d\n&quot;,i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>result=<sp/>(i==-1)<sp/>?<sp/>-1<sp/>:<sp/>i+2;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>accessStack.pop();</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Doxygen::lookupCache.insert(key,new<sp/>int(result));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>&quot;distance&quot;<sp/>(=number<sp/>of<sp/>levels<sp/>up)<sp/>from<sp/>item<sp/>to<sp/>scope,<sp/>or<sp/>-1</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/>*<sp/>if<sp/>item<sp/>in<sp/>not<sp/>in<sp/>this<sp/>scope.<sp/>The<sp/>explicitScopePart<sp/>limits<sp/>the<sp/>search</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/>*<sp/>to<sp/>scopes<sp/>that<sp/>match<sp/>\a<sp/>scope<sp/>(or<sp/>its<sp/>parent<sp/>scope(s))<sp/>plus<sp/>the<sp/>explicit<sp/>part.</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/>*<sp/>Example:</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/>*<sp/>class<sp/>A<sp/>{<sp/>public:<sp/>class<sp/>I<sp/>{};<sp/>};</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/>*<sp/>class<sp/>B<sp/>{<sp/>public:<sp/>class<sp/>J<sp/>{};<sp/>};</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/>*<sp/>-<sp/>Looking<sp/>for<sp/>item==&apos;J&apos;<sp/>inside<sp/>scope==&apos;B&apos;<sp/>will<sp/>return<sp/>0.</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/>*<sp/>-<sp/>Looking<sp/>for<sp/>item==&apos;I&apos;<sp/>inside<sp/>scope==&apos;B&apos;<sp/>will<sp/>return<sp/>-1<sp/></highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(as<sp/>it<sp/>is<sp/>not<sp/>found<sp/>in<sp/>B<sp/>nor<sp/>in<sp/>the<sp/>global<sp/>scope).</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/>*<sp/>-<sp/>Looking<sp/>for<sp/>item==&apos;A::I&apos;<sp/>inside<sp/>scope==&apos;B&apos;,<sp/>first<sp/>the<sp/>match<sp/>B::A::I<sp/>is<sp/>tried<sp/>but<sp/></highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/>*<sp/><sp/><sp/>not<sp/>found<sp/>and<sp/>then<sp/>A::I<sp/>is<sp/>searched<sp/>in<sp/>the<sp/>global<sp/>scope,<sp/>which<sp/>matches<sp/>and<sp/></highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/>*<sp/><sp/><sp/>thus<sp/>the<sp/>result<sp/>is<sp/>1.</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isAccessibleFromWithExpScope(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*item,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;explicitScopePart)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(explicitScopePart.isEmpty())</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>degenerate<sp/>case<sp/>where<sp/>there<sp/>is<sp/>no<sp/>explicit<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isAccessibleFrom(scope,fileScope,item);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>AccessStack<sp/>accessStack;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessStack.find(scope,fileScope,item,explicitScopePart))</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>accessStack.push(scope,fileScope,item,explicitScopePart);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>&lt;isAccessibleFromWithExpScope(%s,%s,%s)\n&quot;,scope?scope-&gt;name().data():&quot;&lt;global&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item?item-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>explicitScopePart.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result=0;<sp/></highlight><highlight class="comment">//<sp/>assume<sp/>we<sp/>found<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*newScope<sp/>=<sp/>followPath(scope,fileScope,explicitScopePart);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newScope)<sp/><sp/></highlight><highlight class="comment">//<sp/>explicitScope<sp/>is<sp/>inside<sp/>scope<sp/>=&gt;<sp/>newScope<sp/>is<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*itemScope<sp/>=<sp/>item-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>scope<sp/>traversal<sp/>successful<sp/>%s&lt;-&gt;%s!\n&quot;,itemScope-&gt;name().data(),newScope-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(newScope<sp/>&amp;&amp;<sp/>newScope-&gt;definitionType()==Definition::TypeClass)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ClassDef<sp/>*cd<sp/>=<sp/>(ClassDef<sp/>*)newScope;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;---&gt;<sp/>Class<sp/>%s:<sp/>bases=%p\n&quot;,cd-&gt;name().data(),cd-&gt;baseClasses());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemScope==newScope)<sp/><sp/></highlight><highlight class="comment">//<sp/>exact<sp/>match<sp/>of<sp/>scopes<sp/>=&gt;<sp/>distance==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>it\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemScope<sp/>&amp;&amp;<sp/>newScope<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itemScope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newScope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>*)newScope)-&gt;isBaseClass((<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>*)itemScope,TRUE,0)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inheritance<sp/>is<sp/>also<sp/>ok.<sp/>Example:<sp/>looking<sp/>for<sp/>B::I,<sp/>where<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>A<sp/>{<sp/>public:<sp/>class<sp/>I<sp/>{}<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>B<sp/>:<sp/>public<sp/>A<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>looking<sp/>for<sp/>B::I,<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>A<sp/>{<sp/>public:<sp/>class<sp/>I<sp/>{}<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>B<sp/>{<sp/>public:<sp/>class<sp/>I<sp/>{}<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>find<sp/>A::I,<sp/>so<sp/>we<sp/>still<sp/>prefer<sp/>a<sp/>direct<sp/>match<sp/>and<sp/>give<sp/>this<sp/>one<sp/>a<sp/>distance<sp/>of<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=1;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scope(%s)<sp/>is<sp/>base<sp/>class<sp/>of<sp/>newScope(%s)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scope-&gt;name().data(),newScope-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=-1;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newScope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeNamespace)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_visitedNamespaces.insert(newScope-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),newScope);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>part<sp/>deals<sp/>with<sp/>the<sp/>case<sp/>where<sp/>item<sp/>is<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A::B::C<sp/>but<sp/>is<sp/>explicit<sp/>referenced<sp/>as<sp/>A::C,<sp/>where<sp/>B<sp/>is<sp/>imported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>A<sp/>via<sp/>a<sp/>using<sp/>directive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;newScope<sp/>is<sp/>a<sp/>namespace:<sp/>%s!\n&quot;,newScope-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nscope<sp/>=<sp/>(<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>*)newScope;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;Definition&gt;</ref><sp/>*cl<sp/>=<sp/>nscope-&gt;getUsedClasses();</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cl)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound" tooltip="Ordered dictionary of elements of type T.">SDict&lt;Definition&gt;::Iterator</ref><sp/>cli(*cl);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>for<sp/>class<sp/>%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==item)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>class<sp/>is<sp/>used<sp/>in<sp/>this<sp/>scope\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*nl<sp/>=<sp/>nscope-&gt;getUsedNamespaces();</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nl)</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*nl);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nli.toFirst();(nd=nli.current());++nli)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_visitedNamespaces.find(nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())==0)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>for<sp/>namespace<sp/>%s\n&quot;,nd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>isAccessibleFromWithExpScope(scope,fileScope,item,nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>via<sp/>explicit<sp/>scope<sp/>of<sp/>used<sp/>namespace\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>repeat<sp/>for<sp/>the<sp/>parent<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope!=Doxygen::globalScope)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>isAccessibleFromWithExpScope(scope-&gt;getOuterScope(),fileScope,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item,explicitScopePart);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>|<sp/>result=%d\n&quot;,i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(i==-1)<sp/>?<sp/>-1<sp/>:<sp/>i+2;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>failed<sp/>to<sp/>resolve<sp/>explicitScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>failed<sp/>to<sp/>resolve:<sp/>scope=%s\n&quot;,scope-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeNamespace)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nscope<sp/>=<sp/>(<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>*)scope;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*nl<sp/>=<sp/>nscope-&gt;getUsedNamespaces();</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessibleViaUsingNamespace(nl,fileScope,item,explicitScopePart))<sp/></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>in<sp/>used<sp/>namespace\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope==Doxygen::globalScope)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileScope)</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*nl<sp/>=<sp/>fileScope-&gt;getUsedNamespaces();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessibleViaUsingNamespace(nl,fileScope,item,explicitScopePart))<sp/></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>found<sp/>in<sp/>used<sp/>namespace\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>not<sp/>found\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=-1;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>continue<sp/>by<sp/>looking<sp/>into<sp/>the<sp/>parent<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=isAccessibleFromWithExpScope(scope-&gt;getOuterScope(),fileScope,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item,explicitScopePart);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>result=%d\n&quot;,i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=<sp/>(i==-1)<sp/>?<sp/>-1<sp/>:<sp/>i+2;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>&gt;<sp/>result=%d\n&quot;,result);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>accessStack.pop();</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Doxygen::lookupCache.insert(key,new<sp/>int(result));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>computeQualifiedIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>name.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,i==-1<sp/>?<sp/>name.length()<sp/>:<sp/>i);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getResolvedSymbol(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d,<sp/></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;explicitScopePart,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*actTemplParams,</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;minDistance,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*&amp;bestMatch,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*&amp;bestTypedef,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>&amp;bestTemplSpec,</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>&amp;bestResolvedType</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>=&gt;<sp/>found<sp/>type<sp/>%x<sp/>name=%s<sp/>d=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;definitionType(),d-&gt;name().data(),d);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>look<sp/>at<sp/>classes<sp/>and<sp/>members<sp/>that<sp/>are<sp/>enums<sp/>or<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>||</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(d-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>*)d)-&gt;isTypedef()<sp/>||<sp/>((<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>*)d)-&gt;isEnumerate())<sp/></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>g_visitedNamespaces.clear();</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>accessibility<sp/>of<sp/>definition<sp/>within<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>isAccessibleFromWithExpScope(scope,fileScope,d,explicitScopePart);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>%s;<sp/>distance<sp/>%s<sp/>(%p)<sp/>is<sp/>%d\n&quot;,scope-&gt;name().data(),d-&gt;name().data(),d,distance);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance!=-1)<sp/></highlight><highlight class="comment">//<sp/>definition<sp/>is<sp/>accessible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>are<sp/>dealing<sp/>with<sp/>a<sp/>class<sp/>or<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass)<sp/></highlight><highlight class="comment">//<sp/>d<sp/>is<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*)d;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;cd=%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cd-&gt;isTemplateArgument())<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>classes<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>only<sp/>there<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>represent<sp/>a<sp/>template<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;is<sp/>not<sp/>a<sp/>templ<sp/>arg\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance&lt;minDistance)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>definition<sp/>that<sp/>is<sp/>&quot;closer&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance=distance;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>cd;<sp/></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTypedef<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTemplSpec.resize(0);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType<sp/>=<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance==minDistance<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileScope<sp/>&amp;&amp;<sp/>bestMatch<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileScope-&gt;getUsedNamespaces()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;getOuterScope()-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeNamespace<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch-&gt;getOuterScope()==Doxygen::globalScope</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>the<sp/>distance<sp/>is<sp/>equal<sp/>it<sp/>could<sp/>be<sp/>that<sp/>a<sp/>class<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>defined<sp/>in<sp/>a<sp/>namespace<sp/>and<sp/>in<sp/>the<sp/>global<sp/>scope.<sp/>When<sp/>searched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>global<sp/>scope<sp/>the<sp/>distance<sp/>is<sp/>0<sp/>in<sp/>both<sp/>cases.<sp/>We<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>choose<sp/>one<sp/>of<sp/>the<sp/>definitions:<sp/>we<sp/>choose<sp/>the<sp/>one<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>if<sp/>the<sp/>fileScope<sp/>imports<sp/>namespaces<sp/>and<sp/>the<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>was<sp/>in<sp/>a<sp/>namespace<sp/>while<sp/>the<sp/>best<sp/>match<sp/>so<sp/>far<sp/>isn&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>a<sp/>non-perfect<sp/>heuristic<sp/>but<sp/>it<sp/>could<sp/>help<sp/>in<sp/>some<sp/>situations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(kdecore<sp/>code<sp/>is<sp/>an<sp/>example).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance=distance;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>cd;<sp/></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTypedef<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTemplSpec.resize(0);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType<sp/>=<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>is<sp/>a<sp/>template<sp/>argument!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember)</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md<sp/>=<sp/>(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*)d;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>member<sp/>isTypedef()=%d\n&quot;,md-&gt;isTypedef());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isTypedef())<sp/></highlight><highlight class="comment">//<sp/>d<sp/>is<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>args=md-&gt;argsString();</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>expand<sp/>&quot;typedef<sp/>t<sp/>a[4];&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>found<sp/>typedef!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>found<sp/>a<sp/>symbol<sp/>at<sp/>this<sp/>distance,<sp/>but<sp/>if<sp/>it<sp/>didn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resolve<sp/>to<sp/>a<sp/>class,<sp/>we<sp/>still<sp/>have<sp/>to<sp/>make<sp/>sure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something<sp/>at<sp/>a<sp/>greater<sp/>distance<sp/>does<sp/>not<sp/>match,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>symbol<sp/>is<sp/>hidden<sp/>by<sp/>this<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance&lt;minDistance)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>spec;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>type;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance=distance;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*enumType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>newResolveTypedef(fileScope,md,&amp;enumType,&amp;spec,&amp;type,actTemplParams);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>resolves<sp/>to<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/>bestTypeDef=%p<sp/>spec=%s<sp/>type=%s\n&quot;,md,spec.data(),type.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>cd;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTypedef<sp/>=<sp/>md;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTemplSpec<sp/>=<sp/>spec;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enumType)<sp/></highlight><highlight class="comment">//<sp/>type<sp/>resolves<sp/>to<sp/>a<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>enum\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTypedef<sp/>=<sp/>enumType;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTemplSpec<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType<sp/>=<sp/>enumType-&gt;<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())<sp/></highlight><highlight class="comment">//<sp/>external<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTypedef<sp/>=<sp/>md;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTemplSpec<sp/>=<sp/>spec;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTypedef<sp/>=<sp/>md;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTemplSpec.resize(0);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType.resize(0);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/>no<sp/>match\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>the<sp/>best<sp/>match<sp/>%d<sp/>min=%d\n&quot;,distance,minDistance);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/>not<sp/>a<sp/>simple<sp/>typedef\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isEnumerate())</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance&lt;minDistance)</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance=distance;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTypedef<sp/>=<sp/>md;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestTemplSpec<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType<sp/>=<sp/>md-&gt;<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>definition<sp/>accessible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Not<sp/>accessible!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>definition<sp/>is<sp/>a<sp/>class<sp/>or<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>bestMatch=%p<sp/>bestResolvedType=%s\n&quot;,bestMatch,bestResolvedType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>fully<sp/>qualified<sp/>class<sp/>name<sp/>referred<sp/>to<sp/>by<sp/>the<sp/>input<sp/>class</highlight></codeline>
<codeline lineno="1366"><highlight class="comment"><sp/>*<sp/>or<sp/>typedef<sp/>name<sp/>against<sp/>the<sp/>input<sp/>scope.</highlight></codeline>
<codeline lineno="1367"><highlight class="comment"><sp/>*<sp/>Loops<sp/>through<sp/>scope<sp/>and<sp/>each<sp/>of<sp/>its<sp/>parent<sp/>scopes<sp/>looking<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="1368"><highlight class="comment"><sp/>*<sp/>match<sp/>against<sp/>the<sp/>input<sp/>name.<sp/>Can<sp/>recursively<sp/>call<sp/>itself<sp/>when<sp/></highlight></codeline>
<codeline lineno="1369"><highlight class="comment"><sp/>*<sp/>resolving<sp/>typedefs.</highlight></codeline>
<codeline lineno="1370"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*getResolvedClassRec(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n,</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>**pTypeDef,</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*pTemplSpec,</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*pResolvedType</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;[getResolvedClassRec(%s,%s)\n&quot;,scope?scope-&gt;name().data():&quot;&lt;global&gt;&quot;,n);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>QCString<sp/>name;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>QCString<sp/>explicitScopePart;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>QCString<sp/>strippedTemplateParams;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>name=stripTemplateSpecifiersFromScope</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(removeRedundantWhiteSpace(n),TRUE,</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;strippedTemplateParams);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>actTemplParams;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strippedTemplateParams.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>template<sp/>part<sp/>that<sp/>was<sp/>stripped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>stringToArgumentList(strippedTemplateParams,&amp;actTemplParams);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qualifierIndex<sp/>=<sp/>computeQualifiedIndex(name);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;name=%s<sp/>qualifierIndex=%d\n&quot;,name.data(),qualifierIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qualifierIndex!=-1)<sp/></highlight><highlight class="comment">//<sp/>qualified<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>split<sp/>off<sp/>the<sp/>explicit<sp/>scope<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>explicitScopePart=name.left(qualifierIndex);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>improve<sp/>namespace<sp/>alias<sp/>substitution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>replaceNamespaceAliases(explicitScopePart,explicitScopePart.length());</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>name=name.mid(qualifierIndex+2);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.isEmpty())<sp/></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;]<sp/>empty<sp/>name\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Looking<sp/>for<sp/>symbol<sp/>%s\n&quot;,name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><ref refid="d9/d4a/class_definition_intf" kindref="compound" tooltip="Abstract interface for a Definition or DefinitionList.">DefinitionIntf</ref><sp/>*di<sp/>=<sp/>Doxygen::symbolMap-&gt;find(name);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>-g<sp/>(for<sp/>C#<sp/>generics)<sp/>and<sp/>-p<sp/>(for<sp/>ObjC<sp/>protocols)<sp/>are<sp/>now<sp/>already<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stripped<sp/>from<sp/>the<sp/>key<sp/>used<sp/>in<sp/>the<sp/>symbolMap,<sp/>so<sp/>that<sp/>is<sp/>not<sp/>needed<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di==0)<sp/></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//di<sp/>=<sp/>Doxygen::symbolMap-&gt;find(name+&quot;-g&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(di==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>di<sp/>=<sp/>Doxygen::symbolMap-&gt;find(name+</highlight><highlight class="stringliteral">&quot;-p&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di==0)</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;no<sp/>such<sp/>symbol!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>symbol!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasUsingStatements<sp/>=<sp/></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>(fileScope<sp/>&amp;&amp;<sp/>((fileScope-&gt;getUsedNamespaces()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileScope-&gt;getUsedNamespaces()-&gt;<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>()&gt;0)<sp/>||</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fileScope-&gt;getUsedClasses()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileScope-&gt;getUsedClasses()-&gt;<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>()&gt;0))<sp/></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;hasUsingStatements=%d\n&quot;,hasUsingStatements);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>it<sp/>is<sp/>often<sp/>the<sp/>case<sp/>that<sp/>the<sp/>same<sp/>name<sp/>is<sp/>searched<sp/>in<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scope<sp/>over<sp/>an<sp/>over<sp/>again<sp/>(especially<sp/>for<sp/>the<sp/>linked<sp/>source<sp/>code<sp/>generation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>a<sp/>cache<sp/>to<sp/>collect<sp/>previous<sp/>results.<sp/>This<sp/>is<sp/>possible<sp/>since<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>of<sp/>a<sp/>lookup<sp/>is<sp/>deterministic.<sp/>As<sp/>the<sp/>key<sp/>we<sp/>use<sp/>the<sp/>concatenated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scope,<sp/>the<sp/>name<sp/>to<sp/>search<sp/>for<sp/>and<sp/>the<sp/>explicit<sp/>scope<sp/>prefix.<sp/>The<sp/>speedup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>achieved<sp/>by<sp/>this<sp/>simple<sp/>cache<sp/>can<sp/>be<sp/>enormous.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopeNameLen<sp/>=<sp/>scope-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().length()+1;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameLen<sp/>=<sp/>name.length()+1;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>explicitPartLen<sp/>=<sp/>explicitScopePart.length();</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fileScopeLen<sp/>=<sp/>hasUsingStatements<sp/>?<sp/>1+fileScope-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>().length()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>below<sp/>is<sp/>a<sp/>more<sp/>efficient<sp/>coding<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>QCString<sp/>key=scope-&gt;name()+&quot;+&quot;+name+&quot;+&quot;+explicitScopePart;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>QCString<sp/>key(scopeNameLen+nameLen+explicitPartLen+fileScopeLen+1);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p=key.data();</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>qstrcpy(p,scope-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());<sp/>*(p+scopeNameLen-1)=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>p+=scopeNameLen;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>qstrcpy(p,name);<sp/>*(p+nameLen-1)=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>p+=nameLen;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>qstrcpy(p,explicitScopePart);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>p+=explicitPartLen;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>file<sp/>scope<sp/>is<sp/>given<sp/>and<sp/>it<sp/>contains<sp/>using<sp/>statements<sp/>we<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>use<sp/>the<sp/>file<sp/>part<sp/>in<sp/>the<sp/>key<sp/>(as<sp/>a<sp/>class<sp/>name<sp/>can<sp/>be<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>different<sp/>namespaces<sp/>and<sp/>a<sp/>using<sp/>statement<sp/>in<sp/>a<sp/>file<sp/>can<sp/>select<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>of<sp/>them).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasUsingStatements)</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>below<sp/>is<sp/>a<sp/>more<sp/>efficient<sp/>coding<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>key+=&quot;+&quot;+fileScope-&gt;name();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>qstrcpy(p,fileScope-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>());</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>p+=fileScopeLen-1;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>*p=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><ref refid="d7/d19/struct_lookup_info" kindref="compound">LookupInfo</ref><sp/>*pval=Doxygen::lookupCache-&gt;find(key);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Searching<sp/>for<sp/>%s<sp/>result=%p\n&quot;,key.data(),pval);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pval)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;LookupInfo<sp/>%p<sp/>%p<sp/>&apos;%s&apos;<sp/>%p\n&quot;,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pval-&gt;classDef,<sp/>pval-&gt;typeDef,<sp/>pval-&gt;templSpec.data(),<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pval-&gt;resolvedType.data());<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTemplSpec)<sp/><sp/><sp/><sp/>*pTemplSpec=pval-&gt;templSpec;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTypeDef)<sp/><sp/><sp/><sp/><sp/><sp/>*pTypeDef=pval-&gt;typeDef;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pResolvedType)<sp/>*pResolvedType=pval-&gt;resolvedType;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;]<sp/>cachedMatch=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pval-&gt;classDef?pval-&gt;classDef-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(pTemplSpec)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;templSpec=%s\n&quot;,pTemplSpec-&gt;data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pval-&gt;classDef;<sp/></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>not<sp/>found<sp/>yet;<sp/>we<sp/>already<sp/>add<sp/>a<sp/>0<sp/>to<sp/>avoid<sp/>the<sp/>possibility<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>endless<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::lookupCache-&gt;insert(key,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d19/struct_lookup_info" kindref="compound">LookupInfo</ref>);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*bestMatch=0;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bestTypedef=0;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>QCString<sp/>bestTemplSpec;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>QCString<sp/>bestResolvedType;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minDistance=10000;<sp/></highlight><highlight class="comment">//<sp/>init<sp/>at<sp/>&quot;infinite&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==DefinitionIntf::TypeSymbolList)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>unique<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>name<sp/>is<sp/>not<sp/>unique\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d0b/class_definition_list_iterator" kindref="compound" tooltip="An iterator for Definition objects in a DefinitionList.">DefinitionListIterator</ref><sp/>dli(*(<ref refid="da/d39/class_definition_list" kindref="compound" tooltip="A list of Definition objects.">DefinitionList</ref>*)di);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dli.toFirst();(d=dli.current());++dli,++count)<sp/></highlight><highlight class="comment">//<sp/>foreach<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getResolvedSymbol(scope,fileScope,d,explicitScopePart,&amp;actTemplParams,</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance,bestMatch,bestTypedef,bestTemplSpec,</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>unique<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>name<sp/>is<sp/>unique\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*)di;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>getResolvedSymbol(scope,fileScope,d,explicitScopePart,&amp;actTemplParams,</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance,bestMatch,bestTypedef,bestTemplSpec,</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestResolvedType);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTypeDef)<sp/></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>*pTypeDef<sp/>=<sp/>bestTypedef;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pTemplSpec)</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>*pTemplSpec<sp/>=<sp/>bestTemplSpec;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pResolvedType)</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>*pResolvedType<sp/>=<sp/>bestResolvedType;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getResolvedClassRec:<sp/>bestMatch=%p<sp/>pval-&gt;resolvedType=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bestMatch,bestResolvedType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>pval=Doxygen::lookupCache-&gt;find(key);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pval)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>pval-&gt;classDef<sp/><sp/><sp/><sp/><sp/>=<sp/>bestMatch;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>pval-&gt;typeDef<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>bestTypedef;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>pval-&gt;templSpec<sp/><sp/><sp/><sp/>=<sp/>bestTemplSpec;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>pval-&gt;resolvedType<sp/>=<sp/>bestResolvedType;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::lookupCache-&gt;insert(key,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d19/struct_lookup_info" kindref="compound">LookupInfo</ref>(bestMatch,bestTypedef,bestTemplSpec,bestResolvedType));</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;]<sp/>bestMatch=%s<sp/>distance=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bestMatch?bestMatch-&gt;name().data():&quot;&lt;none&gt;&quot;,minDistance);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(pTemplSpec)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;templSpec=%s\n&quot;,pTemplSpec-&gt;data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bestMatch;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>fully<sp/>qualified<sp/>class<sp/>name<sp/>referred<sp/>to<sp/>by<sp/>the<sp/>input<sp/>class</highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/>*<sp/>or<sp/>typedef<sp/>name<sp/>against<sp/>the<sp/>input<sp/>scope.</highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/>*<sp/>Loops<sp/>through<sp/>scope<sp/>and<sp/>each<sp/>of<sp/>its<sp/>parent<sp/>scopes<sp/>looking<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="1558"><highlight class="comment"><sp/>*<sp/>match<sp/>against<sp/>the<sp/>input<sp/>name.<sp/></highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*getResolvedClass(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>**pTypeDef,</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*pTemplSpec,</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mayBeUnlinkable,</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mayBeHidden,</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*pResolvedType</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>optimizeOutputVhdl<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;OPTIMIZE_OUTPUT_VHDL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>g_resolvedTypedefs.clear();</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope==0<sp/>||</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()!=Definition::TypeClass<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()!=Definition::TypeNamespace</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>||</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(scope-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Java<sp/>&amp;&amp;<sp/>QCString(n).find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)!=-1)</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>scope=Doxygen::globalScope;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;------------<sp/>getResolvedClass(scope=%s,file=%s,name=%s,mayUnlinkable=%d)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scope?scope-&gt;name().data():&quot;&lt;global&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fileScope?fileScope-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>n,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mayBeUnlinkable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*result;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optimizeOutputVhdl)</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getClass(n);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getResolvedClassRec(scope,fileScope,n,pTypeDef,pTemplSpec,pResolvedType);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mayBeUnlinkable<sp/>&amp;&amp;<sp/>result<sp/>&amp;&amp;<sp/>!result-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>())<sp/></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mayBeHidden<sp/>||<sp/>!result-&gt;<ref refid="d5/dcc/class_definition_1ab322705fb59551eb0e8aa3b08c4dfbee" kindref="member">isHidden</ref>())</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;result<sp/>was<sp/>%s\n&quot;,result?result-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=0;<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>link<sp/>to<sp/>artificial/hidden<sp/>classes<sp/>unless<sp/>explicitly<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getResolvedClass(%s,%s)=%s\n&quot;,scope?scope-&gt;name().data():&quot;&lt;global&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n,result?result-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>findOperator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>s.findRev(</highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b==-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>b+=8;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(b&lt;i)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>there<sp/>are<sp/>only<sp/>spaces<sp/>in<sp/>between<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>operator<sp/>and<sp/>the<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace((uchar)s.at(b)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>findOperator2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>s.findRev(</highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b==-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>b+=8;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(b&lt;i)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>there<sp/>are<sp/>only<sp/>non-ascii</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>characters<sp/>in<sp/>front<sp/>of<sp/>the<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isId((uchar)s.at(b)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>b++;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>constScope[]<sp/><sp/><sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>virtualScope[]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>this<sp/>function<sp/>is<sp/>not<sp/>reentrant<sp/>due<sp/>to<sp/>the<sp/>use<sp/>of<sp/>static<sp/>buffer!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal">QCString<sp/>removeRedundantWhiteSpace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cliSupport<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CPP_CLI_SUPPORT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d33/class_grow_buf" kindref="compound" tooltip="Class representing a string buffer optimised for growing.">GrowBuf</ref><sp/>growBuf;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>resultLen<sp/>=<sp/>1024;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>resultPos<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>result(resultLen);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>growBuf.addChar(c)<sp/>instead<sp/>of<sp/>result+=c<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>improve<sp/>the<sp/>performance<sp/>of<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>growBuf.clear();</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>uint<sp/>i;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>uint<sp/>l=s.length();</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>uint<sp/>csp=0;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>uint<sp/>vsp=0;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;l;i++)</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">nextChar:</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=s.at(i);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>&quot;const&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csp&lt;6<sp/>&amp;&amp;<sp/>c==constScope[csp]<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>character<sp/>matches<sp/>substring<sp/>&quot;const&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(csp&gt;0<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>is<sp/>the<sp/>first<sp/>character<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i==0<sp/><sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>previous<sp/>may<sp/>not<sp/>be<sp/>a<sp/>digit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!isId(s.at(i-1))</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>csp++;<sp/></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>csp=0;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>&quot;virtual&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vsp&lt;8<sp/>&amp;&amp;<sp/>c==virtualScope[vsp]<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>character<sp/>matches<sp/>substring<sp/>&quot;virtual&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vsp&gt;0<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>is<sp/>the<sp/>first<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i==0<sp/><sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>previous<sp/>may<sp/>not<sp/>be<sp/>a<sp/>digit<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!isId(s.at(i-1))</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vsp++;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vsp=0;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>quoted<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(c);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&lt;l)</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cc=s.at(i);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(cc);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc==</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>escaped<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(s.at(i+1));</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i+=2;<sp/></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>i++;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>nextChar;<sp/>}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>any<sp/>other<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>i++;<sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&lt;l-2<sp/>&amp;&amp;<sp/>c==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>char<sp/>is<sp/>a<sp/>&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isId(s.at(i+1))<sp/>||<sp/>isspace((uchar)s.at(i+1)))<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>next<sp/>char<sp/>is<sp/>an<sp/>id<sp/>char<sp/>or<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i&lt;8<sp/>||<sp/>!findOperator(s,i))<sp/></highlight><highlight class="comment">//<sp/>string<sp/>in<sp/>front<sp/>is<sp/>not<sp/>&quot;operator&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0<sp/>&amp;&amp;<sp/>c==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>current<sp/>char<sp/>is<sp/>a<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isId(s.at(i-1))<sp/>||<sp/>isspace((uchar)s.at(i-1))<sp/>||<sp/>s.at(i-1)==</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>||<sp/>s.at(i-1)==</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>prev<sp/>char<sp/>is<sp/>an<sp/>id<sp/>char<sp/>or<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i&lt;8<sp/>||<sp/>!findOperator(s,i))<sp/></highlight><highlight class="comment">//<sp/>string<sp/>in<sp/>front<sp/>is<sp/>not<sp/>&quot;operator&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0<sp/>&amp;&amp;<sp/>c==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!isspace((uchar)s.at(i-1))</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((i&lt;l-1<sp/>&amp;&amp;<sp/>isId(s.at(i+1)))</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(i&lt;l-2<sp/>&amp;&amp;<sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>isId(s.at(i+2)))<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>PHP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(i&lt;l-3<sp/>&amp;&amp;<sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>s.at(i+2)==</highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>isId(s.at(i+3)))))<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>PHP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((isId(s.at(i))<sp/>&amp;&amp;<sp/>s.at(i-1)==</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s.at(i)==</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>s.at(i-1)==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(s.at(i));</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>csp==5<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>(i&lt;5<sp/>||<sp/>!isId(s.at(i-5)))*/</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(isId(s.at(i+1))<sp/></highlight><highlight class="comment">/*||<sp/>s.at(i+1)==&apos;<sp/>&apos;*/</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>const<sp/>::A<sp/>from<sp/>being<sp/>converted<sp/>to<sp/>const::A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(i+1)==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>i++;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>csp=0;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>csp==6<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>(i&lt;6<sp/>||<sp/>!isId(s.at(i-6)))*/</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>const::A<sp/>by<sp/>const<sp/>::A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>csp=0;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>vsp==7<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>(i&lt;7<sp/>||<sp/>!isId(s.at(i-7)))*/</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(isId(s.at(i+1))<sp/></highlight><highlight class="comment">/*||<sp/>s.at(i+1)==&apos;<sp/>&apos;*/</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>virtual<sp/>::A<sp/>from<sp/>being<sp/>converted<sp/>to<sp/>virtual::A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(i+1)==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>i++;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vsp=0;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>vsp==8<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>(i&lt;8<sp/>||<sp/>!isId(s.at(i-8)))*/</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>virtual::A<sp/>by<sp/>virtual<sp/>::A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vsp=0;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace((uchar)c)<sp/>||<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>i&gt;0<sp/>&amp;&amp;<sp/>i&lt;l-1<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>internal<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isId(s.at(i-1))<sp/>||<sp/>s.at(i-1)==</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/>s.at(i-1)==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/>s.at(i-1)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>||<sp/>s.at(i-1)==</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isId(s.at(i+1))<sp/>||<sp/></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i&lt;l-2<sp/>&amp;&amp;<sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>isId(s.at(i+2)))<sp/>||<sp/></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i&lt;l-3<sp/>&amp;&amp;<sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>s.at(i+2)==</highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>isId(s.at(i+3)))</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal"><sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uint<sp/>rl=result.length();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint<sp/>rl=growBuf.getPos();</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rl&gt;0<sp/>&amp;&amp;<sp/>(isId(growBuf.at(rl-1))<sp/>||<sp/>growBuf.at(rl-1)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((c!=</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c!=</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)<sp/>||<sp/>!findOperator2(s,i))<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>splitting<sp/>operator*<sp/>and<sp/>operator-&gt;*<sp/>and<sp/>operator&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint<sp/>rl=growBuf.getPos();</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rl&gt;0<sp/>&amp;&amp;<sp/>growBuf.at(rl-1)==</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>i&lt;l-1<sp/>&amp;&amp;<sp/>s.at(i+1)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>trailing<sp/>return<sp/>type<sp/>&apos;)-&gt;&apos;<sp/>=&gt;<sp/>&apos;)<sp/>-&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(c);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cliSupport<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c==</highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal"><sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>i&gt;1<sp/>&amp;&amp;<sp/>isId(s.at(i-1))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!findOperator(s,i)</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>C++/CLI:<sp/>Type^<sp/>name<sp/>and<sp/>Type%<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;removeRedundantWhiteSpace(`%s&apos;)=`%s&apos;\n&quot;,s.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>growBuf.addChar(0);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//result.resize(resultPos);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>growBuf.get();</highlight></codeline>
<codeline lineno="1825"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>findParameterList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="1832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos=-1;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>templateDepth=0;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templateDepth<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextOpenPos=name.findRev(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">,<sp/>pos);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextClosePos=name.findRev(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,<sp/>pos);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextOpenPos!=-1<sp/>&amp;&amp;<sp/>nextOpenPos&gt;nextClosePos)</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++templateDepth;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos=nextOpenPos-1;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--templateDepth;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos=nextClosePos-1;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastAnglePos=name.findRev(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">,<sp/>pos);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bracePos=name.findRev(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">,<sp/>pos);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastAnglePos!=-1<sp/>&amp;&amp;<sp/>lastAnglePos&gt;bracePos)</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++templateDepth;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos=lastAnglePos-1;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bracePos;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos!=-1);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rightScopeMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;scope,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="1871"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(name==scope<sp/>||<sp/></highlight><highlight class="comment">//<sp/>equal<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(scope.right(name.length())==name<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>substring<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope.at(scope.length()-name.length()-1)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>leftScopeMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;scope,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(name==scope<sp/>||<sp/></highlight><highlight class="comment">//<sp/>equal<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(scope.left(name.length())==name<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>substring<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope.at(name.length())==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linkifyText(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dcf/class_text_generator_intf" kindref="compound" tooltip="Abstract interface for a hyperlinked text fragment.">TextGeneratorIntf</ref><sp/>&amp;out,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autoBreak,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>external,</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepSpaces,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indentLevel)</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;linkify=`%s&apos;\n&quot;,text);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>regExp(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF][~!a-z_A-Z0-9$\\\\.:\\x80-\\xFF]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>regExpSplit(</highlight><highlight class="stringliteral">&quot;(?!:),&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/>QCString<sp/>txtStr=text;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strLen<sp/>=<sp/>txtStr.length();</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;linkifyText<sp/>scope=%s<sp/>fileScope=%s<sp/>strtxt=%s<sp/>strlen=%d<sp/>external=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scope?scope-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fileScope?fileScope-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>txtStr.data(),strLen,external);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matchLen;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newIndex;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skipIndex=0;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floatingIndex=0;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strLen==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>a<sp/>word<sp/>from<sp/>the<sp/>text<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((newIndex=regExp.match(txtStr,index,&amp;matchLen))!=-1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(newIndex==0<sp/>||<sp/>!(txtStr.at(newIndex-1)&gt;=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>txtStr.at(newIndex-1)&lt;=</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>matching<sp/>part<sp/>of<sp/>hex<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>non-word<sp/>part<sp/>to<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>floatingIndex+=newIndex-skipIndex+matchLen;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>insideString=FALSE;<sp/></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=index;i&lt;newIndex;i++)<sp/></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txtStr.at(i)==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>insideString=!insideString;<sp/></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;floatingIndex=%d<sp/>strlen=%d<sp/>autoBreak=%d\n&quot;,floatingIndex,strLen,autoBreak);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strLen&gt;35<sp/>&amp;&amp;<sp/>floatingIndex&gt;30<sp/>&amp;&amp;<sp/>autoBreak)<sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>insert<sp/>a<sp/>split<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>splitText<sp/>=<sp/>txtStr.mid(skipIndex,newIndex-skipIndex);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>splitLength<sp/>=<sp/>splitText.length();</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset=1;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i=splitText.find(regExpSplit,0);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==-1)<sp/>{<sp/>i=splitText.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/>offset=0;<sp/>}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==-1)<sp/>i=splitText.find(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==-1)<sp/>i=splitText.find(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;splitText=[%s]<sp/>len=%d<sp/>i=%d<sp/>offset=%d\n&quot;,splitText.data(),splitLength,i,offset);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="comment">//<sp/>add<sp/>a<sp/>link-break<sp/>at<sp/>i<sp/>in<sp/>case<sp/>of<sp/>Html<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeString(splitText.left(i+offset),keepSpaces);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeBreak(indentLevel==0<sp/>?<sp/>0<sp/>:<sp/>indentLevel+1);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeString(splitText.right(splitLength-i-offset),keepSpaces);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floatingIndex=splitLength-i-offset+matchLen;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeString(splitText,keepSpaces);<sp/></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.docify(txtStr.mid(skipIndex,newIndex-skipIndex));<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.writeString(txtStr.mid(skipIndex,newIndex-skipIndex),keepSpaces);<sp/></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>word<sp/>from<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>word=txtStr.mid(newIndex,matchLen);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>matchWord<sp/>=<sp/>substitute(substitute(word,</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">),</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;linkifyText<sp/>word=%s<sp/>matchWord=%s<sp/>scope=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>word.data(),matchWord.data(),scope?scope-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideString)</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/><sp/><sp/><sp/>*cd=0;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/><sp/><sp/><sp/><sp/>*fd=0;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/><sp/><sp/>*md=0;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=0;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/><sp/><sp/><sp/><sp/>*gd=0;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;**<sp/>Match<sp/>word<sp/>&apos;%s&apos;\n&quot;,matchWord.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*typeDef=0;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd=getResolvedClass(scope,fileScope,matchWord,&amp;typeDef);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeDef)<sp/></highlight><highlight class="comment">//<sp/>First<sp/>look<sp/>at<sp/>typedef<sp/>then<sp/>class,<sp/>see<sp/>bug<sp/>584184.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>typedef<sp/>%s\n&quot;,typeDef-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(external<sp/>?<sp/>typeDef-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>()<sp/>:<sp/>typeDef-&gt;<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>())</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeDef-&gt;getOuterScope()!=</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeLink(typeDef-&gt;<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>(),</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDef-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeDef-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>(cd<sp/>||<sp/>(cd=getClass(matchWord))))<sp/></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>class<sp/>%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>link<sp/>to<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(external<sp/>?<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>()<sp/>:<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1acb4255cf08ddb71608af6467b6850783" kindref="member" tooltip="returns TRUE iff a link is possible to this item within this project.">isLinkableInProject</ref>())</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd!=</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeLink(cd-&gt;<ref refid="d1/dcf/class_class_def_1ab690feb2a94737d5b69c819b9794749e" kindref="member" tooltip="If this class originated from a tagfile, this will return the tag file reference.">getReference</ref>(),cd-&gt;<ref refid="d1/dcf/class_class_def_1a7bc3e33011d6da98a5fd202a1dbe75fb" kindref="member" tooltip="Returns the unique base name (without extension) of the class&amp;#39;s file on disk.">getOutputFileBase</ref>(),cd-&gt;<ref refid="d1/dcf/class_class_def_1a28f29dbbc5c2646bc64bae479fd7b905" kindref="member">anchor</ref>(),word);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(matchWord+</highlight><highlight class="stringliteral">&quot;-p&quot;</highlight><highlight class="normal">)))<sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>Obj-C<sp/>protocols<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>link<sp/>to<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(external<sp/>?<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>()<sp/>:<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1acb4255cf08ddb71608af6467b6850783" kindref="member" tooltip="returns TRUE iff a link is possible to this item within this project.">isLinkableInProject</ref>())</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd!=</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeLink(cd-&gt;<ref refid="d1/dcf/class_class_def_1ab690feb2a94737d5b69c819b9794749e" kindref="member" tooltip="If this class originated from a tagfile, this will return the tag file reference.">getReference</ref>(),cd-&gt;<ref refid="d1/dcf/class_class_def_1a7bc3e33011d6da98a5fd202a1dbe75fb" kindref="member" tooltip="Returns the unique base name (without extension) of the class&amp;#39;s file on disk.">getOutputFileBase</ref>(),cd-&gt;<ref refid="d1/dcf/class_class_def_1a28f29dbbc5c2646bc64bae479fd7b905" kindref="member">anchor</ref>(),word);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>((cd=getClass(matchWord+&quot;-g&quot;)))<sp/>//<sp/>C#<sp/>generic<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>link<sp/>to<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(external<sp/>?<sp/>cd-&gt;isLinkable()<sp/>:<sp/>cd-&gt;isLinkableInProject())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(cd!=self)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeLink(cd-&gt;getReference(),cd-&gt;getOutputFileBase(),cd-&gt;anchor(),word);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/>-&gt;<sp/>nothing\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>matchWord.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>scopeName;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeClass<sp/>||<sp/></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeNamespace</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName=scope-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m!=-1)</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName<sp/>=<sp/>matchWord.left(m);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchWord<sp/>=<sp/>matchWord.mid(m+2);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;ScopeName=%s\n&quot;,scopeName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!found)<sp/>printf(&quot;Trying<sp/>to<sp/>link<sp/>%s<sp/>in<sp/>%s\n&quot;,word.data(),scopeName.data());<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getDefs(scopeName,matchWord,0,md,cd,fd,nd,gd)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(md-&gt;isTypedef()<sp/>||<sp/>md-&gt;isEnumerate()<sp/>||<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>md-&gt;isReference()<sp/>||<sp/>md-&gt;isVariable()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//)<sp/>&amp;&amp;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(external<sp/>?<sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>()<sp/>:<sp/>md-&gt;<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>())<sp/></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>ref<sp/>scope=%s\n&quot;,d?d-&gt;name().data():&quot;&lt;global&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ol.writeObjectLink(d-&gt;getReference(),d-&gt;getOutputFileBase(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;anchor(),word);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md!=</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">==0<sp/>||<sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()!=</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;name()))<sp/></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>check<sp/>is<sp/>needed<sp/>for<sp/>overloaded<sp/>members,<sp/>where<sp/>getDefs<sp/>just<sp/>returns<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.writeLink(md-&gt;<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>(),md-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),word);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>symbol<sp/>%s\n&quot;,matchWord.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/></highlight><highlight class="comment">//<sp/>add<sp/>word<sp/>to<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.writeString(word,keepSpaces);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>next<sp/>start<sp/>point<sp/>in<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;index=%d/%d\n&quot;,index,txtStr.length());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>skipIndex=index=newIndex+matchLen;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>last<sp/>part<sp/>of<sp/>the<sp/>string<sp/>to<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ol.docify(txtStr.right(txtStr.length()-skipIndex));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>out.writeString(txtStr.right(txtStr.length()-skipIndex),keepSpaces);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeExample(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<ref refid="d0/d31/class_example_s_dict" kindref="compound" tooltip="A sorted dictionary of Example objects.">ExampleSDict</ref><sp/>*ed)</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>QCString<sp/>exampleLine=theTranslator-&gt;trWriteList(ed-&gt;<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>latexEnabled<sp/>=<sp/>ol.isEnabled(OutputGenerator::Latex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>manEnabled<sp/><sp/><sp/>=<sp/>ol.isEnabled(OutputGenerator::Man);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>htmlEnabled<sp/><sp/>=<sp/>ol.isEnabled(OutputGenerator::Html);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/>QRegExp<sp/>marker(</highlight><highlight class="stringliteral">&quot;@[0-9]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0,newIndex,matchLen;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>replace<sp/>all<sp/>markers<sp/>in<sp/>inheritLine<sp/>with<sp/>links<sp/>to<sp/>the<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((newIndex=marker.match(exampleLine,index,&amp;matchLen))!=-1)</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.parseText(exampleLine.mid(index,newIndex-index));</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>entryIndex<sp/>=<sp/>exampleLine.mid(newIndex+1,matchLen-1).toUInt(&amp;ok);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/de9/struct_example" kindref="compound" tooltip="Data associated with an example.">Example</ref><sp/>*e=ed-&gt;<ref refid="d1/d50/class_s_dict_1ab993899004fc3cfc8f00f131e0b6a29d" kindref="member">at</ref>(entryIndex);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok<sp/>&amp;&amp;<sp/>e)<sp/></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(latexEnabled)<sp/>ol.disable(OutputGenerator::Latex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Latex);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::RTF);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>link<sp/>for<sp/>Html<sp/>/<sp/>man</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;writeObjectLink(file=%s)\n&quot;,e-&gt;file.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(0,e-&gt;file,e-&gt;anchor,e-&gt;name);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(latexEnabled)<sp/>ol.enable(OutputGenerator::Latex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>link<sp/>for<sp/>Latex<sp/>/<sp/>pdf<sp/>with<sp/>anchor<sp/>because<sp/>the<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>not<sp/>hyperlinked<sp/>(not<sp/>possible<sp/>with<sp/>a<sp/>verbatim<sp/>environment).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(0,e-&gt;file,0,e-&gt;name);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(manEnabled)<sp/>ol.enable(OutputGenerator::Man);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(htmlEnabled)<sp/>ol.enable(OutputGenerator::Html);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>index=newIndex+matchLen;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/>ol.parseText(exampleLine.right(exampleLine.length()-index));</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal">QCString<sp/>argListToString(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useCanonicalType,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showDefVals)</highlight></codeline>
<codeline lineno="2125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=al-&gt;first();</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a)</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>type1<sp/>=<sp/>useCanonicalType<sp/>&amp;&amp;<sp/>!a-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>.isEmpty()<sp/>?<sp/></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref><sp/>:<sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>type2;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=type1.find(</highlight><highlight class="stringliteral">&quot;)(&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>hack<sp/>to<sp/>deal<sp/>with<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type2=type1.mid(i);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type1=type1.left(i);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref>.isEmpty())</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=a-&gt;<ref refid="d1/dee/struct_argument_1aff930f2a4cb85b5616be79b81db2341f" kindref="member">attrib</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>||<sp/>!a-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>.isEmpty())</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=<sp/>type1+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>+type2+a-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=<sp/>type1+type2;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty()<sp/>&amp;&amp;<sp/>showDefVals)</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">+a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>al-&gt;next();</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a)<sp/>result+=</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref>)<sp/>result+=</highlight><highlight class="stringliteral">&quot;<sp/>const&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref>)<sp/>result+=</highlight><highlight class="stringliteral">&quot;<sp/>volatile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!al-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref>.isEmpty())<sp/>result+=</highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">+al-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref>;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/>if<sp/>(al-&gt;<ref refid="d7/df8/class_argument_list_1a3f023c090551e0ecaa588b25f895c047" kindref="member">pureSpecifier</ref>)<sp/>result+=</highlight><highlight class="stringliteral">&quot;<sp/>=0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removeRedundantWhiteSpace(result);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal">QCString<sp/>tempArgListToString(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al)</highlight></codeline>
<codeline lineno="2169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/>result=</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=al-&gt;first();</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a)</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>add<sp/>template<sp/>argument<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(4)==</highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>C#<sp/>covariance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;out<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(3)==</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>C#<sp/>contravariance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;in<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>name<sp/>from<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.length()-1;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&gt;=0<sp/>&amp;&amp;<sp/>isId(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.at(i)))<sp/>i--;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0)</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.right(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.length()-i-1);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>found<sp/>-&gt;<sp/>take<sp/>whole<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>a=al-&gt;next();</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a)<sp/>result+=</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removeRedundantWhiteSpace(result);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>HTML<sp/>anchors<sp/>for<sp/>a<sp/>list<sp/>of<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAnchors(<ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*ml)</highlight></codeline>
<codeline lineno="2211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>count=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mli(*ml);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(md=mli.current());++mli)</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>anchor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(groupId==-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>anchor.sprintf(&quot;%c%d&quot;,id,count++);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>anchor.sprintf(&quot;%c%d_%d&quot;,id,groupId,count++);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(cd)<sp/>anchor.prepend(escapeCharsInString(cd-&gt;name(),FALSE));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setAnchor();</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;setAnchors():<sp/>Member<sp/>%s<sp/>outputFileBase=%s<sp/>anchor<sp/>%s<sp/>result<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),md-&gt;getOutputFileBase().data(),anchor.data(),md-&gt;anchor().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240" refid="d8/d3c/util_8h_1ae019f2737460a8c3eaad5264f8fe57a2" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filterCRLF(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>source<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dest<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destination<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(src&lt;len)</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>buf[src++];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>processed<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CR<sp/>to<sp/>be<sp/>solved<sp/>(MAC,<sp/>DOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>CR<sp/>to<sp/>LF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src&lt;len<sp/>&amp;&amp;<sp/>buf[src]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++src;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>LF<sp/>just<sp/>after<sp/>CR<sp/>(DOS)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>src&lt;len-1)<sp/></highlight><highlight class="comment">//<sp/>filter<sp/>out<sp/>internal<sp/>\0<sp/>characters,<sp/>as<sp/>it<sp/>will<sp/>confuse<sp/>the<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>into<sp/>a<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[dest++]<sp/>=<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>(modified)<sp/>character<sp/>to<sp/>dest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dest;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>length<sp/>of<sp/>the<sp/>valid<sp/>part<sp/>of<sp/>the<sp/>buf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>getFilterFromList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QStrList<sp/>&amp;filterList,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;found)</highlight></codeline>
<codeline lineno="2265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compare<sp/>the<sp/>file<sp/>name<sp/>to<sp/>the<sp/>filter<sp/>pattern<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>QStrListIterator<sp/>sli(filterList);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filterStr;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sli.toFirst();<sp/>(filterStr<sp/>=<sp/>sli.current());<sp/>++sli)</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>fs<sp/>=<sp/>filterStr;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_equals=fs.find(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_equals!=-1)</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>filterPattern<sp/>=<sp/>fs.left(i_equals);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QRegExp<sp/>fpat(filterPattern,portable_fileSystemIsCaseSensitive(),TRUE);<sp/></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fpat.match(name)!=-1)<sp/></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>match!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>filterName<sp/>=<sp/>fs.mid(i_equals+1);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterName.find(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)!=-1)</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>add<sp/>quotes<sp/>if<sp/>the<sp/>name<sp/>has<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterName=</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">+filterName+</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filterName;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301" refid="d8/d3c/util_8h_1a188c1467dbdf01fbdb87e08ce49fb759" refkind="member"><highlight class="normal">QCString<sp/>getFileFilter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSourceCode)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>QStrList&amp;<sp/>filterSrcList<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;FILTER_SOURCE_PATTERNS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>QStrList&amp;<sp/>filterList<sp/><sp/><sp/><sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;FILTER_PATTERNS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>QCString<sp/>filterName;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSourceCode<sp/>&amp;&amp;<sp/>!filterSrcList.isEmpty())</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>first<sp/>look<sp/>for<sp/>source<sp/>filter<sp/>pattern<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/>filterName<sp/>=<sp/>getFilterFromList(name,filterSrcList,found);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>filterName.isEmpty())</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>then<sp/>look<sp/>for<sp/>filter<sp/>pattern<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>filterName<sp/>=<sp/>getFilterFromList(name,filterList,found);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>then<sp/>use<sp/>the<sp/>generic<sp/>input<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;INPUT_FILTER&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filterName;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal">QCString<sp/>transcodeCharacterStringToUTF8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;input)</highlight></codeline>
<codeline lineno="2331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>error=FALSE;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>inputEncoding<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;INPUT_ENCODING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outputEncoding<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputEncoding.isEmpty()<sp/>||<sp/>qstricmp(inputEncoding,outputEncoding)==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inputSize=input.length();</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outputSize=inputSize*4+1;</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/>QCString<sp/>output(outputSize);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cd<sp/>=<sp/>portable_iconv_open(outputEncoding,inputEncoding);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(-1))<sp/></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>character<sp/>conversion:<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputEncoding.data(),outputEncoding);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>error=TRUE;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iLeft=inputSize;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oLeft=outputSize;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inputPtr<sp/>=<sp/>input.data();</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outputPtr<sp/>=<sp/>output.data();</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!portable_iconv(cd,<sp/>&amp;inputPtr,<sp/>&amp;iLeft,<sp/>&amp;outputPtr,<sp/>&amp;oLeft))</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputSize-=(int)oLeft;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.resize(outputSize+1);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.at(outputSize)=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;iconv:<sp/>input<sp/>size=%d<sp/>output<sp/>size=%d\n[%s]\n&quot;,size,newSize,srcBuf.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>translate<sp/>characters<sp/>from<sp/>%s<sp/>to<sp/>%s:<sp/>check<sp/>INPUT_ENCODING\ninput=[%s]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputEncoding.data(),outputEncoding,input.data());</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error=TRUE;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/>portable_iconv_close(cd);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error<sp/>?<sp/>input<sp/>:<sp/>output;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2374" refid="d8/d3c/util_8h_1a320768069dfe8bb92a0ad137769a3275" refkind="member"><highlight class="normal">QCString<sp/>fileToString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>filter,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSourceCode)</highlight></codeline>
<codeline lineno="2375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name==0<sp/>||<sp/>name[0]==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>QFile<sp/>f;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fileOpened=FALSE;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name[0]==</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[1]==0)<sp/></highlight><highlight class="comment">//<sp/>read<sp/>from<sp/>stdin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOpened=f.open(IO_ReadOnly,stdin);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileOpened)</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bSize=4096;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>contents(bSize);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSize=0;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((size=f.readBlock(contents.data()+totalSize,bSize))==bSize)</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize+=bSize;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents.resize(totalSize+bSize);<sp/></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totalSize<sp/>=<sp/>filterCRLF(contents.data(),totalSize+size)+2;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents.resize(totalSize);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents.at(totalSize-2)=</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>to<sp/>help<sp/>the<sp/>scanner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents.at(totalSize-1)=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contents;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>read<sp/>from<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(name);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi.exists()<sp/>||<sp/>!fi.isFile())</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;file<sp/>`%s&apos;<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>filterName<sp/>=<sp/>getFileFilter(name,isSourceCode);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterName.isEmpty()<sp/>||<sp/>!filter)</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f.setName(name);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileOpened=f.open(IO_ReadOnly);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileOpened)</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsize=f.size();</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>contents(fsize+2);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.readBlock(contents.data(),fsize);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsize==0<sp/>||<sp/>contents[fsize-1]==</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents[fsize]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents[fsize]=</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>to<sp/>help<sp/>the<sp/>scanner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents[fsize+1]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.close();</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSize<sp/>=<sp/>filterCRLF(contents.data(),fsize+2);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize!=fsize+2)<sp/></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents.resize(newSize);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transcodeCharacterStringToUTF8(contents);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>filter<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>cmd=filterName+</highlight><highlight class="stringliteral">&quot;<sp/>\&quot;&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::ExtCmd,0,</highlight><highlight class="stringliteral">&quot;Executing<sp/>popen(`%s`)\n&quot;</highlight><highlight class="normal">,cmd.data());</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*f=portable_popen(cmd,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>execute<sp/>filter<sp/>%s\n&quot;</highlight><highlight class="normal">,filterName.data());</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bSize=4096;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>contents(bSize);</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSize=0;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((size=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)fread(contents.data()+totalSize,1,bSize,f))==bSize)</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize+=bSize;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents.resize(totalSize+bSize);<sp/></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totalSize<sp/>=<sp/>filterCRLF(contents.data(),totalSize+size)+2;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents.resize(totalSize);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents.at(totalSize-2)=</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>to<sp/>help<sp/>the<sp/>scanner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents.at(totalSize-1)=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>portable_pclose(f);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FilterOutput,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Filter<sp/>output\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FilterOutput,0,</highlight><highlight class="stringliteral">&quot;-------------\n%s\n-------------\n&quot;</highlight><highlight class="normal">,contents.data());</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transcodeCharacterStringToUTF8(contents);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fileOpened)<sp/><sp/></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>file<sp/>`%s&apos;<sp/>for<sp/>reading\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal">QCString<sp/>dateToString(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>includeTime)</highlight></codeline>
<codeline lineno="2470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/>QDateTime<sp/>current<sp/>=<sp/>QDateTime::currentDateTime();</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theTranslator-&gt;trDateTime(current.date().year(),</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.date().month(),</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.date().day(),</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.date().dayOfWeek(),</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.time().hour(),</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.time().minute(),</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.time().second(),</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>includeTime);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal">QCString<sp/>yearToString()</highlight></codeline>
<codeline lineno="2483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QDate<sp/>&amp;d=QDate::currentDate();</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/>result.sprintf(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>d.year());</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recursive<sp/>function<sp/>that<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>branches<sp/>in<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inheritance<sp/>tree<sp/>that<sp/>the<sp/>base<sp/>class<sp/>`bcd&apos;<sp/>is<sp/>below<sp/>the<sp/>class<sp/>`cd&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minClassDistance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*bcd,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="2495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcd-&gt;<ref refid="d1/dcf/class_class_def_1a1d2fa37010681cbe623dac11a12eb806" kindref="member" tooltip="Returns the class of which this is a category (Objective-C only)">categoryOf</ref>())<sp/></highlight><highlight class="comment">//<sp/>use<sp/>class<sp/>that<sp/>is<sp/>being<sp/>extended<sp/>in<sp/>case<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>Objective-C<sp/>category</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>bcd=bcd-&gt;<ref refid="d1/dcf/class_class_def_1a1d2fa37010681cbe623dac11a12eb806" kindref="member" tooltip="Returns the class of which this is a category (Objective-C only)">categoryOf</ref>();</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==bcd)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>level;<sp/></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level==256)</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;class<sp/>%s<sp/>seem<sp/>to<sp/>have<sp/>a<sp/>recursive<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inheritance<sp/>relation!\n&quot;</highlight><highlight class="normal">,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=maxInheritanceDepth;<sp/></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>())</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d06/struct_base_class_def" kindref="compound" tooltip="Class that contains information about an inheritance relation.">BaseClassDef</ref><sp/>*bcdi<sp/>=<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>()-&gt;first();</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bcdi)</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mc=minClassDistance(bcdi-&gt;<ref refid="d1/d06/struct_base_class_def_1a2a62f0f7057f4cd514f3d1417191ff26" kindref="member" tooltip="Class definition that this relation inherits from.">classDef</ref>,bcd,level+1);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mc&lt;m)<sp/>m=mc;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m&lt;0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bcdi<sp/>=<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>()-&gt;next();</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>classInheritedProtectionLevel(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*bcd,<ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>prot,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="2524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcd-&gt;<ref refid="d1/dcf/class_class_def_1a1d2fa37010681cbe623dac11a12eb806" kindref="member" tooltip="Returns the class of which this is a category (Objective-C only)">categoryOf</ref>())<sp/></highlight><highlight class="comment">//<sp/>use<sp/>class<sp/>that<sp/>is<sp/>being<sp/>extended<sp/>in<sp/>case<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>Objective-C<sp/>category</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>bcd=bcd-&gt;<ref refid="d1/dcf/class_class_def_1a1d2fa37010681cbe623dac11a12eb806" kindref="member" tooltip="Returns the class of which this is a category (Objective-C only)">categoryOf</ref>();</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==bcd)<sp/></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>exit;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level==256)</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Internal<sp/>inconsistency:<sp/>found<sp/>class<sp/>%s<sp/>seem<sp/>to<sp/>have<sp/>a<sp/>recursive<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inheritance<sp/>relation!<sp/>Please<sp/>send<sp/>a<sp/>bug<sp/>report<sp/>to<sp/>dimitri@stack.nl\n&quot;</highlight><highlight class="normal">,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>())</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d06/struct_base_class_def" kindref="compound" tooltip="Class that contains information about an inheritance relation.">BaseClassDef</ref><sp/>*bcdi<sp/>=<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>()-&gt;first();</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bcdi<sp/>&amp;&amp;<sp/>prot!=Private)</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>baseProt<sp/>=<sp/>classInheritedProtectionLevel(bcdi-&gt;<ref refid="d1/d06/struct_base_class_def_1a2a62f0f7057f4cd514f3d1417191ff26" kindref="member" tooltip="Class definition that this relation inherits from.">classDef</ref>,bcd,bcdi-&gt;<ref refid="d1/d06/struct_base_class_def_1ab5a986f56300bfa53f7c4cff58196294" kindref="member" tooltip="Protection level of the inheritance relation: Public, Protected, or Private.">prot</ref>,level+1);</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseProt==Private)<sp/><sp/><sp/>prot=Private;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseProt==Protected)<sp/>prot=Protected;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bcdi<sp/>=<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>()-&gt;next();</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal">exit:</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;classInheritedProtectionLevel(%s,%s)=%d\n&quot;,cd-&gt;name().data(),bcd-&gt;name().data(),prot);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prot;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>void<sp/>printArgList(ArgumentList<sp/>*al)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(al==0)<sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ArgumentListIterator<sp/>ali(*al);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Argument<sp/>*a;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;(&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(;(a=ali.current());++ali)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;t=`%s&apos;<sp/>n=`%s&apos;<sp/>v=`%s&apos;<sp/>&quot;,a-&gt;type.data(),!a-&gt;name.isEmpty()&gt;0?a-&gt;name.data():&quot;&quot;,!a-&gt;defval.isEmpty()&gt;0?a-&gt;defval.data():&quot;&quot;);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;)&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NEWMATCH</highlight></codeline>
<codeline lineno="2569"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>strip<sp/>any<sp/>template<sp/>specifiers<sp/>that<sp/>follow<sp/>className<sp/>in<sp/>string<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>trimTemplateSpecifiers(</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;namespaceName,</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;className,</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;trimTemplateSpecifiers(%s,%s,%s)\n&quot;,namespaceName.data(),className.data(),s.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/>QCString<sp/>scopeName=mergeScopes(namespaceName,className);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=getClass(scopeName);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/></highlight><highlight class="comment">//<sp/>should<sp/>not<sp/>happen,<sp/>but<sp/>guard<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>QCString<sp/>result=s;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=className.length()-1;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;=0<sp/>&amp;&amp;<sp/>className.at(i)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>template<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>unspecialized<sp/>occurrences<sp/>in<sp/>s,<sp/>with<sp/>their<sp/>specialized<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=1;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cl=i+1;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&gt;=0)</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=className.<ref refid="d1/d50/class_s_dict_1ab993899004fc3cfc8f00f131e0b6a29d" kindref="member">at</ref>(i);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>count++,i--;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>{<sp/>count--;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>i--;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>unspecClassName=className.left(i);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=i;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=result.find(unspecClassName,p))!=-1)</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.at(i+l)!=</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>unspecialized<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=result.left(i)+className+result.right(result.length()-i-l);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l=cl;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;result<sp/>after<sp/>specialization:<sp/>%s\n&quot;,result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/>QCString<sp/>qualName=cd-&gt;qualifiedNameWithTemplateParameters();</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;QualifiedName<sp/>=<sp/>%s\n&quot;,qualName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>strip<sp/>the<sp/>template<sp/>arguments<sp/>following<sp/>className<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!qualName.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>a<sp/>class<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is,ps=0;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0,l,i;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((is=getScopeFragment(qualName,ps,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>qualNamePart<sp/>=<sp/>qualName.right(qualName.length()-is);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;qualNamePart=%s\n&quot;,qualNamePart.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=result.find(qualNamePart,p))!=-1)</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ql=qualNamePart.length();</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=result.left(i)+cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+result.right(result.length()-i-ql);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p=i+cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().length();</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ps=is+l;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;result=%s\n&quot;,result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.stripWhiteSpace();</highlight></codeline>
<codeline lineno="2636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>findScopePattern(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;pattern,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="2647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sl=s.length();</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pl=pattern.length();</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp=0;<sp/></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/>*len=0;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&lt;sl)</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/>sp=p;<sp/></highlight><highlight class="comment">//<sp/>start<sp/>of<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pp=0;<sp/></highlight><highlight class="comment">//<sp/>pattern<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&lt;sl<sp/>&amp;&amp;<sp/>pp&lt;pl)</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(p)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>template<sp/>arguments<sp/>while<sp/>matching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bc=1;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;skipping<sp/>pos=%d<sp/>c=%c\n&quot;,p,s.at(p));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&lt;sl)</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(p)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>bc++;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(p)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bc--;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bc==0)<sp/></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;skipping<sp/>pos=%d<sp/>c=%c\n&quot;,p,s.at(p));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(p)==pattern.at(pp))</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;match<sp/>at<sp/>position<sp/>p=%d<sp/>pp=%d<sp/>c=%c\n&quot;,p,pp,s.at(p));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp++;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;restarting<sp/>at<sp/>%d<sp/>c=%c<sp/>pat=%s\n&quot;,p,s.at(p),pattern.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p=sp+1;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp==pl)<sp/></highlight><highlight class="comment">//<sp/>whole<sp/>pattern<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*len=p-sp;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sp;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>trimScope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopeOffset=name.length();</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/>QCString<sp/>result=s;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>tmp;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>scope=name.left(scopeOffset)+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>with<sp/>scope=`%s&apos;\n&quot;,scope.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0,l;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=findScopePattern(scope,result,p,&amp;l))!=-1)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>occurrence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp+=result.mid(p,i-p);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>part<sp/>before<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp+=result.right(result.length()-p);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>trailing<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>scopeOffset=name.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,scopeOffset-1);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(scopeOffset&gt;0);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;trimScope(name=%s,scope=%s)=%s\n&quot;,name.data(),s.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2726"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trimBaseClassScope(<ref refid="d7/d46/class_base_class_list" kindref="compound" tooltip="List of base classes.">BaseClassList</ref><sp/>*bcl,QCString<sp/>&amp;s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level=0)</highlight></codeline>
<codeline lineno="2728"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;trimBaseClassScope<sp/>level=%d<sp/>`%s&apos;\n&quot;,level,s.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><ref refid="df/dc5/class_base_class_list_iterator" kindref="compound" tooltip="Iterator for a list of base classes.">BaseClassListIterator</ref><sp/>bcli(*bcl);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><ref refid="d1/d06/struct_base_class_def" kindref="compound" tooltip="Class that contains information about an inheritance relation.">BaseClassDef</ref><sp/>*bcd;</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(bcd=bcli.current());++bcli)</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=bcd-&gt;<ref refid="d1/d06/struct_base_class_def_1a2a62f0f7057f4cd514f3d1417191ff26" kindref="member" tooltip="Class definition that this relation inherits from.">classDef</ref>;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>class<sp/>%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spos=s.find(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spos!=-1)</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s.left(spos)+s.right(</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.length()-spos-cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().length()-2</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;base<sp/>class<sp/>`%s&apos;\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>())</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trimBaseClassScope(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>(),s,level+1);<sp/></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="2750"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2754"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trimNamespaceScope(QCString<sp/>&amp;t1,QCString<sp/>&amp;t2,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;nsName)</highlight></codeline>
<codeline lineno="2755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p1=t1.length();</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p2=t2.length();</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1=p1==0<sp/>?<sp/>-1<sp/>:<sp/>t1.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,p1);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2=p2==0<sp/>?<sp/>-1<sp/>:<sp/>t2.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,p2);</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1==-1<sp/>&amp;&amp;<sp/>i2==-1)</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1!=-1<sp/>&amp;&amp;<sp/>i2==-1)<sp/></highlight><highlight class="comment">//<sp/>only<sp/>t1<sp/>has<sp/>a<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>scope=t1.left(i1);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>replaceNamespaceAliases(scope,i1);</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>so=nsName.length();</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fullScope=nsName.left(so);</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fullScope.isEmpty()<sp/>&amp;&amp;<sp/>!scope.isEmpty())<sp/>fullScope+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullScope+=scope;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fullScope.isEmpty()<sp/>&amp;&amp;<sp/>Doxygen::namespaceSDict[fullScope]!=0)<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>is<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>t1.right(t1.length()-i1-2);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(so==0)</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so=-1;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((so=nsName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,so-1))==-1)</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so=0;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(so&gt;=0);</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1==-1<sp/>&amp;&amp;<sp/>i2!=-1)<sp/></highlight><highlight class="comment">//<sp/>only<sp/>t2<sp/>has<sp/>a<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>scope=t2.left(i2);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>replaceNamespaceAliases(scope,i2);</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>so=nsName.length();</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fullScope=nsName.left(so);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fullScope.isEmpty()<sp/>&amp;&amp;<sp/>!scope.isEmpty())<sp/>fullScope+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullScope+=scope;</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fullScope.isEmpty()<sp/>&amp;&amp;<sp/>Doxygen::namespaceSDict[fullScope]!=0)<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>is<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>t2.right(t2.length()-i2-2);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(so==0)</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so=-1;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((so=nsName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,so-1))==-1)</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so=0;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(so&gt;=0);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>QMAX(i1-2,0);</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>QMAX(i2-2,0);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2825"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stripIrrelevantString(QCString<sp/>&amp;target,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;str)</highlight></codeline>
<codeline lineno="2827"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target==str)<sp/>{<sp/>target.resize(0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=str.length();</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>changed=FALSE;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=target.find(str,p))!=-1)</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMatch<sp/>=<sp/>(i==0<sp/>||<sp/>!isId(target.at(i-1)))<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>character<sp/>before<sp/>str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(i+l==(int)target.length()<sp/>||<sp/>!isId(target.at(i+l)));<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>character<sp/>after<sp/>str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMatch)</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1=target.find(</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">,i+l);</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2=target.find(</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">,i+l);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1==-1<sp/>&amp;&amp;<sp/>i2==-1)</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>str<sp/>from<sp/>target<sp/>at<sp/>index<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target=target.left(i)+target.right(target.length()-i-l);<sp/></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed=TRUE;</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i-=l;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i1!=-1<sp/>&amp;&amp;<sp/>i&lt;i1)<sp/>||<sp/>(i2!=-1<sp/>&amp;&amp;<sp/>i&lt;i2))<sp/></highlight><highlight class="comment">//<sp/>str<sp/>before<sp/>*<sp/>or<sp/>&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>str<sp/>to<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target=str+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+target.left(i)+target.right(target.length()-i-l);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed=TRUE;</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>i+l;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(changed)<sp/>target=target.stripWhiteSpace();</highlight></codeline>
<codeline lineno="2858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stripIrrelevantConstVolatile(QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="2876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;stripIrrelevantConstVolatile(%s)=&quot;,s.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/>stripIrrelevantString(s,</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/>stripIrrelevantString(s,</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s\n&quot;,s.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>bit<sp/>of<sp/>debug<sp/>support<sp/>for<sp/>matchArguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATCH</highlight></codeline>
<codeline lineno="2886"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NOMATCH</highlight></codeline>
<codeline lineno="2887"><highlight class="preprocessor"></highlight><highlight class="comment">//#define<sp/>MATCH<sp/>printf(&quot;Match<sp/>at<sp/>line<sp/>%d\n&quot;,__LINE__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>NOMATCH<sp/>printf(&quot;Nomatch<sp/>at<sp/>line<sp/>%d\n&quot;,__LINE__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NEWMATCH</highlight></codeline>
<codeline lineno="2891"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchArgument(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*srcA,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*dstA,</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;className,</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;namespaceName,</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*usingNamespaces,</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;Definition&gt;</ref><sp/>*usingClasses)</highlight></codeline>
<codeline lineno="2896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;match<sp/>argument<sp/>start<sp/>`%s|%s&apos;<sp/>&lt;-&gt;<sp/>`%s|%s&apos;<sp/>using<sp/>nsp=%p<sp/>class=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>srcA-&gt;type.data(),srcA-&gt;name.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>dstA-&gt;type.data(),dstA-&gt;name.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>usingNamespaces,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>usingClasses);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>resolve<sp/>any<sp/>typedefs<sp/>names<sp/>that<sp/>are<sp/>part<sp/>of<sp/>srcA-&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>matching.<sp/>This<sp/>should<sp/>use<sp/>className<sp/>and<sp/>namespaceName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>usingNamespaces<sp/>and<sp/>usingClass<sp/>to<sp/>determine<sp/>which<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>in-scope,<sp/>so<sp/>it<sp/>will<sp/>not<sp/>be<sp/>very<sp/>efficient<sp/>:-(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/>QCString<sp/>srcAType=trimTemplateSpecifiers(namespaceName,className,srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/>QCString<sp/>dstAType=trimTemplateSpecifiers(namespaceName,className,dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>QCString<sp/>srcAName=srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.stripWhiteSpace();</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/>QCString<sp/>dstAName=dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.stripWhiteSpace();</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/>srcAType.stripPrefix(</highlight><highlight class="stringliteral">&quot;class<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/>dstAType.stripPrefix(</highlight><highlight class="stringliteral">&quot;class<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>distinguishing<sp/>&quot;const<sp/>A&quot;<sp/>from<sp/>&quot;const<sp/>B&quot;<sp/>even<sp/>though<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>a<sp/>syntactic<sp/>point<sp/>of<sp/>view<sp/>they<sp/>would<sp/>be<sp/>two<sp/>names<sp/>of<sp/>the<sp/>same<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>&quot;const&quot;.<sp/>This<sp/>is<sp/>not<sp/>fool<sp/>prove<sp/>of<sp/>course,<sp/>but<sp/>should<sp/>at<sp/>least<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>catch<sp/>the<sp/>most<sp/>common<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((srcAType==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcAType==</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>!srcAName.isEmpty())</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>srcAType+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/>srcAType+=srcAName;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dstAType==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/>||<sp/>dstAType==</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>!dstAName.isEmpty())</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>dstAType+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>dstAType+=dstAName;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAName==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcAName==</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/>srcAType+=srcAName;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/>srcAName.resize(0);</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/>||<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>dstAType+=dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/>dstAName.resize(0);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/>stripIrrelevantConstVolatile(srcAType);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/>stripIrrelevantConstVolatile(dstAType);</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>typename<sp/>keyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstrncmp(srcAType,</highlight><highlight class="stringliteral">&quot;typename<sp/>&quot;</highlight><highlight class="normal">,9)==0)</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/>srcAType<sp/>=<sp/>srcAType.right(srcAType.length()-9);<sp/></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstrncmp(dstAType,</highlight><highlight class="stringliteral">&quot;typename<sp/>&quot;</highlight><highlight class="normal">,9)==0)</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/>dstAType<sp/>=<sp/>dstAType.right(dstAType.length()-9);<sp/></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/>srcAType<sp/>=<sp/>removeRedundantWhiteSpace(srcAType);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>dstAType<sp/>=<sp/>removeRedundantWhiteSpace(dstAType);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//srcAType=stripTemplateSpecifiersFromScope(srcAType,FALSE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//dstAType=stripTemplateSpecifiersFromScope(dstAType,FALSE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;srcA=`%s|%s&apos;<sp/>dstA=`%s|%s&apos;\n&quot;,srcAType.data(),srcAName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>dstAType.data(),dstAName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>!=dstA-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>)<sp/></highlight><highlight class="comment">//<sp/>nomatch<sp/>for<sp/>char[]<sp/>against<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAType!=dstAType)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>argument<sp/>only<sp/>differs<sp/>on<sp/>name<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>a<sp/>namespace<sp/>scope<sp/>that<sp/>is<sp/>only<sp/>in<sp/>one<sp/>type<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(assuming<sp/>a<sp/>using<sp/>statement<sp/>was<sp/>used)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trimming<sp/>%s&lt;-&gt;%s:<sp/>%s\n&quot;,srcAType.data(),dstAType.data(),namespaceName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//trimNamespaceScope(srcAType,dstAType,namespaceName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;After<sp/>Trimming<sp/>%s&lt;-&gt;%s\n&quot;,srcAType.data(),dstAType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>srcScope;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>dstScope;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>redundant<sp/>scope<sp/>specifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!className.isEmpty())</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcAType=trimScope(className,srcAType);</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstAType=trimScope(className,dstAType);</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;trimScope:<sp/>`%s&apos;<sp/>&lt;=&gt;<sp/>`%s&apos;\n&quot;,srcAType.data(),dstAType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!namespaceName.isEmpty())</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd=getClass(namespaceName+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+className);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd=getClass(className);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>())</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trimBaseClassScope(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>(),srcAType);<sp/></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trimBaseClassScope(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>(),dstAType);<sp/></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;trimBaseClassScope:<sp/>`%s&apos;<sp/>&lt;=&gt;<sp/>`%s&apos;\n&quot;,srcAType.data(),dstAType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!namespaceName.isEmpty())</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcAType=trimScope(namespaceName,srcAType);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstAType=trimScope(namespaceName,dstAType);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;#usingNamespace=%d\n&quot;,usingNamespaces-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usingNamespaces<sp/>&amp;&amp;<sp/>usingNamespaces-&gt;<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>()&gt;0)</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*usingNamespaces);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(nd=nli.current());++nli)</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcAType=trimScope(nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),srcAType);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstAType=trimScope(nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),dstAType);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;#usingClasses=%d\n&quot;,usingClasses-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usingClasses<sp/>&amp;&amp;<sp/>usingClasses-&gt;<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>()&gt;0)</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound" tooltip="Ordered dictionary of elements of type T.">SDict&lt;Definition&gt;::Iterator</ref><sp/>cli(*usingClasses);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcAType=trimScope(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),srcAType);</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstAType=trimScope(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),dstAType);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;2.<sp/>srcA=%s|%s<sp/>dstA=%s|%s\n&quot;,srcAType.data(),srcAName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>dstAType.data(),dstAName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!srcAName.isEmpty()<sp/>&amp;&amp;<sp/>!dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.isEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(srcAType+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+srcAName)==dstAType)</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dstAName.isEmpty()<sp/>&amp;&amp;<sp/>!srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.isEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dstAType+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+dstAName)==srcAType)</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>srcPos=0,dstPos=0;<sp/></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal=TRUE;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(srcPos&lt;srcAType.length()<sp/>&amp;&amp;<sp/>dstPos&lt;dstAType.length()<sp/>&amp;&amp;<sp/>equal)</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>equal=srcAType.at(srcPos)==dstAType.at(dstPos);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(equal)<sp/>srcPos++,dstPos++;<sp/></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>srcATypeLen=srcAType.length();</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>dstATypeLen=dstAType.length();</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPos&lt;srcATypeLen<sp/>&amp;&amp;<sp/>dstPos&lt;dstATypeLen)</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>nothing<sp/>matches<sp/>or<sp/>the<sp/>match<sp/>ends<sp/>in<sp/>the<sp/>middle<sp/>or<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>a<sp/>string<sp/>then<sp/>there<sp/>is<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPos==0<sp/>||<sp/>dstPos==0)<sp/></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isId(srcAType.at(srcPos))<sp/>&amp;&amp;<sp/>isId(dstAType.at(dstPos)))</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;partial<sp/>match<sp/>srcPos=%d<sp/>dstPos=%d!\n&quot;,srcPos,dstPos);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>a<sp/>name<sp/>if<sp/>already<sp/>found<sp/>-&gt;<sp/>if<sp/>no<sp/>then<sp/>there<sp/>is<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!srcAName.isEmpty()<sp/>||<sp/>!dstAName.isEmpty())<sp/></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>types<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(srcPos&lt;srcATypeLen<sp/>&amp;&amp;<sp/>isId(srcAType.at(srcPos)))<sp/>srcPos++;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dstPos&lt;dstATypeLen<sp/>&amp;&amp;<sp/>isId(dstAType.at(dstPos)))<sp/>dstPos++;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPos&lt;srcATypeLen<sp/>||<sp/></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPos&lt;dstATypeLen<sp/>||</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(srcPos==srcATypeLen<sp/>&amp;&amp;<sp/>dstPos==dstATypeLen)</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>we<sp/>assume<sp/>that<sp/>a<sp/>name<sp/>starts<sp/>at<sp/>the<sp/>current<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(srcPos&lt;srcATypeLen<sp/>&amp;&amp;<sp/>isId(srcAType.at(srcPos)))<sp/>srcPos++;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dstPos&lt;dstATypeLen<sp/>&amp;&amp;<sp/>isId(dstAType.at(dstPos)))<sp/>dstPos++;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>nothing<sp/>more<sp/>follows<sp/>for<sp/>both<sp/>types<sp/>then<sp/>we<sp/>assume<sp/>we<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>match.<sp/>Note<sp/>that<sp/>now<sp/>`signed<sp/>int&apos;<sp/>and<sp/>`signed&apos;<sp/>match,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>seeing<sp/>that<sp/>int<sp/>is<sp/>not<sp/>a<sp/>name<sp/>can<sp/>only<sp/>be<sp/>done<sp/>by<sp/>looking<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>semantics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPos!=srcATypeLen<sp/>||<sp/>dstPos!=dstATypeLen)<sp/></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstPos&lt;dstAType.length())</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace((uchar)dstAType.at(dstPos)))<sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>the<sp/>names<sp/>differ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dstAName.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>dst<sp/>has<sp/>its<sp/>name<sp/>separated<sp/>from<sp/>its<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dstPos&lt;dstAType.length()<sp/>&amp;&amp;<sp/>isId(dstAType.at(dstPos)))<sp/>dstPos++;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstPos!=dstAType.length())<sp/></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>more<sp/>than<sp/>a<sp/>difference<sp/>in<sp/>name<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>dst<sp/>has<sp/>a<sp/>name<sp/>while<sp/>src<sp/>has<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstPos++;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dstPos&lt;dstAType.length()<sp/>&amp;&amp;<sp/>isId(dstAType.at(dstPos)))<sp/>dstPos++;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstPos!=dstAType.length()<sp/>||<sp/>!srcAName.isEmpty())<sp/></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>nope<sp/>not<sp/>a<sp/>name<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPos&lt;srcAType.length())</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace((uchar)srcAType.at(srcPos)))<sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>the<sp/>names<sp/>differ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!srcAName.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>src<sp/>has<sp/>its<sp/>name<sp/>separated<sp/>from<sp/>its<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(srcPos&lt;srcAType.length()<sp/>&amp;&amp;<sp/>isId(srcAType.at(srcPos)))<sp/>srcPos++;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPos!=srcAType.length())<sp/></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>more<sp/>than<sp/>a<sp/>difference<sp/>in<sp/>name<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>src<sp/>has<sp/>a<sp/>name<sp/>while<sp/>dst<sp/>has<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcPos++;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(srcPos&lt;srcAType.length()<sp/>&amp;&amp;<sp/>isId(srcAType.at(srcPos)))<sp/>srcPos++;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcPos!=srcAType.length()<sp/>||<sp/>!dstAName.isEmpty())<sp/></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>nope<sp/>not<sp/>a<sp/>name<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchArguments(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*srcAl,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*dstAl,</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cl,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ns,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkCV,</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*usingNamespaces,</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;Definition&gt;</ref><sp/>*usingClasses)</highlight></codeline>
<codeline lineno="3170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>QCString<sp/>className=cl;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/>QCString<sp/>namespaceName=ns;</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>template<sp/>specialization<sp/>from<sp/>class<sp/>name<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>til=className.find(&apos;&lt;&apos;),tir=className.find(&apos;&gt;&apos;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(til!=-1<sp/>&amp;&amp;<sp/>tir!=-1<sp/>&amp;&amp;<sp/>tir&gt;til)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>className=className.left(til)+className.right(className.length()-tir-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;matchArguments(%s,%s)<sp/>className=%s<sp/>namespaceName=%s<sp/>checkCV=%d<sp/>usingNamespaces=%d<sp/>usingClasses=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>srcAl<sp/>?<sp/>argListToString(srcAl).data()<sp/>:<sp/>&quot;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>dstAl<sp/>?<sp/>argListToString(dstAl).data()<sp/>:<sp/>&quot;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cl,ns,checkCV,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>usingNamespaces?usingNamespaces-&gt;count():0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>usingClasses?usingClasses-&gt;count():0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl==0<sp/>||<sp/>dstAl==0)</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>srcAl==dstAl;<sp/></highlight><highlight class="comment">//<sp/>at<sp/>least<sp/>one<sp/>of<sp/>the<sp/>members<sp/>is<sp/>not<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match)</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>special<sp/>case<sp/>with<sp/>void<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>srcAl-&gt;count()==0<sp/>&amp;&amp;<sp/>dstAl-&gt;count()==1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstAl-&gt;getFirst()-&gt;type==</highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>finding<sp/>match<sp/>between<sp/>func()<sp/>and<sp/>func(void)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>;</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/>srcAl-&gt;append(a);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dstAl-&gt;count()==0<sp/>&amp;&amp;<sp/>srcAl-&gt;count()==1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcAl-&gt;getFirst()-&gt;type==</highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>finding<sp/>match<sp/>between<sp/>func(void)<sp/>and<sp/>func()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>;</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/>dstAl-&gt;append(a);</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl-&gt;count()<sp/>!=<sp/>dstAl-&gt;count())</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>different<sp/>number<sp/>of<sp/>arguments<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkCV)</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref><sp/>!=<sp/>dstAl-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref>)<sp/></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>one<sp/>member<sp/>is<sp/>const,<sp/>the<sp/>other<sp/>not<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref><sp/>!=<sp/>dstAl-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref>)</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>one<sp/>member<sp/>is<sp/>volatile,<sp/>the<sp/>other<sp/>not<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>far<sp/>the<sp/>argument<sp/>list<sp/>could<sp/>match,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>compare<sp/>the<sp/>types<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/>ArgumentListIterator<sp/>srcAli(*srcAl),dstAli(*dstAl);</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*srcA,*dstA;</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(srcA=srcAli.current(),dstA=dstAli.current());++srcAli,++dstAli)</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!matchArgument(srcA,dstA,className,namespaceName,</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingNamespaces,usingClasses))</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight><highlight class="comment">//<sp/>all<sp/>arguments<sp/>match<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3262"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="3264"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>resolveSymbolName(<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fs,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*symbol,QCString<sp/>&amp;templSpec)</highlight></codeline>
<codeline lineno="3265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/>ASSERT(symbol!=0);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symbol-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>*)symbol)-&gt;isTypedef())<sp/></highlight><highlight class="comment">//<sp/>if<sp/>symbol<sp/>is<sp/>a<sp/>typedef<sp/>then<sp/>try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>resolve<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>newResolveTypedef(fs,(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>*)symbol,&amp;md,&amp;templSpec);</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" kindref="member">qualifiedName</ref>()+templSpec;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md)</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>symbol-&gt;<ref refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="3283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3285"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>stripDeclKeywords(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="3287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=s.find(</highlight><highlight class="stringliteral">&quot;<sp/>class<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.left(i)+s.mid(i+6);</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/>i=s.find(</highlight><highlight class="stringliteral">&quot;<sp/>typename<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.left(i)+s.mid(i+9);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/>i=s.find(</highlight><highlight class="stringliteral">&quot;<sp/>union<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.left(i)+s.mid(i+6);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/>i=s.find(</highlight><highlight class="stringliteral">&quot;<sp/>struct<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.left(i)+s.mid(i+7);</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>decl<sp/>for<sp/>circular<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>extractCanonicalType(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fs,QCString<sp/>type);</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal">QCString<sp/>getCanonicalTemplateSpec(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString&amp;<sp/>spec)</highlight></codeline>
<codeline lineno="3303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>QCString<sp/>templSpec<sp/>=<sp/>spec.stripWhiteSpace();</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>part<sp/>had<sp/>been<sp/>commented<sp/>out<sp/>before...<sp/>but<sp/>it<sp/>is<sp/>needed<sp/>to<sp/>match<sp/>for<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::list&lt;std::string&gt;<sp/>against<sp/>list&lt;string&gt;<sp/>so<sp/>it<sp/>is<sp/>now<sp/>back<sp/>again!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!templSpec.isEmpty()<sp/>&amp;&amp;<sp/>templSpec.at(0)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/>templSpec<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>extractCanonicalType(d,fs,templSpec.right(templSpec.length()-1).stripWhiteSpace());</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/>QCString<sp/>resolvedType<sp/>=<sp/>resolveTypeDef(d,templSpec);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resolvedType.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>not<sp/>known<sp/>as<sp/>a<sp/>typedef<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>templSpec<sp/>=<sp/>resolvedType;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getCanonicalTemplateSpec(%s)=%s\n&quot;,spec.data(),templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>templSpec;</highlight></codeline>
<codeline lineno="3319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>getCanonicalTypeForIdentifier(</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;word,</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*tSpec,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0)</highlight></codeline>
<codeline lineno="3325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count&gt;10)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word;<sp/></highlight><highlight class="comment">//<sp/>oops<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/>QCString<sp/>symName,scope,result,templSpec,tmpName;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//DefinitionList<sp/>*defList=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tSpec<sp/>&amp;&amp;<sp/>!tSpec-&gt;isEmpty())<sp/></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>templSpec<sp/>=<sp/>stripDeclKeywords(getCanonicalTemplateSpec(d,fs,*tSpec));</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)!=-1<sp/>&amp;&amp;<sp/>!(tmpName=stripScope(word)).isEmpty())</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>symName=tmpName;<sp/></highlight><highlight class="comment">//<sp/>name<sp/>without<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/>symName=word;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getCanonicalTypeForIdentifier(%s,[%s-&gt;%s])<sp/>start\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>word.data(),tSpec?tSpec-&gt;data():&quot;&lt;none&gt;&quot;,templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>QCString<sp/>ts;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/>QCString<sp/>resolvedType;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lookup<sp/>class<sp/>/<sp/>class<sp/>template<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/>cd<sp/>=<sp/>getResolvedClass(d,fs,word+templSpec,&amp;mType,&amp;ts,TRUE,TRUE,&amp;resolvedType);</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTemplInst<sp/>=<sp/>cd<sp/>&amp;&amp;<sp/>!templSpec.isEmpty();</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cd<sp/>&amp;&amp;<sp/>!templSpec.isEmpty())</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>template<sp/>specialization<sp/>not<sp/>known,<sp/>look<sp/>up<sp/>class<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/>cd<sp/>=<sp/>getResolvedClass(d,fs,word,&amp;mType,&amp;ts,TRUE,TRUE,&amp;resolvedType);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>cd-&gt;isUsedOnly())<sp/>cd=0;<sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>types<sp/>introduced<sp/>by<sp/>usage<sp/>relations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;cd=%p<sp/>mtype=%p\n&quot;,cd,mType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>getCanonicalTypeForIdentifer:<sp/>symbol=%s<sp/>word=%s<sp/>cd=%s<sp/>d=%s<sp/>fs=%s<sp/>cd-&gt;isTemplate=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>symName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>word.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd?cd-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>d?d-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fs?fs-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd?cd-&gt;isTemplate():-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>&gt;&gt;&gt;&gt;<sp/>word<sp/>&apos;%s&apos;<sp/>=&gt;<sp/>&apos;%s&apos;<sp/>templSpec=%s<sp/>ts=%s<sp/>tSpec=%s<sp/>isTemplate=%d<sp/>resolvedType=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(word+templSpec).data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd?cd-&gt;qualifiedName().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>templSpec.data(),ts.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tSpec?tSpec-&gt;data():&quot;&lt;null&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd?cd-&gt;isTemplate():FALSE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>resolvedType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>mtype=%s\n&quot;,mType?mType-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/></highlight><highlight class="comment">//<sp/>resolves<sp/>to<sp/>a<sp/>known<sp/>class<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==d<sp/>&amp;&amp;<sp/>tSpec)<sp/>*tSpec=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mType<sp/>&amp;&amp;<sp/>mType-&gt;isTypedef())<sp/></highlight><highlight class="comment">//<sp/>but<sp/>via<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>resolvedType+ts;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>+ts<sp/>was<sp/>added<sp/>for<sp/>bug<sp/>685125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTemplInst)</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spec<sp/>is<sp/>already<sp/>part<sp/>of<sp/>class<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templSpec=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tSpec)<sp/>*tSpec=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ts.isEmpty()<sp/>&amp;&amp;<sp/>templSpec.isEmpty())</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>formal<sp/>template<sp/>args<sp/>for<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templSpec<sp/>=<sp/>stripDeclKeywords(getCanonicalTemplateSpec(d,fs,ts));</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>removeRedundantWhiteSpace(cd-&gt;<ref refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" kindref="member">qualifiedName</ref>()<sp/>+<sp/>templSpec);</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a1cf3d48d5fdfce179f11d463d379d5f9" kindref="member" tooltip="Returns TRUE if this class is a template.">isTemplate</ref>()<sp/>&amp;&amp;<sp/>tSpec)<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!templSpec.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>specific<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+templSpec;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>use<sp/>template<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=cd-&gt;qualifiedNameWithTemplateParameters();</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>class,<sp/>so<sp/>remove<sp/>the<sp/>template<sp/>part<sp/>(it<sp/>is<sp/>part<sp/>of<sp/>the<sp/>class<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tSpec=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ts.isEmpty()<sp/>&amp;&amp;<sp/>!templSpec.isEmpty()<sp/>&amp;&amp;<sp/>cd<sp/>&amp;&amp;<sp/>!cd-&gt;<ref refid="d1/dcf/class_class_def_1a1cf3d48d5fdfce179f11d463d379d5f9" kindref="member" tooltip="Returns TRUE if this class is a template.">isTemplate</ref>()<sp/>&amp;&amp;<sp/>tSpec)</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>obscure<sp/>case,<sp/>where<sp/>a<sp/>class<sp/>is<sp/>used<sp/>as<sp/>a<sp/>template,<sp/>but<sp/>doxygen<sp/>think<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>(could<sp/>happen<sp/>when<sp/>loading<sp/>the<sp/>class<sp/>from<sp/>a<sp/>tag<sp/>file).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tSpec=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mType<sp/>&amp;&amp;<sp/>mType-&gt;isEnumerate())<sp/></highlight><highlight class="comment">//<sp/>an<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>mType-&gt;<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>();</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mType<sp/>&amp;&amp;<sp/>mType-&gt;isTypedef())<sp/></highlight><highlight class="comment">//<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//result<sp/>=<sp/>mType-&gt;qualifiedName();<sp/>//<sp/>changed<sp/>after<sp/>1.7.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//result<sp/>=<sp/>mType-&gt;typeString();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;word=%s<sp/>typeString=%s\n&quot;,word.data(),mType-&gt;typeString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(word!=mType-&gt;typeString())</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getCanonicalTypeForIdentifier(d,fs,mType-&gt;typeString(),tSpec,count+1);</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>mType-&gt;typeString();</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>fallback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>resolvedType<sp/>=<sp/>resolveTypeDef(d,word);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;typedef<sp/>[%s]-&gt;[%s]\n&quot;,word.data(),resolvedType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resolvedType.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>not<sp/>known<sp/>as<sp/>a<sp/>typedef<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>word;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>resolvedType;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getCanonicalTypeForIdentifier<sp/>[%s]-&gt;[%s]\n&quot;,word.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>extractCanonicalType(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fs,QCString<sp/>type)</highlight></codeline>
<codeline lineno="3460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/>type<sp/>=<sp/>type.stripWhiteSpace();</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>const<sp/>and<sp/>volatile<sp/>keywords<sp/>that<sp/>are<sp/>not<sp/>relevant<sp/>for<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/>stripIrrelevantConstVolatile(type);</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>leading<sp/>keywords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;class<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;struct<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;union<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;enum<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;typename<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/>type<sp/>=<sp/>removeRedundantWhiteSpace(type);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;extractCanonicalType(type=%s)<sp/>start:<sp/>def=%s<sp/>file=%s\n&quot;,type.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>d<sp/>?<sp/>d-&gt;name().data()<sp/>:<sp/>&quot;&lt;null&gt;&quot;,fs<sp/>?<sp/>fs-&gt;name().data()<sp/>:<sp/>&quot;&lt;null&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//static<sp/>QRegExp<sp/>id(&quot;[a-z_A-Z\\x80-\\xFF][:a-z_A-Z0-9\\x80-\\xFF]*&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/>QCString<sp/>canType;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/>QCString<sp/>templSpec,word;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0,pp=0;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=extractClassNameFromType(type,p,word,templSpec))!=-1)</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>foreach<sp/>identifier<sp/>in<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/>i=%d<sp/>p=%d\n&quot;,i,p);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;pp)<sp/>canType<sp/>+=<sp/>type.mid(pp,i-pp);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>ct<sp/>=<sp/>getCanonicalTypeForIdentifier(d,fs,word,&amp;templSpec);</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>the<sp/>ct<sp/>is<sp/>empty<sp/>it<sp/>means<sp/>that<sp/>&quot;word&quot;<sp/>represents<sp/>scope<sp/>&quot;d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>this<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>canonical<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>(it<sp/>is<sp/>redundant),<sp/>so/<sp/>we<sp/>skip<sp/>it.<sp/>This<sp/>solves<sp/>problem<sp/>589616.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ct.isEmpty()<sp/>&amp;&amp;<sp/>type.mid(p,2)==</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p+=2;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>canType<sp/>+=<sp/>ct;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/>word=%s<sp/>templSpec=%s<sp/>canType=%s<sp/>ct=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>word.data(),templSpec.data(),canType.data(),ct.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!templSpec.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>didn&apos;t<sp/>use<sp/>up<sp/>the<sp/>templSpec<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(i.e.<sp/>type<sp/>is<sp/>not<sp/>a<sp/>template<sp/>specialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>resolve<sp/>any<sp/>identifiers<sp/>inside.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF][a-z_A-Z0-9\\x80-\\xFF]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tp=0,tl,ti;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>identifier<sp/>template<sp/>specifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;adding<sp/>resolved<sp/>%s<sp/>to<sp/>%s\n&quot;,templSpec.data(),canType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((ti=re.match(templSpec,tp,&amp;tl))!=-1)</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canType<sp/>+=<sp/>templSpec.mid(tp,ti-tp);</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canType<sp/>+=<sp/>getCanonicalTypeForIdentifier(d,fs,templSpec.mid(ti,tl),0);</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp=ti+tl;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>canType+=templSpec.right(templSpec.length()-tp);</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>pp=p;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/>canType<sp/>+=<sp/>type.right(type.length()-pp);</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;extractCanonicalType<sp/>=<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;\n&quot;,type.data(),canType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removeRedundantWhiteSpace(canType);</highlight></codeline>
<codeline lineno="3527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>extractCanonicalArgType(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="3530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/>QCString<sp/>type<sp/>=<sp/>arg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.stripWhiteSpace();</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/>QCString<sp/>name<sp/>=<sp/>arg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;-----<sp/>extractCanonicalArgType(type=%s,name=%s)\n&quot;,type.data(),name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((type==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/>||<sp/>type==</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>!name.isEmpty())<sp/></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>part<sp/>of<sp/>type<sp/>=&gt;<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/>type+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/>type+=name;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/>||<sp/>name==</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>part<sp/>of<sp/>type<sp/>=&gt;<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!type.isEmpty())<sp/>type+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/>type+=name;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/>type+=arg-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extractCanonicalType(d,fs,type);</highlight></codeline>
<codeline lineno="3550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchArgument2(</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*srcScope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*srcFileScope,<ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*srcA,</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*dstScope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*dstFileScope,<ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*dstA</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;<sp/>match<sp/>argument:<sp/>%s::`%s|%s&apos;<sp/>(%s)<sp/>&lt;-&gt;<sp/>%s::`%s|%s&apos;<sp/>(%s)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>srcScope<sp/>?<sp/>srcScope-&gt;name().data()<sp/>:<sp/>&quot;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>srcA-&gt;type.data(),srcA-&gt;name.data(),srcA-&gt;canType.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>dstScope<sp/>?<sp/>dstScope-&gt;name().data()<sp/>:<sp/>&quot;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>dstA-&gt;type.data(),dstA-&gt;name.data(),dstA-&gt;canType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(srcA-&gt;array!=dstA-&gt;array)<sp/>//<sp/>nomatch<sp/>for<sp/>char[]<sp/>against<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>NOMATCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>return<sp/>FALSE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/>QCString<sp/>sSrcName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/>QCString<sp/>sDstName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/>QCString<sp/>srcType<sp/><sp/>=<sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/>QCString<sp/>dstType<sp/><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/>stripIrrelevantConstVolatile(srcType);</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/>stripIrrelevantConstVolatile(dstType);</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&apos;%s&apos;&lt;-&gt;&apos;%s&apos;\n&quot;,sSrcName.data(),dstType.right(sSrcName.length()).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&apos;%s&apos;&lt;-&gt;&apos;%s&apos;\n&quot;,sDstName.data(),srcType.right(sDstName.length()).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sSrcName==dstType.right(sSrcName.length()))</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>case<sp/>&quot;unsigned<sp/>int&quot;<sp/>&lt;-&gt;<sp/>&quot;unsigned<sp/>int<sp/>i&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>+=sSrcName;</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>invalidate<sp/>cached<sp/>type<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sDstName==srcType.right(sDstName.length()))</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>case<sp/>&quot;unsigned<sp/>int<sp/>i&quot;<sp/>&lt;-&gt;<sp/>&quot;unsigned<sp/>int&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>+=sDstName;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>invalidate<sp/>cached<sp/>type<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref><sp/>=<sp/>extractCanonicalArgType(srcScope,srcFileScope,srcA);</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstA-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref><sp/>=<sp/>extractCanonicalArgType(dstScope,dstFileScope,dstA);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>==dstA-&gt;<ref refid="d1/dee/struct_argument_1ac20b3c80630f773cf72f13c6e44b235a" kindref="member">canType</ref>)</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/>Canonical<sp/>types<sp/>do<sp/>not<sp/>match<sp/>[%s]&lt;-&gt;[%s]\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>srcA-&gt;canType.data(),dstA-&gt;canType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>new<sp/>algorithm<sp/>for<sp/>argument<sp/>matching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchArguments2(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*srcScope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*srcFileScope,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*srcAl,</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*dstScope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*dstFileScope,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*dstAl,</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkCV</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;***<sp/>matchArguments2\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/>ASSERT(srcScope!=0<sp/>&amp;&amp;<sp/>dstScope!=0);</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl==0<sp/>||<sp/>dstAl==0)</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>srcAl==dstAl;<sp/></highlight><highlight class="comment">//<sp/>at<sp/>least<sp/>one<sp/>of<sp/>the<sp/>members<sp/>is<sp/>not<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match)</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>special<sp/>case<sp/>with<sp/>void<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>srcAl-&gt;count()==0<sp/>&amp;&amp;<sp/>dstAl-&gt;count()==1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstAl-&gt;getFirst()-&gt;type==</highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>finding<sp/>match<sp/>between<sp/>func()<sp/>and<sp/>func(void)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/>srcAl-&gt;append(a);</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dstAl-&gt;count()==0<sp/>&amp;&amp;<sp/>srcAl-&gt;count()==1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcAl-&gt;getFirst()-&gt;type==</highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>finding<sp/>match<sp/>between<sp/>func(void)<sp/>and<sp/>func()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>;</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/>dstAl-&gt;append(a);</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl-&gt;count()<sp/>!=<sp/>dstAl-&gt;count())</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>different<sp/>number<sp/>of<sp/>arguments<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkCV)</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref><sp/>!=<sp/>dstAl-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref>)<sp/></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>one<sp/>member<sp/>is<sp/>const,<sp/>the<sp/>other<sp/>not<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref><sp/>!=<sp/>dstAl-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref>)</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>one<sp/>member<sp/>is<sp/>volatile,<sp/>the<sp/>other<sp/>not<sp/>-&gt;<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>far<sp/>the<sp/>argument<sp/>list<sp/>could<sp/>match,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>compare<sp/>the<sp/>types<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/>ArgumentListIterator<sp/>srcAli(*srcAl),dstAli(*dstAl);</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*srcA,*dstA;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(srcA=srcAli.current(),dstA=dstAli.current());++srcAli,++dstAli)</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!matchArgument2(srcScope,srcFileScope,srcA,</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstScope,dstFileScope,dstA)</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOMATCH</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/>MATCH</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight><highlight class="comment">//<sp/>all<sp/>arguments<sp/>match<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>merges<sp/>the<sp/>initializer<sp/>of<sp/>two<sp/>argument<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pre:<sp/><sp/>the<sp/>types<sp/>of<sp/>the<sp/>arguments<sp/>in<sp/>the<sp/>list<sp/>should<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mergeArguments(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*srcAl,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*dstAl,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forceNameOverwrite)</highlight></codeline>
<codeline lineno="3700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;mergeArguments<sp/>`%s&apos;,<sp/>`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>argListToString(srcAl).data(),argListToString(dstAl).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcAl==0<sp/>||<sp/>dstAl==0<sp/>||<sp/>srcAl-&gt;count()!=dstAl-&gt;count())</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>argument<sp/>lists<sp/>-&gt;<sp/>do<sp/>not<sp/>merge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/>ArgumentListIterator<sp/>srcAli(*srcAl),dstAli(*dstAl);</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*srcA,*dstA;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(srcA=srcAli.current(),dstA=dstAli.current());++srcAli,++dstAli)</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!dstA-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Defval<sp/>changing<sp/>`%s&apos;-&gt;`%s&apos;\n&quot;,srcA-&gt;defval.data(),dstA-&gt;defval.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>=dstA-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.copy();</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!srcA-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty()<sp/>&amp;&amp;<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Defval<sp/>changing<sp/>`%s&apos;-&gt;`%s&apos;\n&quot;,dstA-&gt;defval.data(),srcA-&gt;defval.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>=srcA-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.copy();</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fix<sp/>wrongly<sp/>detected<sp/>const<sp/>or<sp/>volatile<sp/>specifiers<sp/>before<sp/>merging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>example:<sp/>&quot;const<sp/>A<sp/>*const&quot;<sp/>is<sp/>detected<sp/>as<sp/>type=&quot;const<sp/>A<sp/>*&quot;<sp/>name=&quot;const&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.resize(0);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/>||<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.resize(0);</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>==dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;1.<sp/>merging<sp/>%s:%s<sp/>&lt;-&gt;<sp/>%s:%s\n&quot;,srcA-&gt;type.data(),srcA-&gt;name.data(),dstA-&gt;type.data(),dstA-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;type:<sp/>`%s&apos;:=`%s&apos;\n&quot;,srcA-&gt;type.data(),dstA-&gt;type.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;name:<sp/>`%s&apos;:=`%s&apos;\n&quot;,srcA-&gt;name.data(),dstA-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.copy();</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.copy();</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>&amp;&amp;<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;type:<sp/>`%s&apos;:=`%s&apos;\n&quot;,dstA-&gt;type.data(),srcA-&gt;type.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;name:<sp/>`%s&apos;:=`%s&apos;\n&quot;,dstA-&gt;name.data(),srcA-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.copy();</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.copy();</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;srcA-&gt;name=%s<sp/>dstA-&gt;name=%s\n&quot;,srcA-&gt;name.data(),dstA-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forceNameOverwrite)</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!dstA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!srcA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty()<sp/>&amp;&amp;<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;2.<sp/>merging<sp/>&apos;%s&apos;:&apos;%s&apos;<sp/>&lt;-&gt;<sp/>&apos;%s&apos;:&apos;%s&apos;\n&quot;,srcA-&gt;type.data(),srcA-&gt;name.data(),dstA-&gt;type.data(),dstA-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>=srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.stripWhiteSpace();</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>=dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.stripWhiteSpace();</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>)<sp/></highlight><highlight class="comment">//<sp/>&quot;unsigned<sp/>long:int&quot;<sp/>&lt;-&gt;<sp/>&quot;unsigned<sp/>long<sp/>int:bla&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>=dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>)<sp/></highlight><highlight class="comment">//<sp/>&quot;unsigned<sp/>long<sp/>int<sp/>bla&quot;<sp/>&lt;-&gt;<sp/>&quot;unsigned<sp/>long<sp/>int&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>+=</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>=srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1=srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2=dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1=srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.length()-i1-2,</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2=dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.length()-i2-2;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1!=-1<sp/>&amp;&amp;<sp/>i2==-1<sp/>&amp;&amp;<sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.right(j1)==dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;type:<sp/>`%s&apos;:=`%s&apos;\n&quot;,dstA-&gt;type.data(),srcA-&gt;type.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;name:<sp/>`%s&apos;:=`%s&apos;\n&quot;,dstA-&gt;name.data(),srcA-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(i1+2)+dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.copy();</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1==-1<sp/>&amp;&amp;<sp/>i2!=-1<sp/>&amp;&amp;<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.right(j2)==srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;type:<sp/>`%s&apos;:=`%s&apos;\n&quot;,srcA-&gt;type.data(),dstA-&gt;type.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;name:<sp/>`%s&apos;:=`%s&apos;\n&quot;,dstA-&gt;name.data(),srcA-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(i2+2)+srcA-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.copy();</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!dstA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref><sp/>=<sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.copy();</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!srcA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dstA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref><sp/>=<sp/>srcA-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>.copy();</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Merge<sp/>argument<sp/>`%s|%s&apos;<sp/>`%s|%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>srcA-&gt;type.data(),srcA-&gt;name.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dstA-&gt;type.data(),dstA-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findMembersWithSpecificName(<ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn,</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*args,</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkStatics,</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*currentFile,</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkCV,</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*forceTagFile,</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;MemberDef&gt;</ref><sp/>&amp;members)</highlight></codeline>
<codeline lineno="3837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Function<sp/>with<sp/>global<sp/>scope<sp/>name<sp/>`%s&apos;<sp/>args=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;memberName(),args);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mli(*mn);</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mli.toFirst();(md=mli.current());++mli)</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/>*fd=md-&gt;getFileDef();</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd=md-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>md-&gt;name()=`%s&apos;<sp/>md-&gt;args=`%s&apos;<sp/>fd=%p<sp/>gd=%p<sp/>current=%p<sp/>ref=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),args,fd,gd,currentFile,md-&gt;getReference().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((gd<sp/>&amp;&amp;<sp/>gd-&gt;<ref refid="d8/d09/class_group_def_1a9338f966e744542f22c5bbc630b80f95" kindref="member">isLinkable</ref>())<sp/>||<sp/>(fd<sp/>&amp;&amp;<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1af677cee8c349fa10532b0aa5c09df396" kindref="member">isLinkable</ref>())<sp/>||<sp/>md-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;getNamespaceDef()==0<sp/>&amp;&amp;<sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!checkStatics<sp/>||<sp/>(!md-&gt;isStatic()<sp/>&amp;&amp;<sp/>!md-&gt;isDefine())<sp/>||<sp/></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentFile==0<sp/>||<sp/>fd==currentFile)<sp/></highlight><highlight class="comment">//<sp/>statics<sp/>must<sp/>appear<sp/>in<sp/>the<sp/>same<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match=TRUE;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*argList=0;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args<sp/>&amp;&amp;<sp/>!md-&gt;isDefine()<sp/>&amp;&amp;<sp/>qstrcmp(args,</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">)!=0)</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argList=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdAl<sp/>=<sp/>md-&gt;argumentList();</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(args,argList);</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match=matchArguments2(</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;getOuterScope(),fd,mdAl,</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::globalScope,fd,argList,</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkCV);<sp/></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>argList;<sp/>argList=0;</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match<sp/>&amp;&amp;<sp/>(forceTagFile==0<sp/>||<sp/>md-&gt;<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>()==forceTagFile))<sp/></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>match!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>members.append(md);</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899" refid="d8/d3c/util_8h_1a299731fdff2d25b4c64d046d24a0ac1f" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getDefs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;scName,</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;memberName,<sp/></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*args,</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*&amp;md,<sp/></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*&amp;cd,<sp/></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*&amp;fd,<sp/></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*&amp;nd,<sp/></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*&amp;gd,</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forceEmptyScope,</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*currentFile,</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkCV,</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*forceTagFile</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/>fd=0,<sp/>md=0,<sp/>cd=0,<sp/>nd=0,<sp/>gd=0;</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memberName.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>name<sp/>=&gt;<sp/>nothing<sp/>to<sp/>link<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/>QCString<sp/>scopeName=scName;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/>scopeName<sp/>=<sp/>substitute(scopeName,</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>for<sp/>PHP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Search<sp/>for<sp/>name=%s<sp/>args=%s<sp/>in<sp/>scope=%s<sp/>forceEmpty=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memberName.data(),args,scopeName.data(),forceEmptyScope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is,im=0,pm=0;</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>common<sp/>part<sp/>of<sp/>the<sp/>scope<sp/>from<sp/>the<sp/>scopeName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((is=scopeName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">))!=-1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(im=memberName.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,pm))!=-1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(scopeName.right(scopeName.length()-is-2)==memberName.mid(pm,im-pm))</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>scopeName=scopeName.left(is);<sp/></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>pm=im+2;</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;result<sp/>after<sp/>scope<sp/>corrections<sp/>scope=%s<sp/>name=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName.data(),memberName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/>QCString<sp/>mName=memberName;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>QCString<sp/>mScope;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memberName.left(9)!=</highlight><highlight class="stringliteral">&quot;operator<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>treat<sp/>operator<sp/>conversion<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(im=memberName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">))!=-1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>im&lt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)memberName.length()-2<sp/></highlight><highlight class="comment">//<sp/>not<sp/>A::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/>mScope=memberName.left(im);<sp/></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/>mName=memberName.right(memberName.length()-im-2);</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>special<sp/>the<sp/>case<sp/>where<sp/>both<sp/>scope<sp/>name<sp/>and<sp/>member<sp/>scope<sp/>are<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mScope==scopeName)<sp/>scopeName.resize(0);</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;mScope=`%s&apos;<sp/>mName=`%s&apos;\n&quot;,mScope.data(),mName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn<sp/>=<sp/>Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(mName);</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;mName=%s<sp/>mn=%p\n&quot;,mName.data(),mn);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!forceEmptyScope<sp/>||<sp/>scopeName.isEmpty())<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>was<sp/>changed<sp/>for<sp/>bug638856,<sp/>forceEmptyScope<sp/>=&gt;<sp/>empty<sp/>scopeName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>&amp;&amp;<sp/>!(scopeName.isEmpty()<sp/>&amp;&amp;<sp/>mScope.isEmpty()))</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>&gt;member<sp/>name<sp/>&apos;%s&apos;<sp/>found\n&quot;,mName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopeOffset=scopeName.length();</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>className<sp/>=<sp/>scopeName.left(scopeOffset);</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!className.isEmpty()<sp/>&amp;&amp;<sp/>!mScope.isEmpty())</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+mScope;</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mScope.isEmpty())</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className=mScope;</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*fcd=getResolvedClass(Doxygen::globalScope,0,className);</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>class<sp/>scope<sp/>%s:<sp/>%p\n&quot;,className.data(),fcd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>fill<sp/>in<sp/>correct<sp/>fileScope!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcd<sp/>&amp;&amp;<sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>it<sp/>a<sp/>documented<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>()<sp/></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Found<sp/>fcd=%p\n&quot;,fcd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mmli(*mn);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mmd;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mdist=maxInheritanceDepth;<sp/></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*argList=0;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args)</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argList=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(args,argList);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mmli.toFirst();(mmd=mmli.current());++mmli)</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(mmd-&gt;isLinkable())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mmdAl<sp/>=<sp/>mmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match=args==0<sp/>||<sp/></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(mmd-&gt;getOuterScope(),mmd-&gt;getFileDef(),mmdAl,</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcd,fcd-&gt;<ref refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" kindref="member" tooltip="Returns the file in which this compound&amp;#39;s definition can be found.">getFileDef</ref>(),argList,</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkCV</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;match=%d\n&quot;,match);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match)</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*mcd=mmd-&gt;getClassDef();</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mcd)</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=minClassDistance(fcd,mcd);</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m&lt;mdist<sp/>&amp;&amp;<sp/>mcd-&gt;isLinkable())</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdist=m;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd=mcd;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mmd;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argList)</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>argList;<sp/>argList=0;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdist==maxInheritanceDepth<sp/>&amp;&amp;<sp/>args<sp/>&amp;&amp;<sp/>qstrcmp(args,</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>exact<sp/>match<sp/>found,<sp/>but<sp/>if<sp/>args=&quot;()&quot;<sp/>an<sp/>arbitrary<sp/>member<sp/>will<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>&gt;Searching<sp/>for<sp/>arbitrary<sp/>member\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mmli.toFirst();(mmd=mmli.current());++mmli)</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(mmd-&gt;isLinkable())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*mcd=mmd-&gt;getClassDef();</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>&gt;Class<sp/>%s<sp/>found\n&quot;,mcd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mcd)</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=minClassDistance(fcd,mcd);</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m&lt;mdist<sp/>/*<sp/>&amp;&amp;<sp/>mcd-&gt;isLinkable()*/<sp/>)</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Class<sp/>distance<sp/>%d\n&quot;,m);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdist=m;</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd=mcd;</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mmd;</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>&gt;Succes=%d\n&quot;,mdist&lt;maxInheritanceDepth);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdist&lt;maxInheritanceDepth)<sp/></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>())<sp/></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=0;<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>returning<sp/>things<sp/>we<sp/>cannot<sp/>link<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd=0;</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>match<sp/>found,<sp/>but<sp/>was<sp/>not<sp/>linkable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd=md-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd)<sp/>cd=0;</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight><highlight class="comment">/*<sp/>found<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>go<sp/>to<sp/>the<sp/>parent<sp/>scope<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeOffset==0)</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=-1;</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((scopeOffset=scopeName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,scopeOffset-1))==-1)</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=0;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(scopeOffset&gt;=0);</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn<sp/>&amp;&amp;<sp/>scopeName.isEmpty()<sp/>&amp;&amp;<sp/>mScope.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>Maybe<sp/>a<sp/>related<sp/>function?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mmli(*mn);</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mmd,<sp/>*fuzzy_mmd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*argList<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasEmptyArgs<sp/>=<sp/>args<sp/>&amp;&amp;<sp/>qstrcmp(args,<sp/></highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args)</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(args,<sp/>argList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>);</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mmli.toFirst();<sp/>(mmd<sp/>=<sp/>mmli.current());<sp/>++mmli)</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mmd-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>()<sp/>||<sp/>(!mmd-&gt;isRelated()<sp/>&amp;&amp;<sp/>!mmd-&gt;isForeign())<sp/>||</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!mmd-&gt;getClassDef())</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"></highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!args)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>className<sp/>=<sp/>mmd-&gt;getClassDef()-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mmdAl<sp/>=<sp/>mmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchArguments2(mmd-&gt;getOuterScope(),mmd-&gt;getFileDef(),mmdAl,</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::globalScope,mmd-&gt;getFileDef(),argList,</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkCV</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fuzzy_mmd<sp/>&amp;&amp;<sp/>hasEmptyArgs)</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuzzy_mmd<sp/>=<sp/>mmd;</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argList)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>argList,<sp/>argList<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/>mmd<sp/>=<sp/>mmd<sp/>?<sp/>mmd<sp/>:<sp/>fuzzy_mmd;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mmd)</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md<sp/>=<sp/>mmd;</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/>=<sp/>mmd-&gt;getClassDef();</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>an<sp/>namespace,<sp/>file<sp/>or<sp/>group<sp/>member<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Testing<sp/>for<sp/>global<sp/>symbol<sp/>scopeName=`%s&apos;<sp/>mScope=`%s&apos;<sp/>::<sp/>mName=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName.data(),mScope.data(),mName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::functionNameSDict-&gt;find(mName)))<sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>known</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>&gt;symbol<sp/>name<sp/>found\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*fnd=0;</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopeOffset=scopeName.length();</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>namespaceName<sp/>=<sp/>scopeName.left(scopeOffset);</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!namespaceName.isEmpty()<sp/>&amp;&amp;<sp/>!mScope.isEmpty())</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaceName+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+mScope;</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mScope.isEmpty())</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaceName=mScope.copy();</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>namespace<sp/>%s\n&quot;,namespaceName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!namespaceName.isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fnd=Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(namespaceName))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnd-&gt;<ref refid="d0/d07/class_namespace_def_1a5bbc047ff9799f2f74668168afacc0b2" kindref="member">isLinkable</ref>()</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Function<sp/>inside<sp/>existing<sp/>namespace<sp/>`%s&apos;\n&quot;,namespaceName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mmli(*mn);</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mmd;</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mmli.toFirst();((mmd=mmli.current())<sp/>&amp;&amp;<sp/>!found);++mmli)</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;mmd-&gt;getNamespaceDef()=%p<sp/>fnd=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mmd-&gt;getNamespaceDef(),fnd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mmd-&gt;getNamespaceDef()==fnd<sp/></highlight><highlight class="comment">/*<sp/>&amp;&amp;<sp/>mmd-&gt;isLinkable()<sp/>*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match=TRUE;</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*argList=0;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args<sp/>&amp;&amp;<sp/>qstrcmp(args,</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">)!=0)</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argList=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mmdAl<sp/>=<sp/>mmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(args,argList);</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match=matchArguments2(</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;getOuterScope(),mmd-&gt;getFileDef(),mmdAl,</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnd,mmd-&gt;getFileDef(),argList,</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkCV);<sp/></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match)</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd=fnd;</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mmd;</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args)</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>argList;<sp/>argList=0;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>args<sp/>&amp;&amp;<sp/>!qstrcmp(args,</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>exact<sp/>match<sp/>found,<sp/>but<sp/>if<sp/>args=&quot;()&quot;<sp/>an<sp/>arbitrary<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>will<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mmli.toFirst();((mmd=mmli.current())<sp/>&amp;&amp;<sp/>!found);++mmli)</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mmd-&gt;getNamespaceDef()==fnd<sp/></highlight><highlight class="comment">/*&amp;&amp;<sp/>mmd-&gt;isLinkable()<sp/>*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd=fnd;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mmd;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>())<sp/></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=0;<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>returning<sp/>things<sp/>we<sp/>cannot<sp/>link<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd=0;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>match<sp/>found<sp/>but<sp/>not<sp/>linkable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd=md-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd<sp/>&amp;&amp;<sp/>gd-&gt;<ref refid="d8/d09/class_group_def_1a9338f966e744542f22c5bbc630b80f95" kindref="member">isLinkable</ref>())<sp/>nd=0;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>gd=0;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeOffset==0)</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=-1;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((scopeOffset=scopeName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,scopeOffset-1))==-1)</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=0;</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(scopeOffset&gt;=0);</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else<sp/>//<sp/>no<sp/>scope<sp/>=&gt;<sp/>global<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;MemberDef&gt;</ref><sp/>members;</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>matches<sp/>with<sp/>strict<sp/>static<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findMembersWithSpecificName(mn,args,TRUE,currentFile,checkCV,forceTagFile,members);</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(members.count()==0)<sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>again<sp/>without<sp/>strict<sp/>static<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findMembersWithSpecificName(mn,args,FALSE,currentFile,checkCV,forceTagFile,members);</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>%d<sp/>members\n&quot;,members.count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(members.count()!=1<sp/>&amp;&amp;<sp/>args<sp/>&amp;&amp;<sp/>!qstrcmp(args,</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>exact<sp/>match<sp/>found,<sp/>but<sp/>if<sp/>args=&quot;()&quot;<sp/>an<sp/>arbitrary<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>will<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mn-&gt;last();</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(md<sp/></highlight><highlight class="comment">/*<sp/>&amp;&amp;<sp/>md-&gt;isLinkable()*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>member<sp/>`%s&apos;\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;member<sp/>is<sp/>linkable<sp/>md-&gt;name()=`%s&apos;\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd=md-&gt;getFileDef();</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd=md-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(gd<sp/>&amp;&amp;<sp/>gd-&gt;<ref refid="d8/d09/class_group_def_1a9338f966e744542f22c5bbc630b80f95" kindref="member">isLinkable</ref>())<sp/>||<sp/>(fd<sp/>&amp;&amp;<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1af677cee8c349fa10532b0aa5c09df396" kindref="member">isLinkable</ref>())<sp/></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>members.append(md);</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mn-&gt;prev();</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>%d<sp/>candidate<sp/>members\n&quot;,members.count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(members.count()&gt;0)<sp/></highlight><highlight class="comment">//<sp/>at<sp/>least<sp/>one<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=members.last();</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>matching<sp/>global<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd=md-&gt;getFileDef();</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd=md-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;fd=%p<sp/>gd=%p<sp/>gd-&gt;isLinkable()=%d\n&quot;,fd,gd,gd-&gt;isLinkable());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd<sp/>&amp;&amp;<sp/>gd-&gt;<ref refid="d8/d09/class_group_def_1a9338f966e744542f22c5bbc630b80f95" kindref="member">isLinkable</ref>())<sp/>fd=0;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>gd=0;</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>nothing<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getScopeDefs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*docScope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scope,</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*&amp;cd,<sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*&amp;nd)</highlight></codeline>
<codeline lineno="4282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/>cd=0;nd=0;</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/>QCString<sp/>scopeName=scope;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getScopeDefs:<sp/>docScope=`%s&apos;<sp/>scope=`%s&apos;\n&quot;,docScope,scope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeName.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>explicitGlobalScope=FALSE;</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeName.at(0)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>scopeName.at(1)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/>scopeName=scopeName.right(scopeName.length()-2);<sp/><sp/></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>explicitGlobalScope=TRUE;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/>QCString<sp/>docScopeName=docScope;</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopeOffset=explicitGlobalScope<sp/>?<sp/>0<sp/>:<sp/>docScopeName.length();</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"></highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>possible<sp/>docScope<sp/>(from<sp/>largest<sp/>to<sp/>and<sp/>including<sp/>empty)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>fullName=scopeName.copy();</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeOffset&gt;0)<sp/>fullName.prepend(docScopeName.left(scopeOffset)+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((cd=getClass(fullName))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normal<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cd=getClass(fullName+</highlight><highlight class="stringliteral">&quot;-p&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//||<sp/><sp/><sp/><sp/>//<sp/>ObjC<sp/>protocol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(cd=getClass(fullName+&quot;-g&quot;))<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>C#<sp/>generic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>())</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight><highlight class="comment">//<sp/>class<sp/>link<sp/>written<sp/>=&gt;<sp/>quit<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nd=Doxygen::namespaceSDict-&gt;find(fullName))<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d0/d07/class_namespace_def_1a5bbc047ff9799f2f74668168afacc0b2" kindref="member">isLinkable</ref>())</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>link<sp/>written<sp/>=&gt;<sp/>quit<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeOffset==0)</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=-1;</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((scopeOffset=docScopeName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,scopeOffset-1))==-1)</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=0;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(scopeOffset&gt;=0);</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLowerCase(QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="4329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/>uchar<sp/>*p=(uchar*)s.data();</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!islower(c))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight></codeline>
<codeline lineno="4335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight></codeline>
<codeline lineno="4340" refid="d8/d3c/util_8h_1a4cc99128827cc7c407e276d3f65bb7b2" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resolveRef(</highlight><highlight class="comment">/*<sp/>in<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scName,</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inSeeBlock,</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>*/</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>**resContext,</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>*/</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/>**resMember,</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lookForSpecialization,</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*currentFile,</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkScope</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;resolveRef(scope=%s,name=%s,inSeeBlock=%d)\n&quot;,scName,name,inSeeBlock);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/>QCString<sp/>tsName<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>memberScopeFirst<sp/>=<sp/>tsName.find(&apos;#&apos;)!=-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/>QCString<sp/>fullName<sp/>=<sp/>substitute(tsName,</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fullName.find(</highlight><highlight class="stringliteral">&quot;anonymous_namespace{&quot;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;<sp/>fullName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)==-1)</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/>fullName<sp/>=<sp/>removeRedundantWhiteSpace(substitute(fullName,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/>fullName<sp/>=<sp/>removeRedundantWhiteSpace(fullName);</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bracePos=findParameterList(fullName);</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endNamePos=bracePos!=-1<sp/>?<sp/>bracePos<sp/>:<sp/>fullName.length();</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopePos=fullName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,endNamePos);</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>explicitScope<sp/>=<sp/>fullName.left(2)==</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>::scope<sp/>or<sp/>#scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(scopePos&gt;2<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>::N::A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsName.left(2)==</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"><sp/>||<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>::foo<sp/>in<sp/>local<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scName==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#foo<sp/><sp/>in<sp/>global<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>result<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/>*resContext=0;</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/>*resMember=0;</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bracePos==-1)<sp/></highlight><highlight class="comment">//<sp/>simple<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=0;</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>if()<sp/>was<sp/>commented<sp/>out<sp/>for<sp/>releases<sp/>in<sp/>the<sp/>range<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.5.2<sp/>to<sp/>1.6.1,<sp/>but<sp/>has<sp/>been<sp/>restored<sp/>as<sp/>a<sp/>result<sp/>of<sp/>bug<sp/>report<sp/>594787.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inSeeBlock<sp/>&amp;&amp;<sp/>scopePos==-1<sp/>&amp;&amp;<sp/>isLowerCase(tsName))</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>lower<sp/>case<sp/>only<sp/>name<sp/>=&gt;<sp/>do<sp/>not<sp/>try<sp/>to<sp/>autolink<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scName=%s<sp/>fullName=%s\n&quot;,scName,fullName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>this<sp/>is<sp/>a<sp/>class<sp/>or<sp/>namespace<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scName!=fullName<sp/>&amp;&amp;<sp/>getScopeDefs(scName,fullName,cd,nd))</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>matches<sp/>that<sp/>of<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*resContext<sp/>=<sp/>cd;</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>scope<sp/>matches<sp/>that<sp/>of<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(nd!=0);</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*resContext<sp/>=<sp/>nd;</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scName==fullName<sp/>||<sp/>(!inSeeBlock<sp/>&amp;&amp;<sp/>scopePos==-1))<sp/></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>link<sp/>=&gt;<sp/>output<sp/>plain<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>scName=%s<sp/>fullName=%s<sp/>scName==fullName=%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&quot;inSeeBlock=%d<sp/>scopePos=%d!\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scName,fullName.data(),scName==fullName,inSeeBlock,scopePos);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continue<sp/>search...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>userscope+name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>QCString<sp/>nameStr=fullName.left(endNamePos);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(explicitScope)<sp/>nameStr=nameStr.mid(2);</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/>QCString<sp/>argsStr;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bracePos!=-1)<sp/>argsStr=fullName.right(fullName.length()-bracePos);</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>template<sp/>specifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>match<sp/>against<sp/>the<sp/>correct<sp/>partial<sp/>template<sp/>instantiation<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>templPos=nameStr.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tryUnspecializedVersion<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templPos!=-1<sp/>&amp;&amp;<sp/>nameStr.find(</highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">)==-1)</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endTemplPos=nameStr.findRev(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endTemplPos!=-1)</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lookForSpecialization)</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nameStr=nameStr.left(templPos)+nameStr.right(nameStr.length()-endTemplPos-1);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tryUnspecializedVersion<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>QCString<sp/>scopeStr=scName;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/><sp/><sp/>*md<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/><sp/><sp/><sp/>*cd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/><sp/><sp/><sp/><sp/>*fd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/><sp/><sp/><sp/><sp/>*gd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>nameStr<sp/>is<sp/>a<sp/>member<sp/>or<sp/>global.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getDefs(scope=%s,name=%s,args=%s<sp/>checkScope=%d)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scopeStr.data(),nameStr.data(),argsStr.data(),checkScope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getDefs(scopeStr,nameStr,argsStr,</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md,cd,fd,nd,gd,</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//scopePos==0<sp/>&amp;&amp;<sp/>!memberScopeFirst,<sp/>//<sp/>forceEmptyScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>explicitScope,<sp/></highlight><highlight class="comment">//<sp/>replaces<sp/>prev<sp/>line<sp/>due<sp/>to<sp/>bug<sp/>600829</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentFile,</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>checkCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;after<sp/>getDefs<sp/>checkScope=%d<sp/>nameStr=%s<sp/>cd=%p<sp/>nd=%p\n&quot;,checkScope,nameStr.data(),cd,nd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkScope<sp/>&amp;&amp;<sp/>md<sp/>&amp;&amp;<sp/>md-&gt;getOuterScope()==Doxygen::globalScope<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!scopeStr.isEmpty()<sp/>||<sp/>nameStr.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)&gt;0))</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>did<sp/>find<sp/>a<sp/>member,<sp/>but<sp/>it<sp/>is<sp/>a<sp/>global<sp/>one<sp/>while<sp/>we<sp/>were<sp/>explicitly<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>looking<sp/>for<sp/>a<sp/>scoped<sp/>variable.<sp/>See<sp/>bug<sp/>616387<sp/>for<sp/>an<sp/>example<sp/>why<sp/>this<sp/>check<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>we<sp/>do<sp/>need<sp/>to<sp/>support<sp/>autolinking<sp/>to<sp/>&quot;::symbol&quot;<sp/>hence<sp/>the<sp/>&gt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;not<sp/>global<sp/>member!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*resContext=0;</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*resMember=0;</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;after<sp/>getDefs<sp/>md=%p<sp/>cd=%p<sp/>fd=%p<sp/>nd=%p<sp/>gd=%p\n&quot;,md,cd,fd,nd,gd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(md)<sp/>{<sp/>*resMember=md;<sp/>*resContext=md;<sp/>}</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/>*resContext=cd;</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd)<sp/>*resContext=nd;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)<sp/>*resContext=fd;</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd)<sp/>*resContext=gd;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>*resContext=0;<sp/>*resMember=0;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/>}</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;member=%s<sp/>(md=%p)<sp/>anchor=%s<sp/>linkable()=%d<sp/>context=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),md,md-&gt;anchor().data(),md-&gt;isLinkable(),(*resContext)-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inSeeBlock<sp/>&amp;&amp;<sp/>!nameStr.isEmpty()<sp/>&amp;&amp;<sp/>(gd=Doxygen::groupSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(nameStr)))</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>group<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=gd;</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tsName.find(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)!=-1)<sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>a<sp/>link<sp/>to<sp/>a<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/>fd=findFileDef(Doxygen::inputNameDict,tsName,ambig);</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&amp;&amp;<sp/>!ambig)</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*resContext=fd;</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tryUnspecializedVersion)</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resolveRef(scName,name,inSeeBlock,resContext,resMember,FALSE,0,checkScope);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;resolveRef:<sp/>%s<sp/>not<sp/>found!\n&quot;,name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal">QCString<sp/>linkToText(<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*link,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFileName)</highlight></codeline>
<codeline lineno="4512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//static<sp/>bool<sp/>optimizeOutputJava<sp/>=<sp/>Config_getBool(&quot;OPTIMIZE_OUTPUT_JAVA&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/>QCString<sp/>result=link;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result.isEmpty())</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>#<sp/>by<sp/>::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/>result=substitute(result,</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>.<sp/>by<sp/>::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isFileName<sp/>&amp;&amp;<sp/>result.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)==-1)<sp/>result=substitute(result,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>leading<sp/>::<sp/>prefix<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.at(0)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>result.at(1)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=result.right(result.length()-2);</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>sep<sp/>=<sp/>getLanguageSpecificSeparator(lang);</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep!=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=substitute(result,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,sep);</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="4536"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4537"><highlight class="comment"><sp/>*<sp/>generate<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>class,<sp/>namespace<sp/>or<sp/>member.</highlight></codeline>
<codeline lineno="4538"><highlight class="comment"><sp/>*<sp/>`scName&apos;<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>scope<sp/>that<sp/>contains<sp/>the<sp/>documentation<sp/></highlight></codeline>
<codeline lineno="4539"><highlight class="comment"><sp/>*<sp/>string<sp/>that<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="4540"><highlight class="comment"><sp/>*<sp/>`name&apos;<sp/>is<sp/>the<sp/>name<sp/>that<sp/>we<sp/>want<sp/>to<sp/>link<sp/>to.</highlight></codeline>
<codeline lineno="4541"><highlight class="comment"><sp/>*<sp/>`name&apos;<sp/>may<sp/>have<sp/>five<sp/>formats:</highlight></codeline>
<codeline lineno="4542"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>1)<sp/>&quot;ScopeName&quot;</highlight></codeline>
<codeline lineno="4543"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>2)<sp/>&quot;memberName()&quot;<sp/><sp/><sp/><sp/>one<sp/>of<sp/>the<sp/>(overloaded)<sp/>function<sp/>or<sp/>define<sp/></highlight></codeline>
<codeline lineno="4544"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>name<sp/>memberName.</highlight></codeline>
<codeline lineno="4545"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>3)<sp/>&quot;memberName(...)&quot;<sp/>a<sp/>specific<sp/>(overloaded)<sp/>function<sp/>or<sp/>define<sp/></highlight></codeline>
<codeline lineno="4546"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>name<sp/>memberName</highlight></codeline>
<codeline lineno="4547"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>4)<sp/>&quot;::name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>global<sp/>variable<sp/>or<sp/>define</highlight></codeline>
<codeline lineno="4548"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>4)<sp/>&quot;\#memberName<sp/><sp/><sp/><sp/><sp/>member<sp/>variable,<sp/>global<sp/>variable<sp/>or<sp/>define</highlight></codeline>
<codeline lineno="4549"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>5)<sp/>(&quot;ScopeName::&quot;)+&quot;memberName()&quot;<sp/></highlight></codeline>
<codeline lineno="4550"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>6)<sp/>(&quot;ScopeName::&quot;)+&quot;memberName(...)&quot;<sp/></highlight></codeline>
<codeline lineno="4551"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>7)<sp/>(&quot;ScopeName::&quot;)+&quot;memberName&quot;<sp/></highlight></codeline>
<codeline lineno="4552"><highlight class="comment"><sp/>*<sp/>instead<sp/>of<sp/>::<sp/>the<sp/>\#<sp/>symbol<sp/>may<sp/>also<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="4553"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"></highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateRef(<ref refid="d2/d1a/class_output_doc_interface" kindref="compound" tooltip="Interface used for generating documentation.">OutputDocInterface</ref><sp/>&amp;od,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scName,</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inSeeBlock,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rt)</highlight></codeline>
<codeline lineno="4557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;generateRef(scName=%s,name=%s,inSee=%d,rt=%s)\n&quot;,scName,name,inSeeBlock,rt);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"></highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*compound;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>default<sp/>link<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/>QCString<sp/>linkText<sp/>=<sp/>linkToText(rt,FALSE);</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resolveRef(scName,name,inSeeBlock,&amp;compound,&amp;md))</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md<sp/>&amp;&amp;<sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac1e70d83e731e91e68871d8b7908351a" kindref="member">isLinkable</ref>())<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>od.<ref refid="df/d27/class_base_output_doc_interface_1a3537423635807fe140ec5be1a2198060" kindref="member">writeObjectLink</ref>(md-&gt;<ref refid="da/d09/class_member_def_1a33933dad190eb78050cc5467228be5f6" kindref="member">getReference</ref>(),</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>(),linkText);</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>the<sp/>page<sp/>reference<sp/>(for<sp/>LaTeX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePageRef(od,md-&gt;<ref refid="da/d09/class_member_def_1a6190309702ba12f557c4b3ccc171483b" kindref="member">getOutputFileBase</ref>(),md-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>());</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compound<sp/>&amp;&amp;<sp/>compound-&gt;<ref refid="d5/dcc/class_definition_1a4002fd79c2d4dcf667c37c83d4214deb" kindref="member">isLinkable</ref>())<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rt==0<sp/>&amp;&amp;<sp/>compound-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeGroup)</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkText=((<ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*)compound)-&gt;groupTitle();</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compound<sp/>&amp;&amp;<sp/>compound-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeFile)</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkText=linkToText(rt,TRUE);</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>od.<ref refid="df/d27/class_base_output_doc_interface_1a3537423635807fe140ec5be1a2198060" kindref="member">writeObjectLink</ref>(compound-&gt;<ref refid="d5/dcc/class_definition_1a266bc8f350de23e01335d4d674995dcf" kindref="member">getReference</ref>(),</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compound-&gt;<ref refid="d5/dcc/class_definition_1acabecdc6bfda2015811eed5f3436322d" kindref="member">getOutputFileBase</ref>(),</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,linkText);</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compound-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePageRef(od,compound-&gt;<ref refid="d5/dcc/class_definition_1acabecdc6bfda2015811eed5f3436322d" kindref="member">getOutputFileBase</ref>(),0);</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/>od.<ref refid="df/d27/class_base_output_doc_interface_1ad7d3f6631bd157739170690e669b3e75" kindref="member">docify</ref>(linkText);</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4604"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resolveLink(</highlight><highlight class="comment">/*<sp/>in<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scName,</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lr,</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*inSeeBlock*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>*/</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>**resContext,</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>*/</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;resAnchor</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/>*resContext=0;</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/>QCString<sp/>linkRef=lr;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;ResolveLink<sp/>linkRef=%s<sp/>inSee=%d\n&quot;,lr,inSeeBlock);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/>*fd;</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/><sp/>*pd;</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><ref refid="d4/dd4/class_dir_def" kindref="compound" tooltip="A model of a directory symbol.">DirDef</ref><sp/><sp/><sp/>*dir;</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><ref refid="d5/d5b/struct_section_info" kindref="compound" tooltip="Class representing a section in a page.">SectionInfo</ref><sp/>*si=0;</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(linkRef.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>no<sp/>reference<sp/>name!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pd=Doxygen::pageSDict-&gt;find(linkRef)))<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>a<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd<sp/>=<sp/>pd-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd)</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty())<sp/>si=Doxygen::sectionDict-&gt;find(pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*resContext=gd;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si)<sp/>resAnchor<sp/>=<sp/>si-&gt;label;</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*resContext=pd;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((si=Doxygen::sectionDict-&gt;find(linkRef)))</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=si-&gt;definition;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/>resAnchor<sp/>=<sp/>si-&gt;label;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pd=Doxygen::exampleSDict-&gt;find(linkRef)))<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>an<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=pd;</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gd=Doxygen::groupSDict-&gt;find(linkRef)))<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>a<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=gd;</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fd=findFileDef(Doxygen::inputNameDict,linkRef,ambig))<sp/></highlight><highlight class="comment">//<sp/>file<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1af677cee8c349fa10532b0aa5c09df396" kindref="member">isLinkable</ref>())</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=fd;</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(linkRef)))<sp/></highlight><highlight class="comment">//<sp/>class<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=cd;</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/>resAnchor=cd-&gt;<ref refid="d1/dcf/class_class_def_1a28f29dbbc5c2646bc64bae479fd7b905" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(linkRef+</highlight><highlight class="stringliteral">&quot;-p&quot;</highlight><highlight class="normal">)))<sp/></highlight><highlight class="comment">//<sp/>Obj-C<sp/>protocol<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=cd;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/>resAnchor=cd-&gt;<ref refid="d1/dcf/class_class_def_1a28f29dbbc5c2646bc64bae479fd7b905" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else<sp/>if<sp/>((cd=getClass(linkRef+&quot;-g&quot;)))<sp/>//<sp/>C#<sp/>generic<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*resContext=cd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>resAnchor=cd-&gt;anchor();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>TRUE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nd=Doxygen::namespaceSDict-&gt;find(linkRef)))</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=nd;</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dir=Doxygen::directories-&gt;find(QFileInfo(linkRef).absFilePath().utf8()+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>dir-&gt;<ref refid="d4/dd4/class_dir_def_1ad47c93357ab08fb4f883d29e903f1570" kindref="member">isLinkable</ref>())<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>make<sp/>this<sp/>location<sp/>independent<sp/>like<sp/>filedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/>*resContext=dir;</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>probably<sp/>a<sp/>member<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>resolveRef(scName,lr,TRUE,resContext,&amp;md);</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md)<sp/>resAnchor=md-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"></highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>General<sp/>function<sp/>that<sp/>generates<sp/>the<sp/>HTML<sp/>code<sp/>for<sp/>a<sp/>reference<sp/>to<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file,<sp/>class<sp/>or<sp/>member<sp/>from<sp/>text<sp/>`lr&apos;<sp/>within<sp/>the<sp/>context<sp/>of<sp/>class<sp/>`clName&apos;.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>link<sp/>has<sp/>the<sp/>text<sp/>&apos;lt&apos;<sp/>(if<sp/>not<sp/>0),<sp/>otherwise<sp/>`lr&apos;<sp/>is<sp/>used<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>basis<sp/>for<sp/>the<sp/>link&apos;s<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>TRUE<sp/>if<sp/>a<sp/>link<sp/>could<sp/>be<sp/>generated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateLink(<ref refid="d2/d1a/class_output_doc_interface" kindref="compound" tooltip="Interface used for generating documentation.">OutputDocInterface</ref><sp/>&amp;od,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*clName,</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lr,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inSeeBlock,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lt)</highlight></codeline>
<codeline lineno="4713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;generateLink(clName=%s,lr=%s,lr=%s)\n&quot;,clName,lr,lt);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*compound;</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//PageDef<sp/>*pageDef=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/>QCString<sp/>anchor,linkText=linkToText(SrcLangExt_Unknown,lt,FALSE);</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;generateLink<sp/>linkText=%s\n&quot;,linkText.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resolveLink(clName,lr,inSeeBlock,&amp;compound,anchor))</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compound)<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lt==0<sp/>&amp;&amp;<sp/>anchor.isEmpty()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compound<sp/>link<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compound-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeGroup<sp/></highlight><highlight class="comment">/*<sp/>is<sp/>group<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkText=((<ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*)compound)-&gt;groupTitle();<sp/></highlight><highlight class="comment">//<sp/>use<sp/>group&apos;s<sp/>title<sp/>as<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compound-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeFile)</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkText=linkToText(compound-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>(),lt,TRUE);<sp/></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>od.<ref refid="df/d27/class_base_output_doc_interface_1a3537423635807fe140ec5be1a2198060" kindref="member">writeObjectLink</ref>(compound-&gt;<ref refid="d5/dcc/class_definition_1a266bc8f350de23e01335d4d674995dcf" kindref="member">getReference</ref>(),</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compound-&gt;<ref refid="d5/dcc/class_definition_1acabecdc6bfda2015811eed5f3436322d" kindref="member">getOutputFileBase</ref>(),anchor,linkText);</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compound-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePageRef(od,compound-&gt;<ref refid="d5/dcc/class_definition_1acabecdc6bfda2015811eed5f3436322d" kindref="member">getOutputFileBase</ref>(),anchor);</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;%s:%d:<sp/>Internal<sp/>error:<sp/>resolveLink<sp/>successful<sp/>but<sp/>no<sp/>compound<sp/>found!&quot;</highlight><highlight class="normal">,__FILE__,__LINE__);</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>link<sp/>could<sp/>not<sp/>be<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/>od.<ref refid="df/d27/class_base_output_doc_interface_1ad7d3f6631bd157739170690e669b3e75" kindref="member">docify</ref>(linkText);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateFileRef(<ref refid="d2/d1a/class_output_doc_interface" kindref="compound" tooltip="Interface used for generating documentation.">OutputDocInterface</ref><sp/>&amp;od,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text)</highlight></codeline>
<codeline lineno="4754"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;generateFileRef(%s,%s)\n&quot;,name,text);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/>QCString<sp/>linkText<sp/>=<sp/>text<sp/>?<sp/>text<sp/>:<sp/>name;</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FileInfo<sp/>*fi;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fd=findFileDef(Doxygen::inputNameDict,name,ambig))<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1af677cee8c349fa10532b0aa5c09df396" kindref="member">isLinkable</ref>())<sp/></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>documented<sp/>input<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/>od.<ref refid="df/d27/class_base_output_doc_interface_1a3537423635807fe140ec5be1a2198060" kindref="member">writeObjectLink</ref>(fd-&gt;<ref refid="d5/dcc/class_definition_1a266bc8f350de23e01335d4d674995dcf" kindref="member">getReference</ref>(),fd-&gt;<ref refid="de/db0/class_file_def_1aed87b82d9fc3ce4629034232b711f4a9" kindref="member">getOutputFileBase</ref>(),0,linkText);</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/>od.<ref refid="df/d27/class_base_output_doc_interface_1ad7d3f6631bd157739170690e669b3e75" kindref="member">docify</ref>(linkText);<sp/></highlight></codeline>
<codeline lineno="4766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"></highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="4771"><highlight class="preprocessor"></highlight><highlight class="normal">QCString<sp/>substituteClassNames(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="4772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0,l,p;</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/>QRegExp<sp/>r(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z][a-z_A-Z0-9]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((p=r.match(s,i,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*subst;</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p&gt;i)<sp/>result+=s.mid(i,p-i);</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((subst=substituteDict[s.mid(p,l)]))</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=*subst;</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=s.mid(p,l);</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/>i=p+l;</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/>result+=s.mid(i,s.length()-i);</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4795"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FindFileCacheElem</highlight></codeline>
<codeline lineno="4800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/>FindFileCacheElem(<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig)<sp/>:<sp/>fileDef(fd),<sp/>isAmbig(ambig)<sp/>{}</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileDef;</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAmbig;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCache&lt;FindFileCacheElem&gt;<sp/>g_findFileDefCache(5000);</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"></highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*findFileDef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/>*fnDict,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;ambig)</highlight></codeline>
<codeline lineno="4809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/>ambig=FALSE;</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/>QCString<sp/>key;</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/>key.sprintf(</highlight><highlight class="stringliteral">&quot;%p:&quot;</highlight><highlight class="normal">,fnDict);</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/>key+=n;</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/>g_findFileDefCache.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/>FindFileCacheElem<sp/>*cachedResult<sp/>=<sp/>g_findFileDefCache.find(key);</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;key=%s<sp/>cachedResult=%p\n&quot;,key.data(),cachedResult);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cachedResult)</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/>ambig<sp/>=<sp/>cachedResult-&gt;isAmbig;</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;cached:<sp/>fileDef=%p\n&quot;,cachedResult-&gt;fileDef);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cachedResult-&gt;fileDef;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/>cachedResult<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FindFileCacheElem(0,FALSE);</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"></highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/>QCString<sp/>name=QDir::cleanDirPath(n).utf8();</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/>QCString<sp/>path;</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slashPos;</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.isEmpty())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>exit;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/>slashPos=QMAX(name.findRev(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">),name.findRev(</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slashPos!=-1)</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/>path=name.left(slashPos+1);</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/>name=name.right(name.length()-slashPos-1);<sp/></highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;path=%s<sp/>name=%s\n&quot;,path.data(),name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.isEmpty())<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>exit;</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fn=(*fnDict)[name]))</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;fn-&gt;count()=%d\n&quot;,fn-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fn-&gt;count()==1)</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd<sp/>=<sp/>fn-&gt;getFirst();</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__MACOSX__)<sp/>//<sp/>Windows<sp/>or<sp/>MacOSX</highlight></codeline>
<codeline lineno="4851"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSamePath<sp/>=<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a5d488e6a03d18ecf3e9236b9a2fd5e5e" kindref="member">getPath</ref>().right(path.length()).lower()==path.lower();</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>Unix</highlight></codeline>
<codeline lineno="4853"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSamePath<sp/>=<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a5d488e6a03d18ecf3e9236b9a2fd5e5e" kindref="member">getPath</ref>().right(path.length())==path;</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4855"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.isEmpty()<sp/>||<sp/>isSamePath)</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cachedResult-&gt;fileDef<sp/>=<sp/>fd;</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_findFileDefCache.insert(key,cachedResult);</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;=1<sp/>===&gt;<sp/>add<sp/>to<sp/>cache<sp/>%p\n&quot;,fd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>file<sp/>name<sp/>alone<sp/>is<sp/>ambiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*lastMatch=0;</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>pathStripped<sp/>=<sp/>stripFromIncludePath(path);</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fni.toFirst();(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fdStripPath<sp/>=<sp/>stripFromIncludePath(fd-&gt;<ref refid="de/db0/class_file_def_1a5d488e6a03d18ecf3e9236b9a2fd5e5e" kindref="member">getPath</ref>());</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.isEmpty()<sp/>||<sp/>fdStripPath.right(pathStripped.length())==pathStripped)<sp/></highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;<sp/></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastMatch=fd;<sp/></highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;1<sp/>===&gt;<sp/>add<sp/>to<sp/>cache<sp/>%p\n&quot;,fd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4880"><highlight class="normal"></highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ambig=(count&gt;1);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cachedResult-&gt;isAmbig<sp/>=<sp/>ambig;</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cachedResult-&gt;fileDef<sp/>=<sp/>lastMatch;</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_findFileDefCache.insert(key,cachedResult);</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lastMatch;</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;not<sp/>found!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal">exit:</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;0<sp/><sp/>===&gt;<sp/>add<sp/>to<sp/>cache<sp/>%p:<sp/>%s\n&quot;,cachedResult,n);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/>g_findFileDefCache.insert(key,cachedResult);</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//delete<sp/>cachedResult;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"></highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal">QCString<sp/>showFileDefMatches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/>*fnDict,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n)</highlight></codeline>
<codeline lineno="4902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/>QCString<sp/>name=n;</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/>QCString<sp/>path;</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slashPos=QMAX(name.findRev(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">),name.findRev(</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slashPos!=-1)</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/>path=name.left(slashPos+1);</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/>name=name.right(name.length()-slashPos-1);<sp/></highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fn=(*fnDict)[name]))</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fni.toFirst();(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.isEmpty()<sp/>||<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a5d488e6a03d18ecf3e9236b9a2fd5e5e" kindref="member">getPath</ref>().right(path.length())==path)</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal">+fd-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>()+</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"></highlight></codeline>
<codeline lineno="4930"><highlight class="normal">QCString<sp/>substituteKeywords(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*title,</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*projName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*projNum,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*projBrief)</highlight></codeline>
<codeline lineno="4932"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/>QCString<sp/>result<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(title)<sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$title&quot;</highlight><highlight class="normal">,title);</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$datetime&quot;</highlight><highlight class="normal">,dateToString(TRUE));</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$date&quot;</highlight><highlight class="normal">,dateToString(FALSE));</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$year&quot;</highlight><highlight class="normal">,yearToString());</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$doxygenversion&quot;</highlight><highlight class="normal">,versionString);</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$projectname&quot;</highlight><highlight class="normal">,projName);</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$projectnumber&quot;</highlight><highlight class="normal">,projNum);</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$projectbrief&quot;</highlight><highlight class="normal">,projBrief);</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;$projectlogo&quot;</highlight><highlight class="normal">,stripPath(Config_getString(</highlight><highlight class="stringliteral">&quot;PROJECT_LOGO&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight></codeline>
<codeline lineno="4952" refid="d8/d3c/util_8h_1ae052d7dcea3289dd204d8d425cf9d4c9" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getPrefixIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="4953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QStrList<sp/>&amp;sl<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;IGNORE_PREFIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>sl.first();</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ps=s;</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pd=name.data();</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*ps!=0<sp/>&amp;&amp;<sp/>*pd!=0<sp/>&amp;&amp;<sp/>*ps==*pd)<sp/>ps++,pd++,i++;</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ps==0<sp/>&amp;&amp;<sp/>*pd!=0)</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>sl.next();</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight></codeline>
<codeline lineno="4974"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initBaseClassHierarchy(<ref refid="d7/d46/class_base_class_list" kindref="compound" tooltip="List of base classes.">BaseClassList</ref><sp/>*bcl)</highlight></codeline>
<codeline lineno="4975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcl==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><ref refid="df/dc5/class_base_class_list_iterator" kindref="compound" tooltip="Iterator for a list of base classes.">BaseClassListIterator</ref><sp/>bcli(*bcl);</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>bcli.current();<sp/>++bcli)</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=bcli.current()-&gt;classDef;</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>()==0)<sp/></highlight><highlight class="comment">//<sp/>no<sp/>base<sp/>classes<sp/>=&gt;<sp/>new<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initBaseClassHierarchy(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>());</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight></codeline>
<codeline lineno="4989"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4990"><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initClassHierarchy(<ref refid="d9/d3d/class_class_s_dict" kindref="compound" tooltip="A sorted dictionary of ClassDef objects.">ClassSDict</ref><sp/>*cl)</highlight></codeline>
<codeline lineno="4992"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*cl);</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(cd=cli.current());<sp/>++cli)</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/>initBaseClassHierarchy(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>());</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasVisibleRoot(<ref refid="d7/d46/class_base_class_list" kindref="compound" tooltip="List of base classes.">BaseClassList</ref><sp/>*bcl)</highlight></codeline>
<codeline lineno="5005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcl)</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/dc5/class_base_class_list_iterator" kindref="compound" tooltip="Iterator for a list of base classes.">BaseClassListIterator</ref><sp/>bcli(*bcl);</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>bcli.current();<sp/>++bcli)</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=bcli.current()-&gt;classDef;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1ae7dbada34949e6f0a60a8176485c3319" kindref="member" tooltip="the class is visible in a class diagram, or class hierarchy">isVisibleInHierarchy</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasVisibleRoot(cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>());</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>not<sp/>reentrant<sp/>due<sp/>to<sp/>the<sp/>use<sp/>of<sp/>static<sp/>growBuf!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal">QCString<sp/>escapeCharsInString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowDots,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowUnderscore)</highlight></codeline>
<codeline lineno="5023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caseSenseNames<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CASE_SENSE_NAMES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d33/class_grow_buf" kindref="compound" tooltip="Class representing a string buffer optimised for growing.">GrowBuf</ref><sp/>growBuf;</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/>growBuf.clear();</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p=name;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++)!=0)</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allowUnderscore)<sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;__&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:<sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_1&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_2&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_3&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_4&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_5&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_6&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_7&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allowDots)<sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_8&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_9&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_00&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_01&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_02&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_03&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_04&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_05&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_06&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_07&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_08&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_09&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_0A&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_0B&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;_0C&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c&lt;0)</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>map[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789ABCDEF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ids[5];</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)c;</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ids[0]=</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ids[1]=</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ids[2]=map[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">&gt;&gt;4];</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ids[3]=map[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">&amp;0xF];</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ids[4]=0;</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addStr(ids);</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseSenseNames<sp/>||<sp/>!isupper(c))</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(c);</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(tolower(c));<sp/></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/>growBuf.addChar(0);</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>growBuf.get();</highlight></codeline>
<codeline lineno="5084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"></highlight></codeline>
<codeline lineno="5090" refid="d8/d3c/util_8h_1ae29291c2d23e9f2144d5eb28b582af02" refkind="member"><highlight class="normal">QCString<sp/>convertNameToFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowDots,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowUnderscore)</highlight></codeline>
<codeline lineno="5091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shortNames<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;SHORT_NAMES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>createSubdirs<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CREATE_SUBDIRS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shortNames)<sp/></highlight><highlight class="comment">//<sp/>use<sp/>short<sp/>names<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;int&gt;<sp/>usedNames(10007);</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/>usedNames.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=1;</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*value=usedNames.find(name);</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value==0)</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usedNames.insert(name,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(count));</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>count++;</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>*value;</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/>result.sprintf(</highlight><highlight class="stringliteral">&quot;a%05d&quot;</highlight><highlight class="normal">,num);<sp/></highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>long<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/>result=escapeCharsInString(name,allowDots,allowUnderscore);</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resultLen<sp/>=<sp/>result.length();</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultLen&gt;=128)<sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>names<sp/>that<sp/>cannot<sp/>be<sp/>created!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>algorithm<sp/>based<sp/>on<sp/>MD5<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uchar<sp/>md5_sig[16];</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>sigStr(33);</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MD5Buffer((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)result.data(),resultLen,md5_sig);</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MD5SigToString(md5_sig,sigStr.data(),33);</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=result.left(128-32)+sigStr;<sp/></highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(createSubdirs)</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l1Dir=0,l2Dir=0;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MAP_ALGO==ALGO_COUNT<sp/></highlight></codeline>
<codeline lineno="5133"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>old<sp/>algorithm,<sp/>has<sp/>the<sp/>problem<sp/>that<sp/>after<sp/>regeneration<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>can<sp/>be<sp/>located<sp/>in<sp/>a<sp/>different<sp/>dir.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::htmlDirMap==0)<sp/></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::htmlDirMap=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QDict&lt;int&gt;(100003);</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::htmlDirMap-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curDirNum=0;</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dirNum<sp/>=<sp/>Doxygen::htmlDirMap-&gt;find(result);</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dirNum==0)<sp/></highlight><highlight class="comment">//<sp/>new<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::htmlDirMap-&gt;insert(result,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(curDirNum));<sp/></highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l1Dir<sp/>=<sp/>(curDirNum)&amp;0xf;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bits<sp/>0-3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l2Dir<sp/>=<sp/>(curDirNum&gt;&gt;4)&amp;0xff;<sp/></highlight><highlight class="comment">//<sp/>bits<sp/>4-11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curDirNum++;</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>existing<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l1Dir<sp/>=<sp/>(*dirNum)&amp;0xf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bits<sp/>0-3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l2Dir<sp/>=<sp/>((*dirNum)&gt;&gt;4)&amp;0xff;<sp/></highlight><highlight class="comment">//<sp/>bits<sp/>4-11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>MAP_ALGO==ALGO_CRC16</highlight></codeline>
<codeline lineno="5155"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>algorithm<sp/>based<sp/>on<sp/>CRC-16<sp/>checksum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirNum<sp/>=<sp/>qChecksum(result,result.length());</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/>l1Dir<sp/>=<sp/>dirNum&amp;0xf;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/>l2Dir<sp/>=<sp/>(dirNum&gt;&gt;4)&amp;0xff;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>MAP_ALGO==ALGO_MD5</highlight></codeline>
<codeline lineno="5160"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>algorithm<sp/>based<sp/>on<sp/>MD5<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>uchar<sp/>md5_sig[16];</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/>MD5Buffer((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)result.data(),result.length(),md5_sig);</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/>l1Dir<sp/>=<sp/>md5_sig[14]&amp;0xf;</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>l2Dir<sp/>=<sp/>md5_sig[15];</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5166"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>result.prepend(QCString().sprintf(</highlight><highlight class="stringliteral">&quot;d%x/d%02x/&quot;</highlight><highlight class="normal">,l1Dir,l2Dir));</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;***<sp/>convertNameToFile(%s)-&gt;%s\n&quot;,name,result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal">QCString<sp/>relativePathToRoot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="5173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;CREATE_SUBDIRS&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name==0)</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REL_PATH_TO_ROOT;</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>n<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>n.findRev(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=REL_PATH_TO_ROOT;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createSubDirs(QDir<sp/>&amp;d)</highlight></codeline>
<codeline lineno="5195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;CREATE_SUBDIRS&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>4096<sp/>subdirectories</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l1,l2;</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l1=0;l1&lt;16;l1++)</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d.mkdir(QString().sprintf(</highlight><highlight class="stringliteral">&quot;d%x&quot;</highlight><highlight class="normal">,l1));</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l2=0;l2&lt;256;l2++)</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.mkdir(QString().sprintf(</highlight><highlight class="stringliteral">&quot;d%x/d%02x&quot;</highlight><highlight class="normal">,l1,l2));</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight></codeline>
<codeline lineno="5214" refid="d8/d3c/util_8h_1a183a6b55ac831219c83e2a175d7a2e7a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>extractNamespaceName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;scopeName,</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>&amp;className,QCString<sp/>&amp;namespaceName,</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowEmptyClass)</highlight></codeline>
<codeline lineno="5217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p;</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/>QCString<sp/>clName=scopeName;</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!clName.isEmpty()<sp/>&amp;&amp;<sp/>(nd=getResolvedNamespace(clName))<sp/>&amp;&amp;<sp/>getClass(clName)==0)</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>the<sp/>whole<sp/>name<sp/>is<sp/>a<sp/>namespace<sp/>(and<sp/>not<sp/>a<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/>namespaceName=nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/>className.resize(0);</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/>p=clName.length()-2;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&gt;=0<sp/>&amp;&amp;<sp/>(i=clName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,p))!=-1)<sp/></highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>first<sp/>part<sp/>is<sp/>a<sp/>namespace<sp/>(and<sp/>not<sp/>a<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>%s\n&quot;,clName.left(i).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0<sp/>&amp;&amp;<sp/>(nd=getResolvedNamespace(clName.left(i)))<sp/>&amp;&amp;<sp/>getClass(clName.left(i))==0)</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>namespaceName=nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>className=clName.right(clName.length()-i-2);</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i-2;<sp/></highlight><highlight class="comment">//<sp/>try<sp/>a<sp/>smaller<sp/>piece<sp/>of<sp/>the<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;not<sp/>found!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5242"><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>found,<sp/>so<sp/>we<sp/>just<sp/>have<sp/>to<sp/>guess.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/>className=scopeName.copy();</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/>namespaceName.resize(0);</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"></highlight></codeline>
<codeline lineno="5247"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className.isEmpty()<sp/>&amp;&amp;<sp/>!namespaceName.isEmpty()<sp/>&amp;&amp;<sp/>!allowEmptyClass)</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>and<sp/>namespace<sp/>with<sp/>the<sp/>same<sp/>name,<sp/>correct<sp/>to<sp/>return<sp/>the<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/>className=namespaceName.copy();</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/>namespaceName.resize(0);</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;extractNamespace<sp/>`%s&apos;<sp/>=&gt;<sp/>`%s|%s&apos;\n&quot;,scopeName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>className.data(),namespaceName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="comment">/*className.right(2)==&quot;-g&quot;<sp/>||*/</highlight><highlight class="normal"><sp/>className.right(2)==</highlight><highlight class="stringliteral">&quot;-p&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/>className<sp/>=<sp/>className.left(className.length()-2);</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"></highlight></codeline>
<codeline lineno="5263"><highlight class="normal">QCString<sp/>insertTemplateSpecifierInScope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;scope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;templ)</highlight></codeline>
<codeline lineno="5264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/>QCString<sp/>result=scope.copy();</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!templ.isEmpty()<sp/>&amp;&amp;<sp/>scope.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)==-1)</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si,pi=0;</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(si=scope.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,pi))!=-1<sp/>&amp;&amp;<sp/>!getClass(scope.left(si)+templ)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((cd=getClass(scope.left(si)))==0<sp/>||<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>()==0)<sp/></highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Tried<sp/>`%s&apos;\n&quot;,(scope.left(si)+templ).data());<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pi=si+2;<sp/></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si==-1)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>nested<sp/>=&gt;<sp/>append<sp/>template<sp/>specifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=templ;<sp/></highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>nested<sp/>=&gt;<sp/>insert<sp/>template<sp/>specifier<sp/>before<sp/>after<sp/>first<sp/>class<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=scope.left(si)<sp/>+<sp/>templ<sp/>+<sp/>scope.right(scope.length()-si);</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;insertTemplateSpecifierInScope(`%s&apos;,`%s&apos;)=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scope.data(),templ.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"></highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>original<sp/>version</highlight></codeline>
<codeline lineno="5293"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal">QCString<sp/>stripScope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="5297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/>QCString<sp/>result<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=result.length();</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=l-1;</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&gt;=0)</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=result.at(p);</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;stripScope(%s)=%s\n&quot;,name,result.right(l-p-1).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.right(l-p-1);</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count=1;</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;pos<sp/>&lt;<sp/>=<sp/>%d\n&quot;,p);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p--;</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&gt;=0<sp/>&amp;&amp;<sp/>!done)</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c=result.at(p--);</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:<sp/>count++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/>count--;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count&lt;=0)<sp/>done=TRUE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;c=%c<sp/>count=%d\n&quot;,c,count);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;pos<sp/>&gt;<sp/>=<sp/>%d\n&quot;,p+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p--;</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;stripScope(%s)=%s\n&quot;,name,name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="5337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5339"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>new<sp/>version<sp/>by<sp/>Davide<sp/>Cesari<sp/>which<sp/>also<sp/>works<sp/>for<sp/>Fortran</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal">QCString<sp/>stripScope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="5342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/>QCString<sp/>result<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=result.length();</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skipBracket=FALSE;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>brackets<sp/>do<sp/>not<sp/>match<sp/>properly,<sp/>ignore<sp/>them<sp/>altogether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/>p=l-1;<sp/></highlight><highlight class="comment">//<sp/>start<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&gt;=0<sp/>&amp;&amp;<sp/>count&gt;=0)</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=result.at(p);</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>exit<sp/>in<sp/>the<sp/>case<sp/>of<sp/>::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;stripScope(%s)=%s\n&quot;,name,result.right(l-p-1).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p&gt;0<sp/>&amp;&amp;<sp/>result.at(p-1)==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.right(l-p-1);</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p--;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skipBracket)<sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>care<sp/>about<sp/>brackets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p--;</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>count<sp/>open/close<sp/>brackets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p&gt;0<sp/>&amp;&amp;<sp/>result.at(p-1)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>&gt;&gt;<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-=2;</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count=1;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;pos<sp/>&lt;<sp/>=<sp/>%d\n&quot;,p);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p--;</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundMatch=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&gt;=0<sp/>&amp;&amp;<sp/>!foundMatch)</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c=result.at(p--);</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;<sp/></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p&gt;0)</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.at(p-1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>&lt;&lt;<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p--;</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count--;<sp/></highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundMatch<sp/>=<sp/>count==0;</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;c=%c<sp/>count=%d\n&quot;,c,count);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;pos<sp/>&gt;<sp/>=<sp/>%d\n&quot;,p+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p--;</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/>done<sp/>=<sp/>count==0<sp/>||<sp/>skipBracket;<sp/></highlight><highlight class="comment">//<sp/>reparse<sp/>if<sp/>brackets<sp/>do<sp/>not<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/>skipBracket=TRUE;</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!done);<sp/></highlight><highlight class="comment">//<sp/>if<sp/>&lt;<sp/>&gt;<sp/>unbalanced<sp/>repeat<sp/>ignoring<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;stripScope(%s)=%s\n&quot;,name,name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="5418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"></highlight></codeline>
<codeline lineno="5422" refid="d8/d3c/util_8h_1acee8d851ab3a9590ac348bdb857aba26" refkind="member"><highlight class="normal">QCString<sp/>convertToXML(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="5423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d33/class_grow_buf" kindref="compound" tooltip="Class representing a string buffer optimised for growing.">GrowBuf</ref><sp/>growBuf;</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/>growBuf.clear();</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p=s;</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:<sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:<sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;apos;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:<sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/>growBuf.addChar(c);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/>growBuf.addChar(0);</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>growBuf.get();</highlight></codeline>
<codeline lineno="5443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"></highlight></codeline>
<codeline lineno="5446" refid="d8/d3c/util_8h_1ad55197b4dc49df25c446975478ec6b3f" refkind="member"><highlight class="normal">QCString<sp/>convertToHtml(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepEntities)</highlight></codeline>
<codeline lineno="5447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d33/class_grow_buf" kindref="compound" tooltip="Class representing a string buffer optimised for growing.">GrowBuf</ref><sp/>growBuf;</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/>growBuf.clear();</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p=s;</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:<sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keepEntities)</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e=p;</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ce;</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((ce=*e++))</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ce==</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/>||<sp/>(!(isId(ce)<sp/>||<sp/>ce==</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ce==</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>end<sp/>of<sp/>an<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>entry<sp/>verbatim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addChar(c);</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p&lt;e)<sp/>growBuf.addChar(*p++);</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;#39;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:<sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/>growBuf.addChar(c);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/>growBuf.addChar(0);</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>growBuf.get();</highlight></codeline>
<codeline lineno="5490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight></codeline>
<codeline lineno="5492"><highlight class="normal">QCString<sp/>convertToJSString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="5493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d33/class_grow_buf" kindref="compound" tooltip="Class representing a string buffer optimised for growing.">GrowBuf</ref><sp/>growBuf;</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/>growBuf.clear();</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p=s;</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:<sp/><sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/>growBuf.addStr(</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/>growBuf.addChar(c);<sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/>growBuf.addChar(0);</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>convertCharEntitiesToUTF8(growBuf.get());</highlight></codeline>
<codeline lineno="5510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"></highlight></codeline>
<codeline lineno="5512"><highlight class="normal"></highlight></codeline>
<codeline lineno="5513"><highlight class="normal">QCString<sp/>convertCharEntitiesToUTF8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="5514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;char&gt;<sp/>entityMap(127);</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init=TRUE;</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>entityPat(</highlight><highlight class="stringliteral">&quot;&amp;[a-zA-Z]+;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init)</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC2\xA9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;tm&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x84\xA2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;trade&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x84\xA2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;reg&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC2\xAE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;lsquo&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x80\x98&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;rsquo&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x80\x99&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ldquo&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x80\x9C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;rdquo&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x80\x9D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ndash&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x80\x93&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;mdash&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x80\x94&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Auml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x84&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Euml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x8B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Iuml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x8F&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Ouml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x96&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Uuml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x9C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Yuml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC5\xB8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;auml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;euml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xAB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;iuml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xAF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ouml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xB6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;uuml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xBC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;yuml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xBF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Aacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x81&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Eacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x89&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Iacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x8D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Oacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x93&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Uacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x9A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;aacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;eacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;iacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xAD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;oacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xB3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;uacute&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xBA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Agrave&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x80&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Egrave&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x88&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Igrave&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x8C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Ograve&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x92&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Ugrave&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x99&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;agrave&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;egrave&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;igrave&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xAC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ograve&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xB2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ugrave&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xB9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Acirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x82&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Ecirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x8A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Icirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x8E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Ocirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x94&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Ucirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x9B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;acirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ecirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xAA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;icirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xAE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ocirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xB4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ucirc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xBB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Atilde&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x83&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Ntilde&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x91&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Otilde&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x95&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;atilde&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ntilde&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xB1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;otilde&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xB5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;szlig&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x9F&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Ccedil&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x87&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ccedil&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Aring&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x85&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;aring&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\xA5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;nbsp&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC2\xA0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Gamma&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\x93&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Delta&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\x94&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Theta&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\x98&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Lambda&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\x9B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Xi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\x9E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Pi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xA0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Sigma&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xA3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Upsilon&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xA5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Phi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xA6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Psi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xA8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Omega&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xA9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;alpha&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;beta&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;gamma&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;delta&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;epsilon&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;zeta&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;iota&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xB9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;kappa&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xBA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;lambda&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xBB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xBC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;nu&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xBD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;xi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCE\xBE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x80&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;rho&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x81&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;sigma&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x83&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;tau&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x84&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;upsilon&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x85&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;phi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x86&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;chi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x87&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;psi&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x88&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;omega&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x89&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;sigmaf&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xCF\x82&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;sect&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC2\xA7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;deg&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC2\xB0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;prime&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x80\xB2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;Prime&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x80\xB2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;infin&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x9E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x85&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;plusmn&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC2\xB1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;times&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xC3\x97&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;minus&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x92&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;sdot&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x8B\x85&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;part&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x82&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;nabla&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x87&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;radic&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x9A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;perp&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x8A\xA5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;sum&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x91&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\xAB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;prod&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x8F&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;sim&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\xBC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;asymp&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x89\x88&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ne&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x89\xA0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;equiv&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x89\xA1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;prop&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x9D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;le&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x89\xA4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;ge&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x89\xA5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;larr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x86\x90&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;rarr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x86\x92&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;isin&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x88&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;notin&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x88\x89&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;lceil&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x8C\x88&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;rceil&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x8C\x89&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;lfloor&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x8C\x8A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/>entityMap.insert(</highlight><highlight class="stringliteral">&quot;rfloor&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xE2\x8C\x8B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/>init=FALSE;</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"></highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.length()==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d33/class_grow_buf" kindref="compound" tooltip="Class representing a string buffer optimised for growing.">GrowBuf</ref><sp/>growBuf;</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/>growBuf.clear();</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,i=0,l;</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((p=entityPat.match(s,i,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p&gt;i)<sp/></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addStr(s.mid(i,p-i));</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>entity<sp/>=<sp/>s.mid(p+1,l-2);</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*code<sp/>=<sp/>entityMap.find(entity);</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code)</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addStr(code);</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>growBuf.addStr(s.mid(p,l));</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/>i=p+l;</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/>growBuf.addStr(s.mid(i,s.length()-i));</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/>growBuf.addChar(0);</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;convertCharEntitiesToUTF8(%s)-&gt;%s\n&quot;,s.data(),growBuf.get());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>growBuf.get();</highlight></codeline>
<codeline lineno="5682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"></highlight></codeline>
<codeline lineno="5687" refid="d8/d3c/util_8h_1ad8c71fbab856bc37ae54d2d369535b3b" refkind="member"><highlight class="normal">QCString<sp/>getOverloadDocs()</highlight></codeline>
<codeline lineno="5688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theTranslator-&gt;trOverloadText();</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//&quot;This<sp/>is<sp/>an<sp/>overloaded<sp/>member<sp/>function,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;provided<sp/>for<sp/>convenience.<sp/>It<sp/>differs<sp/>from<sp/>the<sp/>above<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;function<sp/>only<sp/>in<sp/>what<sp/>argument(s)<sp/>it<sp/>accepts.&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"></highlight></codeline>
<codeline lineno="5695"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMembersToMemberGroup(<ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*ml,</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d1e/class_member_group_s_dict" kindref="compound" tooltip="A sorted dictionary of MemberGroup objects.">MemberGroupSDict</ref><sp/>**ppMemberGroupSDict,</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context)</highlight></codeline>
<codeline lineno="5698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/>ASSERT(context!=0);</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;addMemberToMemberGroup()\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>mli(*ml);</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/>uint<sp/>index;</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(index=0;(md=mli.current());)</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isEnumerate())<sp/></highlight><highlight class="comment">//<sp/>insert<sp/>enum<sp/>value<sp/>of<sp/>this<sp/>enum<sp/>into<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*fmdl=md-&gt;enumFieldList();</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmdl!=0)</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd=fmdl-&gt;first();</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fmd)</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupId=fmd-&gt;getMemberGroupId();</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groupId!=-1)</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d12/struct_member_group_info" kindref="compound" tooltip="Data collected for a member group.">MemberGroupInfo</ref><sp/>*info<sp/>=<sp/>Doxygen::memGrpInfoDict[groupId];</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>*pGrpHeader<sp/>=<sp/>Doxygen::memberHeaderDict[groupId];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>*pDocs<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Doxygen::memberDocDict[groupId];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info)</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ppMemberGroupSDict==0)</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ppMemberGroupSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/d1e/class_member_group_s_dict" kindref="compound" tooltip="A sorted dictionary of MemberGroup objects.">MemberGroupSDict</ref>;</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ppMemberGroupSDict)-&gt;<ref refid="d0/d9f/class_s_int_dict_1aa847c843b8f2509d2021d8db470aa14f" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d32/class_member_group" kindref="compound" tooltip="A class representing a group of members.">MemberGroup</ref><sp/>*mg<sp/>=<sp/>(*ppMemberGroupSDict)-&gt;find(groupId);</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mg==0)</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d32/class_member_group" kindref="compound" tooltip="A class representing a group of members.">MemberGroup</ref>(</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context,</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupId,</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;header,</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;doc,</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;docFile</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ppMemberGroupSDict)-&gt;append(groupId,mg);</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg-&gt;insertMember(fmd);<sp/></highlight><highlight class="comment">//<sp/>insert<sp/>in<sp/>member<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setMemberGroup(mg);</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd=fmdl-&gt;next();</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groupId=md-&gt;getMemberGroupId();</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groupId!=-1)</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d12/struct_member_group_info" kindref="compound" tooltip="Data collected for a member group.">MemberGroupInfo</ref><sp/>*info<sp/>=<sp/>Doxygen::memGrpInfoDict[groupId];</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>*pGrpHeader<sp/>=<sp/>Doxygen::memberHeaderDict[groupId];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>*pDocs<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Doxygen::memberDocDict[groupId];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info)</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ppMemberGroupSDict==0)</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ppMemberGroupSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/d1e/class_member_group_s_dict" kindref="compound" tooltip="A sorted dictionary of MemberGroup objects.">MemberGroupSDict</ref>;</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ppMemberGroupSDict)-&gt;<ref refid="d0/d9f/class_s_int_dict_1aa847c843b8f2509d2021d8db470aa14f" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d32/class_member_group" kindref="compound" tooltip="A class representing a group of members.">MemberGroup</ref><sp/>*mg<sp/>=<sp/>(*ppMemberGroupSDict)-&gt;find(groupId);</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mg==0)</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d32/class_member_group" kindref="compound" tooltip="A class representing a group of members.">MemberGroup</ref>(</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context,</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupId,</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;header,</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;doc,</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;docFile</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ppMemberGroupSDict)-&gt;append(groupId,mg);</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md<sp/>=<sp/>ml-&gt;take(index);<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>from<sp/>member<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg-&gt;insertMember(md);<sp/></highlight><highlight class="comment">//<sp/>insert<sp/>in<sp/>member<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg-&gt;setRefItems(info-&gt;m_sli);</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroup(mg);</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/>++mli;++index;</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight></codeline>
<codeline lineno="5789" refid="d8/d3c/util_8h_1a53d4b12851bc6508815f5770d89c3792" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extractClassNameFromType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;pos,QCString<sp/>&amp;name,QCString<sp/>&amp;templSpec,<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang)</highlight></codeline>
<codeline lineno="5790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegExp<sp/>re_norm(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF][a-z_A-Z0-9:\\x80-\\xFF]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegExp<sp/>re_ftn(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF][()=_a-z_A-Z0-9:\\x80-\\xFF]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/>QRegExp<sp/>re;</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"></highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang<sp/>==<sp/>SrcLangExt_Fortran)</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.at(pos)==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.left(4).lower()==</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>re<sp/>=<sp/>re_norm;</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>re<sp/>=<sp/>re_ftn;</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/>re<sp/>=<sp/>re_norm;</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"></highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/>name.resize(0);</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/>templSpec.resize(0);</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,l;</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeLen=type.length();</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeLen&gt;0)</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i=re.match(type,pos,&amp;l))!=-1)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class<sp/>name<sp/>in<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ts=i+l;</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>te=ts;</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tl=0;</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(type.at(ts)==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ts&lt;typeLen)<sp/>ts++,tl++;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>any<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.at(ts)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>assume<sp/>template<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>locate<sp/>end<sp/>of<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>te=ts+1;</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>brCount=1;</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(te&lt;typeLen<sp/>&amp;&amp;<sp/>brCount!=0)</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.at(te)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(te&lt;typeLen-1<sp/>&amp;&amp;<sp/>type.at(te+1)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>te++;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>brCount++;</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.at(te)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(te&lt;typeLen-1<sp/>&amp;&amp;<sp/>type.at(te+1)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>te++;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>brCount--;</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>te++;</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>type.mid(i,l);</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(te&gt;ts)<sp/></highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templSpec<sp/>=<sp/>type.mid(ts,te-ts),tl+=te-ts;</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos=i+l+tl;</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>template<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos=i+l;</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;extractClassNameFromType([in]<sp/>type=%s,[out]<sp/>pos=%d,[out]<sp/>name=%s,[out]<sp/>templ=%s)=TRUE\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>type.data(),pos,name.data(),templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/>pos<sp/>=<sp/>typeLen;</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;extractClassNameFromType([in]<sp/>type=%s,[out]<sp/>pos=%d,[out]<sp/>name=%s,[out]<sp/>templ=%s)=FALSE\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>type.data(),pos,name.data(),templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"></highlight></codeline>
<codeline lineno="5863"><highlight class="normal">QCString<sp/>normalizeNonTemplateArgumentsInString(</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name,</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context,</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*<sp/>formalArgs)</highlight></codeline>
<codeline lineno="5867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>until<sp/>&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=name.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p==-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/>QCString<sp/>result<sp/>=<sp/>name.left(p);</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"></highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF][a-z_A-Z0-9\\x80-\\xFF]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l,i;</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>identifier<sp/>in<sp/>the<sp/>template<sp/>part<sp/>(e.g.<sp/>B&lt;T&gt;<sp/>-&gt;<sp/>T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(name,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>name.mid(p,i-p);</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>n<sp/>=<sp/>name.mid(i,l);</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formalArgs)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>n<sp/>is<sp/>not<sp/>a<sp/>formal<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>formAli(*formalArgs);</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*formArg;</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(formAli.toFirst();</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(formArg=formAli.current())<sp/>&amp;&amp;<sp/>!found;</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++formAli</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==n;</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>resolve<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>getResolvedClass(context,0,n);</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=n;</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=n;</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/>result+=name.right(name.length()-p);</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;normalizeNonTemplateArgumentInString(%s)=%s\n&quot;,name.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removeRedundantWhiteSpace(result);</highlight></codeline>
<codeline lineno="5916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"></highlight></codeline>
<codeline lineno="5918"><highlight class="normal"></highlight></codeline>
<codeline lineno="5925" refid="d8/d3c/util_8h_1a928208745b8d52e1ef9599e3bc5007cf" refkind="member"><highlight class="normal">QCString<sp/>substituteTemplateArgumentsInString(</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name,</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*formalArgs,</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*actualArgs)</highlight></codeline>
<codeline lineno="5929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;substituteTemplateArgumentsInString(name=%s<sp/>formal=%s<sp/>actualArg=%s)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name.data(),argListToString(formalArgs).data(),argListToString(actualArgs).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formalArgs==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF][a-z_A-Z0-9\\x80-\\xFF]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0,l,i;</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>identifier<sp/>in<sp/>the<sp/>base<sp/>class<sp/>name<sp/>(e.g.<sp/>B&lt;T&gt;<sp/>-&gt;<sp/>B<sp/>and<sp/>T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(name,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>name.mid(p,i-p);</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>n<sp/>=<sp/>name.mid(i,l);</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>formAli(*formalArgs);</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*formArg;</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*actArg=actualArgs-&gt;first();</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"></highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>n<sp/>is<sp/>a<sp/>template<sp/>argument,<sp/>then<sp/>we<sp/>substitute<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>its<sp/>template<sp/>instance<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(formAli.toFirst();</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(formArg=formAli.current())<sp/>&amp;&amp;<sp/>!found;</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++formAli,actArg=actualArgs-&gt;next()</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(6)==</highlight><highlight class="stringliteral">&quot;class<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.mid(6);</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(9)==</highlight><highlight class="stringliteral">&quot;typename<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref><sp/>=<sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.mid(9);</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;typename&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>==</highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal"><sp/>||<sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>==</highlight><highlight class="stringliteral">&quot;typename&quot;</highlight><highlight class="normal"><sp/>||<sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.left(8)==</highlight><highlight class="stringliteral">&quot;template&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;n=%s<sp/>formArg-&gt;type=&apos;%s&apos;<sp/>formArg-&gt;name=&apos;%s&apos;<sp/>formArg-&gt;defval=&apos;%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>n.data(),formArg-&gt;type.data(),formArg-&gt;name.data(),formArg-&gt;defval.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;<sp/>formArg-&gt;name=&apos;%s&apos;<sp/>actArg-&gt;type=&apos;%s&apos;<sp/>actArg-&gt;name=&apos;%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>formArg-&gt;name.data(),actArg-&gt;type.data(),actArg-&gt;name.data()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formArg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==n<sp/>&amp;&amp;<sp/>actArg<sp/>&amp;&amp;<sp/>!actArg-&gt;type.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>base<sp/>class<sp/>is<sp/>a<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>formal<sp/>argument<sp/>with<sp/>the<sp/>actual<sp/>argument<sp/>of<sp/>the<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!leftScopeMatch(actArg-&gt;type,n))<sp/></highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scope<sp/>guard<sp/>is<sp/>to<sp/>prevent<sp/>recursive<sp/>lockup<sp/>for<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template&lt;class<sp/>A&gt;<sp/>class<sp/>C<sp/>:<sp/>public&lt;A::T&gt;,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>A::T<sp/>would<sp/>become<sp/>A::T::T<sp/>here,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>n==A<sp/>and<sp/>actArg-&gt;type==A::T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>bug595833<sp/>for<sp/>an<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actArg-&gt;name.isEmpty())</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>actArg-&gt;type+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>case<sp/>where<sp/>the<sp/>actual<sp/>arg<sp/>is<sp/>something<sp/>like<sp/>&quot;unsigned<sp/>int&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&quot;int&quot;<sp/>part<sp/>is<sp/>in<sp/>actArg-&gt;name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>actArg-&gt;type+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+actArg-&gt;name+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formArg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==n<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actArg==0<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!formArg-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>!=name<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>prevent<sp/>recursion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>substituteTemplateArgumentsInString(formArg-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>,formalArgs,actualArgs)+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formArg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>==n<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actArg==0<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!formArg-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formArg-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>!=name<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>prevent<sp/>recursion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>substituteTemplateArgumentsInString(formArg-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>,formalArgs,actualArgs)+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/></highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/>result+=name.right(name.length()-p);</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Inheritance<sp/>relation<sp/>%s<sp/>-&gt;<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>name.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.stripWhiteSpace();</highlight></codeline>
<codeline lineno="6024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"></highlight></codeline>
<codeline lineno="6029" refid="d8/d3c/util_8h_1a76a3a3e6464790c52fbdab33a7ee675f" refkind="member"><highlight class="normal"><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>*copyArgumentLists(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>*srcLists)</highlight></codeline>
<codeline lineno="6030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/>ASSERT(srcLists!=0);</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>*dstLists<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref>;</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/>dstLists-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>sli(*srcLists);</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*sl;</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(sl=sli.current());++sli)</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/>dstLists-&gt;append(sl-&gt;<ref refid="d7/df8/class_argument_list_1a57a064d6f3ba77dbc19ce8b768eb3909" kindref="member">deepCopy</ref>());</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dstLists;</highlight></codeline>
<codeline lineno="6041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"></highlight></codeline>
<codeline lineno="6050" refid="d8/d3c/util_8h_1aa78497e488f5e271031b67fbe5452221" refkind="member"><highlight class="normal">QCString<sp/>stripTemplateSpecifiersFromScope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;fullName,</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parentOnly,</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*pLastScopeStripped)</highlight></codeline>
<codeline lineno="6053"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=fullName.length();</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=fullName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i!=-1)</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;1:result+=%s\n&quot;,fullName.mid(p,i-p).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=i+1;</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=1;</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(e&lt;l<sp/>&amp;&amp;<sp/>!done)</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=fullName.at(e++);</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count--;</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/>count==0;</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si=<sp/>fullName.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,e);</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"></highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parentOnly<sp/>&amp;&amp;<sp/>si==-1)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>only<sp/>do<sp/>the<sp/>parent<sp/>scope,<sp/>so<sp/>we<sp/>stop<sp/>here<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6081"><highlight class="normal"></highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/>result+=fullName.mid(p,i-p);</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>trying<sp/>%s\n&quot;,(result+fullName.mid(i,e-i)).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClass(result+fullName.mid(i,e-i))!=0)</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=fullName.mid(i,e-i);</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>2:result+=%s\n&quot;,fullName.mid(i,e-i-1).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pLastScopeStripped)</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>last<sp/>stripped<sp/>scope<sp/>&apos;%s&apos;\n&quot;,fullName.mid(i,e-i).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pLastScopeStripped=fullName.mid(i,e-i);</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/><sp/><sp/>p=e;</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/><sp/><sp/>i=fullName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,p);</highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/>result+=fullName.right(l-p);</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;3:result+=%s\n&quot;,fullName.right(l-p).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"></highlight></codeline>
<codeline lineno="6111" refid="d8/d3c/util_8h_1a0baa021dae80e22593292b12ef2f721f" refkind="member"><highlight class="normal">QCString<sp/>mergeScopes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;leftScope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;rightScope)</highlight></codeline>
<codeline lineno="6112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>leftScope==&quot;A&quot;<sp/>rightScope==&quot;A::B&quot;<sp/>=&gt;<sp/>result<sp/>=<sp/>&quot;A::B&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leftScopeMatch(rightScope,leftScope))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rightScope;</highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0,p=leftScope.length();</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"></highlight></codeline>
<codeline lineno="6118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>leftScope==&quot;A::B&quot;<sp/>rightScope==&quot;B::C&quot;<sp/>=&gt;<sp/>result<sp/>=<sp/>&quot;A::B::C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>leftScope==&quot;A::B&quot;<sp/>rightScope==&quot;B&quot;<sp/>=&gt;<sp/>result<sp/>=<sp/>&quot;A::B&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=leftScope.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,p))!=-1)</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leftScopeMatch(rightScope,leftScope.right(leftScope.length()-i-2)))</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>leftScope.left(i+2)+rightScope;</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i-1;</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"></highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>leftScope==&quot;A&quot;<sp/>rightScope==&quot;B&quot;<sp/>=&gt;<sp/>result<sp/>=<sp/>&quot;A::B&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/>result=leftScope.copy();</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result.isEmpty()<sp/>&amp;&amp;<sp/>!rightScope.isEmpty())<sp/>result+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/>result+=rightScope;</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"></highlight></codeline>
<codeline lineno="6146" refid="d8/d3c/util_8h_1afd249e264b966d05a54b740e3d43ad6e" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getScopeFragment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*l)</highlight></codeline>
<codeline lineno="6147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sl=s.length();</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp=p;</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp&gt;=sl)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp&lt;sl)</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=s.at(sp);</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>sp++,p++;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp&lt;sl)</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=s.at(sp);</highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>found<sp/>next<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>template<sp/>specifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count=1;sp++;</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp&lt;sl<sp/>&amp;&amp;<sp/>!done)</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>deal<sp/>with<sp/>&lt;&lt;<sp/>and<sp/>&gt;&gt;<sp/>operators!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=s.at(sp++);</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/>count++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:<sp/>count--;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==0)<sp/>done=TRUE;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp++;</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6185"><highlight class="normal">found:</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/>*l=sp-p;</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getScopeFragment(%s,%d)=%s\n&quot;,s.data(),p,s.mid(p,*l).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="6189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6190"><highlight class="normal"></highlight></codeline>
<codeline lineno="6191"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6192"><highlight class="normal"></highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*addRelatedPage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;ptitle,</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;doc,</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;SectionInfo&gt;</ref><sp/>*<sp/></highlight><highlight class="comment">/*anchors*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startLine,</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ListItemInfo&gt;</ref><sp/>*sli,</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd,</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dc3/struct_tag_info" kindref="compound" tooltip="This struct is used to capture the tag file information for an Entry.">TagInfo</ref><sp/>*tagInfo,</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd=0;</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;addRelatedPage(name=%s<sp/>gd=%p)\n&quot;,name,gd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pd=Doxygen::pageSDict-&gt;find(name))<sp/>&amp;&amp;<sp/>!tagInfo)</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>documentation<sp/>block<sp/>to<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(doc,fileName,startLine);</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>page<sp/>docs<sp/>`%s&apos;<sp/>pi=%p<sp/>name=%s\n&quot;,doc.data(),pi,name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>new<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>baseName=name;</highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseName.right(4)==</highlight><highlight class="stringliteral">&quot;.tex&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseName=baseName.left(baseName.length()-4);</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseName.right(Doxygen::htmlFileExtension.length())==Doxygen::htmlFileExtension)</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>baseName=baseName.left(baseName.length()-Doxygen::htmlFileExtension.length());</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"></highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>title=ptitle.stripWhiteSpace();</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/>pd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref>(fileName,startLine,baseName,doc,title);</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"></highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/>pd-&gt;setRefItems(sli);</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/>pd-&gt;setLanguage(lang);</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"></highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagInfo)</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a9548c1e2218ce2730c6c3e31bdac6452" kindref="member">setReference</ref>(tagInfo-&gt;tagName);</highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;setFileName(tagInfo-&gt;fileName);</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;setFileName(convertNameToFile(pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),FALSE,TRUE));</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"></highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Appending<sp/>page<sp/>`%s&apos;\n&quot;,baseName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::pageSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(baseName,pd);</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"></highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd)<sp/>gd-&gt;addPage(pd);</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"></highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pd-&gt;title().isEmpty())</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//outputList-&gt;writeTitle(pi-&gt;name,pi-&gt;title);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6243"><highlight class="normal"></highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>page<sp/>name<sp/>is<sp/>a<sp/>label<sp/>as<sp/>well!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>file;</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd)</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file=gd-&gt;<ref refid="d8/d09/class_group_def_1a67914ef80cfb1958b5b5f36b13866b83" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file=pd-&gt;<ref refid="dd/d41/class_page_def_1aa08ebea225e51faed63111ba64e78960" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d5b/struct_section_info" kindref="compound" tooltip="Class representing a section in a page.">SectionInfo</ref><sp/>*si=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d5b/struct_section_info" kindref="compound" tooltip="Class representing a section in a page.">SectionInfo</ref>(</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),pd-&gt;title(),SectionInfo::Page,0,pd-&gt;<ref refid="d5/dcc/class_definition_1a266bc8f350de23e01335d4d674995dcf" kindref="member">getReference</ref>());</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;si-&gt;label=`%s&apos;<sp/>si-&gt;definition=%s<sp/>si-&gt;fileName=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>si-&gt;label.data(),si-&gt;definition?si-&gt;definition-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>si-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>SectionInfo:<sp/>sec=%p<sp/>sec-&gt;fileName=%s\n&quot;,si,si-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>section<sp/>key=%s<sp/>si-&gt;fileName=%s\n&quot;,pageName.data(),si-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::sectionDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),si);</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pd;</highlight></codeline>
<codeline lineno="6265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"></highlight></codeline>
<codeline lineno="6267"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6268"><highlight class="normal"></highlight></codeline>
<codeline lineno="6269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addRefItem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ListItemInfo&gt;</ref><sp/>*sli,</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*title,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*args)</highlight></codeline>
<codeline lineno="6272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;addRefItem(sli=%p,key=%s,prefix=%s,name=%s,title=%s,args=%s)\n&quot;,sli,key,prefix,name,title,args);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sli<sp/>&amp;&amp;<sp/>key<sp/>&amp;&amp;<sp/>key[0]!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>@<sp/>to<sp/>skip<sp/>anonymous<sp/>stuff<sp/>(see<sp/>bug427012)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/>QListIterator&lt;ListItemInfo&gt;<sp/>slii(*sli);</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/dd5/struct_list_item_info" kindref="compound">ListItemInfo</ref><sp/>*lii;</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(slii.toFirst();(lii=slii.current());++slii)</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/de8/class_ref_list" kindref="compound" tooltip="List of cross-referenced items.">RefList</ref><sp/>*refList<sp/>=<sp/>Doxygen::xrefLists-&gt;find(lii-&gt;type);</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refList</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>either<sp/>not<sp/>a<sp/>built-in<sp/>list<sp/>or<sp/>the<sp/>list<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lii-&gt;type!=</highlight><highlight class="stringliteral">&quot;todo&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_TODOLIST&quot;</highlight><highlight class="normal">))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lii-&gt;type!=</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_TESTLIST&quot;</highlight><highlight class="normal">))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lii-&gt;type!=</highlight><highlight class="stringliteral">&quot;bug&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_BUGLIST&quot;</highlight><highlight class="normal">))<sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lii-&gt;type!=</highlight><highlight class="stringliteral">&quot;deprecated&quot;</highlight><highlight class="normal"><sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_DEPRECATEDLIST&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d1b/struct_ref_item" kindref="compound" tooltip="This struct represents an item in the list of references.">RefItem</ref><sp/>*item<sp/>=<sp/>refList-&gt;<ref refid="d7/de8/class_ref_list_1af047154431d78b27f413e14cadc1d15e" kindref="member">getRefItem</ref>(lii-&gt;itemId);</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(item!=0);</highlight></codeline>
<codeline lineno="6294"><highlight class="normal"></highlight></codeline>
<codeline lineno="6295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="de/d1b/struct_ref_item_1a5bc1b5fe84242499696ff7414217fd58" kindref="member" tooltip="type prefix for the name">prefix</ref><sp/>=<sp/>prefix;</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="de/d1b/struct_ref_item_1a1235c4acaa9aa9bfece34c6d7f654ef0" kindref="member" tooltip="name of the entity containing the reference">name</ref><sp/><sp/><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="de/d1b/struct_ref_item_1a5160b8acde58f43ebfc2842281591acd" kindref="member" tooltip="display name of the entity">title</ref><sp/><sp/>=<sp/>title;</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="de/d1b/struct_ref_item_1abe88c74f88bcacf9fa2d16c797742910" kindref="member" tooltip="optional arguments for the entity (if function)">args</ref><sp/><sp/><sp/>=<sp/>args;</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"></highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refList-&gt;insertIntoList(key,item);</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"></highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"></highlight></codeline>
<codeline lineno="6307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addGroupListToTitle(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d)</highlight></codeline>
<codeline lineno="6308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/class_group_list" kindref="compound" tooltip="A list of GroupDef objects.">GroupList</ref><sp/>*groups<sp/>=<sp/>d-&gt;partOfGroups();</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groups)<sp/></highlight><highlight class="comment">//<sp/>write<sp/>list<sp/>of<sp/>group<sp/>to<sp/>which<sp/>this<sp/>definition<sp/>belongs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a885957a64f7d87aefb663c4ec903188f" kindref="member">pushGeneratorState</ref>();</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a73f9be626eea01f1ccd1b446dcf2c003" kindref="member">disableAllBut</ref>(OutputGenerator::Html);</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&lt;div<sp/>class=\&quot;ingroups\&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/dc4/class_group_list_iterator" kindref="compound" tooltip="An iterator for GroupDef objects in a GroupList.">GroupListIterator</ref><sp/>gli(*groups);</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first=TRUE;</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first)<sp/>{<sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&amp;#124;<sp/>&quot;</highlight><highlight class="normal">);<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>first=FALSE;<sp/></highlight></codeline>
<codeline lineno="6321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a8c499e7baca8905c8e057d23f72ff548" kindref="member">writeObjectLink</ref>(gd-&gt;<ref refid="d5/dcc/class_definition_1a266bc8f350de23e01335d4d674995dcf" kindref="member">getReference</ref>(),</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d8/d09/class_group_def_1a67914ef80cfb1958b5b5f36b13866b83" kindref="member">getOutputFileBase</ref>(),0,gd-&gt;groupTitle());</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&lt;/div&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a94eb1af2ea07425ef1faa539d24adcf8" kindref="member">popGeneratorState</ref>();</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"></highlight></codeline>
<codeline lineno="6329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>filterLatexString(<ref refid="dc/d3c/class_f_text_stream" kindref="compound" tooltip="Simplified and optimized version of QTextStream.">FTextStream</ref><sp/>&amp;t,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>insideTabbing,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>insidePre,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>insideItem)</highlight></codeline>
<codeline lineno="6331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;filterLatexString(%s)\n&quot;,str);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(strlen(str)&lt;2)<sp/>stackTrace();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)str;</highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pc=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p)</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/><sp/>c=*p++;</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"></highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insidePre)</highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\(\\backslash\\)&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\{&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\}&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\_&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/>(char)c;</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\#&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\$&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\%&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$^\\wedge$&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\&amp;&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$\\ast$&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideTabbing)<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\-&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\_&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideTabbing)<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\-&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\{&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\}&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$&lt;$&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$&gt;$&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$|$&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$\\sim$&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;PDF_HYPERLINKS&quot;</highlight><highlight class="normal">)<sp/>||<sp/>insideItem)<sp/></highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\mbox{[}&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pc==</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$\\,$&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;PDF_HYPERLINKS&quot;</highlight><highlight class="normal">)<sp/>||<sp/>insideItem)</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\mbox{]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:<sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-\\/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$&lt;$&quot;</highlight><highlight class="normal">;<sp/>p++;<sp/>}</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;$&gt;$&quot;</highlight><highlight class="normal">;<sp/>p++;<sp/>}<sp/></highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\textbackslash{}&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:<sp/><sp/>{<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\char`\\\&quot;{}&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"></highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!insideTabbing<sp/>&amp;&amp;<sp/>forceBreaks<sp/>&amp;&amp;<sp/>c!=&apos;<sp/>&apos;<sp/>&amp;&amp;<sp/>*p!=&apos;<sp/>&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideTabbing<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((c&gt;=</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c&lt;=</highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>pc!=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>pc!=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c==</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>pc!=</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(pc==</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>isId(c)))</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/>(char)c;</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/>pc<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"></highlight></codeline>
<codeline lineno="6412"><highlight class="normal"></highlight></codeline>
<codeline lineno="6413"><highlight class="normal">QCString<sp/>rtfFormatBmkStr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="6414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>g_nextTag(<sp/></highlight><highlight class="stringliteral">&quot;AAAAAAAAAA&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;QCString&gt;<sp/>g_tagDict(<sp/>5003<sp/>);</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"></highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/>g_tagDict.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"></highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>overcome<sp/>the<sp/>40-character<sp/>tag<sp/>limitation,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>substitute<sp/>a<sp/>short<sp/>arbitrary<sp/>string<sp/>for<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>supplied,<sp/>and<sp/>keep<sp/>track<sp/>of<sp/>the<sp/>correspondence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>between<sp/>names<sp/>and<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/>QCString<sp/>key(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/>QCString*<sp/>tag<sp/>=<sp/>g_tagDict.find(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tag<sp/>)</highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>particular<sp/>name<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>list.<sp/>Add<sp/>it,<sp/>associating<sp/>it<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>tag<sp/>value,<sp/>and<sp/>increment<sp/>the<sp/>next<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/><sp/><sp/>tag<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QCString(<sp/>g_nextTag.copy()<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>to<sp/>use<sp/>a<sp/>deep<sp/>copy!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6432"><highlight class="normal"><sp/><sp/><sp/><sp/>g_tagDict.insert(<sp/>key,<sp/>tag<sp/>);</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"></highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>increment<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>nxtTag<sp/>=<sp/>g_nextTag.data()<sp/>+<sp/>g_nextTag.length()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>g_nextTag.length();<sp/>++i,<sp/>--nxtTag<sp/>)</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>++(*nxtTag)<sp/>)<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*nxtTag<sp/>=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>there<sp/>was<sp/>no<sp/>carry,<sp/>we<sp/>can<sp/>stop<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6449"><highlight class="normal"></highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*tag;</highlight></codeline>
<codeline lineno="6451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"></highlight></codeline>
<codeline lineno="6453"><highlight class="normal">QCString<sp/>stripExtension(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fName)</highlight></codeline>
<codeline lineno="6454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/>QCString<sp/>result=fName;</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.right(Doxygen::htmlFileExtension.length())==Doxygen::htmlFileExtension)</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/><sp/><sp/>result=result.left(result.length()-Doxygen::htmlFileExtension.length());</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"></highlight></codeline>
<codeline lineno="6463"><highlight class="normal"></highlight></codeline>
<codeline lineno="6464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>replaceNamespaceAliases(QCString<sp/>&amp;scope,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="6465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&gt;0)</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>ns<sp/>=<sp/>scope.left(i);</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*s<sp/>=<sp/>Doxygen::namespaceAliasDict[ns];</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope=*s+scope.right(scope.length()-i);</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i=s-&gt;length();</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0<sp/>&amp;&amp;<sp/>ns==scope.left(i))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"></highlight></codeline>
<codeline lineno="6479"><highlight class="normal">QCString<sp/>stripPath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="6480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/>QCString<sp/>result=s;</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=result.findRev(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/>result=result.mid(i+1);</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/>i=result.findRev(</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/>result=result.mid(i+1);</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"></highlight></codeline>
<codeline lineno="6496" refid="d8/d3c/util_8h_1aea05ebaaec2477660122c5f1faeeb11e" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>containsWord(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;word)</highlight></codeline>
<codeline lineno="6497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>wordExp(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0,i,l;</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=wordExp.match(s,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.mid(i,l)==word)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="6506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6507"><highlight class="normal"></highlight></codeline>
<codeline lineno="6508"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>findAndRemoveWord(QCString<sp/>&amp;s,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;word)</highlight></codeline>
<codeline lineno="6509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>wordExp(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0,i,l;</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=wordExp.match(s,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.mid(i,l)==word)<sp/></highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0<sp/>&amp;&amp;<sp/>isspace((uchar)s.at(i-1)))<sp/></highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--,l++;</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i+l&lt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)s.length()<sp/>&amp;&amp;<sp/>isspace(s.at(i+l)))<sp/></highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l++;</highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s.left(i)+s.mid(i+l);<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>word<sp/>+<sp/>spacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="6526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"></highlight></codeline>
<codeline lineno="6536" refid="d8/d3c/util_8h_1ad0b372f3669056d6a88f41daeb3a3865" refkind="member"><highlight class="normal">QCString<sp/>stripLeadingAndTrailingEmptyLines(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;docLine)</highlight></codeline>
<codeline lineno="6537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>s.data();</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6540"><highlight class="normal"></highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>leading<sp/>empty<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0,li=-1,l=s.length();</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal"><sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>i++;</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>i++,li=i,docLine++;</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"></highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>trailing<sp/>empty<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b=l-1,bi=-1;</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/>p=s.data()+b;</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(b&gt;=0)</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/>c=*p;<sp/>p--;</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal"><sp/>||<sp/>c==</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>b--;</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>bi=b,b--;</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"></highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>whole<sp/>string<sp/>if<sp/>no<sp/>leading<sp/>or<sp/>trailing<sp/>lines<sp/>where<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(li==-1<sp/>&amp;&amp;<sp/>bi==-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"></highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>substring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bi==-1)<sp/>bi=l;</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(li==-1)<sp/>li=0;</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bi&lt;=li)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>empty<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.mid(li,bi-li);</highlight></codeline>
<codeline lineno="6570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"></highlight></codeline>
<codeline lineno="6572"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="6573"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringToSearchIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;docBaseUrl,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;title,</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;str,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>priority,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;anchor)</highlight></codeline>
<codeline lineno="6575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>searchEngine<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;SEARCHENGINE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(searchEngine)</highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;setCurrentDoc(title,docBaseUrl,anchor);</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>wordPattern(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z\\x80-\\xFF][a-z_A-Z0-9\\x80-\\xFF]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0,l;</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=wordPattern.match(str,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;addWord(str.mid(i,l),priority);</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6590"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6591"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6592"><highlight class="normal"></highlight></codeline>
<codeline lineno="6593"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;int&gt;<sp/>g_extLookup;</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"></highlight></codeline>
<codeline lineno="6595"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Lang2ExtMap</highlight></codeline>
<codeline lineno="6596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*langName;</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*parserName;</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>parserId;</highlight></codeline>
<codeline lineno="6600"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="6601"><highlight class="normal">g_lang2extMap[]<sp/>=</highlight></codeline>
<codeline lineno="6602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>language<sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/><sp/><sp/><sp/><sp/>parser<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;idl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_IDL<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;java&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_Java<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;javascript&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_JS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;csharp&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_CSharp<sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_D<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;php&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_PHP<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;objective-c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_ObjC<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_Cpp<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;c++&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_Cpp<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;python&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;python&quot;</highlight><highlight class="normal">,<sp/><sp/>SrcLangExt_Python<sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;fortran&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fortran&quot;</highlight><highlight class="normal">,<sp/>SrcLangExt_Fortran<sp/><sp/>},</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;vhdl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vhdl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>SrcLangExt_VHDL<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;dbusxml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dbusxml&quot;</highlight><highlight class="normal">,<sp/>SrcLangExt_XML<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;tcl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tcl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>SrcLangExt_Tcl<sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;md&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;md&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>SrcLangExt_Markdown<sp/>},</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref>)0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6620"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"></highlight></codeline>
<codeline lineno="6622"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateLanguageMapping(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;extension,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;language)</highlight></codeline>
<codeline lineno="6623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Lang2ExtMap<sp/>*p<sp/>=<sp/>g_lang2extMap;</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/>QCString<sp/>langName<sp/>=<sp/>language.lower();</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p-&gt;langName)</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(langName==p-&gt;langName)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p-&gt;langName)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"></highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>the<sp/>language</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>parserId<sp/>=<sp/>p-&gt;parserId;</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/>QCString<sp/>extName<sp/>=<sp/>extension.lower();</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extName.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extName.at(0)!=</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>extName.prepend(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_extLookup.find(extension)!=0)<sp/></highlight><highlight class="comment">//<sp/>language<sp/>was<sp/>already<sp/>register<sp/>for<sp/>this<sp/>ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/>g_extLookup.remove(extension);</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;registering<sp/>extension<sp/>%s\n&quot;,extName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/>g_extLookup.insert(extName,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(parserId));</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Doxygen::parserManager-&gt;registerExtension(extName,p-&gt;parserName))</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>assign<sp/>extension<sp/>%s<sp/>to<sp/>parser<sp/>%s<sp/>for<sp/>language<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extName.data(),p-&gt;parserName,language.data());</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//msg(&quot;Registered<sp/>extension<sp/>%s<sp/>to<sp/>language<sp/>parser<sp/>%s...\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>extName.data(),language.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="6655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"></highlight></codeline>
<codeline lineno="6657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initDefaultExtensionMapping()</highlight></codeline>
<codeline lineno="6658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/>g_extLookup.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extension<sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.idl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;idl&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.ddl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;idl&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.odl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;idl&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.java&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;java&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.as&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;javascript&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.js&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;javascript&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.cs&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;csharp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.d&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.php&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;php&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.php4&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;php&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.php5&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;php&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.inc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;php&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.phtml&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;php&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.m&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;objective-c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.M&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;objective-c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.mm&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;objective-c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.py&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;python&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.f&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fortran&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.for&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fortran&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.f90&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fortran&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.vhd&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vhdl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.vhdl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vhdl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.tcl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tcl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6684"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.ucf&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vhdl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.qsf&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vhdl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.md&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;md&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/>updateLanguageMapping(</highlight><highlight class="stringliteral">&quot;.markdown&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;md&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"></highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//updateLanguageMapping(&quot;.xml&quot;,<sp/><sp/><sp/>&quot;dbusxml&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"></highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>getLanguageFromFileName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>fileName)</highlight></codeline>
<codeline lineno="6693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>fileName.findRev(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="comment">//<sp/>name<sp/>has<sp/>an<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>extStr=fileName.right(fileName.length()-i).lower();</highlight></codeline>
<codeline lineno="6698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!extStr.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>non-empty<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pVal=g_extLookup.find(extStr);</highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pVal)<sp/></highlight><highlight class="comment">//<sp/>listed<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getLanguageFromFileName(%s)=%x\n&quot;,extStr.data(),*pVal);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref>)*pVal;<sp/></highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;getLanguageFromFileName(%s)<sp/>not<sp/>found!\n&quot;,fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SrcLangExt_Cpp;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>listed<sp/>=&gt;<sp/>assume<sp/>C-ish<sp/>language.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"></highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal"></highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*getMemberFromSymbol(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,<sp/></highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n)</highlight></codeline>
<codeline lineno="6716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope==0<sp/>||</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()!=Definition::TypeClass<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()!=Definition::TypeNamespace</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/><sp/><sp/>scope=Doxygen::globalScope;</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"></highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/>QCString<sp/>name<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.isEmpty())</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>name<sp/>was<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6729"><highlight class="normal"></highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/><ref refid="d9/d4a/class_definition_intf" kindref="compound" tooltip="Abstract interface for a Definition or DefinitionList.">DefinitionIntf</ref><sp/>*di<sp/>=<sp/>Doxygen::symbolMap-&gt;find(name);</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di==0)</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>could<sp/>not<sp/>find<sp/>any<sp/>matching<sp/>symbols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6733"><highlight class="normal"></highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mostly<sp/>copied<sp/>from<sp/>getResolvedClassRec()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/>QCString<sp/>explicitScopePart;</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qualifierIndex<sp/>=<sp/>computeQualifiedIndex(name);</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qualifierIndex!=-1)</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/>explicitScopePart<sp/>=<sp/>name.left(qualifierIndex);</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/>replaceNamespaceAliases(explicitScopePart,explicitScopePart.length());</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>name.mid(qualifierIndex+2);</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;explicitScopePart=%s\n&quot;,explicitScopePart.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6744"><highlight class="normal"></highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minDistance<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bestMatch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"></highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==DefinitionIntf::TypeSymbolList)</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;multiple<sp/>matches!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>closest<sp/>closest<sp/>matching<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d0b/class_definition_list_iterator" kindref="compound" tooltip="An iterator for Definition objects in a DefinitionList.">DefinitionListIterator</ref><sp/>dli(*(<ref refid="da/d39/class_definition_list" kindref="compound" tooltip="A list of Definition objects.">DefinitionList</ref>*)di);</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d;</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dli.toFirst();(d=dli.current());++dli)</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember)</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_visitedNamespaces.clear();</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>isAccessibleFromWithExpScope(scope,fileScope,d,explicitScopePart);</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance!=-1<sp/>&amp;&amp;<sp/>distance&lt;minDistance)</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDistance<sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*)d;</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>best<sp/>match<sp/>%s<sp/>distance=%d\n&quot;,bestMatch-&gt;qualifiedName().data(),distance);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember)</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;unique<sp/>match!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*)di;</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/>g_visitedNamespaces.clear();</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>isAccessibleFromWithExpScope(scope,fileScope,d,explicitScopePart);</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance!=-1<sp/>&amp;&amp;<sp/>distance&lt;minDistance)</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minDistance<sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bestMatch<sp/>=<sp/>(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*)d;</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>best<sp/>match<sp/>%s<sp/>distance=%d\n&quot;,bestMatch-&gt;qualifiedName().data(),distance);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bestMatch;</highlight></codeline>
<codeline lineno="6783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"></highlight></codeline>
<codeline lineno="6786" refid="d8/d3c/util_8h_1a070878d94aead2c1ac26282044d96002" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkIfTypedef(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n)</highlight></codeline>
<codeline lineno="6787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bestMatch<sp/>=<sp/>getMemberFromSymbol(scope,fileScope,n);</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"></highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bestMatch<sp/>&amp;&amp;<sp/>bestMatch-&gt;isTypedef())</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;<sp/></highlight><highlight class="comment">//<sp/>closest<sp/>matching<sp/>symbol<sp/>is<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="6794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"></highlight></codeline>
<codeline lineno="6796"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*writeUtf8Char(<ref refid="dc/d3c/class_f_text_stream" kindref="compound" tooltip="Simplified and optimized version of QTextStream.">FTextStream</ref><sp/>&amp;t,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="6797"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=*s++;</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/>t<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c&lt;0)<sp/></highlight><highlight class="comment">//<sp/>multibyte<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/>*s++;</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((uchar)c&amp;0xE0)==0xE0)</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/>*s++;<sp/></highlight><highlight class="comment">//<sp/>111x.xxxx:<sp/>&gt;=3<sp/>byte<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((uchar)c&amp;0xF0)==0xF0)</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;<sp/>*s++;<sp/></highlight><highlight class="comment">//<sp/>1111.xxxx:<sp/>4<sp/>byte<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="6813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"></highlight></codeline>
<codeline lineno="6815"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextUtf8CharPosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;utf8Str,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startPos)</highlight></codeline>
<codeline lineno="6816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes=1;</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startPos&gt;=len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>utf8Str[startPos];</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c&lt;0)<sp/></highlight><highlight class="comment">//<sp/>multibyte<sp/>utf-8<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes++;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1xxx.xxxx:<sp/>&gt;=2<sp/>byte<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((uchar)c&amp;0xE0)==0xE0)</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes++;<sp/></highlight><highlight class="comment">//<sp/>111x.xxxx:<sp/>&gt;=3<sp/>byte<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((uchar)c&amp;0xF0)==0xF0)</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes++;<sp/></highlight><highlight class="comment">//<sp/>1111.xxxx:<sp/>4<sp/>byte<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>over<sp/>character<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re1(</highlight><highlight class="stringliteral">&quot;&amp;#[0-9]+;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>numerical<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re2(</highlight><highlight class="stringliteral">&quot;&amp;[A-Z_a-z]+;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>named<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l1,l2;</highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>=<sp/>re1.match(utf8Str,startPos,&amp;l1);</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2<sp/>=<sp/>re2.match(utf8Str,startPos,&amp;l2);</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1!=-1)</highlight></codeline>
<codeline lineno="6840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes=l1;</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2!=-1)</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes=l2;</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startPos+bytes;</highlight></codeline>
<codeline lineno="6849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"></highlight></codeline>
<codeline lineno="6851"><highlight class="normal">QCString<sp/>parseCommentAsText(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md,</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;doc,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;fileName,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineNr)</highlight></codeline>
<codeline lineno="6853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/>QGString<sp/>s;</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doc.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.data();</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><ref refid="dc/d3c/class_f_text_stream" kindref="compound" tooltip="Simplified and optimized version of QTextStream.">FTextStream</ref><sp/>t(&amp;s);</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/><ref refid="d9/d0e/class_doc_node" kindref="compound" tooltip="Abstract node interface with type information.">DocNode</ref><sp/>*root<sp/>=<sp/>validatingParseDoc(fileName,lineNr,</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref>*)scope,(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>*)md,doc,FALSE,FALSE);</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><ref refid="d2/d63/class_text_doc_visitor" kindref="compound" tooltip="Concrete visitor implementation for TEXT output.">TextDocVisitor</ref><sp/>*visitor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d63/class_text_doc_visitor" kindref="compound" tooltip="Concrete visitor implementation for TEXT output.">TextDocVisitor</ref>(t);</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/>root-&gt;<ref refid="d9/d0e/class_doc_node_1a5303a550cbe6395663bf9b9dad28cbf1" kindref="member">accept</ref>(visitor);</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>visitor;</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>root;</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/>QCString<sp/>result<sp/>=<sp/>convertCharEntitiesToUTF8(s.data());</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charCnt=0;</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=result.length();</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addEllipsis=FALSE;</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=nextUtf8CharPosition(result,l,i))&lt;l)</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/>charCnt++;</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charCnt&gt;=80)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(charCnt&gt;=80)<sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>truncate<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=nextUtf8CharPosition(result,l,i))&lt;l<sp/>&amp;&amp;<sp/>charCnt&lt;100)</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>charCnt++;</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.at(i)&gt;=0<sp/>&amp;&amp;<sp/>isspace(result.at(i)))</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addEllipsis=TRUE;</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.at(i)==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.at(i)==</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.at(i)==</highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addEllipsis<sp/>||<sp/>charCnt==100)<sp/>result=result.left(i)+</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.data();</highlight></codeline>
<codeline lineno="6892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"></highlight></codeline>
<codeline lineno="6894"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6895"><highlight class="normal"></highlight></codeline>
<codeline lineno="6896"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;void&gt;<sp/>aliasesProcessed;</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"></highlight></codeline>
<codeline lineno="6898"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>expandAliasRec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>s);</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"></highlight></codeline>
<codeline lineno="6900"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Marker</highlight></codeline>
<codeline lineno="6901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/>Marker(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s)<sp/>:<sp/>pos(p),number(n),size(s)<sp/>{}</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos;<sp/></highlight><highlight class="comment">//<sp/>position<sp/>in<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number;<sp/></highlight><highlight class="comment">//<sp/>argument<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;<sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>the<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6906"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"></highlight></codeline>
<codeline lineno="6912"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>replaceAliasArguments(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;aliasValue,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;argList)</highlight></codeline>
<codeline lineno="6913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;-----<sp/>replaceAliasArguments(val=[%s],args=[%s])\n&quot;,aliasValue.data(),argList.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6915"><highlight class="normal"></highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>make<sp/>a<sp/>list<sp/>of<sp/>arguments<sp/>from<sp/>the<sp/>comma<sp/>separated<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;QCString&gt;</ref><sp/>args;</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/>args.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,l=(int)argList.length();</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=0;</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;l;i++)</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argList.at(i)==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(i==0<sp/>||<sp/>argList.at(i-1)!=</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QCString(argList.mid(s,i-s)));</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s=i+1;<sp/></highlight><highlight class="comment">//<sp/>start<sp/>of<sp/>next<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l&gt;s)<sp/>args.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QCString(argList.right(l-s)));</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>%d<sp/>arguments\n&quot;,args.count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6931"><highlight class="normal"></highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>we<sp/>look<sp/>for<sp/>the<sp/>positions<sp/>of<sp/>the<sp/>markers<sp/>and<sp/>add<sp/>them<sp/>to<sp/>a<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;Marker&gt;</ref><sp/>markerList;</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/>markerList.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/>l<sp/>=<sp/>aliasValue.length();</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>markerStart=0;</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>markerEnd=0;</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;l;i++)</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(markerStart==0<sp/>&amp;&amp;<sp/>aliasValue.at(i)==</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>start<sp/>of<sp/>a<sp/>\xx<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markerStart=i+1;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(markerStart&gt;0<sp/>&amp;&amp;<sp/>aliasValue.at(i)&gt;=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>aliasValue.at(i)&lt;=</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>digit<sp/>that<sp/>make<sp/>up<sp/>the<sp/>marker<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markerEnd=i+1;</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(markerStart&gt;0<sp/>&amp;&amp;<sp/>markerEnd&gt;markerStart)<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>markerLen<sp/>=<sp/>markerEnd-markerStart;</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markerList.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Marker(markerStart-1,<sp/></highlight><highlight class="comment">//<sp/>include<sp/>backslash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atoi(aliasValue.mid(markerStart,markerLen)),markerLen+1));</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>marker<sp/>at<sp/>%d<sp/>with<sp/>len<sp/>%d<sp/>and<sp/>number<sp/>%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>markerStart-1,markerLen+1,atoi(aliasValue.mid(markerStart,markerLen)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markerStart=0;<sp/></highlight><highlight class="comment">//<sp/>outside<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markerEnd=0;</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(markerStart&gt;0)</highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/>markerEnd=l;</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(markerStart&gt;0<sp/>&amp;&amp;<sp/>markerEnd&gt;markerStart)</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>markerLen<sp/>=<sp/>markerEnd-markerStart;</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>markerList.append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Marker(markerStart-1,<sp/></highlight><highlight class="comment">//<sp/>include<sp/>backslash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atoi(aliasValue.mid(markerStart,markerLen)),markerLen+1));</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>marker<sp/>at<sp/>%d<sp/>with<sp/>len<sp/>%d<sp/>and<sp/>number<sp/>%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>markerStart-1,markerLen+1,atoi(aliasValue.mid(markerStart,markerLen)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"></highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>we<sp/>replace<sp/>the<sp/>markers<sp/>with<sp/>the<sp/>corresponding<sp/>arguments<sp/>in<sp/>one<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0;</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;(int)markerList.count();i++)</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/>Marker<sp/>*m<sp/>=<sp/>markerList.at(i);</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/>result+=aliasValue.mid(p,m-&gt;pos-p);</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;part<sp/>before<sp/>marker<sp/>%d:<sp/>&apos;%s&apos;\n&quot;,i,aliasValue.mid(p,m-&gt;pos-p).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;number&gt;0<sp/>&amp;&amp;<sp/>m-&gt;number&lt;=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)args.count())<sp/></highlight><highlight class="comment">//<sp/>valid<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=*args.at(m-&gt;number-1);</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;marker<sp/>index=%d<sp/>pos=%d<sp/>number=%d<sp/>size=%d<sp/>replacement<sp/>%s\n&quot;,i,m-&gt;pos,m-&gt;number,m-&gt;size,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>args.at(m-&gt;number-1)-&gt;data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/>p=m-&gt;pos+m-&gt;size;<sp/></highlight><highlight class="comment">//<sp/>continue<sp/>after<sp/>the<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/>result+=aliasValue.right(l-p);<sp/></highlight><highlight class="comment">//<sp/>append<sp/>remainder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;string<sp/>after<sp/>replacement<sp/>of<sp/>markers:<sp/>&apos;%s&apos;\n&quot;,result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>the<sp/>result<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;\\{&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>substitute(result,</highlight><highlight class="stringliteral">&quot;\\}&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>expandAliasRec(substitute(result,</highlight><highlight class="stringliteral">&quot;\\,&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"></highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"></highlight></codeline>
<codeline lineno="7003"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>escapeCommas(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="7004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/>QGString<sp/>result;</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>s.data();</highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,pc=0;</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>pc!=</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;\\,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=c;</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/>pc=c;</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/>result+=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;escapeCommas:<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;\n&quot;,s.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.data();</highlight></codeline>
<codeline lineno="7023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"></highlight></codeline>
<codeline lineno="7025"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>expandAliasRec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>s)</highlight></codeline>
<codeline lineno="7026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>cmdPat(</highlight><highlight class="stringliteral">&quot;[\\\\@][a-z_A-Z][a-z_A-Z0-9]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/>QCString<sp/>value=s;</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0,l;</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=cmdPat.match(value,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/>result+=value.mid(p,i-p);</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>args<sp/>=<sp/>extractAliasArgs(value,i+l);</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasArgs<sp/>=<sp/>!args.isEmpty();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>directly<sp/>after<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argsLen<sp/>=<sp/>args.length();</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>cmd<sp/>=<sp/>value.mid(i+1,l-1);</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>cmdNoArgs<sp/>=<sp/>cmd;</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numArgs=0;</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasArgs)</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numArgs<sp/>=<sp/>countAliasArguments(args);</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>+=<sp/>QCString().sprintf(</highlight><highlight class="stringliteral">&quot;{%d}&quot;</highlight><highlight class="normal">,numArgs);<sp/><sp/></highlight><highlight class="comment">//<sp/>alias<sp/>name<sp/>+<sp/>{n}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*aliasText=Doxygen::aliasDict.find(cmd);</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numArgs&gt;1<sp/>&amp;&amp;<sp/>aliasText==0)<sp/></highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>there<sp/>is<sp/>no<sp/>command<sp/>with<sp/>numArgs<sp/>parameters,<sp/>but<sp/>there<sp/>is<sp/>a<sp/>command<sp/>with<sp/>1<sp/>parameter,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>also<sp/>accept<sp/>all<sp/>text<sp/>as<sp/>the<sp/>argument<sp/>of<sp/>that<sp/>command<sp/>(so<sp/>you<sp/>don&apos;t<sp/>have<sp/>to<sp/>escape<sp/>commas)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aliasText=Doxygen::aliasDict.find(cmdNoArgs+</highlight><highlight class="stringliteral">&quot;{1}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aliasText)</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmdNoArgs+</highlight><highlight class="stringliteral">&quot;{1}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>escapeCommas(args);<sp/></highlight><highlight class="comment">//<sp/>escape<sp/>,<sp/>so<sp/>that<sp/>everything<sp/>is<sp/>seen<sp/>as<sp/>one<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>command<sp/>s=&apos;%s&apos;<sp/>cmd=&apos;%s&apos;<sp/>numArgs=%d<sp/>args=&apos;%s&apos;<sp/>aliasText=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>s.data(),cmd.data(),numArgs,args.data(),aliasText?aliasText-&gt;data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aliasesProcessed.find(cmd)==0<sp/>&amp;&amp;<sp/>aliasText)<sp/></highlight><highlight class="comment">//<sp/>expand<sp/>the<sp/>alias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;is<sp/>an<sp/>alias!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aliasesProcessed.insert(cmd,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0x8);</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>val<sp/>=<sp/>*aliasText;</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasArgs)</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>replaceAliasArguments(val,args);</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;replace<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;<sp/>args=&apos;%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>aliasText-&gt;data(),val.data(),args.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=expandAliasRec(val);</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aliasesProcessed.remove(cmd);</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasArgs)<sp/>p+=argsLen+2;</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>command<sp/>is<sp/>not<sp/>an<sp/>alias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;not<sp/>an<sp/>alias!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=value.mid(i,l);</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/>result+=value.right(value.length()-p);</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"></highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;expandAliases<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;\n&quot;,s.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"></highlight></codeline>
<codeline lineno="7087"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countAliasArguments(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>argList)</highlight></codeline>
<codeline lineno="7088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=1;</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>argList.length();</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;l;i++)<sp/></highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argList.at(i)==</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(i==0<sp/>||<sp/>argList.at(i-1)!=</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">))<sp/>count++;</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="7097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"></highlight></codeline>
<codeline lineno="7099"><highlight class="normal">QCString<sp/>extractAliasArgs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;args,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="7100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bc=0;</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prevChar=0;</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.at(pos)==</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>alias<sp/>has<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=pos;i&lt;(int)args.length();i++)</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevChar!=</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.at(i)==</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>bc++;</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.at(i)==</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>bc--;</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevChar=args.at(i);</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevChar=0;</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"></highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bc==0)<sp/></highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;extractAliasArgs(&apos;%s&apos;)-&gt;&apos;%s&apos;\n&quot;,args.data(),args.mid(pos+1,i-pos-1).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args.mid(pos+1,i-pos-1);</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"></highlight></codeline>
<codeline lineno="7129"><highlight class="normal">QCString<sp/>resolveAliasCmd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>aliasCmd)</highlight></codeline>
<codeline lineno="7130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/>aliasesProcessed.clear();</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Expanding:<sp/>&apos;%s&apos;\n&quot;,aliasCmd.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>expandAliasRec(aliasCmd);</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Expanding<sp/>result:<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;\n&quot;,aliasCmd.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"></highlight></codeline>
<codeline lineno="7139"><highlight class="normal">QCString<sp/>expandAlias(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;aliasName,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;aliasValue)</highlight></codeline>
<codeline lineno="7140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/>aliasesProcessed.clear();</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>expanding<sp/>this<sp/>command<sp/>recursively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/>aliasesProcessed.insert(aliasName,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0x8);</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>embedded<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Expanding:<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;\n&quot;,aliasName.data(),aliasValue.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>expandAliasRec(aliasValue);</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Expanding<sp/>result:<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;\n&quot;,aliasName.data(),result.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"></highlight></codeline>
<codeline lineno="7152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeTypeConstraints(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d,<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al)</highlight></codeline>
<codeline lineno="7153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/>ol.startConstraintList(theTranslator-&gt;trTypeConstraints());<sp/></highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/>ArgumentListIterator<sp/>ali(*al);</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a;</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(a=ali.current());++ali)</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startConstraintParam();</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.parseText(a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endConstraintParam();</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startConstraintType();</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/>linkifyText(<ref refid="db/d2b/class_text_generator_o_l_impl" kindref="compound" tooltip="Implements TextGeneratorIntf for an OutputDocInterface stream.">TextGeneratorOLImpl</ref>(ol),d,0,0,a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endConstraintType();</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.startConstraintDocs();</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.generateDoc(d-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),d-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),d,0,a-&gt;<ref refid="d1/dee/struct_argument_1a5d6cd35aa392b1703acf14104b19c589" kindref="member">docs</ref>,TRUE,FALSE);</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.endConstraintDocs();</highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/>ol.endConstraintList();</highlight></codeline>
<codeline lineno="7171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"></highlight></codeline>
<codeline lineno="7173"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7174"><highlight class="normal"></highlight></codeline>
<codeline lineno="7175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stackTrace()</highlight></codeline>
<codeline lineno="7176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACINGSUPPORT</highlight></codeline>
<codeline lineno="7178"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*backtraceFrames[128];</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frameCount<sp/>=<sp/>backtrace(backtraceFrames,<sp/>128);</highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cmd[40960];</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>cmd;</highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/>p<sp/>+=<sp/>sprintf(p,</highlight><highlight class="stringliteral">&quot;/usr/bin/atos<sp/>-p<sp/>%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)getpid());</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>frameCount;<sp/>x++)<sp/></highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>sprintf(p,</highlight><highlight class="stringliteral">&quot;%p<sp/>&quot;</highlight><highlight class="normal">,<sp/>backtraceFrames[x]);</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;==========<sp/>STACKTRACE<sp/>START<sp/>==============\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FILE<sp/>*fp<sp/>=<sp/>popen(cmd,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resBuf[512];</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>fread(resBuf,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(resBuf),<sp/>fp))</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(resBuf,<sp/>1,<sp/>len,<sp/>stderr);</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/><sp/><sp/>pclose(fp);</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;============<sp/>STACKTRACE<sp/>END<sp/>==============\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//fprintf(stderr,&quot;%s\n&quot;,<sp/>frameStrings[x]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="7200"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"></highlight></codeline>
<codeline lineno="7202"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>transcodeCharacterBuffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,<ref refid="d5/d64/class_buf_str" kindref="compound" tooltip="Buffer used to store strings.">BufStr</ref><sp/>&amp;srcBuf,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inputEncoding,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outputEncoding)</highlight></codeline>
<codeline lineno="7204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputEncoding==0<sp/>||<sp/>outputEncoding==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstricmp(inputEncoding,outputEncoding)==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cd<sp/>=<sp/>portable_iconv_open(outputEncoding,inputEncoding);</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(-1))<sp/></highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>character<sp/>conversion:<sp/>&apos;%s&apos;-&gt;&apos;%s&apos;:<sp/>%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>the<sp/>INPUT_ENCODING<sp/>setting<sp/>in<sp/>the<sp/>config<sp/>file!\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputEncoding,outputEncoding,strerror(errno));</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmpBufSize=size*4+1;</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/><ref refid="d5/d64/class_buf_str" kindref="compound" tooltip="Buffer used to store strings.">BufStr</ref><sp/>tmpBuf(tmpBufSize);</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iLeft=size;</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oLeft=tmpBufSize;</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*srcPtr<sp/>=<sp/>srcBuf.data();</highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dstPtr<sp/>=<sp/>tmpBuf.data();</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/>uint<sp/>newSize=0;</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!portable_iconv(cd,<sp/>&amp;srcPtr,<sp/>&amp;iLeft,<sp/>&amp;dstPtr,<sp/>&amp;oLeft))</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/><sp/><sp/>newSize<sp/>=<sp/>tmpBufSize-(int)oLeft;</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/><sp/><sp/>srcBuf.shrink(newSize);</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/><sp/><sp/>strncpy(srcBuf.data(),tmpBuf.data(),newSize);</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;iconv:<sp/>input<sp/>size=%d<sp/>output<sp/>size=%d\n[%s]\n&quot;,size,newSize,srcBuf.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;%s:<sp/>failed<sp/>to<sp/>translate<sp/>characters<sp/>from<sp/>%s<sp/>to<sp/>%s:<sp/>check<sp/>INPUT_ENCODING\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileName,inputEncoding,outputEncoding);</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/>portable_iconv_close(cd);</highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newSize;</highlight></codeline>
<codeline lineno="7237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"></highlight></codeline>
<codeline lineno="7240" refid="d8/d3c/util_8h_1a8431777070a52ef9bfe41e6607f86e5a" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readInputFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName,<ref refid="d5/d64/class_buf_str" kindref="compound" tooltip="Buffer used to store strings.">BufStr</ref><sp/>&amp;inBuf)</highlight></codeline>
<codeline lineno="7241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>open<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size=0;</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//uint<sp/>oldPos<sp/>=<sp/>dest.curPos();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;.......oldPos=%d\n&quot;,oldPos);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7246"><highlight class="normal"></highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/>QFileInfo<sp/>fi(fileName);</highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi.exists())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"><sp/><sp/>QCString<sp/>filterName<sp/>=<sp/>getFileFilter(fileName,FALSE);</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterName.isEmpty())</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/>QFile<sp/>f(fileName);</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f.open(IO_ReadOnly))</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>open<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,fileName);</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/>size=fi.size();</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7260"><highlight class="normal"><sp/><sp/><sp/><sp/>inBuf.skip(size);</highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.readBlock(inBuf.data()</highlight><highlight class="comment">/*+oldPos*/</highlight><highlight class="normal">,size)!=size)</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;problems<sp/>while<sp/>reading<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,fileName);</highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7268"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7269"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>cmd=filterName+</highlight><highlight class="stringliteral">&quot;<sp/>\&quot;&quot;</highlight><highlight class="normal">+fileName+</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::ExtCmd,0,</highlight><highlight class="stringliteral">&quot;Executing<sp/>popen(`%s`)\n&quot;</highlight><highlight class="normal">,cmd.data());</highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*f=portable_popen(cmd,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>execute<sp/>filter<sp/>%s\n&quot;</highlight><highlight class="normal">,filterName.data());</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufSize=1024;</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[bufSize];</highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numRead;</highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((numRead=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)fread(buf,1,bufSize,f))&gt;0)</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Reading<sp/>%d<sp/>bytes\n&quot;,numRead);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inBuf.addArray(buf,numRead),size+=numRead;</highlight></codeline>
<codeline lineno="7284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"><sp/><sp/><sp/><sp/>portable_pclose(f);</highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/>inBuf.at(inBuf.curPos())<sp/>=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::FilterOutput,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Filter<sp/>output\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::FilterOutput,0,</highlight><highlight class="stringliteral">&quot;-------------\n%s\n-------------\n&quot;</highlight><highlight class="normal">,inBuf.data());</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"></highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start=0;</highlight></codeline>
<codeline lineno="7292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size&gt;=2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((inBuf.at(0)==-1<sp/>&amp;&amp;<sp/>inBuf.at(1)==-2)<sp/>||<sp/></highlight><highlight class="comment">//<sp/>Litte<sp/>endian<sp/>BOM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(inBuf.at(0)==-2<sp/>&amp;&amp;<sp/>inBuf.at(1)==-1)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>big<sp/>endian<sp/>BOM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>UCS-2<sp/>encoded<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7298"><highlight class="normal"><sp/><sp/><sp/><sp/>transcodeCharacterBuffer(fileName,inBuf,inBuf.curPos(),</highlight></codeline>
<codeline lineno="7299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;UCS-2&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size&gt;=3<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uchar)inBuf.at(0)==0xEF<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uchar)inBuf.at(1)==0xBB<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uchar)inBuf.at(2)==0xBF</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>UTF-8<sp/>encoded<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7306"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7307"><highlight class="normal"><sp/><sp/><sp/><sp/>inBuf.dropFromStart(3);<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>UTF-8<sp/>BOM:<sp/>no<sp/>translation<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>transcode<sp/>according<sp/>to<sp/>the<sp/>INPUT_ENCODING<sp/>setting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>character<sp/>transcoding<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/>transcodeCharacterBuffer(fileName,inBuf,inBuf.curPos(),</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;INPUT_ENCODING&quot;</highlight><highlight class="normal">),</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"></highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/>inBuf.addChar(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>prevent<sp/>problems<sp/>under<sp/>Windows<sp/>?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7317"><highlight class="normal"></highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>translate<sp/>CR&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/>size=inBuf.curPos()-start;</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSize=filterCRLF(inBuf.data()+start,size);</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;filter<sp/>char<sp/>at<sp/>%p<sp/>size=%d<sp/>newSize=%d\n&quot;,dest.data()+oldPos,size,newSize);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize!=size)<sp/></highlight><highlight class="comment">//<sp/>we<sp/>removed<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/><sp/>inBuf.shrink(newSize);<sp/></highlight><highlight class="comment">//<sp/>resize<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;.......resizing<sp/>from<sp/>%d<sp/>to<sp/>%d<sp/>result=[%s]\n&quot;,oldPos+size,oldPos+newSize,dest.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/>inBuf.at(inBuf.curPos())=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="7329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"></highlight></codeline>
<codeline lineno="7331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Replace<sp/>%word<sp/>by<sp/>word<sp/>in<sp/>title</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7332"><highlight class="normal">QCString<sp/>filterTitle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;title)</highlight></codeline>
<codeline lineno="7333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/>QCString<sp/>tf;</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;%[A-Z_a-z]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0,i,l;</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(title,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/><sp/><sp/>tf+=title.mid(p,i-p);</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/><sp/><sp/>tf+=title.mid(i+1,l-1);<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/>tf+=title.right(title.length()-p);</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tf;</highlight></codeline>
<codeline lineno="7345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7346"><highlight class="normal"></highlight></codeline>
<codeline lineno="7347"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>TRUE<sp/>if<sp/>the<sp/>name<sp/>of<sp/>the<sp/>file<sp/>represented<sp/>by<sp/>`fi&apos;<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>of<sp/>the<sp/>file<sp/>patterns<sp/>in<sp/>the<sp/>`patList&apos;<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7350"><highlight class="normal"></highlight></codeline>
<codeline lineno="7351"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>patternMatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QFileInfo<sp/>&amp;fi,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QStrList<sp/>*patList)</highlight></codeline>
<codeline lineno="7352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(patList)</highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/><sp/><sp/>QStrListIterator<sp/>it(*patList);</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>pattern;</highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it.toFirst();(pattern=it.current());++it)</highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pattern.isEmpty()<sp/>&amp;&amp;<sp/>!found)</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=pattern.find(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/>pattern=pattern.left(i);<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>of<sp/>the<sp/>extension<sp/>specific<sp/>filter<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7364"><highlight class="normal"></highlight></codeline>
<codeline lineno="7365"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__MACOSX__)<sp/>//<sp/>Windows<sp/>or<sp/>MacOSX</highlight></codeline>
<codeline lineno="7366"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRegExp<sp/>re(pattern,FALSE,TRUE);<sp/></highlight><highlight class="comment">//<sp/>case<sp/>insensitive<sp/>match<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7367"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>unix</highlight></codeline>
<codeline lineno="7368"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QRegExp<sp/>re(pattern,TRUE,TRUE);<sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>sensitive<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="7370"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>found<sp/>||<sp/>re.match(fi.fileName().data())!=-1<sp/>||<sp/></highlight></codeline>
<codeline lineno="7371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>re.match(fi.filePath().data())!=-1<sp/>||</highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>re.match(fi.absFilePath().data())!=-1;</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Matching<sp/>`%s&apos;<sp/>against<sp/>pattern<sp/>`%s&apos;<sp/>found=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fi-&gt;fileName().data(),pattern.data(),found);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="7379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7380"><highlight class="normal"></highlight></codeline>
<codeline lineno="7381"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/>//<sp/>move<sp/>to<sp/>HtmlGenerator::writeSummaryLink</highlight></codeline>
<codeline lineno="7382"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeSummaryLink(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*title,</highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;first,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="7384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;div<sp/>class=\&quot;summary\&quot;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/><sp/><sp/>first=FALSE;</highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&amp;#124;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&lt;a<sp/>href=\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(file);</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(Doxygen::htmlFileExtension);</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&lt;a<sp/>href=\&quot;#&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(label);</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;\&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(title);</highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1adeaf5f7b41eca22a3afbc415a8390767" kindref="member">writeString</ref>(</highlight><highlight class="stringliteral">&quot;&lt;/a&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="7410"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7411"><highlight class="normal">QCString<sp/>externalLinkTarget()</highlight></codeline>
<codeline lineno="7412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extLinksInWindow<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXT_LINKS_IN_WINDOW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extLinksInWindow)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;target=\&quot;_blank\&quot;<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"></highlight></codeline>
<codeline lineno="7417"><highlight class="normal">QCString<sp/>externalRef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;relPath,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;ref,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>href)</highlight></codeline>
<codeline lineno="7418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="7420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ref.isEmpty())</highlight></codeline>
<codeline lineno="7421"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7422"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*dest<sp/>=<sp/>Doxygen::tagDestinationDict[ref];</highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dest)</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>*dest;</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>result.length();</highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!relPath.isEmpty()<sp/>&amp;&amp;<sp/>l&gt;0<sp/>&amp;&amp;<sp/>result.at(0)==</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>relative<sp/>path<sp/>-&gt;<sp/>prepend<sp/>relPath.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.prepend(relPath);</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!href)<sp/>result.prepend(</highlight><highlight class="stringliteral">&quot;doxygen=\&quot;&quot;</highlight><highlight class="normal">+ref+</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l&gt;0<sp/>&amp;&amp;<sp/>result.at(l-1)!=</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>result+=</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!href)<sp/>result.append(</highlight><highlight class="stringliteral">&quot;\&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7437"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7438"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>relPath;</highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"></highlight></codeline>
<codeline lineno="7446" refid="d8/d3c/util_8h_1ab85eeb013280173f4ec086e10dd164ed" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeColoredImgData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<ref refid="da/d06/struct_colored_img_data_item" kindref="compound" tooltip="Data associated with a HSV colored image.">ColoredImgDataItem</ref><sp/>data[])</highlight></codeline>
<codeline lineno="7447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hue<sp/><sp/><sp/>=<sp/>Config_getInt(</highlight><highlight class="stringliteral">&quot;HTML_COLORSTYLE_HUE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sat<sp/><sp/><sp/>=<sp/>Config_getInt(</highlight><highlight class="stringliteral">&quot;HTML_COLORSTYLE_SAT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>Config_getInt(</highlight><highlight class="stringliteral">&quot;HTML_COLORSTYLE_GAMMA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(data-&gt;name)</highlight></codeline>
<codeline lineno="7452"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7453"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>fileName;</highlight></codeline>
<codeline lineno="7454"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName=(QCString)dir+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+data-&gt;name;</highlight></codeline>
<codeline lineno="7455"><highlight class="normal"><sp/><sp/><sp/><sp/>QFile<sp/>f(fileName);</highlight></codeline>
<codeline lineno="7456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.open(IO_WriteOnly))</highlight></codeline>
<codeline lineno="7457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/da6/class_colored_image" kindref="compound" tooltip="Class representing a bitmap image colored based on hue/sat/gamma settings.">ColoredImage</ref><sp/>img(data-&gt;width,data-&gt;height,data-&gt;content,data-&gt;alpha,</highlight></codeline>
<codeline lineno="7459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sat,hue,gamma);</highlight></codeline>
<codeline lineno="7460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>img.save(fileName);</highlight></codeline>
<codeline lineno="7461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7463"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Warning:<sp/>Cannot<sp/>open<sp/>file<sp/>%s<sp/>for<sp/>writing\n&quot;</highlight><highlight class="normal">,data-&gt;name);</highlight></codeline>
<codeline lineno="7465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7466"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;addImageFile(data-&gt;name);</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"><sp/><sp/><sp/><sp/>data++;</highlight></codeline>
<codeline lineno="7468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"></highlight></codeline>
<codeline lineno="7476" refid="d8/d3c/util_8h_1a6b67fcaeae3bead793c4c1ea68149424" refkind="member"><highlight class="normal">QCString<sp/>replaceColorMarkers(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="7477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7478"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="7479"><highlight class="normal"><sp/><sp/>QCString<sp/>s=str;</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;##[0-9A-Fa-f][0-9A-Fa-f]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hex[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789ABCDEF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hue<sp/><sp/><sp/>=<sp/>Config_getInt(</highlight><highlight class="stringliteral">&quot;HTML_COLORSTYLE_HUE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sat<sp/><sp/><sp/>=<sp/>Config_getInt(</highlight><highlight class="stringliteral">&quot;HTML_COLORSTYLE_SAT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>Config_getInt(</highlight><highlight class="stringliteral">&quot;HTML_COLORSTYLE_GAMMA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,l,sl=s.length(),p=0;</highlight></codeline>
<codeline lineno="7487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(s,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/><sp/><sp/>result+=s.mid(p,i-p);</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>lumStr<sp/>=<sp/>s.mid(i+2,l-2);</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HEXTONUM(x)<sp/>(((x)&gt;=&apos;0&apos;<sp/>&amp;&amp;<sp/>(x)&lt;=&apos;9&apos;)<sp/>?<sp/>((x)-&apos;0&apos;)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="7492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)&gt;=&apos;a&apos;<sp/>&amp;&amp;<sp/>(x)&lt;=&apos;f&apos;)<sp/>?<sp/>((x)-&apos;a&apos;+10)<sp/>:<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="7493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)&gt;=&apos;A&apos;<sp/>&amp;&amp;<sp/>(x)&lt;=&apos;F&apos;)<sp/>?<sp/>((x)-&apos;A&apos;+10)<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="7494"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="7495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,g,b;</highlight></codeline>
<codeline lineno="7496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>red,green,blue;</highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level<sp/>=<sp/>HEXTONUM(lumStr[0])*16+HEXTONUM(lumStr[1]);</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/><sp/><sp/>ColoredImage::hsl2rgb(hue/360.0,sat/255.0,</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow(level/255.0,gamma/100.0),&amp;r,&amp;g,&amp;b);</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/><sp/><sp/>red<sp/><sp/><sp/>=<sp/>(int)(r*255.0);</highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/>green<sp/>=<sp/>(int)(g*255.0);</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/>blue<sp/><sp/>=<sp/>(int)(b*255.0);</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>colStr[8];</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/><sp/><sp/>colStr[0]=</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/><sp/><sp/>colStr[1]=hex[red&gt;&gt;4];</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/><sp/><sp/>colStr[2]=hex[red&amp;0xf];</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"><sp/><sp/><sp/><sp/>colStr[3]=hex[green&gt;&gt;4];</highlight></codeline>
<codeline lineno="7508"><highlight class="normal"><sp/><sp/><sp/><sp/>colStr[4]=hex[green&amp;0xf];</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/><sp/><sp/>colStr[5]=hex[blue&gt;&gt;4];</highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/><sp/><sp/>colStr[6]=hex[blue&amp;0xf];</highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/><sp/><sp/>colStr[7]=0;</highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;replacing<sp/>%s-&gt;%s<sp/>(level=%d)\n&quot;,lumStr.data(),colStr,level);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7513"><highlight class="normal"><sp/><sp/><sp/><sp/>result+=colStr;</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/>result+=s.right(sl-p);</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"></highlight></codeline>
<codeline lineno="7523" refid="d8/d3c/util_8h_1ad35d4038b3882fdd09976d28f4a043bf" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copyFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;src,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;dest)</highlight></codeline>
<codeline lineno="7524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"><sp/><sp/>QFile<sp/>sf(src);</highlight></codeline>
<codeline lineno="7526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf.open(IO_ReadOnly))</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7528"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(src);</highlight></codeline>
<codeline lineno="7529"><highlight class="normal"><sp/><sp/><sp/><sp/>QFile<sp/>df(dest);</highlight></codeline>
<codeline lineno="7530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df.open(IO_WriteOnly))</highlight></codeline>
<codeline lineno="7531"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[fi.size()];</highlight></codeline>
<codeline lineno="7533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sf.readBlock(buffer,fi.size());</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>df.writeBlock(buffer,fi.size());</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>df.flush();</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>buffer;</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>write<sp/>to<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,dest.data());</highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>open<sp/>user<sp/>specified<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,src.data());</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="7550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"></highlight></codeline>
<codeline lineno="7555" refid="d8/d3c/util_8h_1ae46139270fc05ae4a1e0ff2c5bc69e3b" refkind="member"><highlight class="normal">QCString<sp/>extractBlock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>text,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>marker)</highlight></codeline>
<codeline lineno="7556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7557"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="7558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0,i;</highlight></codeline>
<codeline lineno="7559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="7560"><highlight class="normal"></highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>character<sp/>positions<sp/>of<sp/>the<sp/>markers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m1<sp/>=<sp/>text.find(marker);</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1==-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m2<sp/>=<sp/>text.find(marker,m1+marker.length());</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m2==-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"></highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>start<sp/>and<sp/>end<sp/>line<sp/>positions<sp/>for<sp/>the<sp/>markers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l1=-1,l2=-1;</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>(i=text.find(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,p))!=-1)</highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>(p&lt;=m1<sp/>&amp;&amp;<sp/>m1&lt;i);<sp/></highlight><highlight class="comment">//<sp/>found<sp/>the<sp/>line<sp/>with<sp/>the<sp/>start<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+1;</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"><sp/><sp/>l1=p;</highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=text.find(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,p))!=-1)</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p&lt;=m2<sp/>&amp;&amp;<sp/>m2&lt;i)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>the<sp/>line<sp/>with<sp/>the<sp/>end<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2=p;</highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p=i+1;</highlight></codeline>
<codeline lineno="7585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;text=[%s]\n&quot;,text.mid(l1,l2-l1).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text.mid(l1,l2-l1);</highlight></codeline>
<codeline lineno="7589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"></highlight></codeline>
<codeline lineno="7592" refid="d8/d3c/util_8h_1a969690ca9b1155540d43631f499b3880" refkind="member"><highlight class="normal">QCString<sp/>langToString(<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang)</highlight></codeline>
<codeline lineno="7593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(lang)</highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_Unknown:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_IDL:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;IDL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_Java:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Java&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_CSharp:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C#&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_D:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_PHP:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;PHP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_ObjC:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Objective-C&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_Cpp:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_JS:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Javascript&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_Python:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Python&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_Fortran:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Fortran&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_VHDL:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;VHDL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_XML:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;XML&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_Tcl:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Tcl&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_Markdown:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Markdown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7614"><highlight class="normal"></highlight></codeline>
<codeline lineno="7616" refid="d8/d3c/util_8h_1ac4c34c02b8869dca71de6f4037736dc7" refkind="member"><highlight class="normal">QCString<sp/>getLanguageSpecificSeparator(<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>classScope)</highlight></codeline>
<codeline lineno="7617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang==SrcLangExt_Java<sp/>||<sp/>lang==SrcLangExt_CSharp<sp/>||<sp/>lang==SrcLangExt_VHDL<sp/>||<sp/>lang==SrcLangExt_Python)</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang==SrcLangExt_PHP<sp/>&amp;&amp;<sp/>!classScope)</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"></highlight></codeline>
<codeline lineno="7635" refid="d8/d3c/util_8h_1a3a775021310e25718452bfe250b2f999" refkind="member"><highlight class="normal">QCString<sp/>correctURL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;url,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;relPath)</highlight></codeline>
<codeline lineno="7636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/>QCString<sp/>result<sp/>=<sp/>url;</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!relPath.isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>url.left(5)!=</highlight><highlight class="stringliteral">&quot;http:&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>url.left(6)!=</highlight><highlight class="stringliteral">&quot;https:&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>url.left(4)!=</highlight><highlight class="stringliteral">&quot;ftp:&quot;</highlight><highlight class="normal"><sp/><sp/>&amp;&amp;<sp/>url.left(5)!=</highlight><highlight class="stringliteral">&quot;file:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/><sp/><sp/>result.prepend(relPath);</highlight></codeline>
<codeline lineno="7643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"></highlight></codeline>
<codeline lineno="7647"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7648"><highlight class="normal"></highlight></codeline>
<codeline lineno="7649"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>protectionLevelVisible(<ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>prot)</highlight></codeline>
<codeline lineno="7650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractPrivate<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_PRIVATE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractPackage<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_PACKAGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7653"><highlight class="normal"></highlight></codeline>
<codeline lineno="7654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(prot!=Private<sp/>&amp;&amp;<sp/>prot!=Package)<sp/><sp/>||<sp/></highlight></codeline>
<codeline lineno="7655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(prot==Private<sp/>&amp;&amp;<sp/>extractPrivate)<sp/>||<sp/></highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(prot==Package<sp/>&amp;&amp;<sp/>extractPackage);</highlight></codeline>
<codeline lineno="7657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7658"><highlight class="normal"></highlight></codeline>
<codeline lineno="7659"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7660"><highlight class="normal"></highlight></codeline>
<codeline lineno="7661"><highlight class="normal">QCString<sp/>stripIndentation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="7662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>string<sp/>-&gt;<sp/>we&apos;re<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7664"><highlight class="normal"></highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;stripIndentation:\n%s\n------\n&quot;,s.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>minimum<sp/>indentation<sp/>over<sp/>all<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p=s.data();</highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent=0;</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minIndent=1000000;<sp/></highlight><highlight class="comment">//<sp/>&quot;infinite&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>searchIndent=TRUE;</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tabSize=Config_getInt(</highlight><highlight class="stringliteral">&quot;TAB_SIZE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))</highlight></codeline>
<codeline lineno="7674"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(c==</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">)<sp/>indent+=tabSize<sp/>-<sp/>(indent%tabSize);</highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>indent=0,searchIndent=TRUE;</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/><sp/>indent++;</highlight></codeline>
<codeline lineno="7678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(searchIndent)<sp/></highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>searchIndent=FALSE;</highlight></codeline>
<codeline lineno="7681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indent&lt;minIndent)<sp/>minIndent=indent;</highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"></highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>indent<sp/>to<sp/>remove<sp/>-&gt;<sp/>we&apos;re<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minIndent==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"></highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>minimum<sp/>indentation<sp/>for<sp/>each<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/>QGString<sp/>result;</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/>p=s.data();</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"><sp/><sp/>indent=0;</highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c=*p++))</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>start<sp/>of<sp/>new<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indent=0;</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=c;</highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indent&lt;minIndent)<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>until<sp/>we<sp/>reach<sp/>minIndent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7700"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newIndent<sp/>=<sp/>indent+tabSize-(indent%tabSize);</highlight></codeline>
<codeline lineno="7704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=newIndent;</highlight></codeline>
<codeline lineno="7705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&gt;minIndent)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>tab<sp/>crosses<sp/>the<sp/>minIndent<sp/>boundary<sp/>fill<sp/>the<sp/>rest<sp/>with<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="7709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent=newIndent;</highlight></codeline>
<codeline lineno="7711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent++;</highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>anything<sp/>until<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7718"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result+=c;</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7722"><highlight class="normal"></highlight></codeline>
<codeline lineno="7723"><highlight class="normal"><sp/><sp/>result+=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.data();</highlight></codeline>
<codeline lineno="7725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"></highlight></codeline>
<codeline lineno="7727"><highlight class="normal"></highlight></codeline>
<codeline lineno="7728"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fileVisibleInIndex(<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;genSourceFile)</highlight></codeline>
<codeline lineno="7729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allExternals<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;ALLEXTERNALS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDocFile<sp/>=<sp/>fd-&gt;isDocumentationFile();</highlight></codeline>
<codeline lineno="7732"><highlight class="normal"><sp/><sp/>genSourceFile<sp/>=<sp/>!isDocFile<sp/>&amp;&amp;<sp/>fd-&gt;generateSourceFile();</highlight></codeline>
<codeline lineno="7733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>((allExternals<sp/>&amp;&amp;<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1af677cee8c349fa10532b0aa5c09df396" kindref="member">isLinkable</ref>())<sp/>||</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a19db473ad3a95f44c28b0ba2378fdac2" kindref="member">isLinkableInProject</ref>()</highlight></codeline>
<codeline lineno="7735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!isDocFile</highlight></codeline>
<codeline lineno="7737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="7738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7739"><highlight class="normal"></highlight></codeline>
<codeline lineno="7740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDocCrossReference(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*src,<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*dst)</highlight></codeline>
<codeline lineno="7741"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>referencedByRelation<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;REFERENCED_BY_RELATION&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>referencesRelation<sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;REFERENCES_RELATION&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>callerGraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CALLER_GRAPH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>callGraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CALL_GRAPH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7746"><highlight class="normal"></highlight></codeline>
<codeline lineno="7747"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;--&gt;<sp/>addDocCrossReference<sp/>src=%s,dst=%s\n&quot;,src-&gt;name().data(),dst-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst-&gt;isTypedef()<sp/>||<sp/>dst-&gt;isEnumerate())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>add<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((referencedByRelation<sp/>||<sp/>callerGraph<sp/>||<sp/>dst-&gt;hasCallerGraph())<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src-&gt;showInCallGraph()</highlight></codeline>
<codeline lineno="7751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7752"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7753"><highlight class="normal"><sp/><sp/><sp/><sp/>dst-&gt;addSourceReferencedBy(src);</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mdDef<sp/>=<sp/>dst-&gt;memberDefinition();</highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdDef)</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdDef-&gt;addSourceReferencedBy(src);</highlight></codeline>
<codeline lineno="7758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mdDecl<sp/>=<sp/>dst-&gt;memberDeclaration();</highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdDecl)</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdDecl-&gt;addSourceReferencedBy(src);</highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((referencesRelation<sp/>||<sp/>callGraph<sp/>||<sp/>src-&gt;hasCallGraph())<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src-&gt;showInCallGraph()</highlight></codeline>
<codeline lineno="7767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7769"><highlight class="normal"><sp/><sp/><sp/><sp/>src-&gt;addSourceReferences(dst);</highlight></codeline>
<codeline lineno="7770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mdDef<sp/>=<sp/>src-&gt;memberDefinition();</highlight></codeline>
<codeline lineno="7771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdDef)</highlight></codeline>
<codeline lineno="7772"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdDef-&gt;addSourceReferences(dst);</highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mdDecl<sp/>=<sp/>src-&gt;memberDeclaration();</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdDecl)</highlight></codeline>
<codeline lineno="7777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mdDecl-&gt;addSourceReferences(dst);</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7782"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/util.cpp"/>
  </compounddef>
</doxygen>

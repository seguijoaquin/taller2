<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="dc/d98/doxygen_8cpp" kind="file">
    <compoundname>doxygen.cpp</compoundname>
    <includes local="no">locale.h</includes>
    <includes local="no">qfileinfo.h</includes>
    <includes local="no">qfile.h</includes>
    <includes local="no">qdir.h</includes>
    <includes local="no">qdict.h</includes>
    <includes local="no">qregexp.h</includes>
    <includes local="no">qstrlist.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">qtextcodec.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">qptrdict.h</includes>
    <includes local="no">qtextstream.h</includes>
    <includes refid="df/dfc/version_8h" local="yes">version.h</includes>
    <includes refid="d1/da1/doxygen_8h" local="yes">doxygen.h</includes>
    <includes refid="db/d62/scanner_8h" local="yes">scanner.h</includes>
    <includes refid="d1/dc6/entry_8h" local="yes">entry.h</includes>
    <includes refid="d1/db5/index_8h" local="yes">index.h</includes>
    <includes refid="dc/d7a/logos_8h" local="yes">logos.h</includes>
    <includes refid="d2/d0d/message_8h" local="yes">message.h</includes>
    <includes refid="db/d16/config_8h" local="yes">config.h</includes>
    <includes refid="d8/d3c/util_8h" local="yes">util.h</includes>
    <includes refid="d3/dbd/pre_8h" local="yes">pre.h</includes>
    <includes refid="d5/d61/tagreader_8h" local="yes">tagreader.h</includes>
    <includes refid="d6/d4a/dot_8h" local="yes">dot.h</includes>
    <includes refid="dc/d66/msc_8h" local="yes">msc.h</includes>
    <includes refid="de/d9c/docparser_8h" local="yes">docparser.h</includes>
    <includes refid="d6/d15/dirdef_8h" local="yes">dirdef.h</includes>
    <includes refid="d2/db9/outputlist_8h" local="yes">outputlist.h</includes>
    <includes refid="d2/d4b/declinfo_8h" local="yes">declinfo.h</includes>
    <includes refid="d8/d56/htmlgen_8h" local="yes">htmlgen.h</includes>
    <includes refid="d6/d9c/latexgen_8h" local="yes">latexgen.h</includes>
    <includes refid="da/dc0/mangen_8h" local="yes">mangen.h</includes>
    <includes refid="d8/dce/language_8h" local="yes">language.h</includes>
    <includes refid="db/d16/debug_8h" local="yes">debug.h</includes>
    <includes refid="d8/dc3/htmlhelp_8h" local="yes">htmlhelp.h</includes>
    <includes refid="dc/d20/qhp_8h" local="yes">qhp.h</includes>
    <includes refid="d2/d4a/ftvhelp_8h" local="yes">ftvhelp.h</includes>
    <includes refid="d8/d65/defargs_8h" local="yes">defargs.h</includes>
    <includes refid="d4/daa/rtfgen_8h" local="yes">rtfgen.h</includes>
    <includes refid="d1/d0c/sqlite3gen_8h" local="yes">sqlite3gen.h</includes>
    <includes refid="d9/d67/xmlgen_8h" local="yes">xmlgen.h</includes>
    <includes refid="de/dea/docbookgen_8h" local="yes">docbookgen.h</includes>
    <includes refid="d2/d59/defgen_8h" local="yes">defgen.h</includes>
    <includes refid="df/d82/perlmodgen_8h" local="yes">perlmodgen.h</includes>
    <includes refid="d1/d02/reflist_8h" local="yes">reflist.h</includes>
    <includes refid="dd/d66/pagedef_8h" local="yes">pagedef.h</includes>
    <includes refid="d4/de5/bufstr_8h" local="yes">bufstr.h</includes>
    <includes refid="de/d9a/commentcnv_8h" local="yes">commentcnv.h</includes>
    <includes refid="d3/d42/cmdmapper_8h" local="yes">cmdmapper.h</includes>
    <includes refid="de/d07/searchindex_8h" local="yes">searchindex.h</includes>
    <includes refid="da/d55/parserintf_8h" local="yes">parserintf.h</includes>
    <includes refid="d7/d85/htags_8h" local="yes">htags.h</includes>
    <includes refid="d8/d4b/pyscanner_8h" local="yes">pyscanner.h</includes>
    <includes refid="d9/d7b/fortranscanner_8h" local="yes">fortranscanner.h</includes>
    <includes refid="df/df5/dbusxmlscanner_8h" local="yes">dbusxmlscanner.h</includes>
    <includes refid="d3/da8/tclscanner_8h" local="yes">tclscanner.h</includes>
    <includes refid="dd/dd8/code_8h" local="yes">code.h</includes>
    <includes refid="db/db6/objcache_8h" local="yes">objcache.h</includes>
    <includes refid="d5/d3f/store_8h" local="yes">store.h</includes>
    <includes refid="d9/de0/marshal_8h" local="yes">marshal.h</includes>
    <includes refid="d2/de2/portable_8h" local="yes">portable.h</includes>
    <includes refid="d8/d75/vhdlscanner_8h" local="yes">vhdlscanner.h</includes>
    <includes refid="dd/dec/vhdldocgen_8h" local="yes">vhdldocgen.h</includes>
    <includes refid="db/d9e/eclipsehelp_8h" local="yes">eclipsehelp.h</includes>
    <includes refid="d7/d69/cite_8h" local="yes">cite.h</includes>
    <includes refid="dd/da1/filestorage_8h" local="yes">filestorage.h</includes>
    <includes refid="d2/d0c/markdown_8h" local="yes">markdown.h</includes>
    <includes refid="df/d9b/arguments_8h" local="yes">arguments.h</includes>
    <includes refid="dd/d78/memberlist_8h" local="yes">memberlist.h</includes>
    <includes refid="db/d51/layout_8h" local="yes">layout.h</includes>
    <includes refid="d1/de6/groupdef_8h" local="yes">groupdef.h</includes>
    <includes refid="d2/df8/classlist_8h" local="yes">classlist.h</includes>
    <includes refid="d7/d97/namespacedef_8h" local="yes">namespacedef.h</includes>
    <includes refid="dc/dd6/filename_8h" local="yes">filename.h</includes>
    <includes refid="d7/dfc/membername_8h" local="yes">membername.h</includes>
    <includes refid="d9/d11/membergroup_8h" local="yes">membergroup.h</includes>
    <includes refid="d1/db2/docsets_8h" local="yes">docsets.h</includes>
    <includes refid="d3/d9a/formula_8h" local="yes">formula.h</includes>
    <includes refid="de/d60/settings_8h" local="yes">settings.h</includes>
    <includes local="no">signal.h</includes>
    <incdepgraph>
      <node id="1585">
        <label>sys/stat.h</label>
      </node>
      <node id="1604">
        <label>qcstring.h</label>
      </node>
      <node id="1581">
        <label>qregexp.h</label>
      </node>
      <node id="1599">
        <label>qgstring.h</label>
      </node>
      <node id="1619">
        <label>pre.h</label>
        <link refid="d3/dbd/pre_8h_source"/>
      </node>
      <node id="1650">
        <label>docbookgen.h</label>
        <link refid="de/dea/docbookgen_8h_source"/>
      </node>
      <node id="1578">
        <label>qfile.h</label>
      </node>
      <node id="1631">
        <label>outputgen.h</label>
        <link refid="df/d06/outputgen_8h_source"/>
        <childnode refid="1632" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1633" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
      </node>
      <node id="1672">
        <label>assert.h</label>
      </node>
      <node id="1632">
        <label>qstack.h</label>
      </node>
      <node id="1627">
        <label>docparser.h</label>
        <link refid="de/d9c/docparser_8h_source"/>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
        <childnode refid="1629" relation="include">
        </childnode>
      </node>
      <node id="1593">
        <label>qdatetime.h</label>
      </node>
      <node id="1575">
        <label>src/doxygen.cpp</label>
        <link refid="doxygen.cpp"/>
        <childnode refid="1576" relation="include">
        </childnode>
        <childnode refid="1577" relation="include">
        </childnode>
        <childnode refid="1578" relation="include">
        </childnode>
        <childnode refid="1579" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1581" relation="include">
        </childnode>
        <childnode refid="1582" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1584" relation="include">
        </childnode>
        <childnode refid="1585" relation="include">
        </childnode>
        <childnode refid="1586" relation="include">
        </childnode>
        <childnode refid="1587" relation="include">
        </childnode>
        <childnode refid="1588" relation="include">
        </childnode>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1590" relation="include">
        </childnode>
        <childnode refid="1591" relation="include">
        </childnode>
        <childnode refid="1592" relation="include">
        </childnode>
        <childnode refid="1610" relation="include">
        </childnode>
        <childnode refid="1612" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1614" relation="include">
        </childnode>
        <childnode refid="1615" relation="include">
        </childnode>
        <childnode refid="1616" relation="include">
        </childnode>
        <childnode refid="1617" relation="include">
        </childnode>
        <childnode refid="1619" relation="include">
        </childnode>
        <childnode refid="1620" relation="include">
        </childnode>
        <childnode refid="1621" relation="include">
        </childnode>
        <childnode refid="1626" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1630" relation="include">
        </childnode>
        <childnode refid="1634" relation="include">
        </childnode>
        <childnode refid="1635" relation="include">
        </childnode>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1637" relation="include">
        </childnode>
        <childnode refid="1638" relation="include">
        </childnode>
        <childnode refid="1641" relation="include">
        </childnode>
        <childnode refid="1642" relation="include">
        </childnode>
        <childnode refid="1643" relation="include">
        </childnode>
        <childnode refid="1645" relation="include">
        </childnode>
        <childnode refid="1646" relation="include">
        </childnode>
        <childnode refid="1647" relation="include">
        </childnode>
        <childnode refid="1648" relation="include">
        </childnode>
        <childnode refid="1649" relation="include">
        </childnode>
        <childnode refid="1650" relation="include">
        </childnode>
        <childnode refid="1651" relation="include">
        </childnode>
        <childnode refid="1652" relation="include">
        </childnode>
        <childnode refid="1653" relation="include">
        </childnode>
        <childnode refid="1654" relation="include">
        </childnode>
        <childnode refid="1655" relation="include">
        </childnode>
        <childnode refid="1657" relation="include">
        </childnode>
        <childnode refid="1658" relation="include">
        </childnode>
        <childnode refid="1659" relation="include">
        </childnode>
        <childnode refid="1611" relation="include">
        </childnode>
        <childnode refid="1661" relation="include">
        </childnode>
        <childnode refid="1662" relation="include">
        </childnode>
        <childnode refid="1663" relation="include">
        </childnode>
        <childnode refid="1664" relation="include">
        </childnode>
        <childnode refid="1665" relation="include">
        </childnode>
        <childnode refid="1666" relation="include">
        </childnode>
        <childnode refid="1667" relation="include">
        </childnode>
        <childnode refid="1668" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1669" relation="include">
        </childnode>
        <childnode refid="1671" relation="include">
        </childnode>
        <childnode refid="1674" relation="include">
        </childnode>
        <childnode refid="1677" relation="include">
        </childnode>
        <childnode refid="1678" relation="include">
        </childnode>
        <childnode refid="1679" relation="include">
        </childnode>
        <childnode refid="1680" relation="include">
        </childnode>
        <childnode refid="1676" relation="include">
        </childnode>
        <childnode refid="1607" relation="include">
        </childnode>
        <childnode refid="1675" relation="include">
        </childnode>
        <childnode refid="1681" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1684" relation="include">
        </childnode>
        <childnode refid="1686" relation="include">
        </childnode>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1687" relation="include">
        </childnode>
        <childnode refid="1688" relation="include">
        </childnode>
        <childnode refid="1689" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
      </node>
      <node id="1582">
        <label>qstrlist.h</label>
      </node>
      <node id="1651">
        <label>defgen.h</label>
        <link refid="d2/d59/defgen_8h_source"/>
      </node>
      <node id="1656">
        <label>qglobal.h</label>
      </node>
      <node id="1688">
        <label>formula.h</label>
        <link refid="d3/d9a/formula_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
      </node>
      <node id="1682">
        <label>classlist.h</label>
        <link refid="d2/df8/classlist_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1640" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1662">
        <label>pyscanner.h</label>
        <link refid="d8/d4b/pyscanner_8h_source"/>
        <childnode refid="1611" relation="include">
        </childnode>
      </node>
      <node id="1598">
        <label>qstring.h</label>
      </node>
      <node id="1630">
        <label>outputlist.h</label>
        <link refid="d2/db9/outputlist_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1631" relation="include">
        </childnode>
      </node>
      <node id="1584">
        <label>stdlib.h</label>
      </node>
      <node id="1591">
        <label>version.h</label>
        <link refid="df/dfc/version_8h_source"/>
      </node>
      <node id="1628">
        <label>docvisitor.h</label>
        <link refid="d2/d3c/docvisitor_8h_source"/>
      </node>
      <node id="1610">
        <label>scanner.h</label>
        <link refid="db/d62/scanner_8h_source"/>
        <childnode refid="1611" relation="include">
        </childnode>
      </node>
      <node id="1602">
        <label>membergroup.h</label>
        <link refid="d9/d11/membergroup_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
      </node>
      <node id="1671">
        <label>vhdlscanner.h</label>
        <link refid="d8/d75/vhdlscanner_8h_source"/>
        <childnode refid="1611" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1584" relation="include">
        </childnode>
        <childnode refid="1672" relation="include">
        </childnode>
        <childnode refid="1618" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1587" relation="include">
        </childnode>
        <childnode refid="1578" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1674" relation="include">
        </childnode>
        <childnode refid="1612" relation="include">
        </childnode>
      </node>
      <node id="1588">
        <label>errno.h</label>
      </node>
      <node id="1655">
        <label>bufstr.h</label>
        <link refid="d4/de5/bufstr_8h_source"/>
        <childnode refid="1656" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1584" relation="include">
        </childnode>
      </node>
      <node id="1600">
        <label>sortdict.h</label>
        <link refid="d9/d21/sortdict_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1595" relation="include">
        </childnode>
      </node>
      <node id="1607">
        <label>memberlist.h</label>
        <link refid="dd/d78/memberlist_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
      </node>
      <node id="1589">
        <label>qptrdict.h</label>
      </node>
      <node id="1638">
        <label>language.h</label>
        <link refid="d8/dce/language_8h_source"/>
        <childnode refid="1639" relation="include">
        </childnode>
      </node>
      <node id="1663">
        <label>fortranscanner.h</label>
        <link refid="d9/d7b/fortranscanner_8h_source"/>
        <childnode refid="1611" relation="include">
        </childnode>
      </node>
      <node id="1612">
        <label>entry.h</label>
        <link refid="d1/dc6/entry_8h_source"/>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
      </node>
      <node id="1657">
        <label>commentcnv.h</label>
        <link refid="de/d9a/commentcnv_8h_source"/>
      </node>
      <node id="1679">
        <label>filestorage.h</label>
        <link refid="dd/da1/filestorage_8h_source"/>
        <childnode refid="1578" relation="include">
        </childnode>
        <childnode refid="1672" relation="include">
        </childnode>
        <childnode refid="1668" relation="include">
        </childnode>
      </node>
      <node id="1665">
        <label>tclscanner.h</label>
        <link refid="d3/da8/tclscanner_8h_source"/>
        <childnode refid="1611" relation="include">
        </childnode>
      </node>
      <node id="1622">
        <label>qwaitcondition.h</label>
      </node>
      <node id="1626">
        <label>msc.h</label>
        <link refid="dc/d66/msc_8h_source"/>
      </node>
      <node id="1621">
        <label>dot.h</label>
        <link refid="d6/d4a/dot_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1622" relation="include">
        </childnode>
        <childnode refid="1623" relation="include">
        </childnode>
        <childnode refid="1624" relation="include">
        </childnode>
        <childnode refid="1625" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1579">
        <label>qdir.h</label>
      </node>
      <node id="1611">
        <label>parserintf.h</label>
        <link refid="da/d55/parserintf_8h_source"/>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1582" relation="include">
        </childnode>
      </node>
      <node id="1661">
        <label>htags.h</label>
        <link refid="d7/d85/htags_8h_source"/>
      </node>
      <node id="1684">
        <label>filename.h</label>
        <link refid="dc/dd6/filename_8h_source"/>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1685" relation="include">
        </childnode>
      </node>
      <node id="1594">
        <label>qcache.h</label>
      </node>
      <node id="1640">
        <label>classdef.h</label>
        <link refid="d1/da6/classdef_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
      </node>
      <node id="1614">
        <label>logos.h</label>
        <link refid="dc/d7a/logos_8h_source"/>
      </node>
      <node id="1636">
        <label>latexgen.h</label>
        <link refid="d6/d9c/latexgen_8h_source"/>
        <childnode refid="1631" relation="include">
        </childnode>
      </node>
      <node id="1660">
        <label>qvector.h</label>
      </node>
      <node id="1615">
        <label>message.h</label>
        <link refid="d2/d0d/message_8h_source"/>
        <childnode refid="1583" relation="include">
        </childnode>
      </node>
      <node id="1617">
        <label>util.h</label>
        <link refid="d8/d3c/util_8h"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1618" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
      </node>
      <node id="1595">
        <label>qintdict.h</label>
      </node>
      <node id="1597">
        <label>qiodevice.h</label>
      </node>
      <node id="1687">
        <label>docsets.h</label>
        <link refid="d1/db2/docsets_8h_source"/>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
      </node>
      <node id="1616">
        <label>config.h</label>
        <link refid="db/d16/config_8h_source"/>
        <childnode refid="1582" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
      </node>
      <node id="1609">
        <label>sys/types.h</label>
      </node>
      <node id="1624">
        <label>qqueue.h</label>
      </node>
      <node id="1654">
        <label>pagedef.h</label>
        <link refid="dd/d66/pagedef_8h_source"/>
        <childnode refid="1606" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1677">
        <label>eclipsehelp.h</label>
        <link refid="db/d9e/eclipsehelp_8h_source"/>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
      </node>
      <node id="1603">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="1604" relation="include">
        </childnode>
      </node>
      <node id="1634">
        <label>declinfo.h</label>
        <link refid="d2/d4b/declinfo_8h_source"/>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
      </node>
      <node id="1587">
        <label>unistd.h</label>
      </node>
      <node id="1635">
        <label>htmlgen.h</label>
        <link refid="d8/d56/htmlgen_8h_source"/>
        <childnode refid="1631" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
      </node>
      <node id="1690">
        <label>signal.h</label>
      </node>
      <node id="1659">
        <label>searchindex.h</label>
        <link refid="de/d07/searchindex_8h_source"/>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1660" relation="include">
        </childnode>
      </node>
      <node id="1601">
        <label>qlist.h</label>
      </node>
      <node id="1596">
        <label>ftextstream.h</label>
        <link refid="df/d83/ftextstream_8h_source"/>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1597" relation="include">
        </childnode>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
      </node>
      <node id="1652">
        <label>perlmodgen.h</label>
        <link refid="df/d82/perlmodgen_8h_source"/>
      </node>
      <node id="1680">
        <label>markdown.h</label>
        <link refid="d2/d0c/markdown_8h_source"/>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1611" relation="include">
        </childnode>
      </node>
      <node id="1649">
        <label>xmlgen.h</label>
        <link refid="d9/d67/xmlgen_8h_source"/>
      </node>
      <node id="1643">
        <label>qhp.h</label>
        <link refid="dc/d20/qhp_8h_source"/>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1644" relation="include">
        </childnode>
      </node>
      <node id="1590">
        <label>qtextstream.h</label>
      </node>
      <node id="1644">
        <label>qhpxmlwriter.h</label>
        <link refid="d8/df8/qhpxmlwriter_8h_source"/>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
      </node>
      <node id="1648">
        <label>sqlite3gen.h</label>
        <link refid="d1/d0c/sqlite3gen_8h_source"/>
      </node>
      <node id="1678">
        <label>cite.h</label>
        <link refid="d7/d69/cite_8h_source"/>
        <childnode refid="1580" relation="include">
        </childnode>
      </node>
      <node id="1670">
        <label>marshal.h</label>
        <link refid="d9/de0/marshal_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1578" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1668" relation="include">
        </childnode>
      </node>
      <node id="1592">
        <label>doxygen.h</label>
        <link refid="d1/da1/doxygen_8h_source"/>
        <childnode refid="1593" relation="include">
        </childnode>
        <childnode refid="1594" relation="include">
        </childnode>
        <childnode refid="1582" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1607" relation="include">
        </childnode>
      </node>
      <node id="1608">
        <label>memberdef.h</label>
        <link refid="d4/d46/memberdef_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1609" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
      </node>
      <node id="1646">
        <label>defargs.h</label>
        <link refid="d8/d65/defargs_8h_source"/>
      </node>
      <node id="1685">
        <label>filedef.h</label>
        <link refid="d4/d3a/filedef_8h_source"/>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1607" relation="include">
        </childnode>
      </node>
      <node id="1664">
        <label>dbusxmlscanner.h</label>
        <link refid="df/df5/dbusxmlscanner_8h_source"/>
        <childnode refid="1611" relation="include">
        </childnode>
      </node>
      <node id="1681">
        <label>groupdef.h</label>
        <link refid="d1/de6/groupdef_8h_source"/>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
      </node>
      <node id="1668">
        <label>store.h</label>
        <link refid="d5/d3f/store_8h_source"/>
        <childnode refid="1656" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1669" relation="include">
        </childnode>
      </node>
      <node id="1686">
        <label>membername.h</label>
        <link refid="d7/dfc/membername_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1618">
        <label>ctype.h</label>
      </node>
      <node id="1633">
        <label>section.h</label>
        <link refid="d1/d2a/section_8h_source"/>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1642">
        <label>htmlhelp.h</label>
        <link refid="d8/dc3/htmlhelp_8h_source"/>
        <childnode refid="1582" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
      </node>
      <node id="1653">
        <label>reflist.h</label>
        <link refid="d1/d02/reflist_8h_source"/>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
      </node>
      <node id="1625">
        <label>qthread.h</label>
      </node>
      <node id="1647">
        <label>rtfgen.h</label>
        <link refid="d4/daa/rtfgen_8h_source"/>
        <childnode refid="1631" relation="include">
        </childnode>
      </node>
      <node id="1606">
        <label>definition.h</label>
        <link refid="df/da1/definition_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
      </node>
      <node id="1613">
        <label>index.h</label>
        <link refid="d1/db5/index_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
      </node>
      <node id="1689">
        <label>settings.h</label>
        <link refid="de/d60/settings_8h_source"/>
      </node>
      <node id="1577">
        <label>qfileinfo.h</label>
      </node>
      <node id="1645">
        <label>ftvhelp.h</label>
        <link refid="d2/d4a/ftvhelp_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
      </node>
      <node id="1586">
        <label>qtextcodec.h</label>
      </node>
      <node id="1620">
        <label>tagreader.h</label>
        <link refid="d5/d61/tagreader_8h_source"/>
      </node>
      <node id="1605">
        <label>dirdef.h</label>
        <link refid="d6/d15/dirdef_8h_source"/>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
      </node>
      <node id="1667">
        <label>objcache.h</label>
        <link refid="db/db6/objcache_8h_source"/>
      </node>
      <node id="1666">
        <label>code.h</label>
        <link refid="dd/dd8/code_8h_source"/>
      </node>
      <node id="1641">
        <label>debug.h</label>
        <link refid="db/d16/debug_8h_source"/>
      </node>
      <node id="1580">
        <label>qdict.h</label>
      </node>
      <node id="1637">
        <label>mangen.h</label>
        <link refid="da/dc0/mangen_8h_source"/>
        <childnode refid="1631" relation="include">
        </childnode>
      </node>
      <node id="1669">
        <label>portable.h</label>
        <link refid="d2/de2/portable_8h"/>
        <childnode refid="1609" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1656" relation="include">
        </childnode>
      </node>
      <node id="1658">
        <label>cmdmapper.h</label>
        <link refid="d3/d42/cmdmapper_8h_source"/>
        <childnode refid="1580" relation="include">
        </childnode>
      </node>
      <node id="1623">
        <label>qmutex.h</label>
      </node>
      <node id="1629">
        <label>htmlattrib.h</label>
        <link refid="d0/d73/htmlattrib_8h_source"/>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
      </node>
      <node id="1583">
        <label>stdio.h</label>
      </node>
      <node id="1576">
        <label>locale.h</label>
      </node>
      <node id="1674">
        <label>vhdldocgen.h</label>
        <link refid="dd/dec/vhdldocgen_8h_source"/>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1675" relation="include">
        </childnode>
        <childnode refid="1676" relation="include">
        </childnode>
        <childnode refid="1612" relation="include">
        </childnode>
      </node>
      <node id="1675">
        <label>layout.h</label>
        <link refid="db/d51/layout_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
      </node>
      <node id="1673">
        <label>qarray.h</label>
      </node>
      <node id="1639">
        <label>translator.h</label>
        <link refid="d9/df1/translator_8h_source"/>
        <childnode refid="1640" relation="include">
        </childnode>
      </node>
      <node id="1683">
        <label>namespacedef.h</label>
        <link refid="d7/d97/namespacedef_8h_source"/>
        <childnode refid="1582" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
      </node>
      <node id="1676">
        <label>arguments.h</label>
        <link refid="df/d9b/arguments_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="d8/da8/class_statistics" prot="public">Statistics</innerclass>
    <innerclass refid="d4/da6/struct_statistics_1_1stat" prot="private">Statistics::stat</innerclass>
    <innerclass refid="d5/dc7/struct_s_t_l_info" prot="public">STLInfo</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="dc/d98/doxygen_8cpp_1a9c8dfedbf90afbe623df28f60374e704" prot="public" static="no">
        <name>RECURSE_ENTRYTREE</name>
        <param><defname>func</defname></param>
        <param><defname>var</defname></param>
        <initializer>do { if (var-&gt;children()) { \
    EntryNavListIterator eli(*var-&gt;children()); \
    for (;eli.current();++eli) func(eli.current()); \
  } } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="105" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dc/d98/doxygen_8cpp_1a00a46160235f50699b76044397fa30b6" prot="public" static="no">
        <name>HAS_SIGNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="110" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dc/d98/doxygen_8cpp_1a20dd0d19305a4da127968489dc0cc282" prot="public" static="no">
        <name>FindBaseClassRelation_Mode</name>
        <enumvalue id="dc/d98/doxygen_8cpp_1a20dd0d19305a4da127968489dc0cc282a6c980be09446a2dd4f17a17e4669385a" prot="public">
          <name>TemplateInstances</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d98/doxygen_8cpp_1a20dd0d19305a4da127968489dc0cc282aa853d9fba4d0c76d851f8b4016375a26" prot="public">
          <name>DocumentedOnly</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d98/doxygen_8cpp_1a20dd0d19305a4da127968489dc0cc282a679f8bf08f6fa67f52059bbb4dbc9eed" prot="public">
          <name>Undocumented</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="298" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="297" bodyend="302"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dc/d98/doxygen_8cpp_1a029cb6706f10a91ff540da4864a779c4" prot="public" static="yes" mutable="no">
        <type>StringList</type>
        <definition>StringList g_inputFiles</definition>
        <argsstring></argsstring>
        <name>g_inputFiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="172" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/doxygen_8cpp_1a962a0d21d13f1265cbfef501f9bd8d0f" prot="public" static="yes" mutable="no">
        <type><ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref> *</type>
        <definition>OutputList* g_outputList</definition>
        <argsstring></argsstring>
        <name>g_outputList</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="174" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/doxygen_8cpp_1a2f04a574386aec51d236c225dc257a58" prot="public" static="yes" mutable="no">
        <type><ref refid="d3/d94/class_file_storage" kindref="compound">FileStorage</ref> *</type>
        <definition>FileStorage* g_storage</definition>
        <argsstring></argsstring>
        <name>g_storage</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="176" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/doxygen_8cpp_1aa547447bcc80febd14becae33aa5c40e" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool g_successfulRun</definition>
        <argsstring></argsstring>
        <name>g_successfulRun</name>
        <initializer>= FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="177" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/doxygen_8cpp_1a93a0210055804e2c67942be3099fc035" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool g_dumpSymbolMap</definition>
        <argsstring></argsstring>
        <name>g_dumpSymbolMap</name>
        <initializer>= FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="178" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/doxygen_8cpp_1a167ce1bc1bec7e4167325d055db4969e" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool g_dumpConfigAsXML</definition>
        <argsstring></argsstring>
        <name>g_dumpConfigAsXML</name>
        <initializer>= FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="179" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/doxygen_8cpp_1ac33de3c79e3a56ba6d47e9338a49511d" prot="public" static="no" mutable="no">
        <type>class Statistics</type>
        <definition>class Statistics  g_s</definition>
        <argsstring></argsstring>
        <name>g_s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="249"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d98/doxygen_8cpp_1a697826d201cc28c7f25b5687201563f4" prot="public" static="yes" mutable="no">
        <type>STLInfo</type>
        <definition>STLInfo g_stlinfo[]</definition>
        <argsstring>[]</argsstring>
        <name>g_stlinfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="409" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3472ac83dbf4fe664adf820e3838fcb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDict&lt; <ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> &gt;</type>
        <definition>static QDict&lt;EntryNav&gt; g_classEntries</definition>
        <argsstring>(1009)</argsstring>
        <name>g_classEntries</name>
        <param>
          <type>1009</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="171"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aca6760368582e387b3d2c18901d7c330" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDict&lt; void &gt;</type>
        <definition>static QDict&lt;void&gt; g_compoundKeywordDict</definition>
        <argsstring>(7)</argsstring>
        <name>g_compoundKeywordDict</name>
        <param>
          <type>7</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="173"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a2772470a2a34d77c07464f6f42495e5b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDict&lt; <ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> &gt;</type>
        <definition>static QDict&lt;FileDef&gt; g_usingDeclarations</definition>
        <argsstring>(1009)</argsstring>
        <name>g_usingDeclarations</name>
        <param>
          <type>1009</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="175"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a798729dca95209ecdc609807a653a2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clearAll</definition>
        <argsstring>()</argsstring>
        <name>clearAll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="182" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="181" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a1fc271c95844c5c853386a006d7f89f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void statistics</definition>
        <argsstring>()</argsstring>
        <name>statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="253" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="252" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1af16cc935092fc12980888bb995ec28fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addMemberDocs</definition>
        <argsstring>(EntryNav *rootNav, MemberDef *md, const char *funcDecl, ArgumentList *al, bool over_load, NamespaceSDict *nl=0)</argsstring>
        <name>addMemberDocs</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>funcDecl</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>al</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>over_load</declname>
        </param>
        <param>
          <type><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound">NamespaceSDict</ref> *</type>
          <declname>nl</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="290" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5220" bodyend="5354"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a7d5ebbdd044e67abd32d4d67cd40d70c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findMember</definition>
        <argsstring>(EntryNav *rootNav, QCString funcDecl, bool overloaded, bool isFunc)</argsstring>
        <name>findMember</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type>QCString</type>
          <declname>funcDecl</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>overloaded</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function tries to find a member (in a documented class/file/namespace) that corresponds to the function/variable declaration given in <emphasis>funcDecl</emphasis>.</para><para>The boolean <emphasis>overloaded</emphasis> is used to specify whether or not a standard overload documentation line should be generated.</para><para>The boolean <emphasis>isFunc</emphasis> is a hint that indicates that this is a function instead of a variable or typedef. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="295" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5677" bodyend="6712"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a72711513a594e1ce426fa8780365b7a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool findClassRelation</definition>
        <argsstring>(EntryNav *rootNav, Definition *context, ClassDef *cd, BaseInfo *bi, QDict&lt; int &gt; *templateNames, FindBaseClassRelation_Mode mode, bool isArtificial)</argsstring>
        <name>findClassRelation</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type><ref refid="de/d64/struct_base_info" kindref="compound">BaseInfo</ref> *</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>QDict&lt; int &gt; *</type>
          <declname>templateNames</declname>
        </param>
        <param>
          <type>FindBaseClassRelation_Mode</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isArtificial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="313" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4515" bodyend="4868"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a156f4a84a346b9d11e619afb170e0176" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addSTLMember</definition>
        <argsstring>(EntryNav *rootNav, const char *type, const char *name)</argsstring>
        <name>addSTLMember</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="412" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="411" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aa041acf6849edda5d7cb4092aa9f2f52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addSTLIterator</definition>
        <argsstring>(EntryNav *classEntryNav, const char *name)</argsstring>
        <name>addSTLIterator</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>classEntryNav</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="429" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="428" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a09ac176e035854fc1efe040a51dedc0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addSTLClasses</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>addSTLClasses</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="445" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="444" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aafb969c2163b069dd3189f6c8a06afca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
        <definition>static Definition * findScopeFromQualifiedName</definition>
        <argsstring>(Definition *startScope, const QCString &amp;n, FileDef *fileScope=0)</argsstring>
        <name>findScopeFromQualifiedName</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>startScope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fileScope</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="549" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1041" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a70e3589f42ffb7337e63b491ac2fec66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addPageToContext</definition>
        <argsstring>(PageDef *pd, EntryNav *rootNav)</argsstring>
        <name>addPageToContext</name>
        <param>
          <type><ref refid="dd/d41/class_page_def" kindref="compound">PageDef</ref> *</type>
          <declname>pd</declname>
        </param>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="552" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="551" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1abb030cc06def3ba249f6ad0873e98251" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addRelatedPage</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>addRelatedPage</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="571" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="570" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab28c5e943cfe1bd66017df172722e6ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildGroupListFiltered</definition>
        <argsstring>(EntryNav *rootNav, bool additional, bool includeExternal)</argsstring>
        <name>buildGroupListFiltered</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>additional</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeExternal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="606" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="605" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ac03335f70db02ec1fdd59191eeeb40e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildGroupList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildGroupList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="677" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="676" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3793a9d149c3731743cf01cca0ecb739" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findGroupScope</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findGroupScope</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="692" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="691" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a4deb6a53c3cc72d00ad7b685ea018c26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void organizeSubGroupsFiltered</definition>
        <argsstring>(EntryNav *rootNav, bool additional)</argsstring>
        <name>organizeSubGroupsFiltered</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>additional</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="717" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="716" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a258f4e5757605f55e12278e6396728f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void organizeSubGroups</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>organizeSubGroups</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="748" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="747" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1afb5548a406978e96e2649be3b3ebb5cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildFileList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildFileList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="760" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="759" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1add667bf4a3007112dad6005c98c442bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addIncludeFile</definition>
        <argsstring>(ClassDef *cd, FileDef *ifd, Entry *root)</argsstring>
        <name>addIncludeFile</name>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>ifd</declname>
        </param>
        <param>
          <type><ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="837" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="836" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a456407d50fdd7aa52aa21af880a7fb2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
        <definition>static Definition* buildScopeFromQualifiedName</definition>
        <argsstring>(const QCString name, int level, SrcLangExt lang)</argsstring>
        <name>buildScopeFromQualifiedName</name>
        <param>
          <type>const QCString</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member">SrcLangExt</ref></type>
          <declname>lang</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> object belonging to the first <emphasis>level</emphasis> levels of full qualified name <emphasis>name</emphasis>. Creates an artificial scope if the scope is not found and set the parent/child scope relation if the scope is found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="995" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="994" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a5fd408ae055f67943373c3322079b99d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
        <definition>ArgumentList* getTemplateArgumentsFromName</definition>
        <argsstring>(const QCString &amp;name, const QList&lt; ArgumentList &gt; *tArgLists)</argsstring>
        <name>getTemplateArgumentsFromName</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; *</type>
          <declname>tArgLists</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1132" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1129" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a67da9e75ab13f89fc21f123c557870c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dcf/class_class_def_1ae70cf86d35fe954a94c566fbcfc87939" kindref="member">ClassDef::CompoundType</ref></type>
        <definition>static ClassDef::CompoundType convertToCompoundType</definition>
        <argsstring>(int section, uint64 specifier)</argsstring>
        <name>convertToCompoundType</name>
        <param>
          <type>int</type>
          <declname>section</declname>
        </param>
        <param>
          <type>uint64</type>
          <declname>specifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1160" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1159" bodyend="1213"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a77a1366031f7b8c7357a5d2411bf0a61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addClassToContext</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>addClassToContext</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1217" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1216" bodyend="1360"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aca28c69607cdabc925f0fe943bb43bde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildClassList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildClassList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1366" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1365" bodyend="1375"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a2599f710fb2aff07ef92f6eacc564531" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildClassDocList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildClassDocList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1378" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1377" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a34157df0fe53d6d10cc4560ca942f488" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void resolveClassNestingRelations</definition>
        <argsstring>()</argsstring>
        <name>resolveClassNestingRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>create the scope artificially </para>        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1389" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1388" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a21cfa81a6854b108ab53153e9db19d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void distributeClassGroupRelations</definition>
        <argsstring>()</argsstring>
        <name>distributeClassGroupRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1453" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1452" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aaee80fd70d6e0b1e1061d50ba0d0804f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
        <definition>static ClassDef* createTagLessInstance</definition>
        <argsstring>(ClassDef *rootCd, ClassDef *templ, const QCString &amp;fieldName)</argsstring>
        <name>createTagLessInstance</name>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>rootCd</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>templ</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1490" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1489" bodyend="1559"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab1cfcfaf01266d9059cc9049379faa95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void processTagLessClasses</definition>
        <argsstring>(ClassDef *rootCd, ClassDef *cd, ClassDef *tagParentCd, const QCString &amp;prefix, int count)</argsstring>
        <name>processTagLessClasses</name>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>rootCd</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>tagParentCd</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Look through the members of class <emphasis>cd</emphasis> and its public members. </para>        </briefdescription>
        <detaileddescription>
<para>If there is a member m of a tag less struct/union, then we create a duplicate of the struct/union with the name of the member to identify it. So if cd has name S, then the tag less struct/union will get name S.m Since tag less structs can be nested we need to call this function recursively. Later on we need to patch the member types so we keep track of the hierarchy of classes we create. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1574" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1570" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a06827e7637d472b9f532b22af0bc69fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void writeMainPageTagFileData</definition>
        <argsstring>()</argsstring>
        <name>writeMainPageTagFileData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1637" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1636" bodyend="1654"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aa96122592267397891f208708bf6cfdd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findTagLessClasses</definition>
        <argsstring>(ClassDef *cd)</argsstring>
        <name>findTagLessClasses</name>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1657" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1656" bodyend="1672"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab3fe4f3be34f5fd77d38c8750f85ae88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findTagLessClasses</definition>
        <argsstring>()</argsstring>
        <name>findTagLessClasses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1675" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1674" bodyend="1686"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1abc8cfece812549b917152cb75d686f27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildNamespaceList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildNamespaceList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1693" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1692" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aec0648ee2b382a8c9dbae9e58b25c6af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d07/class_namespace_def" kindref="compound">NamespaceDef</ref> *</type>
        <definition>static NamespaceDef* findUsedNamespace</definition>
        <argsstring>(NamespaceSDict *unl, const QCString &amp;name)</argsstring>
        <name>findUsedNamespace</name>
        <param>
          <type><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound">NamespaceSDict</ref> *</type>
          <declname>unl</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1802" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1800" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a07a99f62cf38e3215dfb2bf4293dbaa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findUsingDirectives</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findUsingDirectives</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1820" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1819" bodyend="1955"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a9de90852a3442b20e537b5b1eac17b10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildListOfUsingDecls</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildListOfUsingDecls</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1960" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1959" bodyend="1982"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a22d5817d8ed38749a4b06d321384aa3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findUsingDeclarations</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findUsingDeclarations</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="1986" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="1985" bodyend="2065"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1af1b1d9766510120488b24ccf46706ca3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findUsingDeclImports</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findUsingDeclImports</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2070" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2069" bodyend="2163"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a73f07a781803790c09a7a63b7b2b1d2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findIncludedUsingDirectives</definition>
        <argsstring>()</argsstring>
        <name>findIncludedUsingDirectives</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2168" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2167" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a16fd3426c7750e4d6356773d5c13e4b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
        <definition>static MemberDef* addVariableToClass</definition>
        <argsstring>(EntryNav *rootNav, ClassDef *cd, MemberType mtype, const QCString &amp;name, bool fromAnnScope, MemberDef *fromAnnMemb, Protection prot, Relationship related)</argsstring>
        <name>addVariableToClass</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type>MemberType</type>
          <declname>mtype</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fromAnnScope</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>fromAnnMemb</declname>
        </param>
        <param>
          <type><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member">Protection</ref></type>
          <declname>prot</declname>
        </param>
        <param>
          <type><ref refid="d9/d49/types_8h_1a9d625fe894d9313ec78df1d78553f32e" kindref="member">Relationship</ref></type>
          <declname>related</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2209" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2200" bodyend="2367"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a5f9e09aa2d850ca78452977197696270" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
        <definition>static MemberDef* addVariableToFile</definition>
        <argsstring>(EntryNav *rootNav, MemberType mtype, const QCString &amp;scope, const QCString &amp;name, bool fromAnnScope, MemberDef *fromAnnMemb)</argsstring>
        <name>addVariableToFile</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type>MemberType</type>
          <declname>mtype</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fromAnnScope</declname>
        </param>
        <param>
          <type><ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref> *</type>
          <declname>fromAnnMemb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2379" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2371" bodyend="2599"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ad4101621bef061262ec0b887213a6f46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int findFunctionPtr</definition>
        <argsstring>(const QCString &amp;type, int lang, int *pLength=0)</argsstring>
        <name>findFunctionPtr</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lang</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pLength</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>See if the return type string <emphasis>type</emphasis> is that of a function pointer <simplesect kind="return"><para>-1 if this is not a function pointer variable or the index at which the closing brace of (...*name) was found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2606" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2605" bodyend="2629"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ae2d6f006f21e74cbc51f2a94651125ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool isVarWithConstructor</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>isVarWithConstructor</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns TRUE iff <emphasis>type</emphasis> is a class within scope <emphasis>context</emphasis>. Used to detect variable declarations that look like function prototypes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2636" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2635" bodyend="2756"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a315751403f72bea7917ce9abe3ea8735" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addVariable</definition>
        <argsstring>(EntryNav *rootNav, int isFuncPtr=-1)</argsstring>
        <name>addVariable</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isFuncPtr</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2759" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2758" bodyend="2965"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3a1360efe2b6492f21102c7f82cb078b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildTypedefList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildTypedefList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2971" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2970" bodyend="2992"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3e5fcf80d3396fcefd2cdac8cebf22e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildVarList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildVarList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="2999" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="2998" bodyend="3030"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a69f320b63a35d79985cf2e662f1e21f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addInterfaceOrServiceToServiceOrSingleton</definition>
        <argsstring>(EntryNav *const rootNav, ClassDef *const cd, QCString const &amp;rname)</argsstring>
        <name>addInterfaceOrServiceToServiceOrSingleton</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *const</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *const</type>
          <declname>cd</declname>
        </param>
        <param>
          <type>QCString const &amp;</type>
          <declname>rname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="3041" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="3037" bodyend="3107"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a17f5a0dcba2ffed6961e825d8c1a1c1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildInterfaceAndServiceList</definition>
        <argsstring>(EntryNav *const rootNav)</argsstring>
        <name>buildInterfaceAndServiceList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *const</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="3110" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="3109" bodyend="3172"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a244afb2faf56b20da603bb00d8126049" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addMethodToClass</definition>
        <argsstring>(EntryNav *rootNav, ClassDef *cd, const QCString &amp;rname, bool isFriend)</argsstring>
        <name>addMethodToClass</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>rname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFriend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="3181" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="3179" bodyend="3350"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a0978b792c61ba4f6f1c7341e3b13ad8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildFunctionList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildFunctionList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="3354" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="3353" bodyend="3772"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a825f829ad3f2e4e1a52d8959b0ff3fb9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findFriends</definition>
        <argsstring>()</argsstring>
        <name>findFriends</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="3777" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="3776" bodyend="3859"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a4ee52c8be189a58fdf71cac6164f6be1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transferFunctionDocumentation</definition>
        <argsstring>()</argsstring>
        <name>transferFunctionDocumentation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="3864" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="3863" bodyend="3890"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1af9f9567b822b1cbc46ff46b5a310ceab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transferFunctionReferences</definition>
        <argsstring>()</argsstring>
        <name>transferFunctionReferences</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="3895" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="3894" bodyend="3982"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a42120760d9d3f1ffe7d1561ef7b50a49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transferRelatedFunctionDocumentation</definition>
        <argsstring>()</argsstring>
        <name>transferRelatedFunctionDocumentation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="3987" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="3986" bodyend="4030"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ac4232aa916bfe03fe27cf124222f3f71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDict&lt; int &gt; *</type>
        <definition>static QDict&lt;int&gt;* getTemplateArgumentsInName</definition>
        <argsstring>(ArgumentList *templateArguments, const QCString &amp;name)</argsstring>
        <name>getTemplateArgumentsInName</name>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>templateArguments</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>make a dictionary of all template arguments of class cd that are part of the base class name. <ref refid="df/de9/struct_example" kindref="compound">Example</ref>: A template class A with template arguments &lt;R,S,T&gt; that inherits from B&lt;T,T,S&gt; will have T and S in the dictionary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4040" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4039" bodyend="4067"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a2cba3afabde4ad597fb74dc0a7ab3ce7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
        <definition>static ClassDef* findClassWithinClassContext</definition>
        <argsstring>(Definition *context, ClassDef *cd, const QCString &amp;name)</argsstring>
        <name>findClassWithinClassContext</name>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>cd</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches a class from within <emphasis>context</emphasis> and <emphasis>cd</emphasis> and returns its definition if found (otherwise 0 is returned). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4073" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4072" bodyend="4100"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a60d371a59a9a9187b4cdf264f73e71f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findUsedClassesForClass</definition>
        <argsstring>(EntryNav *rootNav, Definition *context, ClassDef *masterCd, ClassDef *instanceCd, bool isArtificial, ArgumentList *actualArgs=0, QDict&lt; int &gt; *templateNames=0)</argsstring>
        <name>findUsedClassesForClass</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>masterCd</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>instanceCd</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isArtificial</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>actualArgs</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>QDict&lt; int &gt; *</type>
          <declname>templateNames</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4111" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4103" bodyend="4273"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ad17fb7fc031148ac6094e3c568278299" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findBaseClassesForClass</definition>
        <argsstring>(EntryNav *rootNav, Definition *context, ClassDef *masterCd, ClassDef *instanceCd, FindBaseClassRelation_Mode mode, bool isArtificial, ArgumentList *actualArgs=0, QDict&lt; int &gt; *templateNames=0)</argsstring>
        <name>findBaseClassesForClass</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>masterCd</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>instanceCd</declname>
        </param>
        <param>
          <type>FindBaseClassRelation_Mode</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isArtificial</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>actualArgs</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>QDict&lt; int &gt; *</type>
          <declname>templateNames</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4285" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4275" bodyend="4335"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3f75bf36ab07c0568421ac15f76542e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool findTemplateInstanceRelation</definition>
        <argsstring>(Entry *root, Definition *context, ClassDef *templateClass, const QCString &amp;templSpec, QDict&lt; int &gt; *templateNames, bool isArtificial)</argsstring>
        <name>findTemplateInstanceRelation</name>
        <param>
          <type><ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
          <declname>templateClass</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>templSpec</declname>
        </param>
        <param>
          <type>QDict&lt; int &gt; *</type>
          <declname>templateNames</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isArtificial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4344" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4339" bodyend="4422"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a0947f1f8c60660017b41863e47fc61be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool isRecursiveBaseClass</definition>
        <argsstring>(const QCString &amp;scope, const QCString &amp;name)</argsstring>
        <name>isRecursiveBaseClass</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4425" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4424" bodyend="4434"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a54568d43fdfbe93bbffce78e36ac5be2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int findEndOfTemplate</definition>
        <argsstring>(const QCString &amp;s, int startPos)</argsstring>
        <name>findEndOfTemplate</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches for the end of a template in prototype <emphasis>s</emphasis> starting from character position <emphasis>startPos</emphasis>. If the end was found the position of the closing &gt; is returned, otherwise -1 is returned.</para><para>Handles exotic cases such as <programlisting><codeline><highlight class="normal">Class&lt;(id&lt;0)&gt;</highlight></codeline>
<codeline><highlight class="normal">Class&lt;bits&lt;&lt;2&gt;</highlight></codeline>
<codeline><highlight class="normal">Class&lt;</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">Class&lt;&apos;&lt;&apos;&gt;</highlight></codeline>
<codeline><highlight class="normal">Class&lt;(</highlight><highlight class="stringliteral">&quot;)&lt;&quot;</highlight><highlight class="normal">)&gt;</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4450" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4449" bodyend="4513"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a53f606bf7bd7d44192e6d8bed6a98d48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool isClassSection</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>isClassSection</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4874" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4873" bodyend="4893"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a2cc2773dbaa5a5dd24deb69d046c6701" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findClassEntries</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findClassEntries</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds a dictionary of all entry nodes in the tree starting with <emphasis>root</emphasis> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4899" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4898" bodyend="4905"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a000332499c2ed82b4b4e2f0318bc98fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findInheritedTemplateInstances</definition>
        <argsstring>()</argsstring>
        <name>findInheritedTemplateInstances</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Using the dictionary build by findClassEntries(), this function will look for additional template specialization that exists as inheritance relations only. These instances will be added to the template they are derived from. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4913" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4912" bodyend="4933"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ad9ce767127c1fe73995ebae8badaab75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findUsedTemplateInstances</definition>
        <argsstring>()</argsstring>
        <name>findUsedTemplateInstances</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4936" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4935" bodyend="4955"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab6c1ebf5d50811e57eee6f8d2e201744" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void computeClassRelations</definition>
        <argsstring>()</argsstring>
        <name>computeClassRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="4958" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4957" bodyend="4997"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a0f3c855d0eed91d3e4f728d4beff4080" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void computeTemplateClassRelations</definition>
        <argsstring>()</argsstring>
        <name>computeTemplateClassRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5000" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="4999" bodyend="5076"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a4130a395a6948c0202fc85ac018a6236" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void computeMemberReferences</definition>
        <argsstring>()</argsstring>
        <name>computeMemberReferences</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5082" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5081" bodyend="5112"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a855be67fd81a52fbfc822a4e4b41cc7e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addListReferences</definition>
        <argsstring>()</argsstring>
        <name>addListReferences</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5117" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5116" bodyend="5201"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a1cdf977b93a419aaef78c31944c7dd00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateXRefPages</definition>
        <argsstring>()</argsstring>
        <name>generateXRefPages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5206" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5205" bodyend="5213"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a9a6f02265cdf25e65864a0c8f054fd0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref> *</type>
        <definition>static ClassDef* findClassDefinition</definition>
        <argsstring>(FileDef *fd, NamespaceDef *nd, const char *scopeName)</argsstring>
        <name>findClassDefinition</name>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="d0/d07/class_namespace_def" kindref="compound">NamespaceDef</ref> *</type>
          <declname>nd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>scopeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5362" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5360" bodyend="5365"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a49c0e29e9388a89781233cdfc2d94d41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool findGlobalMember</definition>
        <argsstring>(EntryNav *rootNav, const QCString &amp;namespaceName, const char *type, const char *name, const char *tempArg, const char *, const char *decl)</argsstring>
        <name>findGlobalMember</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>namespaceName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tempArg</declname>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
          <declname>decl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5380" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5373" bodyend="5523"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a1a7d944682ba365b66f36ec0944204d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool isSpecialization</definition>
        <argsstring>(const QList&lt; ArgumentList &gt; &amp;srcTempArgLists, const QList&lt; ArgumentList &gt; &amp;dstTempArgLists)</argsstring>
        <name>isSpecialization</name>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; &amp;</type>
          <declname>srcTempArgLists</declname>
        </param>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; &amp;</type>
          <declname>dstTempArgLists</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5529" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5525" bodyend="5539"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1af9ba24c647b173ad0371ef66e46e1824" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString substituteTemplatesInString</definition>
        <argsstring>(const QList&lt; ArgumentList &gt; &amp;srcTempArgLists, const QList&lt; ArgumentList &gt; &amp;dstTempArgLists, ArgumentList *funcTempArgList, const QCString &amp;src)</argsstring>
        <name>substituteTemplatesInString</name>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; &amp;</type>
          <declname>srcTempArgLists</declname>
        </param>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; &amp;</type>
          <declname>dstTempArgLists</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>funcTempArgList</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5548" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5542" bodyend="5618"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aab773262b7873625a809f98f8162fea3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void substituteTemplatesInArgList</definition>
        <argsstring>(const QList&lt; ArgumentList &gt; &amp;srcTempArgLists, const QList&lt; ArgumentList &gt; &amp;dstTempArgLists, ArgumentList *src, ArgumentList *dst, ArgumentList *funcTempArgs=0)</argsstring>
        <name>substituteTemplatesInArgList</name>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; &amp;</type>
          <declname>srcTempArgLists</declname>
        </param>
        <param>
          <type>const <ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt; <ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> &gt; &amp;</type>
          <declname>dstTempArgLists</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/class_argument_list" kindref="compound">ArgumentList</ref> *</type>
          <declname>funcTempArgs</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="5627" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="5620" bodyend="5664"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1af9f203eed49c2e16a09ef65de7a5b14a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void filterMemberDocumentation</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>filterMemberDocumentation</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="6719" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="6718" bodyend="6838"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aa4212319244f92bb64c8cd5d4d66a5ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findMemberDocumentation</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findMemberDocumentation</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="6841" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="6840" bodyend="6867"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3bb1348f5f35dd0da2173c99c367e5fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findObjCMethodDefinitions</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findObjCMethodDefinitions</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="6872" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="6871" bodyend="6901"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a8a182bbe99dfb4c5a4fe9c5d3889ed32" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findEnums</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findEnums</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="6907" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="6906" bodyend="7083"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a93c97562022479a041ff799e266f5bab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addEnumValuesToEnums</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>addEnumValuesToEnums</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7088" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7087" bodyend="7299"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a44caaa2697c28372d445b07c34ddc5e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findEnumDocumentation</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findEnumDocumentation</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7306" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7305" bodyend="7444"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a16dea5cc47ac986e3c6a4c9ea6af0a24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findDEV</definition>
        <argsstring>(const MemberNameSDict &amp;mnsd)</argsstring>
        <name>findDEV</name>
        <param>
          <type>const <ref refid="d1/d7e/class_member_name_s_dict" kindref="compound">MemberNameSDict</ref> &amp;</type>
          <declname>mnsd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7449" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7448" bodyend="7479"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab3d26089ba07bad3726f76a7f8959e5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findDocumentedEnumValues</definition>
        <argsstring>()</argsstring>
        <name>findDocumentedEnumValues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7484" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7483" bodyend="7487"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a935f6e8298c237accbe596aa58a32a22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addMembersToIndex</definition>
        <argsstring>()</argsstring>
        <name>addMembersToIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7492" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7491" bodyend="7525"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1afde1522561cb561d368c2087c1956a55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void computeMemberRelations</definition>
        <argsstring>()</argsstring>
        <name>computeMemberRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7533" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7532" bodyend="7594"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a518c45b338059b959b548810b82c2a01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void createTemplateInstanceMembers</definition>
        <argsstring>()</argsstring>
        <name>createTemplateInstanceMembers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7611" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7610" bodyend="7630"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ad091d341c14ea4fbd41ca45921d5b75f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mergeCategories</definition>
        <argsstring>()</argsstring>
        <name>mergeCategories</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7635" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7634" bodyend="7654"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ae643312889aa3507462f9adfecf49e40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildCompleteMemberLists</definition>
        <argsstring>()</argsstring>
        <name>buildCompleteMemberLists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7659" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7658" bodyend="7678"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a6d0fb628b1fc96844bb2836317a3ce5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateFileSources</definition>
        <argsstring>()</argsstring>
        <name>generateFileSources</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7683" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7682" bodyend="7820"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a57a6bc5421d2bc55208fa100ee7d4a0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateFileDocs</definition>
        <argsstring>()</argsstring>
        <name>generateFileDocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7825" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7824" bodyend="7847"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aa8e0c506f71452a7d9d868a7bb179747" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addSourceReferences</definition>
        <argsstring>()</argsstring>
        <name>addSourceReferences</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7852" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7851" bodyend="7927"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a510e0aa934874b28d777e3e1d1c13341" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sortMemberLists</definition>
        <argsstring>()</argsstring>
        <name>sortMemberLists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7932" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7931" bodyend="7969"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3a34979a8a0029eee7379a55b83baa14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateClassList</definition>
        <argsstring>(ClassSDict &amp;classSDict)</argsstring>
        <name>generateClassList</name>
        <param>
          <type><ref refid="d9/d3d/class_class_s_dict" kindref="compound">ClassSDict</ref> &amp;</type>
          <declname>classSDict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="7975" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="7974" bodyend="8000"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a712bc5bd97d995f02595622efbfcc5e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateClassDocs</definition>
        <argsstring>()</argsstring>
        <name>generateClassDocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8003" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8002" bodyend="8006"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aad23f7d576fcba6cc66edf702842a9d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void inheritDocumentation</definition>
        <argsstring>()</argsstring>
        <name>inheritDocumentation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8011" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8010" bodyend="8044"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aeaa1f39cbbca14be0b6afe4528da6cf7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void combineUsingRelations</definition>
        <argsstring>()</argsstring>
        <name>combineUsingRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8049" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8048" bodyend="8083"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a4219b5e9c9b107b0b5380459e032a142" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void addMembersToMemberGroup</definition>
        <argsstring>()</argsstring>
        <name>addMembersToMemberGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8088" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8087" bodyend="8122"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a5f7021c47224d92c76642ad8501d5eb6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void distributeMemberGroupDocumentation</definition>
        <argsstring>()</argsstring>
        <name>distributeMemberGroupDocumentation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8127" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8126" bodyend="8161"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ad0183e79b7d98cfc8d0fd1b32efa27d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findSectionsInDocumentation</definition>
        <argsstring>()</argsstring>
        <name>findSectionsInDocumentation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8166" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8165" bodyend="8208"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a082d23658541704d3493a7a881583d55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void flushCachedTemplateRelations</definition>
        <argsstring>()</argsstring>
        <name>flushCachedTemplateRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8211" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8210" bodyend="8256"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aad3dd00ae1c58bfc06981afcc5f14a53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void flushUnresolvedRelations</definition>
        <argsstring>()</argsstring>
        <name>flushUnresolvedRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8261" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8260" bodyend="8304"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1afd5d61f295dfe0348f991918428dffda" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findDefineDocumentation</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findDefineDocumentation</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8309" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8308" bodyend="8452"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a6d2fd7e6632530498a5061e6dddd9711" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findDirDocumentation</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findDirDocumentation</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8457" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8456" bodyend="8517"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab32fe313d8ce54165434da633814a0d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildPageList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildPageList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8524" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8523" bodyend="8557"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a9e4b60ed81b474034a66891beb6a467d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void findMainPage</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>findMainPage</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8560" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8559" bodyend="8601"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab9d8085b169c3df0d7b626ca88ece1f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void computePageRelations</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>computePageRelations</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8604" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8603" bodyend="8636"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab8f6cdb1a0374f49399a31bd2ea0226a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void checkPageRelations</definition>
        <argsstring>()</argsstring>
        <name>checkPageRelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8639" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8638" bodyend="8657"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a653335defbae0c2b319413c2d9376458" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void resolveUserReferences</definition>
        <argsstring>()</argsstring>
        <name>resolveUserReferences</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8662" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8661" bodyend="8725"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a64c79a6bf80aea67d87e0cb885f7c2ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generatePageDocs</definition>
        <argsstring>()</argsstring>
        <name>generatePageDocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8734" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8733" bodyend="8749"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aa2e707c58aa3c7e95125feddca38de48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buildExampleList</definition>
        <argsstring>(EntryNav *rootNav)</argsstring>
        <name>buildExampleList</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8755" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8754" bodyend="8787"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a0b990324e5bf78d6d16824cdf0112aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printNavTree</definition>
        <argsstring>(EntryNav *rootNav, int indent)</argsstring>
        <name>printNavTree</name>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8793" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8792" bodyend="8805"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3eb9720ae877e5d2ae987bce9c91f6a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateExampleDocs</definition>
        <argsstring>()</argsstring>
        <name>generateExampleDocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8812" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8811" bodyend="8838"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a21dc6bc528a57da9bfc9dda4658d38ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateGroupDocs</definition>
        <argsstring>()</argsstring>
        <name>generateGroupDocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8844" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8843" bodyend="8854"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aca55661d627c7aa878d722fc2d1ae882" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateNamespaceDocs</definition>
        <argsstring>()</argsstring>
        <name>generateNamespaceDocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8877" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8876" bodyend="8912"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ada0ab2fe4a5a667546f2009940f42244" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool openOutputFile</definition>
        <argsstring>(const char *outFile, QFile &amp;f)</argsstring>
        <name>openOutputFile</name>
        <param>
          <type>const char *</type>
          <declname>outFile</declname>
        </param>
        <param>
          <type>QFile &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8939" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8938" bodyend="8961"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a527ecdec9fbbf3ab262458d0aeee55d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void generateConfigFile</definition>
        <argsstring>(const char *configFile, bool shortList, bool updateOnly=FALSE)</argsstring>
        <name>generateConfigFile</name>
        <param>
          <type>const char *</type>
          <declname>configFile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shortList</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>updateOnly</declname>
          <defval>FALSE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a template version of the configuration file. If the <emphasis>shortList</emphasis> parameter is TRUE a configuration file without comments will be generated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="8969" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="8967" bodyend="9000"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3197d62e54717c9e0fd2317fafb97ceb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void readTagFile</definition>
        <argsstring>(Entry *root, const char *tl)</argsstring>
        <name>readTagFile</name>
        <param>
          <type><ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9016" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9015" bodyend="9048"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a1e3ec8fc9a7cd41405fc0c2039b07b57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void copyStyleSheet</definition>
        <argsstring>()</argsstring>
        <name>copyStyleSheet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9052" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9051" bodyend="9084"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1afe20a140dc615e0172977d831907d2c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void copyLogo</definition>
        <argsstring>()</argsstring>
        <name>copyLogo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9087" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9086" bodyend="9104"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aea05421750447a0b8bad665c2e41b0cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void copyExtraFiles</definition>
        <argsstring>(const QCString &amp;filesOption, const QCString &amp;outputOption)</argsstring>
        <name>copyExtraFiles</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>filesOption</declname>
        </param>
        <param>
          <type>const QCString &amp;</type>
          <declname>outputOption</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9107" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9106" bodyend="9129"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1afabaa238e166d2419fcbb135eef65317" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/d84/class_parser_interface" kindref="compound">ParserInterface</ref> *</type>
        <definition>static ParserInterface* getParserForFile</definition>
        <argsstring>(const char *fn)</argsstring>
        <name>getParserForFile</name>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9134" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9133" bodyend="9148"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a281a29a1be4bd5b6d9aaef69636970b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parseFile</definition>
        <argsstring>(ParserInterface *parser, Entry *root, EntryNav *rootNav, FileDef *fd, const char *fn, bool sameTu, QStrList &amp;filesInSameTu)</argsstring>
        <name>parseFile</name>
        <param>
          <type><ref refid="d5/d84/class_parser_interface" kindref="compound">ParserInterface</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type><ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <param>
          <type><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref> *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sameTu</declname>
        </param>
        <param>
          <type>QStrList &amp;</type>
          <declname>filesInSameTu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9153" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9150" bodyend="9207"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a963a9cd33744889a9570630778d01a95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parseFiles</definition>
        <argsstring>(Entry *root, EntryNav *rootNav)</argsstring>
        <name>parseFiles</name>
        <param>
          <type><ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> *</type>
          <declname>rootNav</declname>
        </param>
        <briefdescription>
<para>parse the list of input files </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9211" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9210" bodyend="9300"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a1fc72e1bbdb28c3445196b90e443e596" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString resolveSymlink</definition>
        <argsstring>(QCString path)</argsstring>
        <name>resolveSymlink</name>
        <param>
          <type>QCString</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9305" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9304" bodyend="9368"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a0d558dd19525d01d27ab2e7d0a320ff5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDict&lt; void &gt;</type>
        <definition>static QDict&lt;void&gt; g_pathsVisited</definition>
        <argsstring>(1009)</argsstring>
        <name>g_pathsVisited</name>
        <param>
          <type>1009</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9370"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1aeeecc058bceb25924516201e2f349458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readDir</definition>
        <argsstring>(QFileInfo *fi, FileNameList *fnList, FileNameDict *fnDict, StringDict *exclDict, QStrList *patList, QStrList *exclPatList, StringList *resultList, StringDict *resultDict, bool errorIfNotExist, bool recursive, QDict&lt; void &gt; *killDict, QDict&lt; void &gt; *paths)</argsstring>
        <name>readDir</name>
        <param>
          <type>QFileInfo *</type>
          <declname>fi</declname>
        </param>
        <param>
          <type><ref refid="d9/d8c/class_file_name_list" kindref="compound">FileNameList</ref> *</type>
          <declname>fnList</declname>
        </param>
        <param>
          <type><ref refid="dd/d0f/class_file_name_dict" kindref="compound">FileNameDict</ref> *</type>
          <declname>fnDict</declname>
        </param>
        <param>
          <type><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref> *</type>
          <declname>exclDict</declname>
        </param>
        <param>
          <type>QStrList *</type>
          <declname>patList</declname>
        </param>
        <param>
          <type>QStrList *</type>
          <declname>exclPatList</declname>
        </param>
        <param>
          <type>StringList *</type>
          <declname>resultList</declname>
        </param>
        <param>
          <type><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref> *</type>
          <declname>resultDict</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>errorIfNotExist</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <param>
          <type>QDict&lt; void &gt; *</type>
          <declname>killDict</declname>
        </param>
        <param>
          <type>QDict&lt; void &gt; *</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9391" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9378" bodyend="9479"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a5773098236bd78b7d8dad1739f60afbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readFileOrDirectory</definition>
        <argsstring>(const char *s, FileNameList *fnList, FileNameDict *fnDict, StringDict *exclDict, QStrList *patList, QStrList *exclPatList, StringList *resultList, StringDict *resultDict, bool recursive, bool errorIfNotExist, QDict&lt; void &gt; *killDict, QDict&lt; void &gt; *paths)</argsstring>
        <name>readFileOrDirectory</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="d9/d8c/class_file_name_list" kindref="compound">FileNameList</ref> *</type>
          <declname>fnList</declname>
        </param>
        <param>
          <type><ref refid="dd/d0f/class_file_name_dict" kindref="compound">FileNameDict</ref> *</type>
          <declname>fnDict</declname>
        </param>
        <param>
          <type><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref> *</type>
          <declname>exclDict</declname>
        </param>
        <param>
          <type>QStrList *</type>
          <declname>patList</declname>
        </param>
        <param>
          <type>QStrList *</type>
          <declname>exclPatList</declname>
        </param>
        <param>
          <type>StringList *</type>
          <declname>resultList</declname>
        </param>
        <param>
          <type><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref> *</type>
          <declname>resultDict</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>errorIfNotExist</declname>
        </param>
        <param>
          <type>QDict&lt; void &gt; *</type>
          <declname>killDict</declname>
        </param>
        <param>
          <type>QDict&lt; void &gt; *</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9499" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9486" bodyend="9574"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ae8b10293f5f041318bd4109dd2f996ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void readFormulaRepository</definition>
        <argsstring>()</argsstring>
        <name>readFormulaRepository</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9579" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9578" bodyend="9607"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ac6a7a97147e24dde4fe3caef60dc8548" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void expandAliases</definition>
        <argsstring>()</argsstring>
        <name>expandAliases</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9612" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9611" bodyend="9619"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a06e2d956eae1422dcde7e95879ca0df1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void escapeAliases</definition>
        <argsstring>()</argsstring>
        <name>escapeAliases</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9624" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9623" bodyend="9654"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1af229513c065c90147eff5559f0844c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void readAliases</definition>
        <argsstring>()</argsstring>
        <name>readAliases</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9659" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9658" bodyend="9693"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1acfe97474c33d2cfd99f36d2272ce6dc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dumpSymbol</definition>
        <argsstring>(FTextStream &amp;t, Definition *d)</argsstring>
        <name>dumpSymbol</name>
        <param>
          <type><ref refid="dc/d3c/class_f_text_stream" kindref="compound">FTextStream</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9698" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9697" bodyend="9717"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a567698ca8e22cc5b401cb0e446778dd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dumpSymbolMap</definition>
        <argsstring>()</argsstring>
        <name>dumpSymbolMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9720" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9719" bodyend="9746"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a375214dde6b00135e30bd81b97331c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dumpConfigAsXML</definition>
        <argsstring>()</argsstring>
        <name>dumpConfigAsXML</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9751" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9750" bodyend="9758"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab24984492570c9e0e802e45300d2eb82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void usage</definition>
        <argsstring>(const char *name)</argsstring>
        <name>usage</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9764" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9763" bodyend="9788"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a49d4d2e314a4f03b3520fdf4b6e5c54b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* getArg</definition>
        <argsstring>(int argc, char **argv, int &amp;optind)</argsstring>
        <name>getArg</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>optind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9795" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9794" bodyend="9802"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a122070be7aebc9e3ab560b58fdd922c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initDoxygen</definition>
        <argsstring>()</argsstring>
        <name>initDoxygen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9807" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9806" bodyend="9890"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ae12e94f5218f3afc8df4086a2121cd4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cleanUpDoxygen</definition>
        <argsstring>()</argsstring>
        <name>cleanUpDoxygen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9893" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9892" bodyend="9951"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1afe8951f524fcde5b3d1657f590ff6fe5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int computeIdealCacheParam</definition>
        <argsstring>(uint v)</argsstring>
        <name>computeIdealCacheParam</name>
        <param>
          <type>uint</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9954" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9953" bodyend="9963"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1ab0fa1b0c948e78e0d0d749ff1f5740b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void readConfiguration</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>readConfiguration</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="9966" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="9965" bodyend="10285"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a2426bb829c785229969c3052f3e37fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkConfiguration</definition>
        <argsstring>()</argsstring>
        <name>checkConfiguration</name>
        <briefdescription>
<para>check and resolve config options </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="10289" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="10288" bodyend="10296"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a10458b8a16238a4eae5fb5019df747e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void adjustConfiguration</definition>
        <argsstring>()</argsstring>
        <name>adjustConfiguration</name>
        <briefdescription>
<para>adjust globals that depend on configuration settings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="10300" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="10299" bodyend="10379"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3f01f3ca33f0c1e062153fbf59c552a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stopDoxygen</definition>
        <argsstring>(int)</argsstring>
        <name>stopDoxygen</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="10383" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="10382" bodyend="10396"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a03398bd40277bc39972502747a158769" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void exitDoxygen</definition>
        <argsstring>()</argsstring>
        <name>exitDoxygen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="10400" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="10399" bodyend="10414"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1af41e7ca17b094272d7e6ca27f966f046" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString createOutputDirectory</definition>
        <argsstring>(const QCString &amp;baseDirName, const char *formatDirOption, const char *defaultDirName)</argsstring>
        <name>createOutputDirectory</name>
        <param>
          <type>const QCString &amp;</type>
          <declname>baseDirName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>formatDirOption</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>defaultDirName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="10419" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="10416" bodyend="10438"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a28c8e93ce05586ac4328130a75b14831" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QCString</type>
        <definition>static QCString getQchFileName</definition>
        <argsstring>()</argsstring>
        <name>getQchFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="10441" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="10440" bodyend="10455"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a7ed1fdd15e6ed566c33a63fcd30d53c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void searchInputFiles</definition>
        <argsstring>()</argsstring>
        <name>searchInputFiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="10458" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="10457" bodyend="10580"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a59d66805ece9da6ffd55fa4cc8252ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parseInput</definition>
        <argsstring>()</argsstring>
        <name>parseInput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="10584" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="10583" bodyend="11086"/>
      </memberdef>
      <memberdef kind="function" id="dc/d98/doxygen_8cpp_1a3efb8cd50f4362e3d58e72febfb872fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void generateOutput</definition>
        <argsstring>()</argsstring>
        <name>generateOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" line="11089" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp" bodystart="11088" bodyend="11450"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1997-2013<sp/>by<sp/>Dimitri<sp/>van<sp/>Heesch.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and<sp/>distribute<sp/>this<sp/>software<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>documentation<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>is<sp/>hereby<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>granted.<sp/>No<sp/>representations<sp/>are<sp/>made<sp/>about<sp/>the<sp/>suitability<sp/>of<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>for<sp/>any<sp/>purpose.<sp/>It<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;<sp/>without<sp/>express<sp/>or<sp/>implied<sp/>warranty.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Documents<sp/>produced<sp/>by<sp/>Doxygen<sp/>are<sp/>derivative<sp/>works<sp/>derived<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>input<sp/>used<sp/>in<sp/>their<sp/>production;<sp/>they<sp/>are<sp/>not<sp/>affected<sp/>by<sp/>this<sp/>license.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qfileinfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qfile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qdir.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qdict.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qregexp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qstrlist.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qtextcodec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qptrdict.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;qtextstream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;version.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doxygen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;entry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;index.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;logos.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;message.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d3c/util_8h" kindref="compound" tooltip="A bunch of utility functions.">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pre.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tagreader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;msc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;docparser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dirdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;outputlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;declinfo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;htmlgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;latexgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mangen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;language.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;htmlhelp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;qhp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ftvhelp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;defargs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rtfgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sqlite3gen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xmlgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;docbookgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;defgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;perlmodgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;reflist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pagedef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bufstr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;commentcnv.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cmdmapper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;searchindex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parserintf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;htags.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pyscanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fortranscanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbusxmlscanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tclscanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;code.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;objcache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;store.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;marshal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/de2/portable_8h" kindref="compound" tooltip="Portable versions of functions that are platform dependent.">portable.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vhdlscanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vhdldocgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;eclipsehelp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cite.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filestorage.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;markdown.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arguments.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memberlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;layout.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;groupdef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;classlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;namespacedef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filename.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;membername.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;membergroup.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;docsets.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;formula.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;settings.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RECURSE_ENTRYTREE(func,var)<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>if<sp/>(var-&gt;children())<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*var-&gt;children());<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(;eli.current();++eli)<sp/>func(eli.current());<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/>}<sp/>}<sp/>while(0)<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_WIN32)<sp/>||<sp/>defined(__CYGWIN__)</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HAS_SIGNALS</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>globally<sp/>accessible<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="d9/d3d/class_class_s_dict" kindref="compound" tooltip="A sorted dictionary of ClassDef objects.">ClassSDict</ref><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::classSDict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><ref refid="d9/d3d/class_class_s_dict" kindref="compound" tooltip="A sorted dictionary of ClassDef objects.">ClassSDict</ref><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::hiddenClasses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/><sp/>*Doxygen::namespaceSDict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref><sp/>*Doxygen::memberNameSDict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref><sp/>*Doxygen::functionNameSDict<sp/>=<sp/>0;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="d9/d8c/class_file_name_list" kindref="compound" tooltip="Class representing a list of FileName objects.">FileNameList</ref><sp/><sp/><sp/><sp/>*Doxygen::inputNameList<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>input<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/><sp/><sp/><sp/>*Doxygen::inputNameDict<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="d0/d32/class_group_s_dict" kindref="compound" tooltip="A sorted dictionary of GroupDef objects.">GroupSDict</ref><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::groupSDict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="d3/dd0/class_formula_list" kindref="compound" tooltip="A list of Formula objects.">FormulaList</ref><sp/><sp/><sp/><sp/><sp/>*Doxygen::formulaList<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>formulas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="d4/dd0/class_formula_dict" kindref="compound" tooltip="Unsorted dictionary of Formula objects.">FormulaDict</ref><sp/><sp/><sp/><sp/><sp/>*Doxygen::formulaDict<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>formulas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="d4/dd0/class_formula_dict" kindref="compound" tooltip="Unsorted dictionary of Formula objects.">FormulaDict</ref><sp/><sp/><sp/><sp/><sp/>*Doxygen::formulaNameDict<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>label<sp/>name<sp/>of<sp/>all<sp/>formulas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="d0/d59/class_page_s_dict" kindref="compound">PageSDict</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::pageSDict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="d0/d59/class_page_s_dict" kindref="compound">PageSDict</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::exampleSDict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="de/d9a/class_section_dict" kindref="compound" tooltip="Unsorted dictionary of SectionInfo objects.">SectionDict</ref><sp/><sp/><sp/><sp/><sp/>*Doxygen::sectionDict<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>page<sp/>sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="de/dd4/class_cite_dict" kindref="compound" tooltip="Cite database access class.">CiteDict</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::citeDict=0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>database<sp/>of<sp/>bibliographic<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::aliasDict(257);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>aliases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">QDict&lt;void&gt;<sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::inputPaths(1009);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/><sp/><sp/><sp/>*Doxygen::includeNameDict<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>include<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/><sp/><sp/><sp/>*Doxygen::exampleNameDict<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>examples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/><sp/><sp/><sp/>*Doxygen::imageNameDict<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>images</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/><sp/><sp/><sp/>*Doxygen::dotFileNameDict<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dot<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/><sp/><sp/><sp/>*Doxygen::mscFileNameDict<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dot<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::namespaceAliasDict(257);<sp/></highlight><highlight class="comment">//<sp/>all<sp/>namespace<sp/>aliases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagDestinationDict(257);<sp/></highlight><highlight class="comment">//<sp/>all<sp/>tag<sp/>locations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">QDict&lt;void&gt;<sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::expandAsDefinedDict(257);<sp/></highlight><highlight class="comment">//<sp/>all<sp/>macros<sp/>that<sp/>should<sp/>be<sp/>expanded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">QIntDict&lt;MemberGroupInfo&gt;<sp/>Doxygen::memGrpInfoDict(1009);<sp/></highlight><highlight class="comment">//<sp/>dictionary<sp/>of<sp/>the<sp/>member<sp/>groups<sp/>heading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::mainPage<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::insideMainPage<sp/>=<sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>are<sp/>we<sp/>generating<sp/>docs<sp/>for<sp/>the<sp/>main<sp/>page?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="dc/d3c/class_f_text_stream" kindref="compound" tooltip="Simplified and optimized version of QTextStream.">FTextStream</ref><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::tagFile;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/><sp/><sp/><sp/>*Doxygen::globalScope<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">QDict&lt;RefList&gt;<sp/><sp/>*Doxygen::xrefLists<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QDict&lt;RefList&gt;;<sp/></highlight><highlight class="comment">//<sp/>dictionary<sp/>of<sp/>cross-referenced<sp/>item<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::parseSourcesNeeded<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">QTime<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::runningTime;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="d8/d4d/class_search_index_intf" kindref="compound">SearchIndexIntf</ref><sp/>*Doxygen::searchIndex=0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">QDict&lt;DefinitionIntf&gt;<sp/>*Doxygen::symbolMap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">QDict&lt;Definition&gt;<sp/>*Doxygen::clangUsrMap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::outputToWizard=FALSE;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">QDict&lt;int&gt;<sp/>*<sp/><sp/><sp/><sp/><sp/>Doxygen::htmlDirMap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">QCache&lt;LookupInfo&gt;<sp/>*Doxygen::lookupCache;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="db/dc8/class_dir_s_dict" kindref="compound" tooltip="A sorted dictionary of DirDef objects.">DirSDict</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::directories;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="d1/d50/class_s_dict" kindref="compound">SDict&lt;DirRelation&gt;</ref><sp/>Doxygen::dirRelations(257);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="d4/d0d/class_parser_manager" kindref="compound" tooltip="Manages programming language parsers.">ParserManager</ref><sp/><sp/><sp/>*Doxygen::parserManager<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">QCString<sp/>Doxygen::htmlFileExtension;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::suppressDocWarnings<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="db/d9d/class_store" kindref="compound" tooltip="The Store is a file based memory manager.">Store</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::symbolStorage;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">QCString<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::objDBFileName;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">QCString<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::entryDBFileName;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::gatherDefines<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="d9/d57/class_index_list" kindref="compound" tooltip="A list of index interfaces.">IndexList</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Doxygen::indexList;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::subpageNestingLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::userComments<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">QCString<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::spaces;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::generatingXmlOutput<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::markdownSupport<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="d0/d1b/class_generics_s_dict" kindref="compound">GenericsSDict</ref><sp/><sp/><sp/>*Doxygen::genericsDict;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>locally<sp/>accessible<sp/>globals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;EntryNav&gt;<sp/><sp/>g_classEntries(1009);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>StringList<sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_inputFiles;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;void&gt;<sp/><sp/><sp/><sp/><sp/><sp/>g_compoundKeywordDict(7);<sp/><sp/></highlight><highlight class="comment">//<sp/>keywords<sp/>recognised<sp/>as<sp/>compounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/><sp/><sp/><sp/><sp/><sp/>*g_outputList<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>of<sp/>output<sp/>generating<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;FileDef&gt;<sp/><sp/><sp/>g_usingDeclarations(1009);<sp/></highlight><highlight class="comment">//<sp/>used<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d3/d94/class_file_storage" kindref="compound" tooltip="Store implementation based on a file.">FileStorage</ref><sp/><sp/><sp/><sp/><sp/>*g_storage<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_successfulRun<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_dumpSymbolMap<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_dumpConfigAsXML<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearAll()</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>g_inputFiles.clear();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//g_excludeNameDict.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//delete<sp/>g_outputList;<sp/>g_outputList=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1afd6bec6aaf77e2943f42cec1208bc46d" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1afd6bec6aaf77e2943f42cec1208bc46d" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>Doxygen::pageSDict-&gt;<ref refid="d1/d50/class_s_dict_1afd6bec6aaf77e2943f42cec1208bc46d" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>Doxygen::exampleSDict-&gt;<ref refid="d1/d50/class_s_dict_1afd6bec6aaf77e2943f42cec1208bc46d" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>Doxygen::inputNameList-&gt;clear();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>Doxygen::formulaList-&gt;clear();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>Doxygen::sectionDict-&gt;<ref refid="d1/d50/class_s_dict_1afd6bec6aaf77e2943f42cec1208bc46d" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>Doxygen::inputNameDict-&gt;clear();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>Doxygen::includeNameDict-&gt;clear();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>Doxygen::exampleNameDict-&gt;clear();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>Doxygen::imageNameDict-&gt;clear();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>Doxygen::dotFileNameDict-&gt;clear();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>Doxygen::mscFileNameDict-&gt;clear();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>Doxygen::formulaDict-&gt;clear();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>Doxygen::formulaNameDict-&gt;clear();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>Doxygen::tagDestinationDict.clear();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::citeDict;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::mainPage;<sp/>Doxygen::mainPage=0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Statistics<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>Statistics()<sp/>{<sp/>stats.setAutoDelete(TRUE);<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>begin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(name);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>*entry=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>stat(name,0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stats.append(entry);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time.restart();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end()</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stats.last()-&gt;elapsed=((double)time.elapsed())/1000.0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print()</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>restore=FALSE;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Debug::isFlagSet(Debug::Time))</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::clearFlag(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>restore=TRUE;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;----------------------\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QListIterator&lt;stat&gt;<sp/>sli(stats);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>*s;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>sli.toFirst();<sp/>(s=sli.current());<sp/>++sli<sp/>)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Spent<sp/>%.3f<sp/>seconds<sp/>in<sp/>%s&quot;</highlight><highlight class="normal">,s-&gt;elapsed,s-&gt;name);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(restore)<sp/>Debug::setFlag(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elapsed;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat()<sp/>:<sp/>name(NULL),elapsed(0)<sp/>{}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>el)<sp/>:<sp/>name(n),elapsed(el)<sp/>{}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;stat&gt;</ref><sp/>stats;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>QTime<sp/><sp/><sp/><sp/><sp/><sp/><sp/>time;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}<sp/>g_s;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>statistics()</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>inputNameDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>Doxygen::inputNameDict-&gt;statistics();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>includeNameDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>Doxygen::includeNameDict-&gt;statistics();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>exampleNameDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>Doxygen::exampleNameDict-&gt;statistics();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>imageNameDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>Doxygen::imageNameDict-&gt;statistics();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>dotFileNameDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>Doxygen::dotFileNameDict-&gt;statistics();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>mscFileNameDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>Doxygen::mscFileNameDict-&gt;statistics();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//fprintf(stderr,&quot;---<sp/>g_excludeNameDict<sp/>stats<sp/>----\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//g_excludeNameDict.statistics();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>aliasDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>Doxygen::aliasDict.statistics();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>typedefDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>namespaceAliasDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>Doxygen::namespaceAliasDict.statistics();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>formulaDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>Doxygen::formulaDict-&gt;statistics();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>formulaNameDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>Doxygen::formulaNameDict-&gt;statistics();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>tagDestinationDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>Doxygen::tagDestinationDict.statistics();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>g_compoundKeywordDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>g_compoundKeywordDict.statistics();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>expandAsDefinedDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>Doxygen::expandAsDefinedDict.statistics();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;---<sp/>memGrpInfoDict<sp/>stats<sp/>----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>Doxygen::memGrpInfoDict.statistics();</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMemberDocs(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcDecl,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>over_load,<ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*nl=0);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findMember(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>funcDecl,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overloaded,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFunc</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>FindBaseClassRelation_Mode</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>TemplateInstances,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>DocumentedOnly,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>Undocumented</highlight></codeline>
<codeline lineno="302"><highlight class="normal">};</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>findClassRelation(</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>*bi,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;int&gt;<sp/>*templateNames,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*bool<sp/>insertUndocumented*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindBaseClassRelation_Mode<sp/>mode,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isArtificial</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">STLInfo</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*className;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*baseClass1;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*baseClass2;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*templType1;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*templName1;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*templType2;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*templName2;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>virtualInheritance;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>iterators;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>STLInfo<sp/>g_stlinfo[]<sp/>=</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>className<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templType1<sp/><sp/><sp/><sp/><sp/>templName1<sp/><sp/><sp/><sp/><sp/>templType2<sp/><sp/><sp/><sp/>templName2<sp/><sp/><sp/><sp/><sp/>virtInheritance<sp/><sp/>//<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;allocator&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;auto_ptr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ptr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;smart_ptr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ptr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;unique_ptr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ptr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;weak_ptr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ptr&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ios_base&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;error_code&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;error_category&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;system_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;error_condition&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;thread&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_ios&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ios_base&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_istream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ios&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_ostream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ios&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_iostream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_istream&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ostream&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_ifstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_istream&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_ofstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ostream&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_fstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_iostream&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_istringstream&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_istream&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_ostringstream&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ostream&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_stringstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_iostream&lt;Char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ios&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ios&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wios&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ios&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;istream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_istream&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wistream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_istream&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ostream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ostream&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wostream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ostream&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ifstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ifstream&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wifstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ifstream&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ofstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ofstream&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wofstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ofstream&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;fstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_fstream&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wfstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_fstream&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;istringstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_istringstream&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wistringstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_istringstream&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ostringstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ostringstream&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wostringstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_ostringstream&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;stringstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_stringstream&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wstringstream&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_stringstream&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;basic_string&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Char&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_string&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;wstring&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;basic_string&lt;wchar_t&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;complex&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;bitset&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bits&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;deque&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;forward_list&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;unordered_map&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;multimap&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;unordered_multimap&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;unordered_set&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;multiset&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;unordered_multiset&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;K&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE<sp/><sp/>},</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;queue&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;priority_queue&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;stack&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;valarray&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elements&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;bad_alloc&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;bad_cast&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;bad_typeid&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;logic_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ios_base::failure&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;runtime_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;bad_exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;domain_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logic_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;invalid_argument&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logic_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;length_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logic_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;out_of_range&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logic_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;range_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;runtime_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;overflow_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;runtime_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;underflow_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;runtime_error&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>},</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>{<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE<sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal">};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSTLMember(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*memEntry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref><sp/>=<sp/>Public;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref><sp/><sp/><sp/><sp/>=<sp/>Entry::VARIABLE_SEC;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;STL<sp/>member&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>FALSE;<sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1acbe763144d791b44aa3620b012d0dd30" kindref="member" tooltip="Artificially introduced item.">artificial</ref><sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//memEntry-&gt;parent<sp/><sp/><sp/><sp/><sp/>=<sp/>root;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//root-&gt;addSubEntry(memEntry);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*memEntryNav<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref>(rootNav,memEntry);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>memEntryNav-&gt;setEntry(memEntry);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>rootNav-&gt;addChild(memEntryNav);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSTLIterator(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*classEntryNav,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*iteratorClassEntry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>iteratorClassEntry-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[STL]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>iteratorClassEntry-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>iteratorClassEntry-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>iteratorClassEntry-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref><sp/><sp/><sp/>=<sp/>Entry::CLASS_SEC;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>iteratorClassEntry-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;STL<sp/>iterator<sp/>class&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>iteratorClassEntry-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref><sp/><sp/><sp/><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>iteratorClassEntry-&gt;<ref refid="d4/dd7/class_entry_1acbe763144d791b44aa3620b012d0dd30" kindref="member" tooltip="Artificially introduced item.">artificial</ref>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*iteratorClassEntryNav<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref>(classEntryNav,iteratorClassEntry);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>iteratorClassEntryNav-&gt;setEntry(iteratorClassEntry);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>classEntryNav-&gt;addChild(iteratorClassEntryNav);</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSTLClasses(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*namespaceEntry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>namespaceEntry-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[STL]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>namespaceEntry-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//namespaceEntry-&gt;parent<sp/><sp/><sp/><sp/>=<sp/>rootNav-&gt;entry();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>namespaceEntry-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>namespaceEntry-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref><sp/><sp/><sp/>=<sp/>Entry::NAMESPACE_SEC;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>namespaceEntry-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;STL<sp/>namespace&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>namespaceEntry-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref><sp/><sp/><sp/><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>namespaceEntry-&gt;<ref refid="d4/dd7/class_entry_1acbe763144d791b44aa3620b012d0dd30" kindref="member" tooltip="Artificially introduced item.">artificial</ref>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//root-&gt;addSubEntry(namespaceEntry);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*namespaceEntryNav<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref>(rootNav,namespaceEntry);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>namespaceEntryNav-&gt;setEntry(namespaceEntry);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>rootNav-&gt;addChild(namespaceEntryNav);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>STLInfo<sp/>*info<sp/>=<sp/>g_stlinfo;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(info-&gt;className)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>STL<sp/>class<sp/>%s\n&quot;,info-&gt;className);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>fullName<sp/>=<sp/>info-&gt;className;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>fullName.prepend(</highlight><highlight class="stringliteral">&quot;std::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>fake<sp/>Entry<sp/>for<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*classEntry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[STL]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fullName;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//classEntry-&gt;parent<sp/><sp/><sp/><sp/>=<sp/>namespaceEntry;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref><sp/><sp/><sp/>=<sp/>Entry::CLASS_SEC;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;STL<sp/>class&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref><sp/><sp/><sp/><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1acbe763144d791b44aa3620b012d0dd30" kindref="member" tooltip="Artificially introduced item.">artificial</ref>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//namespaceEntry-&gt;addSubEntry(classEntry);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*classEntryNav<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref>(namespaceEntryNav,classEntry);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>classEntryNav-&gt;setEntry(classEntry);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>namespaceEntryNav-&gt;addChild(classEntryNav);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>template<sp/>arguments<sp/>to<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;templType1)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>=</highlight><highlight class="stringliteral">&quot;typename&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>=info-&gt;templType1;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>al-&gt;append(a);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;templType2)<sp/></highlight><highlight class="comment">//<sp/>another<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>=</highlight><highlight class="stringliteral">&quot;typename&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>=info-&gt;templType2;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>al-&gt;append(a);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref>;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;append(al);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;templName1)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSTLMember(classEntryNav,info-&gt;templType1,info-&gt;templName1);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;templName2)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSTLMember(classEntryNav,info-&gt;templType2,info-&gt;templName2);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fullName==</highlight><highlight class="stringliteral">&quot;std::auto_ptr&quot;</highlight><highlight class="normal"><sp/>||<sp/>fullName==</highlight><highlight class="stringliteral">&quot;std::smart_ptr&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullName==</highlight><highlight class="stringliteral">&quot;std::unique_ptr&quot;</highlight><highlight class="normal"><sp/>||<sp/>fullName==</highlight><highlight class="stringliteral">&quot;std::weak_ptr&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*memEntry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;operator-&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref><sp/>=<sp/>Public;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref><sp/><sp/><sp/><sp/>=<sp/>Entry::FUNCTION_SEC;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;STL<sp/>member&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>FALSE;<sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntry-&gt;<ref refid="d4/dd7/class_entry_1acbe763144d791b44aa3620b012d0dd30" kindref="member" tooltip="Artificially introduced item.">artificial</ref><sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*memEntryNav<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref>(classEntryNav,memEntry);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memEntryNav-&gt;setEntry(memEntry);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classEntryNav-&gt;addChild(memEntryNav);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;baseClass1)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a22b4c7b8255e183b68c49d5bd9f04017" kindref="member" tooltip="list of base classes">extends</ref>-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref>(info-&gt;baseClass1,Public,info-&gt;virtualInheritance?Virtual:Normal));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;baseClass2)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classEntry-&gt;<ref refid="d4/dd7/class_entry_1a22b4c7b8255e183b68c49d5bd9f04017" kindref="member" tooltip="list of base classes">extends</ref>-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref>(info-&gt;baseClass2,Public,info-&gt;virtualInheritance?Virtual:Normal));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;iterators)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>iterator<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSTLIterator(classEntryNav,fullName+</highlight><highlight class="stringliteral">&quot;::iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSTLIterator(classEntryNav,fullName+</highlight><highlight class="stringliteral">&quot;::const_iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSTLIterator(classEntryNav,fullName+</highlight><highlight class="stringliteral">&quot;::reverse_iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSTLIterator(classEntryNav,fullName+</highlight><highlight class="stringliteral">&quot;::const_reverse_iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>info++;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*findScopeFromQualifiedName(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*startScope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;n,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope=0);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPageToContext(<ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd,<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;parent())<sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>page<sp/>to<sp/>it&apos;s<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>scope<sp/>=<sp/>rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;parent()-&gt;section()==Entry::PACKAGEDOC_SEC)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope=substitute(scope,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>scope<sp/>=<sp/>stripAnonymousNamespaceScope(scope);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>scope+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>findScopeFromQualifiedName(Doxygen::globalScope,scope);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d)<sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;setPageScope(d);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addRelatedPage(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd=0;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>QListIterator&lt;Grouping&gt;<sp/>gli(*root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><ref refid="d7/d59/struct_grouping" kindref="compound" tooltip="Grouping info.">Grouping</ref><sp/>*g;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(g=gli.current());++gli)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g-&gt;<ref refid="d7/d59/struct_grouping_1a05e6a053a86cc2f588d065f3880801dc" kindref="member" tooltip="name of the group">groupname</ref>.isEmpty()<sp/>&amp;&amp;<sp/>(gd=Doxygen::groupSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(g-&gt;<ref refid="d7/d59/struct_grouping_1a05e6a053a86cc2f588d065f3880801dc" kindref="member" tooltip="name of the group">groupname</ref>)))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;---&gt;<sp/>addRelatedPage()<sp/>%s<sp/>gd=%p\n&quot;,root-&gt;name.data(),gd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>QCString<sp/>doc;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>.isEmpty())</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>doc=root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>doc=root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>+</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">+root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd<sp/>=<sp/>addRelatedPage(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,doc,root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gd,rootNav-&gt;tagInfo(),</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pd)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>pd-&gt;setShowToc(root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>addPageToContext(pd,rootNav);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildGroupListFiltered(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>additional,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>includeExternal)</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::GROUPDOC_SEC<sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((!includeExternal<sp/>&amp;&amp;<sp/>rootNav-&gt;tagInfo()==0)<sp/>||</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>includeExternal<sp/>&amp;&amp;<sp/>rootNav-&gt;tagInfo()!=0))</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((root-&gt;groupDocType==<ref refid="d4/dd7/class_entry_1a470b655d0d6179559a11a81e6617d509af6812be32a740baaad470ce4aec182be" kindref="member" tooltip="defgroup">Entry::GROUPDOC_NORMAL</ref><sp/>&amp;&amp;<sp/>!additional)<sp/>||</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;groupDocType!=<ref refid="d4/dd7/class_entry_1a470b655d0d6179559a11a81e6617d509af6812be32a740baaad470ce4aec182be" kindref="member" tooltip="defgroup">Entry::GROUPDOC_NORMAL</ref><sp/>&amp;&amp;<sp/><sp/>additional))</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd<sp/>=<sp/>Doxygen::groupSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Processing<sp/>group<sp/>&apos;%s&apos;:&apos;%s&apos;<sp/>add=%d<sp/>ext=%d<sp/>gd=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;type.data(),root-&gt;name.data(),additional,includeExternal,gd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gd-&gt;hasGroupTitle()<sp/>)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;setGroupTitle(<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref><sp/>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.length()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref><sp/>!=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref><sp/>&amp;&amp;<sp/>gd-&gt;groupTitle()<sp/>!=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref><sp/>)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;group<sp/>%s:<sp/>ignoring<sp/>title<sp/>\&quot;%s\&quot;<sp/>that<sp/>does<sp/>not<sp/>match<sp/>old<sp/>title<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qPrint(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>),<sp/>qPrint(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>),<sp/>qPrint(gd-&gt;groupTitle())<sp/>);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref><sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1a829959b92985d0264b9fc17277bf91b4" kindref="member">setInbodyDocumentation</ref>(<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref><sp/>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;tagInfo())</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,rootNav-&gt;tagInfo()-&gt;fileName);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1a9548c1e2218ce2730c6c3e31bdac6452" kindref="member">setReference</ref>(rootNav-&gt;tagInfo()-&gt;tagName);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>empty<sp/>docs<sp/>for<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty()<sp/>?<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref><sp/>:<sp/>QCString(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">),root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>,FALSE);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1a829959b92985d0264b9fc17277bf91b4" kindref="member">setInbodyDocumentation</ref>(<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref><sp/>);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::groupSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,gd);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;children())</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*rootNav-&gt;children());</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*e;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(e=eli.current());++eli)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buildGroupListFiltered(e,additional,includeExternal);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildGroupList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>first<sp/>process<sp/>only<sp/>local<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>process<sp/>the<sp/>@defgroups<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>buildGroupListFiltered(rootNav,FALSE,FALSE);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>process<sp/>the<sp/>@addtogroup,<sp/>@weakgroup<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>buildGroupListFiltered(rootNav,TRUE,FALSE);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>then<sp/>also<sp/>process<sp/>external<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>process<sp/>the<sp/>@defgroups<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>buildGroupListFiltered(rootNav,FALSE,TRUE);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>process<sp/>the<sp/>@addtogroup,<sp/>@weakgroup<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>buildGroupListFiltered(rootNav,TRUE,TRUE);</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findGroupScope(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::GROUPDOC_SEC<sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;parent()<sp/>&amp;&amp;<sp/>!rootNav-&gt;parent()-&gt;name().isEmpty())</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gd=Doxygen::groupSDict-&gt;find(rootNav-&gt;name())))</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>scope<sp/>=<sp/>rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;parent()-&gt;section()==Entry::PACKAGEDOC_SEC)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=substitute(scope,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope<sp/>=<sp/>stripAnonymousNamespaceScope(scope);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+gd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>findScopeFromQualifiedName(Doxygen::globalScope,scope);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d)<sp/></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;setGroupScope(d);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findGroupScope,rootNav);</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>organizeSubGroupsFiltered(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>additional)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::GROUPDOC_SEC<sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty())</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((root-&gt;groupDocType==<ref refid="d4/dd7/class_entry_1a470b655d0d6179559a11a81e6617d509af6812be32a740baaad470ce4aec182be" kindref="member" tooltip="defgroup">Entry::GROUPDOC_NORMAL</ref><sp/>&amp;&amp;<sp/>!additional)<sp/>||</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;groupDocType!=<ref refid="d4/dd7/class_entry_1a470b655d0d6179559a11a81e6617d509af6812be32a740baaad470ce4aec182be" kindref="member" tooltip="defgroup">Entry::GROUPDOC_NORMAL</ref><sp/>&amp;&amp;<sp/>additional))</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gd=Doxygen::groupSDict-&gt;find(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>)))</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;adding<sp/>%s<sp/>to<sp/>group<sp/>%s\n&quot;,root-&gt;name.data(),gd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addGroupToGroups(root,gd);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;children())</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*rootNav-&gt;children());</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*e;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(e=eli.current());++eli)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>organizeSubGroupsFiltered(e,additional);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>organizeSubGroups(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="748"><highlight class="normal">{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Defining<sp/>groups\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>process<sp/>the<sp/>@defgroups<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>organizeSubGroupsFiltered(rootNav,FALSE);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Additional<sp/>groups\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>process<sp/>the<sp/>@addtogroup,<sp/>@weakgroup<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>organizeSubGroupsFiltered(rootNav,TRUE);</highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildFileList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((rootNav-&gt;section()==Entry::FILEDOC_SEC)<sp/>||</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rootNav-&gt;section()<sp/>&amp;<sp/>Entry::FILE_MASK)<sp/>&amp;&amp;<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_ALL&quot;</highlight><highlight class="normal">)))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!rootNav-&gt;name().isEmpty()<sp/>&amp;&amp;<sp/>!rootNav-&gt;tagInfo()<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>any<sp/>file<sp/>coming<sp/>from<sp/>tag<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=findFileDef(Doxygen::inputNameDict,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,ambig);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;****************<sp/>root-&gt;name=%s<sp/>fd=%p\n&quot;,root-&gt;name.data(),fd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&amp;&amp;<sp/>!ambig)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!fd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty())<sp/>||</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!fd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty()))</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;file<sp/>%s<sp/>already<sp/>documented.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Skipping<sp/>documentation.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data()</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>documentation!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>FALSE<sp/>in<sp/>setDocumentation<sp/>is<sp/>small<sp/>hack<sp/>to<sp/>make<sp/>sure<sp/>a<sp/>file<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>documented<sp/>even<sp/>if<sp/>a<sp/>\file<sp/>command<sp/>is<sp/>used<sp/>without<sp/>further<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>,FALSE);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);<sp/></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QListIterator&lt;Grouping&gt;<sp/>gli(*root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d59/struct_grouping" kindref="compound" tooltip="Grouping info.">Grouping</ref><sp/>*g;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(g=gli.current());++gli)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd=0;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g-&gt;<ref refid="d7/d59/struct_grouping_1a05e6a053a86cc2f588d065f3880801dc" kindref="member" tooltip="name of the group">groupname</ref>.isEmpty()<sp/>&amp;&amp;<sp/>(gd=Doxygen::groupSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(g-&gt;<ref refid="d7/d59/struct_grouping_1a05e6a053a86cc2f588d065f3880801dc" kindref="member" tooltip="name of the group">groupname</ref>)))</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;addFile(fd);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;makePartOfGroup(gd);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;File<sp/>%s:<sp/>in<sp/>group<sp/>%s\n&quot;,fd-&gt;name().data(),s-&gt;data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>.data();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>text(4096);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text.sprintf(</highlight><highlight class="stringliteral">&quot;the<sp/>name<sp/>`%s&apos;<sp/>supplied<sp/>as<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>second<sp/>argument<sp/>in<sp/>the<sp/>\\file<sp/>statement<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qPrint(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ambig)<sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>ambiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text+=</highlight><highlight class="stringliteral">&quot;matches<sp/>the<sp/>following<sp/>input<sp/>files:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text+=showFileDefMatches(Doxygen::inputNameDict,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text+=</highlight><highlight class="stringliteral">&quot;Please<sp/>use<sp/>a<sp/>more<sp/>specific<sp/>name<sp/>by<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;including<sp/>a<sp/>(larger)<sp/>part<sp/>of<sp/>the<sp/>path!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>not<sp/>an<sp/>input<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text+=</highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>an<sp/>input<sp/>file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn(fn,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,text);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(buildFileList,rootNav);</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addIncludeFile(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*ifd,<ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root)</highlight></codeline>
<codeline lineno="837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.stripWhiteSpace().isEmpty()<sp/>||<sp/></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>.stripWhiteSpace().isEmpty()<sp/>||<sp/></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_ALL&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>!=Private</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;&gt;&gt;&gt;&gt;<sp/>includeFile=%s\n&quot;,root-&gt;includeFile.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>local=Config_getBool(</highlight><highlight class="stringliteral">&quot;FORCE_LOCAL_INCLUDES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>includeFile<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a88c55fcdd65a52dce640136f18adccf2" kindref="member" tooltip="include file (2 arg of \class, must be unique)">includeFile</ref>;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!includeFile.isEmpty()<sp/>&amp;&amp;<sp/>includeFile.at(0)==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>includeFile=includeFile.mid(1,includeFile.length()-2);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!includeFile.isEmpty()<sp/>&amp;&amp;<sp/>includeFile.at(0)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>includeFile=includeFile.mid(1,includeFile.length()-2);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>need<sp/>to<sp/>include<sp/>a<sp/>verbatim<sp/>copy<sp/>of<sp/>the<sp/>header<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root-&gt;includeFile=%s\n&quot;,root-&gt;includeFile.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!includeFile.isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fd=findFileDef(Doxygen::inputNameDict,includeFile,ambig))==0</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>text;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text.sprintf(</highlight><highlight class="stringliteral">&quot;the<sp/>name<sp/>`%s&apos;<sp/>supplied<sp/>as<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>argument<sp/>of<sp/>the<sp/>\\class,<sp/>\\struct,<sp/>\\union,<sp/>or<sp/>\\include<sp/>command<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qPrint(includeFile)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ambig)<sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>ambiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text+=</highlight><highlight class="stringliteral">&quot;matches<sp/>the<sp/>following<sp/>input<sp/>files:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text+=showFileDefMatches(Doxygen::inputNameDict,root-&gt;<ref refid="d4/dd7/class_entry_1a88c55fcdd65a52dce640136f18adccf2" kindref="member" tooltip="include file (2 arg of \class, must be unique)">includeFile</ref>);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text+=</highlight><highlight class="stringliteral">&quot;Please<sp/>use<sp/>a<sp/>more<sp/>specific<sp/>name<sp/>by<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;including<sp/>a<sp/>(larger)<sp/>part<sp/>of<sp/>the<sp/>path!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>name<sp/>is<sp/>not<sp/>an<sp/>input<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text+=</highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>an<sp/>input<sp/>file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,text);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(includeFile.isEmpty()<sp/>&amp;&amp;<sp/>ifd<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>file<sp/>extension<sp/>makes<sp/>sense</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guessSection(ifd-&gt;<ref refid="de/db0/class_file_def_1a80989971450b35c785a8fe0002e1c2db" kindref="member">name</ref>())==Entry::HEADER_SEC)</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>implicit<sp/>assumption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=ifd;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>file<sp/>is<sp/>found,<sp/>we<sp/>mark<sp/>it<sp/>as<sp/>a<sp/>source<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>iName<sp/>=<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a32626ce14eb253f6da64ed475419a4ac" kindref="member" tooltip="include name (3 arg of \class)">includeName</ref>.isEmpty()<sp/>?<sp/></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a32626ce14eb253f6da64ed475419a4ac" kindref="member" tooltip="include name (3 arg of \class)">includeName</ref><sp/>:<sp/>includeFile;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iName.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>user<sp/>specified<sp/>include<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iName.at(0)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>local=FALSE;<sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>override</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iName.at(0)==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>local=TRUE;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iName.at(0)==</highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>||<sp/>iName.at(0)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iName=iName.mid(1,iName.length()-2);<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>quotes<sp/>or<sp/>brackets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iName.isEmpty())</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iName=fd-&gt;<ref refid="de/db0/class_file_def_1a80989971450b35c785a8fe0002e1c2db" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Config_getList(</highlight><highlight class="stringliteral">&quot;STRIP_FROM_INC_PATH&quot;</highlight><highlight class="normal">).isEmpty())<sp/></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iName=stripFromIncludePath(fd-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>());</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>use<sp/>name<sp/>of<sp/>the<sp/>file<sp/>containing<sp/>the<sp/>class<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iName=fd-&gt;<ref refid="de/db0/class_file_def_1a80989971450b35c785a8fe0002e1c2db" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd-&gt;generateSourceFile())<sp/></highlight><highlight class="comment">//<sp/>generate<sp/>code<sp/>for<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setIncludeFile(fd,iName,local,!root-&gt;<ref refid="d4/dd7/class_entry_1a32626ce14eb253f6da64ed475419a4ac" kindref="member" tooltip="include name (3 arg of \class)">includeName</ref>.isEmpty());</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>put<sp/>#include<sp/>in<sp/>the<sp/>class<sp/>documentation<sp/>without<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setIncludeFile(0,iName,local,TRUE);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="932"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addNamespace(<ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root,<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd)</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>this<sp/>class<sp/>is<sp/>defined<sp/>inside<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref><sp/>&amp;<sp/>Entry::COMPOUND_MASK)</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*e<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a2161a0a728abbfc211fe5d6af9d6cc16" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(e)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::NAMESPACE_SEC)</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=0;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>nsName<sp/>=<sp/>stripAnonymousNamespaceScope(e-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;addNameSpace()<sp/>trying:<sp/>%s\n&quot;,nsName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nsName.isEmpty()<sp/>&amp;&amp;<sp/>nsName.at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(nd=getResolvedNamespace(nsName))</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setNamespace(nd);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setOuterScope(nd);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;insertClass(cd);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e=e-&gt;<ref refid="d4/dd7/class_entry_1a2161a0a728abbfc211fe5d6af9d6cc16" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="961"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="963"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*findScope(<ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level=0)</highlight></codeline>
<codeline lineno="964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;start<sp/>findScope<sp/>name=%s\n&quot;,root-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*result=0;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>&amp;Entry::SCOPE_MASK)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>findScope(root-&gt;<ref refid="d4/dd7/class_entry_1a2161a0a728abbfc211fe5d6af9d6cc16" kindref="member">parent</ref>,level+1);<sp/></highlight><highlight class="comment">//<sp/>traverse<sp/>to<sp/>the<sp/>root<sp/>of<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>%s<sp/>inside<sp/>%s<sp/>at<sp/>level<sp/>%d\n&quot;,root-&gt;name.data(),result-&gt;name().data(),level);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>look<sp/>at<sp/>template<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result-&gt;findInnerCompound(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>reached<sp/>the<sp/>global<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>look<sp/>at<sp/>template<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Doxygen::globalScope-&gt;findInnerCompound(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>in<sp/>globalScope<sp/>%s<sp/>at<sp/>level<sp/>%d\n&quot;,result-&gt;name().data(),level);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;end<sp/>findScope(%s,%d)=%s\n&quot;,root-&gt;name.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>level,result==0<sp/>?<sp/>&quot;&lt;none&gt;&quot;<sp/>:<sp/>result-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="989"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="994"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*buildScopeFromQualifiedName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>name,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang)</highlight></codeline>
<codeline lineno="995"><highlight class="normal">{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=0,l;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*prevScope=Doxygen::globalScope;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>QCString<sp/>fullScope;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i&lt;level)</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx=getScopeFragment(name,p,&amp;l);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>nsName<sp/>=<sp/>name.mid(idx,l);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nsName.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prevScope;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fullScope.isEmpty())<sp/>fullScope+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>fullScope+=nsName;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(fullScope);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*innerScope<sp/>=<sp/>nd;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;<sp/></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd==0)<sp/>cd<sp/>=<sp/>getClass(fullScope);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd==0<sp/>&amp;&amp;<sp/>cd)<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>is<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>innerScope<sp/>=<sp/>cd;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd==0<sp/>&amp;&amp;<sp/>cd==0)<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>is<sp/>not<sp/>known!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>introduce<sp/>bogus<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;++<sp/>adding<sp/>dummy<sp/>namespace<sp/>%s<sp/>to<sp/>%s\n&quot;,nsName.data(),prevScope-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>(</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[generated]&quot;</highlight><highlight class="normal">,1,1,fullScope);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setLanguage(lang);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>namespace<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1a25a85aeba441b4c855ea7be25a4741b5" kindref="member">inSort</ref>(fullScope,nd);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>innerScope<sp/>=<sp/>nd;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>scope<sp/>is<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>parent/child<sp/>scope<sp/>relation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>prevScope-&gt;addInnerCompound(innerScope);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>innerScope-&gt;setOuterScope(prevScope);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>proceed<sp/>to<sp/>the<sp/>next<sp/>scope<sp/>fragment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>p=idx+l+2;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>prevScope=innerScope;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prevScope;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*findScopeFromQualifiedName(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*startScope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;n,</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fileScope)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&lt;findScopeFromQualifiedName(%s,%s)\n&quot;,startScope<sp/>?<sp/>startScope-&gt;name().data()<sp/>:<sp/>0,<sp/>n.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*resultScope=startScope;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultScope==0)<sp/>resultScope=Doxygen::globalScope;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>QCString<sp/>scope=stripTemplateSpecifiersFromScope(n,FALSE);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l1=0,i1;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>i1=getScopeFragment(scope,0,&amp;l1);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i1==-1)<sp/></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;no<sp/>fragments!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resultScope;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=i1+l1,l2=0,i2;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i2=getScopeFragment(scope,p,&amp;l2))!=-1)</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>nestedNameSpecifier<sp/>=<sp/>scope.mid(i1,l1);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*orgScope<sp/>=<sp/>resultScope;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>nestedNameSpecifier=%s\n&quot;,nestedNameSpecifier.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>resultScope<sp/>=<sp/>resultScope-&gt;findInnerCompound(nestedNameSpecifier);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>resultScope=%p\n&quot;,resultScope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultScope==0)<sp/></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*usedNamespaces;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orgScope==Doxygen::globalScope<sp/>&amp;&amp;<sp/>fileScope<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(usedNamespaces<sp/>=<sp/>fileScope-&gt;getUsedNamespaces()))<sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>search<sp/>for<sp/>used<sp/>namespaces<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamespaceSDict::Iterator<sp/>ni(*usedNamespaces);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ni.toFirst();((nd=ni.current())<sp/>&amp;&amp;<sp/>resultScope==0);++ni)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restart<sp/>search<sp/>within<sp/>the<sp/>used<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultScope<sp/>=<sp/>findScopeFromQualifiedName(nd,n,fileScope);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultScope)<sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>nested<sp/>class<sp/>A::I<sp/>in<sp/>used<sp/>namespace<sp/>N,<sp/>we<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>N::A::I<sp/>while<sp/>looking<sp/>for<sp/>A,<sp/>so<sp/>we<sp/>should<sp/>compare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resultScope-&gt;name()<sp/>against<sp/>scope.left(i2+l2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>-&gt;<sp/>result=%s<sp/>scope=%s\n&quot;,resultScope-&gt;name().data(),scope.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rightScopeMatch(resultScope-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),scope.left(i2+l2)))</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>nextFragment;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>search<sp/>for<sp/>used<sp/>classes.<sp/>Complication:<sp/>we<sp/>haven&apos;t<sp/>been<sp/>able<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>put<sp/>them<sp/>in<sp/>the<sp/>right<sp/>scope<sp/>yet,<sp/>because<sp/>we<sp/>are<sp/>still<sp/>resolving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scope<sp/>relations!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore<sp/>loop<sp/>through<sp/>all<sp/>used<sp/>classes<sp/>and<sp/>see<sp/>if<sp/>there<sp/>is<sp/>a<sp/>right<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope<sp/>match<sp/>between<sp/>the<sp/>used<sp/>class<sp/>and<sp/>nestedNameSpecifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QDictIterator&lt;FileDef&gt;<sp/>ui(g_usingDeclarations);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*usedFd;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ui.toFirst();(usedFd=ui.current());++ui)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Checking<sp/>using<sp/>class<sp/>%s\n&quot;,ui.currentKey());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rightScopeMatch(ui.currentKey(),nestedNameSpecifier))</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ui.currentKey()<sp/>is<sp/>the<sp/>fully<sp/>qualified<sp/>name<sp/>of<sp/>nestedNameSpecifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>use<sp/>this<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fqn<sp/>=<sp/>QCString(ui.currentKey())+</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope.right(scope.length()-p);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultScope<sp/>=<sp/>buildScopeFromQualifiedName(fqn,fqn.contains(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">),startScope-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>());</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Creating<sp/>scope<sp/>from<sp/>fqn=%s<sp/>result<sp/>%p\n&quot;,fqn.data(),resultScope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultScope)<sp/></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>Match!<sp/>resultScope=%s\n&quot;,resultScope-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resultScope;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>name<sp/>%s<sp/>not<sp/>found<sp/>in<sp/>scope<sp/>%s\n&quot;,nestedNameSpecifier.data(),orgScope-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/>nextFragment:</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>i1=i2;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>l1=l2;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i2+l2;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;findScopeFromQualifiedName<sp/>scope<sp/>%s\n&quot;,resultScope-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resultScope;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*getTemplateArgumentsFromName(</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>*tArgLists)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tArgLists==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>ali(*tArgLists);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>scope<sp/>fragment,<sp/>check<sp/>if<sp/>it<sp/>is<sp/>a<sp/>template<sp/>and<sp/>advance<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>list<sp/>if<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=name.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,p))!=-1)</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd<sp/>=<sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name.left(i));</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd==0)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>getClass(name.left(i));</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>())</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ali;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+2;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ali.current();</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><ref refid="d1/dcf/class_class_def_1ae70cf86d35fe954a94c566fbcfc87939" kindref="member" tooltip="The various compound types.">ClassDef::CompoundType</ref><sp/>convertToCompoundType(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>section,uint64<sp/>specifier)</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def_1ae70cf86d35fe954a94c566fbcfc87939" kindref="member" tooltip="The various compound types.">ClassDef::CompoundType</ref><sp/>sec=ClassDef::Class;<sp/></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specifier&amp;Entry::Struct)<sp/></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>sec=ClassDef::Struct;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specifier&amp;Entry::Union)<sp/></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>sec=ClassDef::Union;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specifier&amp;Entry::Category)<sp/></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>sec=ClassDef::Category;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specifier&amp;Entry::Interface)<sp/></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>sec=ClassDef::Interface;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specifier&amp;Entry::Protocol)<sp/></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>sec=ClassDef::Protocol;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specifier&amp;Entry::Exception)<sp/></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>sec=ClassDef::Exception;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specifier&amp;Entry::Service)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>sec=ClassDef::Service;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specifier&amp;Entry::Singleton)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>sec=ClassDef::Singleton;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(section)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>Entry::UNION_SEC:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Entry::UNIONDOC_SEC:<sp/></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec=ClassDef::Union;<sp/></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>Entry::STRUCT_SEC:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Entry::STRUCTDOC_SEC:<sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec=ClassDef::Struct;<sp/></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>Entry::INTERFACE_SEC:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Entry::INTERFACEDOC_SEC:</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec=ClassDef::Interface;<sp/></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>Entry::PROTOCOL_SEC:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Entry::PROTOCOLDOC_SEC:</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec=ClassDef::Protocol;<sp/></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>Entry::CATEGORY_SEC:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Entry::CATEGORYDOC_SEC:</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec=ClassDef::Category;<sp/></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>Entry::EXCEPTION_SEC:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Entry::EXCEPTIONDOC_SEC:</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec=ClassDef::Exception;<sp/></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Entry::SERVICEDOC_SEC:</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec=ClassDef::Service;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Entry::SINGLETONDOC_SEC:</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec=ClassDef::Singleton;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sec;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addClassToContext(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Loading<sp/>entry<sp/>for<sp/>rootNav=%p<sp/>name=%s\n&quot;,rootNav,rootNav-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//NamespaceDef<sp/>*nd<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd<sp/>=<sp/>rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>QCString<sp/>scName;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;parent()-&gt;section()&amp;Entry::SCOPE_MASK)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>scName=rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>without<sp/>parent&apos;s<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>QCString<sp/>fullName<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>off<sp/>any<sp/>template<sp/>parameters<sp/>(but<sp/>not<sp/>those<sp/>for<sp/>specializations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>fullName=stripTemplateSpecifiersFromScope(fullName);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>with<sp/>scope<sp/>(if<sp/>not<sp/>present<sp/>already)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>QCString<sp/>qualifiedName<sp/>=<sp/>fullName;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scName.isEmpty()<sp/>&amp;&amp;<sp/>!leftScopeMatch(fullName,scName))</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>qualifiedName.prepend(scName+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>already<sp/>found<sp/>the<sp/>class<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>getClass(qualifiedName);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>Debug::print(Debug::Classes,0,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Found<sp/>class<sp/>with<sp/>name<sp/>%s<sp/>(qualifiedName=%s<sp/>-&gt;<sp/>cd=%p)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/>?<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data()<sp/>:<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data(),<sp/>qualifiedName.data(),cd);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>fullName=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Existing<sp/>class<sp/>%s!\n&quot;</highlight><highlight class="normal">,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(cd-&gt;templateArguments()==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//printf(&quot;existing<sp/>ClassDef<sp/>tempArgList=%p<sp/>specScope=%s\n&quot;,root-&gt;tArgList,root-&gt;scopeSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cd-&gt;setTemplateArguments(tArgList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>!=-1<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()==-1)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cd-&gt;setName(fullName);<sp/>//<sp/>change<sp/>name<sp/>to<sp/>match<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>()==0)<sp/></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>happens<sp/>if<sp/>a<sp/>template<sp/>class<sp/>declared<sp/>with<sp/>@class<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>the<sp/>actual<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tArgList<sp/>=<sp/></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTemplateArgumentsFromName(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setTemplateArguments(tArgList);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setCompoundType(convertToCompoundType(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>new<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def_1ae70cf86d35fe954a94c566fbcfc87939" kindref="member" tooltip="The various compound types.">ClassDef::CompoundType</ref><sp/>sec<sp/>=<sp/>convertToCompoundType(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>className;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>namespaceName;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>extractNamespaceName(fullName,className,namespaceName);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;New<sp/>class:<sp/>fullname<sp/>%s<sp/>namespace<sp/>`%s&apos;<sp/>name=`%s&apos;<sp/>brief=`%s&apos;<sp/>docs=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fullName.data(),namespaceName.data(),className.data(),root-&gt;brief.data(),root-&gt;doc.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>tagName;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>refFileName;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;tagInfo())</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tagName<sp/><sp/><sp/><sp/><sp/>=<sp/>rootNav-&gt;tagInfo()-&gt;tagName;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>refFileName<sp/>=<sp/>rootNav-&gt;tagInfo()-&gt;fileName;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>cd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullName,sec,tagName,refFileName,TRUE,root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Enum);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>New<sp/>class<sp/>`%s&apos;<sp/>(sec=0x%08x)!<sp/>#tArgLists=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullName.data(),sec,root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>(int)root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;count()<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>docs<sp/>to<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setHidden(root-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setArtificial(root-&gt;<ref refid="d4/dd7/class_entry_1acbe763144d791b44aa3620b012d0dd30" kindref="member" tooltip="Artificially introduced item.">artificial</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setClassSpecifier(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setTypeConstraints(root-&gt;<ref refid="d4/dd7/class_entry_1a77d30ef01feb28bf83b77d4148968f84" kindref="member" tooltip="where clause (C#) for type constraints">typeConstr</ref>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>ClassDef<sp/>%s<sp/>tempArgList=%p<sp/>specScope=%s\n&quot;,fullName.data(),root-&gt;tArgList,root-&gt;scopeSpec.data());<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tArgList<sp/>=<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getTemplateArgumentsFromName(fullName,root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;class<sp/>%s<sp/>template<sp/>args=%s\n&quot;,fullName.data(),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tArgList<sp/>?<sp/>tempArgListToString(tArgList).data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setTemplateArguments(tArgList);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setProtection(root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setIsStatic(root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>definition<sp/>containing<sp/>the<sp/>class<sp/>cd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setBodyDef(fd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>class<sp/>is<sp/>found<sp/>inside<sp/>a<sp/>namespace<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>found=addNamespace(root,cd);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>empty<sp/>string<sp/>test<sp/>is<sp/>needed<sp/>for<sp/>extract<sp/>all<sp/>case<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>class<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;ClassDict.insert(%s)\n&quot;,resolveDefines(fullName).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(fullName,cd);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;isGeneric())<sp/></highlight><highlight class="comment">//<sp/>generics<sp/>are<sp/>also<sp/>stored<sp/>in<sp/>a<sp/>separate<sp/>dictionary<sp/>for<sp/>fast<sp/>lookup<sp/>of<sp/>instantions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::genericsDict-&gt;insert(fullName,cd);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a095b43379529186300dd6a8d8830d5dc" kindref="member" tooltip="automatically group class members?">subGrouping</ref>)<sp/>cd-&gt;setSubGrouping(FALSE);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1ab753d57a3b39906b612a8c81a1b93f1e" kindref="member" tooltip="returns TRUE if this class has documentation">hasDocumentation</ref>())</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>addIncludeFile(cd,fd,root);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&amp;&amp;<sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref><sp/>&amp;<sp/>Entry::COMPOUND_MASK))<sp/></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;&gt;<sp/>Inserting<sp/>class<sp/>`%s&apos;<sp/>in<sp/>file<sp/>`%s&apos;<sp/>(root-&gt;fileName=`%s&apos;)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fd-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;fileName.data()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setFileDef(fd);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a61ec1208cd1055a3d91cb6a2ee60451d" kindref="member">insertClass</ref>(cd);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>addClassToGroups(root,cd);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>cd-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>build<sp/>a<sp/>list<sp/>of<sp/>all<sp/>classes<sp/>mentioned<sp/>in<sp/>the<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>all<sp/>classes<sp/>that<sp/>have<sp/>a<sp/>documentation<sp/>block<sp/>before<sp/>their<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildClassList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="1366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((rootNav-&gt;section()<sp/>&amp;<sp/>Entry::COMPOUND_MASK)<sp/>||<sp/></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::OBJCIMPL_SEC)<sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>addClassToContext(rootNav);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(buildClassList,rootNav);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildClassDocList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;section()<sp/>&amp;<sp/>Entry::COMPOUNDDOC_MASK)<sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>addClassToContext(rootNav);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(buildClassDocList,rootNav);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resolveClassNestingRelations()</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();cli.current();++cli)<sp/>cli.current()-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration=0;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!done)</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>done=TRUE;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>++iteration;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cd-&gt;visited)</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>name<sp/>=<sp/>stripAnonymousNamespaceScope(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;processing=%s,<sp/>iteration=%d\n&quot;,cd-&gt;name().data(),iteration);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>add<sp/>class<sp/>to<sp/>the<sp/>correct<sp/>structural<sp/>context<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>findScopeFromQualifiedName(Doxygen::globalScope,</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,cd-&gt;<ref refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" kindref="member" tooltip="Returns the file in which this compound&amp;#39;s definition can be found.">getFileDef</ref>());</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;******<sp/>adding<sp/>%s<sp/>to<sp/>scope<sp/>%s<sp/>in<sp/>iteration<sp/>%d\n&quot;,cd-&gt;name().data(),d-&gt;name().data(),iteration);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;addInnerCompound(cd);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setOuterScope(d);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;visited=TRUE;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;******<sp/>ignoring<sp/>%s:<sp/>scope<sp/>not<sp/>(yet)<sp/>found<sp/>in<sp/>iteration<sp/>%d\n&quot;,cd-&gt;name().data(),iteration);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//give<sp/>warnings<sp/>for<sp/>unresolved<sp/>compounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cd-&gt;visited)</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>name<sp/>=<sp/>stripAnonymousNamespaceScope(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;processing<sp/>unresolved=%s,<sp/>iteration=%d\n&quot;,cd-&gt;name().data(),iteration);</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anyway,<sp/>so<sp/>we<sp/>can<sp/>at<sp/>least<sp/>relate<sp/>scopes<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>buildScopeFromQualifiedName(name,name.contains(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">),cd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>());</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d!=cd<sp/>&amp;&amp;<sp/>!cd-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>().isEmpty())<sp/></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>recursion<sp/>in<sp/>case<sp/>of<sp/>redundant<sp/>scopes,<sp/>i.e:<sp/>namespace<sp/>N<sp/>{<sp/>class<sp/>N::C<sp/>{};<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>this<sp/>case<sp/>doxygen<sp/>assumes<sp/>the<sp/>exitance<sp/>of<sp/>a<sp/>namespace<sp/>N::N<sp/>in<sp/>which<sp/>C<sp/>is<sp/>to<sp/>be<sp/>found!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>avoid<sp/>warning<sp/>for<sp/>stuff<sp/>imported<sp/>via<sp/>a<sp/>tagfile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;addInnerCompound(cd);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setOuterScope(d);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(cd-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),cd-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>inconsistency:<sp/>scope<sp/>for<sp/>class<sp/>%s<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;found!&quot;</highlight><highlight class="normal">,name.data()</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>distributeClassGroupRelations()</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//static<sp/>bool<sp/>inlineGroupedClasses<sp/>=<sp/>Config_getBool(&quot;INLINE_GROUPED_CLASSES&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!inlineGroupedClasses)<sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;**<sp/>distributeClassGroupRelations()\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();cli.current();++cli)<sp/>cli.current()-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Checking<sp/>%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>distribute<sp/>the<sp/>group<sp/>to<sp/>nested<sp/>classes<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cd-&gt;visited<sp/>&amp;&amp;<sp/>cd-&gt;partOfGroups()!=0<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1af92dc88df93d5529ffdc26222c890345" kindref="member" tooltip="returns the classes nested into this class">getClassSDict</ref>())</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Candidate<sp/>for<sp/>merging\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClassSDict::Iterator<sp/>ncli(*cd-&gt;<ref refid="d1/dcf/class_class_def_1af92dc88df93d5529ffdc26222c890345" kindref="member" tooltip="returns the classes nested into this class">getClassSDict</ref>());</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*ncd;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd<sp/>=<sp/>cd-&gt;partOfGroups()-&gt;at(0);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ncli.toFirst();(ncd=ncli.current());++ncli)</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ncd-&gt;partOfGroups()==0)</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Adding<sp/>%s<sp/>to<sp/>group<sp/>&apos;%s&apos;\n&quot;,ncd-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>gd-&gt;groupTitle());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncd-&gt;makePartOfGroup(gd);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;addClass(ncd);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;visited=TRUE;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>visit<sp/>every<sp/>class<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment">//----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*createTagLessInstance(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*rootCd,<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*templ,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;fieldName)</highlight></codeline>
<codeline lineno="1490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>QCString<sp/>fullName<sp/>=<sp/>removeAnonymousScopes(templ-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fullName.right(2)==</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)<sp/>fullName=fullName.left(fullName.length()-2);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>fullName+=</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">+fieldName;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>(templ-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templ-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templ-&gt;<ref refid="d5/dcc/class_definition_1abc16ee564cb0be049ec0f17e2adf0bca" kindref="member">getDefColumn</ref>(),</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullName,</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templ-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>());</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(templ-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),templ-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),templ-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>());<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>docs<sp/>to<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(templ-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),templ-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),templ-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>());</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>cd-&gt;setLanguage(templ-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>());</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>cd-&gt;setBodySegment(templ-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),templ-&gt;<ref refid="d5/dcc/class_definition_1a11056f29c65e1dddc184036bce5d5456" kindref="member">getEndBodyLine</ref>());</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>cd-&gt;setBodyDef(templ-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>());</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>cd-&gt;setOuterScope(rootCd-&gt;getOuterScope());</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootCd-&gt;getOuterScope()!=Doxygen::globalScope)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>rootCd-&gt;getOuterScope()-&gt;addInnerCompound(cd);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd<sp/>=<sp/>templ-&gt;<ref refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" kindref="member" tooltip="Returns the file in which this compound&amp;#39;s definition can be found.">getFileDef</ref>();</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;setFileDef(fd);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a61ec1208cd1055a3d91cb6a2ee60451d" kindref="member">insertClass</ref>(cd);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/class_group_list" kindref="compound" tooltip="A list of GroupDef objects.">GroupList</ref><sp/>*groups<sp/>=<sp/>rootCd-&gt;partOfGroups();</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>groups!=0<sp/>)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/dc4/class_group_list_iterator" kindref="compound" tooltip="An iterator for GroupDef objects in a GroupList.">GroupListIterator</ref><sp/>gli(*groups);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;makePartOfGroup(gd);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;addClass(cd);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cd-&gt;insertUsedFile(root-&gt;fileName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;**<sp/>adding<sp/>class<sp/>%s<sp/>based<sp/>on<sp/>%s\n&quot;,fullName.data(),templ-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(fullName,cd);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*ml<sp/>=<sp/>templ-&gt;<ref refid="d1/dcf/class_class_def_1a040a167e9cab0587d1eed22f22fe2c56" kindref="member" tooltip="Returns the members in the list identified by lt.">getMemberList</ref>(MemberListType_pubAttribs);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml)</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>li(*ml);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(li.toFirst();(md=li.current());++li)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>Member<sp/>%s<sp/>type=%s\n&quot;,md-&gt;name().data(),md-&gt;typeString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*imd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(md-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1abc16ee564cb0be049ec0f17e2adf0bca" kindref="member">getDefColumn</ref>(),</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;typeString(),md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),md-&gt;argsString(),md-&gt;excpString(),</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;protection(),md-&gt;virtualness(),md-&gt;isStatic(),Member,</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;memberType(),</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;setMemberClass(cd);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(md-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>());</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(md-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>());</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(md-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>());</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;setMemberSpecifiers(md-&gt;getMemberSpecifiers());</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;setMemberGroupId(md-&gt;getMemberGroupId());</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;setInitializer(md-&gt;initializer());</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;setMaxInitLines(md-&gt;initializerLines());</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;setBitfields(md-&gt;bitfieldString());</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imd-&gt;setLanguage(md-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>());</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertMember(imd);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cd;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processTagLessClasses(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*rootCd,</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*tagParentCd,</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;prefix,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%d:<sp/>processTagLessClasses<sp/>%s\n&quot;,count,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;checking<sp/>members<sp/>for<sp/>%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1af92dc88df93d5529ffdc26222c890345" kindref="member" tooltip="returns the classes nested into this class">getClassSDict</ref>())</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*ml<sp/>=<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a040a167e9cab0587d1eed22f22fe2c56" kindref="member" tooltip="Returns the members in the list identified by lt.">getMemberList</ref>(MemberListType_pubAttribs);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml)</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>li(*ml);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(li.toFirst();(md=li.current());++li)</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>type<sp/>=<sp/>md-&gt;typeString();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.find(</highlight><highlight class="stringliteral">&quot;::@&quot;</highlight><highlight class="normal">)!=-1)<sp/></highlight><highlight class="comment">//<sp/>member<sp/>of<sp/>tag<sp/>less<sp/>struct/union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClassSDict::Iterator<sp/>it(*cd-&gt;<ref refid="d1/dcf/class_class_def_1af92dc88df93d5529ffdc26222c890345" kindref="member" tooltip="returns the classes nested into this class">getClassSDict</ref>());</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*icd;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it.toFirst();(icd=it.current());++it)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>member<sp/>%s:<sp/>type=&apos;%s&apos;\n&quot;,md-&gt;name().data(),type.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>comparing<sp/>&apos;%s&apos;&lt;-&gt;&apos;%s&apos;\n&quot;,type.data(),icd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.find(icd-&gt;name())!=-1)<sp/></highlight><highlight class="comment">//<sp/>matching<sp/>tag<sp/>less<sp/>struct/union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>name<sp/>=<sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__unnamed__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prefix.isEmpty())<sp/>name.prepend(prefix+</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>found<sp/>%s<sp/>for<sp/>class<sp/>%s\n&quot;,name.data(),cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*ncd<sp/>=<sp/>createTagLessInstance(rootCd,icd,name);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processTagLessClasses(rootCd,icd,ncd,name,count+1);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>addTagged<sp/>%s<sp/>to<sp/>%s\n&quot;,ncd-&gt;name().data(),tagParentCd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagParentCd-&gt;addTaggedInnerClass(ncd);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncd-&gt;setTagLessReference(icd);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>tag-less<sp/>type<sp/>for<sp/>generated/original<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>newly<sp/>created<sp/>class<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>the<sp/>difference<sp/>between<sp/>changing<sp/>cd<sp/>and<sp/>tagParentCd.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>initial<sp/>call<sp/>this<sp/>is<sp/>the<sp/>same<sp/>pointer,<sp/>but<sp/>for<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recursive<sp/>calls<sp/>cd<sp/>is<sp/>the<sp/>original<sp/>tag-less<sp/>struct<sp/>(of<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>only<sp/>one<sp/>instance)<sp/>and<sp/>tagParentCd<sp/>is<sp/>the<sp/>newly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generated<sp/>tagged<sp/>struct<sp/>of<sp/>which<sp/>there<sp/>can<sp/>be<sp/>multiple<sp/>instances!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*pml<sp/>=<sp/>tagParentCd-&gt;<ref refid="d1/dcf/class_class_def_1a040a167e9cab0587d1eed22f22fe2c56" kindref="member" tooltip="Returns the members in the list identified by lt.">getMemberList</ref>(MemberListType_pubAttribs);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pml)</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>pli(*pml);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*pmd;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pli.toFirst();(pmd=pli.current());++pli)</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmd-&gt;setAccessorType(ncd,substitute(pmd-&gt;typeString(),icd-&gt;name(),ncd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()));</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pmd-&gt;setType(substitute(pmd-&gt;typeString(),icd-&gt;name(),ncd-&gt;name()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeMainPageTagFileData()</highlight></codeline>
<codeline lineno="1637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::mainPage<sp/>&amp;&amp;<sp/>!Config_getString(</highlight><highlight class="stringliteral">&quot;GENERATE_TAGFILE&quot;</highlight><highlight class="normal">).isEmpty())</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;compound<sp/>kind=\&quot;page\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;name&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>convertToXML(Doxygen::mainPage-&gt;name())</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/name&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;title&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>convertToXML(Doxygen::mainPage-&gt;title())</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/title&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&lt;filename&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>convertToXML(Doxygen::mainPage-&gt;getOutputFileBase())</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/filename&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::mainPage-&gt;<ref refid="d5/dcc/class_definition_1a252f2febf6695acc7ac5800c683f2770" kindref="member">writeDocAnchorsToTagFile</ref>();</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;/compound&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findTagLessClasses(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd)</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1af92dc88df93d5529ffdc26222c890345" kindref="member" tooltip="returns the classes nested into this class">getClassSDict</ref>())</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>ClassSDict::Iterator<sp/>it(*cd-&gt;<ref refid="d1/dcf/class_class_def_1af92dc88df93d5529ffdc26222c890345" kindref="member" tooltip="returns the classes nested into this class">getClassSDict</ref>());</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*icd;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it.toFirst();(icd=it.current());++it)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(icd-&gt;name().find(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">)==-1)<sp/></highlight><highlight class="comment">//<sp/>process<sp/>all<sp/>non-anonymous<sp/>inner<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findTagLessClasses(icd);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>processTagLessClasses(cd,cd,cd,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,0);<sp/></highlight><highlight class="comment">//<sp/>process<sp/>tag<sp/>less<sp/>inner<sp/>struct/classes<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findTagLessClasses()</highlight></codeline>
<codeline lineno="1675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*scope<sp/>=<sp/>cd-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope<sp/>&amp;&amp;<sp/>scope-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()!=Definition::TypeClass)<sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>not<sp/>nested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findTagLessClasses(cd);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>build<sp/>a<sp/>list<sp/>of<sp/>all<sp/>namespaces<sp/>mentioned<sp/>in<sp/>the<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>all<sp/>namespaces<sp/>that<sp/>have<sp/>a<sp/>documentation<sp/>block<sp/>before<sp/>their<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildNamespaceList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;section()==Entry::NAMESPACE_SEC<sp/>||</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::NAMESPACEDOC_SEC<sp/>||</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::PACKAGEDOC_SEC</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!rootNav-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;**<sp/>buildNamespaceList(%s)\n&quot;,root-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>fName<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::PACKAGEDOC_SEC)</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fName=substitute(fName,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>fullName<sp/>=<sp/>stripAnonymousNamespaceScope(fName);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fullName.isEmpty())</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>namespace<sp/>%s<sp/>in<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;,root-&gt;name.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;fileName.data(),<sp/>root-&gt;startLine);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nd=Doxygen::namespaceSDict-&gt;find(fullName)))<sp/></highlight><highlight class="comment">//<sp/>existing<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1aaa3c1632bd89cb3db7c7713df4e36db0" kindref="member">setName</ref>(fullName);<sp/></highlight><highlight class="comment">//<sp/>change<sp/>name<sp/>to<sp/>match<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Unknown)</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>definition<sp/>containing<sp/>the<sp/>namespace<sp/>nd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>namespace<sp/>in<sp/>the<sp/>file<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a579c95408a34b048fc3cd288bfa8893c" kindref="member">insertNamespace</ref>(nd);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addNamespaceToGroups(root,nd);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>fresh<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>tagName;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>tagFileName;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;tagInfo())</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagName=rootNav-&gt;tagInfo()-&gt;tagName;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tagFileName=rootNav-&gt;tagInfo()-&gt;fileName;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;++<sp/>new<sp/>namespace<sp/>%s<sp/>lang=%s\n&quot;,fullName.data(),langToString(root-&gt;lang).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,fullName,tagName,tagFileName,root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Published);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>docs<sp/>to<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setHidden(root-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref>);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setArtificial(root-&gt;<ref refid="d4/dd7/class_entry_1acbe763144d791b44aa3620b012d0dd30" kindref="member" tooltip="Artificially introduced item.">artificial</ref>);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>namespace<sp/>to<sp/>group\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addNamespaceToGroups(root,nd);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>definition<sp/>containing<sp/>the<sp/>namespace<sp/>nd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>namespace<sp/>in<sp/>the<sp/>file<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a579c95408a34b048fc3cd288bfa8893c" kindref="member">insertNamespace</ref>(nd);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>empty<sp/>string<sp/>test<sp/>is<sp/>needed<sp/>for<sp/>extract<sp/>all<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>class<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1a25a85aeba441b4c855ea7be25a4741b5" kindref="member">inSort</ref>(fullName,nd);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>add<sp/>namespace<sp/>to<sp/>the<sp/>correct<sp/>structural<sp/>context<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>findScopeFromQualifiedName(Doxygen::globalScope,fullName);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;adding<sp/>namespace<sp/>%s<sp/>to<sp/>context<sp/>%s\n&quot;,nd-&gt;name().data(),d?d-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d==0)<sp/></highlight><highlight class="comment">//<sp/>we<sp/>didn&apos;t<sp/>find<sp/>anything,<sp/>create<sp/>the<sp/>scope<sp/>artificially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anyway,<sp/>so<sp/>we<sp/>can<sp/>at<sp/>least<sp/>relate<sp/>scopes<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>buildScopeFromQualifiedName(fullName,fullName.contains(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">),nd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>());</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;addInnerCompound(nd);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setOuterScope(d);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Due<sp/>to<sp/>the<sp/>order<sp/>in<sp/>which<sp/>the<sp/>tag<sp/>file<sp/>is<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>nested<sp/>class<sp/>can<sp/>be<sp/>found<sp/>before<sp/>its<sp/>parent!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;addInnerCompound(nd);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setOuterScope(d);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(buildNamespaceList,rootNav);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*findUsedNamespace(<ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*unl,</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="1802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*usingNd<sp/>=0;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unl)</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>namespace<sp/>dict<sp/>%d\n&quot;,unl-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>NamespaceSDict::Iterator<sp/>unli(*unl);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*und;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(unli.toFirst();(und=unli.current());++unli)</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>uScope=und-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usingNd<sp/>=<sp/>getResolvedNamespace(uScope+name);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Also<sp/>trying<sp/>with<sp/>scope=`%s&apos;<sp/>usingNd=%p\n&quot;,(uScope+name).data(),usingNd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usingNd;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findUsingDirectives(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="1820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::USINGDIR_SEC)</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>using<sp/>directive<sp/>%s<sp/>at<sp/>line<sp/>%d<sp/>of<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;name.data(),root-&gt;startLine,root-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name=substitute(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.isEmpty())</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*usingNd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/><sp/><sp/><sp/><sp/>*fd<sp/>=<sp/>rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>nsName;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>using<sp/>statement<sp/>was<sp/>found<sp/>inside<sp/>a<sp/>namespace<sp/>or<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>global<sp/>file<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;parent()<sp/>&amp;&amp;<sp/>rootNav-&gt;parent()-&gt;section()==Entry::NAMESPACE_SEC<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fd==0<sp/>||<sp/>fd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()!=SrcLangExt_Java)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>.java<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsName=stripAnonymousNamespaceScope(rootNav-&gt;parent()-&gt;name());</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nsName.isEmpty())</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd<sp/>=<sp/>getResolvedNamespace(nsName);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>scope<sp/>in<sp/>which<sp/>the<sp/>`using&apos;<sp/>namespace<sp/>is<sp/>defined<sp/>by<sp/>prepending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>possible<sp/>scopes<sp/>in<sp/>which<sp/>the<sp/>using<sp/>statement<sp/>was<sp/>found,<sp/>starting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>most<sp/>inner<sp/>scope<sp/>and<sp/>going<sp/>to<sp/>the<sp/>most<sp/>outer<sp/>scope<sp/>(i.e.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>scope).<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopeOffset<sp/>=<sp/>nsName.length();</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>scope=scopeOffset&gt;0<sp/>?<sp/></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsName.left(scopeOffset)+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"><sp/>:<sp/>QCString();</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingNd<sp/>=<sp/>getResolvedNamespace(scope+name);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Trying<sp/>with<sp/>scope=`%s&apos;<sp/>usingNd=%p\n&quot;,(scope+name).data(),usingNd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeOffset==0)</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=-1;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((scopeOffset=nsName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,scopeOffset-1))==-1)</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=0;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(scopeOffset&gt;=0<sp/>&amp;&amp;<sp/>usingNd==0);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usingNd==0<sp/>&amp;&amp;<sp/>nd)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>found,<sp/>try<sp/>used<sp/>namespaces<sp/>in<sp/>this<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>in<sp/>one<sp/>of<sp/>the<sp/>parent<sp/>namespace<sp/>scopes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*pnd<sp/>=<sp/>nd;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pnd<sp/>&amp;&amp;<sp/>usingNd==0)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>try<sp/>with<sp/>one<sp/>of<sp/>the<sp/>used<sp/>namespaces<sp/>found<sp/>earlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingNd<sp/>=<sp/>findUsedNamespace(pnd-&gt;getUsedNamespaces(),name);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>goto<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*s<sp/>=<sp/>pnd-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&amp;&amp;<sp/>s-&gt;definitionType()==Definition::TypeNamespace)</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnd<sp/>=<sp/>(<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>*)s;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usingNd==0<sp/>&amp;&amp;<sp/>fd)<sp/></highlight><highlight class="comment">//<sp/>still<sp/>nothing,<sp/>also<sp/>try<sp/>used<sp/>namespace<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingNd<sp/>=<sp/>findUsedNamespace(fd-&gt;getUsedNamespaces(),name);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s<sp/>-&gt;<sp/>%s\n&quot;,name.data(),usingNd?usingNd-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>namespace<sp/>the<sp/>correct<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usingNd)</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;using<sp/>fd=%p<sp/>nd=%p\n&quot;,fd,nd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd)</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Inside<sp/>namespace<sp/>%s\n&quot;,nd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;addUsingDirective(usingNd);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Inside<sp/>file<sp/>%s\n&quot;,fd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addUsingDirective(usingNd);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>unknown<sp/>namespace,<sp/>but<sp/>add<sp/>it<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;++<sp/>new<sp/>unknown<sp/>namespace<sp/>%s<sp/>lang=%s\n&quot;,name.data(),langToString(root-&gt;lang).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,name);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>docs<sp/>to<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;**<sp/>Adding<sp/>namespace<sp/>%s<sp/>hidden=%d\n&quot;,name.data(),root-&gt;hidden);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setHidden(root-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref>);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setArtificial(TRUE);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QListIterator&lt;Grouping&gt;<sp/>gli(*root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d59/struct_grouping" kindref="compound" tooltip="Grouping info.">Grouping</ref><sp/>*g;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(g=gli.current());++gli)</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd=0;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g-&gt;<ref refid="d7/d59/struct_grouping_1a05e6a053a86cc2f588d065f3880801dc" kindref="member" tooltip="name of the group">groupname</ref>.isEmpty()<sp/>&amp;&amp;<sp/>(gd=Doxygen::groupSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(g-&gt;<ref refid="d7/d59/struct_grouping_1a05e6a053a86cc2f588d065f3880801dc" kindref="member" tooltip="name of the group">groupname</ref>)))</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;addNamespace(nd);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>namespace<sp/>in<sp/>the<sp/>file<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)<sp/></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;insertNamespace(nd);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addUsingDirective(nd);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>empty<sp/>string<sp/>test<sp/>is<sp/>needed<sp/>for<sp/>extract<sp/>all<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>class<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1a25a85aeba441b4c855ea7be25a4741b5" kindref="member">inSort</ref>(name,nd);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findUsingDirectives,rootNav);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildListOfUsingDecls(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::USINGDECL_SEC<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!(rootNav-&gt;parent()-&gt;section()&amp;Entry::COMPOUND_MASK)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>class/struct<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name<sp/>=<sp/>substitute(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_usingDeclarations.find(name)==0)</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd<sp/>=<sp/>rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_usingDeclarations.insert(name,fd);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(buildListOfUsingDecls,rootNav);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findUsingDeclarations(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="1986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::USINGDECL_SEC<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!(rootNav-&gt;parent()-&gt;section()&amp;Entry::COMPOUND_MASK)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>class/struct<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>using<sp/>declaration<sp/>%s<sp/>at<sp/>line<sp/>%d<sp/>of<sp/>%s<sp/>inside<sp/>section<sp/>%x\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>root-&gt;name.data(),root-&gt;startLine,root-&gt;fileName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>rootNav-&gt;parent()-&gt;section());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*usingCd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/><sp/><sp/><sp/><sp/>*fd<sp/>=<sp/>rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>scName;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>using<sp/>statement<sp/>was<sp/>found<sp/>inside<sp/>a<sp/>namespace<sp/>or<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>global<sp/>file<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;parent()-&gt;section()<sp/>==<sp/>Entry::NAMESPACE_SEC)</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scName=rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scName.isEmpty())</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd<sp/>=<sp/>getResolvedNamespace(scName);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>the<sp/>using<sp/>statement<sp/>was<sp/>used<sp/>to<sp/>import<sp/>a<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>scope<sp/>in<sp/>which<sp/>the<sp/>`using&apos;<sp/>namespace<sp/>is<sp/>defined<sp/>by<sp/>prepending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>possible<sp/>scopes<sp/>in<sp/>which<sp/>the<sp/>using<sp/>statement<sp/>was<sp/>found,<sp/>starting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>most<sp/>inner<sp/>scope<sp/>and<sp/>going<sp/>to<sp/>the<sp/>most<sp/>outer<sp/>scope<sp/>(i.e.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>scope).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>name<sp/>=<sp/>substitute(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//Java/C#<sp/>scope-&gt;internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usingCd<sp/>=<sp/>getClass(name);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usingCd==0)</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingCd<sp/>=<sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s<sp/>-&gt;<sp/>%p\n&quot;,root-&gt;name.data(),usingCd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usingCd==0)<sp/></highlight><highlight class="comment">//<sp/>definition<sp/>not<sp/>in<sp/>the<sp/>input<sp/>=&gt;<sp/>add<sp/>an<sp/>artificial<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>New<sp/>using<sp/>class<sp/>`%s&apos;<sp/>(sec=0x%08x)!<sp/>#tArgLists=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.data(),root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>(int)root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;count()<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingCd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>(</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;using&gt;&quot;</highlight><highlight class="normal">,1,1,</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClassDef::Class);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,usingCd);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingCd-&gt;setArtificial(TRUE);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingCd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Found<sp/>used<sp/>class<sp/>%s<sp/>in<sp/>scope=%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usingCd-&gt;name().data(),nd?nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data():fd-&gt;<ref refid="de/db0/class_file_def_1a80989971450b35c785a8fe0002e1c2db" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usingCd)<sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>class<sp/>to<sp/>the<sp/>correct<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd)</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Inside<sp/>namespace<sp/>%s\n&quot;,nd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;addUsingDeclaration(usingCd);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Inside<sp/>file<sp/>%s\n&quot;,fd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addUsingDeclaration(usingCd);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findUsingDeclarations,rootNav);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findUsingDeclImports(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="2070"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::USINGDECL_SEC<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;parent()-&gt;section()&amp;Entry::COMPOUND_MASK)<sp/></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>class/struct<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>using<sp/>declaration<sp/>%s<sp/>at<sp/>line<sp/>%d<sp/>of<sp/>%s<sp/>inside<sp/>section<sp/>%x\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;name.data(),root-&gt;startLine,root-&gt;fileName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;parent-&gt;section);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>fullName=removeRedundantWhiteSpace(rootNav-&gt;parent()-&gt;name());</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>fullName=stripAnonymousNamespaceScope(fullName);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>fullName=stripTemplateSpecifiersFromScope(fullName);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>getClass(fullName);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>class<sp/>%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=rootNav-&gt;name().find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>scope=rootNav-&gt;name().left(i);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>memName=rootNav-&gt;name().right(rootNav-&gt;name().length()-i-2);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*bcd<sp/>=<sp/>getResolvedClass(cd,0,scope);<sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>file<sp/>in<sp/>fileScope<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcd)</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>class<sp/>%s\n&quot;,bcd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d70/class_member_name_info_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberNameInfo objects.">MemberNameInfoSDict</ref><sp/>*mndict=bcd-&gt;<ref refid="d1/dcf/class_class_def_1a1dfaf495dfdfa1e23a19704c22784f98" kindref="member" tooltip="Returns a dictionary of all members.">memberNameInfoSDict</ref>();</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mndict)</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d27/class_member_name_info" kindref="compound" tooltip="Class representing all MemberInfo objects with the same name.">MemberNameInfo</ref><sp/>*mni<sp/>=<sp/>mndict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(memName);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mni)</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d1b/class_member_name_info_iterator" kindref="compound" tooltip="Iterator for MemberInfo objects in a MemberNameInfo list.">MemberNameInfoIterator</ref><sp/>mnii(*mni);<sp/></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d49/struct_member_info" kindref="compound" tooltip="Data associated with a MemberDef in an inheritance relation.">MemberInfo</ref><sp/>*mi;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(mi=mnii.current())<sp/>;<sp/>++mnii<sp/>)</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md<sp/>=<sp/>mi-&gt;memberDef;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md<sp/>&amp;&amp;<sp/>md-&gt;protection()!=Private)</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>member<sp/>%s\n&quot;,mni-&gt;memberName());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*newMd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*templAl<sp/>=<sp/>md-&gt;templateArguments();</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al<sp/>=<sp/>md-&gt;templateArguments();</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;typeString(),memName,md-&gt;argsString(),</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;excpString(),root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aaf045b9c026443fd192064117083911b" kindref="member" tooltip="virtualness of the entry">virt</ref>,</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;isStatic(),Member,md-&gt;memberType(),</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templAl,al</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setMemberClass(cd);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertMember(newMd);</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty()<sp/>||<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>.isEmpty())</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(md-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>());</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(md-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>());</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(md-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>());</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setDefinition(md-&gt;definition());</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setBitfields(md-&gt;bitfieldString());</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setBodySegment(md-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),md-&gt;<ref refid="d5/dcc/class_definition_1a11056f29c65e1dddc184036bce5d5456" kindref="member">getEndBodyLine</ref>());</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setBodyDef(md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>());</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setInitializer(md-&gt;initializer());</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setMaxInitLines(md-&gt;initializerLines());</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setMemberSpecifiers(md-&gt;getMemberSpecifiers());</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMd-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findUsingDeclImports,rootNav);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findIncludedUsingDirectives()</highlight></codeline>
<codeline lineno="2168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>mark<sp/>all<sp/>files<sp/>as<sp/>not<sp/>visited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><ref refid="db/d32/class_file_name_list_iterator" kindref="compound" tooltip="Iterator for FileName objects in a FileNameList.">FileNameListIterator</ref><sp/>fnli(*Doxygen::inputNameList);<sp/></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>recursively<sp/>add<sp/>using<sp/>directives<sp/>found<sp/>in<sp/>#include<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>files<sp/>that<sp/>have<sp/>not<sp/>been<sp/>visited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fni.toFirst();(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fd-&gt;visited)<sp/></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;-----<sp/>adding<sp/>using<sp/>directives<sp/>for<sp/>file<sp/>%s\n&quot;,fd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addIncludedUsingDirectives();</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*addVariableToClass(</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>MemberType<sp/>mtype,</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name,</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fromAnnScope,</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fromAnnMemb,</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a90e352184df58cd09455fe9996cd4ded" kindref="member" tooltip="Protection level of members.">Protection</ref><sp/>prot,</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a9d625fe894d9313ec78df1d78553f32e" kindref="member" tooltip="Kind of member relationship.">Relationship</ref><sp/>related)</highlight></codeline>
<codeline lineno="2209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/>QCString<sp/>qualScope<sp/>=<sp/>cd-&gt;qualifiedNameWithTemplateParameters();</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>QCString<sp/>scopeSeparator=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang<sp/>=<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>();</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang==SrcLangExt_Java<sp/>||<sp/>lang==SrcLangExt_CSharp)</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>qualScope<sp/>=<sp/>substitute(qualScope,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>scopeSeparator=</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/>Debug::print(Debug::Variables,0,</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>class<sp/>variable:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>`%s&apos;<sp/>`%s&apos;::`%s&apos;<sp/>`%s&apos;<sp/>prot=`%d<sp/>ann=%d<sp/>init=`%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qualScope.data(),<sp/></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name.data(),</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.data(),</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fromAnnScope,</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a2a0c9e7ce364ed2981f49314c33245f9" kindref="member" tooltip="initial value (for variables)">initializer</ref>.data()</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/>QCString<sp/>def;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty())</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(related<sp/>||<sp/>mtype==MemberType_Friend<sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Alias)<sp/></highlight><highlight class="comment">//<sp/>turn<sp/>&apos;typedef<sp/>B<sp/>A&apos;<sp/>into<sp/>&apos;using<sp/>A<sp/>=<sp/>B&apos;<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=</highlight><highlight class="stringliteral">&quot;using<sp/>&quot;</highlight><highlight class="normal">+name+</highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal">+root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.mid(7);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Alias)<sp/></highlight><highlight class="comment">//<sp/>turn<sp/>&apos;typedef<sp/>B<sp/>C::A&apos;<sp/>into<sp/>&apos;using<sp/>C::A<sp/>=<sp/>B&apos;<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=</highlight><highlight class="stringliteral">&quot;using<sp/>&quot;</highlight><highlight class="normal">+qualScope+scopeSeparator+name+</highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal">+root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.mid(7);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+qualScope+scopeSeparator+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>def=name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>def=qualScope+scopeSeparator+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>def.stripPrefix(</highlight><highlight class="stringliteral">&quot;static<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>member<sp/>is<sp/>already<sp/>found<sp/>in<sp/>the<sp/>same<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>may<sp/>be<sp/>the<sp/>case<sp/>for<sp/>a<sp/>static<sp/>member<sp/>that<sp/>is<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>outside<sp/>the<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;md-&gt;getClassDef()=%p<sp/>cd=%p<sp/>type=[%s]<sp/>md-&gt;typeString()=[%s]\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;getClassDef(),cd,root-&gt;type.data(),md-&gt;typeString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getClassDef()==cd<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeRedundantWhiteSpace(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>)==md-&gt;typeString())<sp/></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>already<sp/>in<sp/>the<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>==SrcLangExt_ObjC<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Property<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;memberType()==MemberType_Variable)</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Objective-C<sp/>2.0<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>variable<sp/>into<sp/>a<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setProtection(root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;reclassifyMember(md,MemberType_Property);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberDocs(rootNav,md,def,0,FALSE);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>Member<sp/>already<sp/>found!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>member<sp/>variable,<sp/>typedef<sp/>or<sp/>enum<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,name,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>,</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prot,Normal,root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>,related,</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype,root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;last()<sp/>:<sp/>0,0);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/>md-&gt;setMemberClass(cd);<sp/></highlight><highlight class="comment">//<sp/>also<sp/>sets<sp/>outer<sp/>scope<sp/>(i.e.<sp/>getOuterScope())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//md-&gt;setDefFile(root-&gt;fileName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//md-&gt;setDefLine(root-&gt;startLine);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/>md-&gt;setDefinition(def);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/>md-&gt;setBitfields(root-&gt;<ref refid="d4/dd7/class_entry_1a239e75c28fe009869cf25e681d2a2d41" kindref="member" tooltip="member&amp;#39;s bit fields">bitfields</ref>);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/>md-&gt;setFromAnonymousScope(fromAnnScope);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>md-&gt;setFromAnonymousMember(fromAnnMemb);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//md-&gt;setIndentDepth(indentDepth);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>md-&gt;setInitializer(root-&gt;<ref refid="d4/dd7/class_entry_1a2a0c9e7ce364ed2981f49314c33245f9" kindref="member" tooltip="initial value (for variables)">initializer</ref>);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>md-&gt;setMaxInitLines(root-&gt;<ref refid="d4/dd7/class_entry_1ae283a992b9a74c6925c6f602ba7d830d" kindref="member" tooltip="define/variable initializer lines to show">initLines</ref>);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/>md-&gt;setReadAccessor(root-&gt;<ref refid="d4/dd7/class_entry_1ac5ad6c6585645a4427b54e5281316b65" kindref="member" tooltip="property read accessor">read</ref>);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/>md-&gt;setWriteAccessor(root-&gt;<ref refid="d4/dd7/class_entry_1a76a68a1f14534f069444ba2704ef7404" kindref="member" tooltip="property write accessor">write</ref>);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/>md-&gt;setHidden(root-&gt;<ref refid="d4/dd7/class_entry_1acc4d59ae7ae3e94c3365ab8027593727" kindref="member" tooltip="does this represent an entity that is hidden from the output">hidden</ref>);</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/>md-&gt;setArtificial(root-&gt;<ref refid="d4/dd7/class_entry_1acbe763144d791b44aa3620b012d0dd30" kindref="member" tooltip="Artificially introduced item.">artificial</ref>);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(root-&gt;mGrpId!=-1)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf(&quot;memberdef<sp/>%s<sp/>in<sp/>memberGroup<sp/>%d\n&quot;,name.data(),root-&gt;mGrpId);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>md-&gt;setMemberGroup(memberGroupDict[root-&gt;mGrpId]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/>md-&gt;setBodyDef(rootNav-&gt;fileDef());</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>Adding<sp/>member=%s\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>member<sp/>to<sp/>the<sp/>global<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>new<sp/>variable<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(name);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>memberName=%s\n&quot;,mn-&gt;memberName());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Doxygen::memberNameDict.insert(name,mn);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Doxygen::memberNameList.append(mn);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(name,mn);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>member<sp/>to<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>New<sp/>member<sp/>adding<sp/>to<sp/>%s<sp/>(%p)!\n&quot;,cd-&gt;name().data(),cd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>cd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>insert<sp/>FileDef<sp/>instead<sp/>of<sp/>filename<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>rootNav-&gt;changeSection(Entry::EMPTY_SEC);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*addVariableToFile(</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/>MemberType<sp/>mtype,</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;scope,</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name,</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fromAnnScope,</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*int<sp/>indentDepth,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fromAnnMemb)</highlight></codeline>
<codeline lineno="2379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/>Debug::print(Debug::Variables,0,</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>global<sp/>variable:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>type=`%s&apos;<sp/>scope=`%s&apos;<sp/>name=`%s&apos;<sp/>args=`%s&apos;<sp/>prot=`%d<sp/>mtype=%d<sp/>lang=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope.data(),<sp/></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name.data(),</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.data(),</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype,</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd<sp/>=<sp/>rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>have<sp/>a<sp/>typedef<sp/>that<sp/>should<sp/>hide<sp/>a<sp/>struct<sp/>or<sp/>union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mtype==MemberType_Typedef<sp/>&amp;&amp;<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;TYPEDEF_HIDES_STRUCT&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>type<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.left(7)==</highlight><highlight class="stringliteral">&quot;struct<sp/>&quot;</highlight><highlight class="normal"><sp/>||<sp/>type.left(6)==</highlight><highlight class="stringliteral">&quot;union<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;struct<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type.stripPrefix(</highlight><highlight class="stringliteral">&quot;union<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z][a-z_A-Z0-9]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l,s;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>re.match(type,0,&amp;l);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s&gt;=0)</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>typeValue<sp/>=<sp/>type.mid(s,l);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>getClass(typeValue);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>typedef<sp/>should<sp/>hide<sp/>compound<sp/>name<sp/>cd,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>the<sp/>name<sp/>that<sp/>is<sp/>displayed<sp/>from<sp/>cd.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;setClassName(name);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>function<sp/>is<sp/>inside<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>QCString<sp/>nscope;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scope.isEmpty())</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope.find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)!=-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>scope!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nscope=removeAnonymousScopes(scope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!nscope.isEmpty())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>nd<sp/>=<sp/>getResolvedNamespace(scope);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/>QCString<sp/>def;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>the<sp/>definition<sp/>of<sp/>the<sp/>global<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd<sp/>&amp;&amp;<sp/>!nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>is<sp/>inside<sp/>a<sp/>namespace,<sp/>so<sp/>put<sp/>the<sp/>scope<sp/>before<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang<sp/>=<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>();</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>sep=getLanguageSpecificSeparator(lang);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty())</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Alias)<sp/></highlight><highlight class="comment">//<sp/>turn<sp/>&apos;typedef<sp/>B<sp/>NS::A&apos;<sp/>into<sp/>&apos;using<sp/>NS::A<sp/>=<sp/>B&apos;<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=</highlight><highlight class="stringliteral">&quot;using<sp/>&quot;</highlight><highlight class="normal">+nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+sep+name+</highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal">+root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>normal<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+sep+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>def=nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+sep+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty()<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.at(0)==</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>dummy<sp/>variable<sp/>representing<sp/>anonymous<sp/>union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Alias)<sp/></highlight><highlight class="comment">//<sp/>turn<sp/>&apos;typedef<sp/>B<sp/>A&apos;<sp/>into<sp/>&apos;using<sp/>A<sp/>=<sp/>B&apos;<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=</highlight><highlight class="stringliteral">&quot;using<sp/>&quot;</highlight><highlight class="normal">+root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal">+root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.mid(7);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>normal<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>def=name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/>def.stripPrefix(</highlight><highlight class="stringliteral">&quot;static<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>nscope=removeAnonymousScopes(scope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//NamespaceDef<sp/>*nd=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!nscope.isEmpty())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scope.isEmpty())</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nd<sp/>=<sp/>getResolvedNamespace(scope);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((nd==0<sp/>&amp;&amp;<sp/>md-&gt;getNamespaceDef()==0<sp/>&amp;&amp;<sp/>md-&gt;getFileDef()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>==md-&gt;getFileDef()-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>()</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>both<sp/>variable<sp/>names<sp/>in<sp/>the<sp/>same<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(nd!=0<sp/>&amp;&amp;<sp/>md-&gt;getNamespaceDef()==nd)<sp/></highlight><highlight class="comment">//<sp/>both<sp/>in<sp/>same<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!md-&gt;isDefine()<sp/></highlight><highlight class="comment">//<sp/>function<sp/>style<sp/>#define&apos;s<sp/>can<sp/>be<sp/>&quot;overloaded&quot;<sp/>by<sp/>typedefs<sp/>or<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!md-&gt;isEnumerate()<sp/></highlight><highlight class="comment">//<sp/>in<sp/>C#<sp/>an<sp/>enum<sp/>value<sp/>and<sp/>enum<sp/>can<sp/>have<sp/>the<sp/>same<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>already<sp/>in<sp/>the<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPHPArray<sp/>=<sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_PHP<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;argsString()!=root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.find(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)!=-1;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>staticsInDifferentFiles<sp/>=<sp/></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref><sp/>&amp;&amp;<sp/>md-&gt;isStatic()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>!=md-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>();</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getFileDef()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!isPHPArray<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>php<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!staticsInDifferentFiles</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>php<sp/>array<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Variables,0,</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>variable<sp/>already<sp/>found:<sp/>scope=%s\n&quot;</highlight><highlight class="normal">,md-&gt;getOuterScope()-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberDocs(rootNav,md,def,0,FALSE);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/>Debug::print(Debug::Variables,0,</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>new<sp/>variable,<sp/>nd=%s!\n&quot;</highlight><highlight class="normal">,nd?nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data():</highlight><highlight class="stringliteral">&quot;&lt;global&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>global<sp/>variable,<sp/>enum<sp/>value<sp/>or<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,name,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,0,</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Public,<sp/>Normal,root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>,Member,</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype,root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;last()<sp/>:<sp/>0,0);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/>md-&gt;setDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/>md-&gt;setBriefDescription(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/>md-&gt;setInbodyDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/>md-&gt;addSectionsToDefinition(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>md-&gt;setFromAnonymousScope(fromAnnScope);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>md-&gt;setFromAnonymousMember(fromAnnMemb);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>md-&gt;setInitializer(root-&gt;<ref refid="d4/dd7/class_entry_1a2a0c9e7ce364ed2981f49314c33245f9" kindref="member" tooltip="initial value (for variables)">initializer</ref>);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>md-&gt;setMaxInitLines(root-&gt;<ref refid="d4/dd7/class_entry_1ae283a992b9a74c6925c6f602ba7d830d" kindref="member" tooltip="define/variable initializer lines to show">initLines</ref>);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/>md-&gt;setDefinition(def);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>md-&gt;setId(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>md-&gt;setExplicitExternal(root-&gt;<ref refid="d4/dd7/class_entry_1a6c5a4c9eda694f2bfd2037d7da08ba5d" kindref="member" tooltip="explicitly defined as external?">explicitExternal</ref>);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//md-&gt;setOuterScope(fd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a6c5a4c9eda694f2bfd2037d7da08ba5d" kindref="member" tooltip="explicitly defined as external?">explicitExternal</ref>)</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd<sp/>&amp;&amp;<sp/>!nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;setNamespace(nd);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;insertMember(md);<sp/></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>the<sp/>file<sp/>(we<sp/>do<sp/>this<sp/>even<sp/>if<sp/>we<sp/>have<sp/>already<sp/>inserted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>into<sp/>the<sp/>namespace.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;setFileDef(fd);<sp/></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>fd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>definition<sp/>to<sp/>the<sp/>list<sp/>of<sp/>globals<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(name);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(name,mn);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>rootNav-&gt;changeSection(Entry::EMPTY_SEC);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>findFunctionPtr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lang,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pLength=0)</highlight></codeline>
<codeline lineno="2606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang<sp/>==<sp/>SrcLangExt_Fortran)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Fortran<sp/>does<sp/>not<sp/>have<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;([^)]*[\\*\\^][^)]*)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=-1,l;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bb=type.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>be=type.findRev(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!type.isEmpty()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>type<sp/>is<sp/>non-empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(i=re.match(type,0,&amp;l))!=-1<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>contains<sp/>(...*...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type.find(</highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>an<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(type.find(</highlight><highlight class="stringliteral">&quot;)(&quot;</highlight><highlight class="normal">)==-1<sp/>||<sp/>type.find(</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">)!=-1)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>function<sp/>pointer<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!(bb&lt;i<sp/>&amp;&amp;<sp/>i&lt;be)<sp/></highlight><highlight class="comment">//<sp/>bug665855:<sp/>avoid<sp/>treating<sp/>&quot;typedef<sp/>A&lt;void<sp/>(T*)&gt;<sp/>type&quot;<sp/>as<sp/>a<sp/>function<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pLength)<sp/>*pLength=l;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;findFunctionPtr=%d\n&quot;,i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;findFunctionPtr=%d\n&quot;,-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVarWithConstructor(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="2636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>initChars(</highlight><highlight class="stringliteral">&quot;[0-9\&quot;&apos;&amp;*!^]+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>idChars(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z][a-z_A-Z0-9]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result=FALSE;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>typeIsClass;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/>QCString<sp/>type;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*ctx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ti;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;isVarWithConstructor(%s)\n&quot;,rootNav-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;parent()-&gt;section()<sp/>&amp;<sp/>Entry::COMPOUND_MASK)</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>inside<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/>result=FALSE;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fd<sp/>=<sp/>rootNav-&gt;fileDef())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fd-&gt;<ref refid="de/db0/class_file_def_1a80989971450b35c785a8fe0002e1c2db" kindref="member">name</ref>().right(2)==</highlight><highlight class="stringliteral">&quot;.c&quot;</highlight><highlight class="normal"><sp/>||<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a80989971450b35c785a8fe0002e1c2db" kindref="member">name</ref>().right(2)==</highlight><highlight class="stringliteral">&quot;.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>inside<sp/>a<sp/>.c<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>result=FALSE;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty())<sp/></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/>result=FALSE;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rootNav-&gt;parent()-&gt;name().isEmpty())<sp/></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx=Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(rootNav-&gt;parent()-&gt;name());</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/>type<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>qualifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/>findAndRemoveWord(type,</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/>findAndRemoveWord(type,</highlight><highlight class="stringliteral">&quot;static&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/>findAndRemoveWord(type,</highlight><highlight class="stringliteral">&quot;volatile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(type.left(6)==&quot;const<sp/>&quot;)<sp/>type=type.right(type.length()-6);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/>typeIsClass=getResolvedClass(ctx,fd,type)!=0;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!typeIsClass<sp/>&amp;&amp;<sp/>(ti=type.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">))!=-1)</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/>typeIsClass=getResolvedClass(ctx,fd,type.left(ti))!=0;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeIsClass)<sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>still<sp/>have<sp/>to<sp/>check<sp/>if<sp/>the<sp/>arguments<sp/>are<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>types<sp/>or<sp/>values.<sp/>Since<sp/>we<sp/>do<sp/>not<sp/>have<sp/>complete<sp/>type<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>rely<sp/>on<sp/>heuristics<sp/>:-(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;typeIsClass\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al==0<sp/>||<sp/>al-&gt;isEmpty())<sp/></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=FALSE;<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>arg<sp/>list<sp/>-&gt;<sp/>function<sp/>prototype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>ali(*al);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*a;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();(a=ali.current());++ali)</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.isEmpty()<sp/>||<sp/>!a-&gt;<ref refid="d1/dee/struct_argument_1a4fe1d9319dede52f7551f59297772efa" kindref="member">defval</ref>.isEmpty())<sp/></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>.find(initChars)==0)</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=TRUE;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=FALSE;<sp/></highlight><highlight class="comment">//<sp/>arg<sp/>has<sp/>(type,name)<sp/>pair<sp/>-&gt;<sp/>function<sp/>prototype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.isEmpty()<sp/>||<sp/>getResolvedClass(ctx,fd,a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>)!=0)<sp/></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=FALSE;<sp/></highlight><highlight class="comment">//<sp/>arg<sp/>type<sp/>is<sp/>a<sp/>known<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkIfTypedef(ctx,fd,a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>))</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s:%d:<sp/>false<sp/>(arg<sp/>is<sp/>typedef)\n&quot;,__FILE__,__LINE__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=FALSE;<sp/></highlight><highlight class="comment">//<sp/>argument<sp/>is<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.at(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.length()-1)==</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.at(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.length()-1)==</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)<sp/><sp/></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>ends<sp/>with<sp/>*<sp/>or<sp/>&amp;<sp/>=&gt;<sp/>pointer<sp/>or<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=FALSE;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>.find(initChars)==0)<sp/></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=TRUE;<sp/></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>starts<sp/>with<sp/>typical<sp/>initializer<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>resType=resolveTypeDef(ctx,a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resType.isEmpty())<sp/>resType=a-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(idChars.match(resType,0,&amp;len)==0)<sp/></highlight><highlight class="comment">//<sp/>resType<sp/>starts<sp/>with<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resType=resType.left(len);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;resType=%s\n&quot;,resType.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resType==</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>resType==</highlight><highlight class="stringliteral">&quot;long&quot;</highlight><highlight class="normal"><sp/>||<sp/>resType==</highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resType==</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal"><sp/>||<sp/>resType==</highlight><highlight class="stringliteral">&quot;char&quot;</highlight><highlight class="normal"><sp/>||<sp/>resType==</highlight><highlight class="stringliteral">&quot;signed&quot;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resType==</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal"><sp/><sp/>||<sp/>resType==</highlight><highlight class="stringliteral">&quot;unsigned&quot;</highlight><highlight class="normal"><sp/>||<sp/>resType==</highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=FALSE;<sp/></highlight><highlight class="comment">//<sp/>type<sp/>keyword<sp/>-&gt;<sp/>function<sp/>prototype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>result=TRUE;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;isVarWithConstructor(%s,%s)=%d\n&quot;,rootNav-&gt;parent()-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;type.data(),result);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addVariable(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isFuncPtr=-1)</highlight></codeline>
<codeline lineno="2759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Variables,0,</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VARIABLE_SEC:<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>type=`%s&apos;<sp/>name=`%s&apos;<sp/>args=`%s&apos;<sp/>bodyLine=`%d&apos;<sp/>mGrpId=%d<sp/>relates=%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data(),</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.data(),</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>,</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.data()</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root-&gt;parent-&gt;name=%s\n&quot;,root-&gt;parent-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty()<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.find(</highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.find(</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)!=-1<sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.find(</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)!=-1))</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recover<sp/>from<sp/>parse<sp/>error<sp/>caused<sp/>by<sp/>redundant<sp/>braces<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>like<sp/>in<sp/>&quot;int<sp/>*(var[10]);&quot;,<sp/>which<sp/>is<sp/>parsed<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type=&quot;&quot;<sp/>name=&quot;int<sp/>*&quot;<sp/>args=&quot;(var[10])&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QRegExp<sp/>reName(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z][a-z_A-Z0-9]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.isEmpty()<sp/>?<sp/>-1<sp/>:<sp/>reName.match(root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,0,&amp;l);</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>=root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.mid(i,l);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>=root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.mid(i+l,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.find(</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">,i+l)-i-l);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new:<sp/>type=`%s&apos;<sp/>name=`%s&apos;<sp/>args=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;type.data(),root-&gt;name.data(),root-&gt;args.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=isFuncPtr;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==-1<sp/>&amp;&amp;<sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Alias)==0)<sp/>i=findFunctionPtr(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);<sp/></highlight><highlight class="comment">//<sp/>for<sp/>typedefs<sp/>isFuncPtr<sp/>is<sp/>not<sp/>yet<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Variables,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>functionPtr?<sp/>%s\n&quot;</highlight><highlight class="normal">,i!=-1?</highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="comment">//<sp/>function<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ai<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ai&gt;i)<sp/></highlight><highlight class="comment">//<sp/>function<sp/>pointer<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.prepend(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.right(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.length()-ai));</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.left(ai);</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">,i)!=-1)<sp/></highlight><highlight class="comment">//<sp/>function<sp/>ptr,<sp/>not<sp/>variable<sp/>like<sp/>&quot;int<sp/>(*bla)[10]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.left(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.length()-1);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.prepend(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root-&gt;type=%s<sp/>root-&gt;args=%s\n&quot;,root-&gt;type.data(),root-&gt;args.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">)!=-1<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.right(2)==</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>typedef<sp/>void<sp/>(func)(int)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.left(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.length()-1);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.prepend(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>scope,name=removeRedundantWhiteSpace(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>scope<sp/>of<sp/>this<sp/>variable<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*p<sp/>=<sp/>rootNav-&gt;parent();</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((p-&gt;section()<sp/>&amp;<sp/>Entry::SCOPE_MASK))</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>scopeName<sp/>=<sp/>p-&gt;name();</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scopeName.isEmpty())</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope.prepend(scopeName);</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p=p-&gt;parent();</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/>MemberType<sp/>mtype;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>type=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.stripWhiteSpace();</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRelated=FALSE;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMemberOf=FALSE;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>classScope=stripAnonymousNamespaceScope(scope);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/>classScope=stripTemplateSpecifiersFromScope(classScope,FALSE);</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>annScopePrefix=scope.left(scope.length()-classScope.length());</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)!=-1)<sp/></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>==</highlight><highlight class="stringliteral">&quot;friend<sp/>class&quot;</highlight><highlight class="normal"><sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>==</highlight><highlight class="stringliteral">&quot;friend<sp/>struct&quot;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>==</highlight><highlight class="stringliteral">&quot;friend<sp/>union&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd=getClass(scope);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVariableToClass(rootNav,<sp/><sp/></highlight><highlight class="comment">//<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>to<sp/>add<sp/>member<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType_Friend,<sp/></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/></highlight><highlight class="comment">//<sp/>name<sp/>of<sp/>the<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>Anonymous<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Public,<sp/></highlight><highlight class="comment">//<sp/>protection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Member<sp/><sp/></highlight><highlight class="comment">//<sp/>related<sp/>to<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>nextMember;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>this<sp/>member,<sp/>because<sp/>it<sp/>is<sp/>a<sp/></highlight></codeline>
<codeline lineno="2864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>static<sp/>variable<sp/>definition<sp/>(always?),<sp/>which<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="2865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>found<sp/>in<sp/>a<sp/>class<sp/>scope<sp/>as<sp/>well,<sp/>but<sp/>then<sp/>we<sp/>know<sp/>the</highlight></codeline>
<codeline lineno="2866"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>correct<sp/>protection<sp/>level,<sp/>so<sp/>only<sp/>then<sp/>it<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="2867"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>inserted<sp/>in<sp/>the<sp/>correct<sp/>list!</highlight></codeline>
<codeline lineno="2868"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type==</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_EnumValue;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.left(8)==</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Typedef;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.left(7)==</highlight><highlight class="stringliteral">&quot;friend<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Friend;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Property)</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Property;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Event)</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Event;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Variable;</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>related<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isRelated=TRUE;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isMemberOf=(root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>MemberOf);</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClass(root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>)==0<sp/>&amp;&amp;<sp/>!scope.isEmpty())</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=mergeScopes(scope,root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>);</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/>cd=getClass(scope);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd==0<sp/>&amp;&amp;<sp/>classScope!=scope)<sp/>cd=getClass(classScope);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>cd<sp/>is<sp/>an<sp/>anonymous<sp/>(=tag<sp/>less)<sp/>scope<sp/>we<sp/>insert<sp/>the<sp/>member<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>a<sp/>non-anonymous<sp/>parent<sp/>scope<sp/>as<sp/>well.<sp/>This<sp/>is<sp/>needed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>able<sp/>to<sp/>refer<sp/>to<sp/>it<sp/>using<sp/>\var<sp/>or<sp/>\fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>indentDepth=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si=scope.find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>anonyScopes<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>added=FALSE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inlineSimpleStructs<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;INLINE_SIMPLE_STRUCTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si!=-1<sp/>&amp;&amp;<sp/>!inlineSimpleStructs)<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>scope<sp/>or<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>pScope;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*pcd=0;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pScope<sp/>=<sp/>scope.left(QMAX(si-2,0));<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>without<sp/>tag<sp/>less<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pScope.isEmpty())</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pScope.prepend(annScopePrefix);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(annScopePrefix.length()&gt;2)</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pScope=annScopePrefix.left(annScopePrefix.length()-2);</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pScope.isEmpty()<sp/>&amp;&amp;<sp/>(pcd=getClass(pScope)))</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=addVariableToClass(rootNav,<sp/><sp/></highlight><highlight class="comment">//<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcd,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>to<sp/>add<sp/>member<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype,<sp/></highlight><highlight class="comment">//<sp/>member<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>anonymous<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>anonymous<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMemberOf<sp/>?<sp/>Foreign<sp/>:<sp/>isRelated<sp/>?<sp/>Related<sp/>:<sp/>Member</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//added=TRUE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>scope<sp/>inside<sp/>namespace<sp/>or<sp/>file<sp/>=&gt;<sp/>put<sp/>variable<sp/>in<sp/>the<sp/>global<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mtype==MemberType_Variable)</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=addVariableToFile(rootNav,mtype,pScope,name,TRUE,0);<sp/></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//added=TRUE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;name=`%s&apos;<sp/>scope=%s<sp/>scope.right=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.data(),scope.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope.right(scope.length()-si).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addVariableToClass(rootNav,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>to<sp/>add<sp/>member<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype,<sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>of<sp/>the<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,<sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>anonymous<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>anonymous<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,<sp/></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMemberOf<sp/>?<sp/>Foreign<sp/>:<sp/>isRelated<sp/>?<sp/>Related<sp/>:<sp/>Member);</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>global<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Inserting<sp/>member<sp/>in<sp/>global<sp/>scope<sp/>%s!\n&quot;,scope.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addVariableToFile(rootNav,mtype,scope,name,FALSE,</highlight><highlight class="comment">/*0,*/</highlight><highlight class="normal">0);</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal">nextMember:</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="2965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Searches<sp/>the<sp/>Entry<sp/>tree<sp/>for<sp/>typedef<sp/>documentation<sp/>sections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>found<sp/>they<sp/>are<sp/>stored<sp/>in<sp/>their<sp/>class<sp/>or<sp/>in<sp/>the<sp/>global<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildTypedefList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="2971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;buildVarList(%s)\n&quot;,rootNav-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rootNav-&gt;name().isEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::VARIABLE_SEC<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;type().find(</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">)!=-1<sp/></highlight><highlight class="comment">//<sp/>its<sp/>a<sp/>typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>addVariable(rootNav);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;children())</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*rootNav-&gt;children());</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*e;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(e=eli.current());++eli)</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;section()!=Entry::ENUM_SEC)<sp/></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buildTypedefList(e);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Searches<sp/>the<sp/>Entry<sp/>tree<sp/>for<sp/>Variable<sp/>documentation<sp/>sections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>found<sp/>they<sp/>are<sp/>stored<sp/>in<sp/>their<sp/>class<sp/>or<sp/>in<sp/>the<sp/>global<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildVarList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="2999"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;buildVarList(%s)<sp/>section=%08x\n&quot;,rootNav-&gt;name().data(),rootNav-&gt;section());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isFuncPtr=-1;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rootNav-&gt;name().isEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;type().isEmpty()<sp/>||<sp/>g_compoundKeywordDict.find(rootNav-&gt;type())==0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;section()==Entry::VARIABLE_SEC<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>||</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;section()==Entry::FUNCTION_SEC<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>maybe<sp/>a<sp/>function<sp/>pointer<sp/>variable<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isFuncPtr=findFunctionPtr(rootNav-&gt;type(),rootNav-&gt;lang()))!=-1</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>||</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;section()==Entry::FUNCTION_SEC<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>class<sp/>variable<sp/>initialized<sp/>by<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isVarWithConstructor(rootNav)</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>documented<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/>addVariable(rootNav,isFuncPtr);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;children())</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*rootNav-&gt;children());</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*e;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(e=eli.current());++eli)</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;section()!=Entry::ENUM_SEC)<sp/></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buildVarList(e);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Searches<sp/>the<sp/>Entry<sp/>tree<sp/>for<sp/>Interface<sp/>sections<sp/>(UNO<sp/>IDL<sp/>only).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>found<sp/>they<sp/>are<sp/>stored<sp/>in<sp/>their<sp/>service<sp/>or<sp/>in<sp/>the<sp/>global<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addInterfaceOrServiceToServiceOrSingleton(</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rootNav,</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cd,</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rname)</highlight></codeline>
<codeline lineno="3041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>MemberType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>(rootNav-&gt;section()==Entry::EXPORTED_INTERFACE_SEC)</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>MemberType_Interface</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>MemberType_Service;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>md<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,<sp/>rname,</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1aaf045b9c026443fd192064117083911b" kindref="member" tooltip="virtualness of the entry">virt</ref>,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>,<sp/>Member,</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/>0,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/>md-&gt;setMemberClass(cd);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/>md-&gt;setDocsForDefinition(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/>md-&gt;setTypeConstraints(root-&gt;<ref refid="d4/dd7/class_entry_1a77d30ef01feb28bf83b77d4148968f84" kindref="member" tooltip="where clause (C#) for type constraints">typeConstr</ref>);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>md-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/>md-&gt;setFileDef(fd);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>def<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rname;</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/>md-&gt;setDefinition(def);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/>Debug::print(Debug::Functions,0,</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Interface<sp/>Member:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>`%s&apos;<sp/>`%s&apos;<sp/>proto=%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>def=`%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rname.data(),</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>,</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>def.data()</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>the<sp/>global<sp/>list<sp/>of<sp/>all<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::memberNameSDict-&gt;find(rname)))</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(rname);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(rname,mn);</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>the<sp/>class<sp/>cd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>cd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>add<sp/>the<sp/>member<sp/>as<sp/>a<sp/>&quot;base&quot;<sp/>(to<sp/>get<sp/>nicer<sp/>diagrams)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;optional&quot;<sp/>interface/service<sp/>get<sp/>Protected<sp/>which<sp/>turns<sp/>into<sp/>dashed<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>base(rname,</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref><sp/>&amp;<sp/>(Entry::Optional))<sp/>?<sp/>Protected<sp/>:<sp/>Public,Normal);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/>findClassRelation(rootNav,cd,cd,&amp;base,0,DocumentedOnly,</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/>||<sp/>findClassRelation(rootNav,cd,cd,&amp;base,0,Undocumented,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>file<sp/>to<sp/>list<sp/>of<sp/>used<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/>rootNav-&gt;changeSection(Entry::EMPTY_SEC);</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="3107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildInterfaceAndServiceList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rootNav)</highlight></codeline>
<codeline lineno="3110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::EXPORTED_INTERFACE_SEC<sp/>||</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::INCLUDED_SERVICE_SEC)</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Functions,0,</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EXPORTED_INTERFACE_SEC:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>`%s&apos;<sp/>`%s&apos;::`%s&apos;<sp/>`%s&apos;<sp/>relates=`%s&apos;<sp/>relatesType=`%d&apos;<sp/>file=`%s&apos;<sp/>line=`%d&apos;<sp/>bodyLine=`%d&apos;<sp/>#tArgLists=%d<sp/>mGrpId=%d<sp/>spec=%lld<sp/>proto=%d<sp/>docFile=%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;parent()-&gt;name().data(),</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data(),</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.data(),</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.data(),</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref>,</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>.data(),</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>(int)root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;count()<sp/>:<sp/>-1,</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>,</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>,</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>,</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>.data()</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rname<sp/>=<sp/>removeRedundantWhiteSpace(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rname.isEmpty())</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scope<sp/>=<sp/>rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cd<sp/>=<sp/>getClass(scope);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(cd);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>((ClassDef::Interface<sp/>==<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>())<sp/>||</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ClassDef::Service<sp/><sp/><sp/>==<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>())<sp/>||</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ClassDef::Singleton<sp/>==<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>())))</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addInterfaceOrServiceToServiceOrSingleton(rootNav,cd,rname);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>was<sp/>checked<sp/>by<sp/>scanner.l</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rname.isEmpty())</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Illegal<sp/>member<sp/>name<sp/>found.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>only<sp/>have<sp/>these<sp/>in<sp/>IDL<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(rootNav-&gt;lang())</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_Unknown:<sp/></highlight><highlight class="comment">//<sp/>fall<sp/>through<sp/>(root<sp/>node<sp/>always<sp/>is<sp/>Unknown)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SrcLangExt_IDL:</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RECURSE_ENTRYTREE(buildInterfaceAndServiceList,rootNav);</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>do<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Searches<sp/>the<sp/>Entry<sp/>tree<sp/>for<sp/>Function<sp/>sections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>found<sp/>they<sp/>are<sp/>stored<sp/>in<sp/>their<sp/>class<sp/>or<sp/>in<sp/>the<sp/>global<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMethodToClass(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;rname,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFriend)</highlight></codeline>
<codeline lineno="3181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;([a-z_A-Z0-9:<sp/>]*[<sp/>&amp;*]+[<sp/>]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ts=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>te=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.findRev(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=re.match(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,0,&amp;l);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1<sp/>&amp;&amp;<sp/>ts!=-1<sp/>&amp;&amp;<sp/>ts&lt;te<sp/>&amp;&amp;<sp/>ts&lt;i<sp/>&amp;&amp;<sp/>i&lt;te)<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>changing<sp/>A&lt;int(int*)&gt;,<sp/>see<sp/>bug<sp/>677315</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/>i=-1;</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Cpp<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>C<sp/>has<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty()<sp/>&amp;&amp;<sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Alias)==0<sp/>&amp;&amp;<sp/>i!=-1)<sp/></highlight><highlight class="comment">//<sp/>function<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>+=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.right(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.length()-i-l);</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.left(i+l);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>QCString<sp/>name=removeRedundantWhiteSpace(rname);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.left(2)==</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)<sp/>name=name.right(name.length()-2);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>MemberType<sp/>mtype;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFriend)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Friend;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Signal)<sp/>mtype=MemberType_Signal;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Slot)<sp/><sp/><sp/>mtype=MemberType_Slot;</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==DCOP)<sp/><sp/><sp/>mtype=MemberType_DCOP;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Function;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>redundant<sp/>template<sp/>specifier<sp/>for<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fd==0<sp/>||<sp/>fd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_Cpp)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>name.left(9)!=</highlight><highlight class="stringliteral">&quot;operator<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(i=name.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">))!=-1<sp/>&amp;&amp;<sp/>name.find(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)!=-1)</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/>name=name.left(i);<sp/></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root-&gt;name=`%s;<sp/>root-&gt;args=`%s&apos;<sp/>root-&gt;argList=`%s&apos;\n&quot;,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;name.data(),root-&gt;args.data(),argListToString(root-&gt;argList).data()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>adding<sp/>class<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,name,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>,</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aaf045b9c026443fd192064117083911b" kindref="member" tooltip="virtualness of the entry">virt</ref>,</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref><sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>!=<sp/>MemberOf,</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty()<sp/>?<sp/>Member<sp/>:</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>MemberOf<sp/>?<sp/>Foreign<sp/>:<sp/>Related,</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtype,root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;last()<sp/>:<sp/>0,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/>md-&gt;setMemberClass(cd);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/>md-&gt;setTypeConstraints(root-&gt;<ref refid="d4/dd7/class_entry_1a77d30ef01feb28bf83b77d4148968f84" kindref="member" tooltip="where clause (C#) for type constraints">typeConstr</ref>);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/>md-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/>md-&gt;setFileDef(fd);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//md-&gt;setScopeTemplateArguments(root-&gt;tArgList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/>QCString<sp/>def;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/>QCString<sp/>qualScope<sp/>=<sp/>cd-&gt;qualifiedNameWithTemplateParameters();</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>lang<sp/>=<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>();</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/>QCString<sp/>scopeSeparator=getLanguageSpecificSeparator(lang);</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeSeparator!=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/>qualScope<sp/>=<sp/>substitute(qualScope,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,scopeSeparator);</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang==SrcLangExt_PHP)</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>PHP<sp/>we<sp/>use<sp/>Class::method<sp/>and<sp/>Namespace\method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/>scopeSeparator=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty()<sp/>||<sp/>isFriend<sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>)</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+name;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>)</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=name;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>)</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+qualScope+scopeSeparator+name;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+qualScope+scopeSeparator+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>)</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=qualScope+scopeSeparator+name;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=qualScope+scopeSeparator+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def.left(7)==</highlight><highlight class="stringliteral">&quot;friend<sp/>&quot;</highlight><highlight class="normal">)<sp/>def=def.right(def.length()-7);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/>md-&gt;setDefinition(def);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/>Debug::print(Debug::Functions,0,</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Func<sp/>Member:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>`%s&apos;<sp/>`%s&apos;::`%s&apos;<sp/>`%s&apos;<sp/>proto=%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>def=`%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qualScope.data(),</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rname.data(),</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.data(),</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>,</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>def.data()</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>the<sp/>global<sp/>list<sp/>of<sp/>all<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>member=%s<sp/>class=%s\n&quot;,md-&gt;name().data(),cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::memberNameSDict-&gt;find(name)))</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(name);</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(name,mn);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>the<sp/>class<sp/>cd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/>cd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>file<sp/>to<sp/>list<sp/>of<sp/>used<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/>rootNav-&gt;changeSection(Entry::EMPTY_SEC);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="3350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildFunctionList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="3354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::FUNCTION_SEC)</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Functions,0,</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FUNCTION_SEC:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>`%s&apos;<sp/>`%s&apos;::`%s&apos;<sp/>`%s&apos;<sp/>relates=`%s&apos;<sp/>relatesType=`%d&apos;<sp/>file=`%s&apos;<sp/>line=`%d&apos;<sp/>bodyLine=`%d&apos;<sp/>#tArgLists=%d<sp/>mGrpId=%d<sp/>spec=%lld<sp/>proto=%d<sp/>docFile=%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;parent()-&gt;name().data(),</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data(),</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.data(),</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.data(),</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref>,</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>.data(),</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>(int)root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;count()<sp/>:<sp/>-1,</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>,</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>,</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>,</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>.data()</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFriend=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="stringliteral">&quot;friend<sp/>&quot;</highlight><highlight class="normal">)!=-1;</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>rname<sp/>=<sp/>removeRedundantWhiteSpace(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;rname=%s\n&quot;,rname.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>scope=rootNav-&gt;parent()-&gt;name();<sp/></highlight><highlight class="comment">//stripAnonymousNamespaceScope(root-&gt;parent-&gt;name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rname.isEmpty()<sp/>&amp;&amp;<sp/>scope.find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)==-1)</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>this<sp/>function&apos;s<sp/>parent<sp/>is<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope=stripTemplateSpecifiersFromScope(scope,FALSE);</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*rfd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memIndex=rname.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd=getClass(scope);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>scope+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">==rname.left(scope.length()+2))<sp/></highlight><highlight class="comment">//<sp/>found<sp/>A::f<sp/>inside<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>scope<sp/>from<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rname=rname.right(rname.length()-rootNav-&gt;parent()-&gt;name().length()-2);<sp/></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMember=FALSE;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memIndex!=-1)</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ts=rname.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>te=rname.find(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memIndex&gt;0<sp/>&amp;&amp;<sp/>(ts==-1<sp/>||<sp/>te==-1))</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note:<sp/>the<sp/>following<sp/>code<sp/>was<sp/>replaced<sp/>by<sp/>inMember=TRUE<sp/>to<sp/>deal<sp/>with<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>rname=&apos;X::foo&apos;<sp/>of<sp/>class<sp/>X<sp/>inside<sp/>a<sp/>namespace<sp/>also<sp/>called<sp/>X...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bug<sp/>id<sp/>548175</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nd<sp/>=<sp/>Doxygen::namespaceSDict-&gt;find(rname.left(memIndex));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//isMember<sp/>=<sp/>nd==0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(nd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>strip<sp/>namespace<sp/>scope<sp/>from<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>scope=rname.left(memIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>rname=rname.right(rname.length()-memIndex-2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMember<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMember=memIndex&lt;ts<sp/>||<sp/>memIndex&gt;te;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;([a-z_A-Z0-9:<sp/>]*[<sp/>&amp;*]+[<sp/>]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ts=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>te=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.findRev(</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ti;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rootNav-&gt;parent()-&gt;name().isEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;parent()-&gt;section()<sp/>&amp;<sp/>Entry::COMPOUND_MASK)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>some<sp/>fuzzy<sp/>things<sp/>to<sp/>exclude<sp/>function<sp/>pointers<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty()<sp/>||<sp/></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ti=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(re,0))==-1<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>does<sp/>not<sp/>contain<sp/>..(..*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ts!=-1<sp/>&amp;&amp;<sp/>ts&lt;te<sp/>&amp;&amp;<sp/>ts&lt;ti<sp/>&amp;&amp;<sp/>ti&lt;te)<sp/>||<sp/></highlight><highlight class="comment">//<sp/>outside<sp/>of<sp/>&lt;<sp/>...<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.find(</highlight><highlight class="stringliteral">&quot;)[&quot;</highlight><highlight class="normal">)!=-1)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>args<sp/>not<sp/>)[..<sp/>-&gt;<sp/>function<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="stringliteral">&quot;)(&quot;</highlight><highlight class="normal">)!=-1<sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">)!=-1<sp/>||<sp/></highlight><highlight class="comment">//<sp/>type<sp/>contains<sp/>..)(..<sp/>and<sp/>not<sp/>&quot;operator&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()!=SrcLangExt_Cpp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>language<sp/>other<sp/>than<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Functions,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>--&gt;<sp/>member<sp/>%s<sp/>of<sp/>class<sp/>%s!\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rname.data(),cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMethodToClass(rootNav,cd,rname,isFriend);</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((rootNav-&gt;parent()-&gt;section()<sp/>&amp;<sp/>Entry::COMPOUND_MASK)<sp/></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>rootNav-&gt;parent()-&gt;section()==Entry::OBJCIMPL_SEC</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!isMember<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty()<sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>Duplicate)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.left(7)!=</highlight><highlight class="stringliteral">&quot;extern<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.left(8)!=</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>member<sp/>=&gt;<sp/>unrelated<sp/>function<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>the<sp/>uniqueness<sp/>of<sp/>the<sp/>function<sp/>name<sp/>in<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="3459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>file<sp/>could<sp/>contain<sp/>a<sp/>function<sp/>prototype<sp/>and<sp/>a<sp/>function<sp/>definition</highlight></codeline>
<codeline lineno="3460"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>even<sp/>multiple<sp/>function<sp/>prototypes.</highlight></codeline>
<codeline lineno="3461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::functionNameSDict-&gt;find(rname)))</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Functions,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>--&gt;<sp/>function<sp/>%s<sp/>already<sp/>found!\n&quot;</highlight><highlight class="normal">,rname.data());</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(!found<sp/>&amp;&amp;<sp/>(md=mni.current()));++mni)</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*mnd<sp/>=<sp/>md-&gt;getNamespaceDef();</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*rnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root<sp/>namespace=%s\n&quot;,rootNav-&gt;parent()-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fullScope<sp/>=<sp/>scope;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>parentScope<sp/>=<sp/>rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parentScope.isEmpty()<sp/>&amp;&amp;<sp/>!leftScopeMatch(parentScope,scope))</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scope.isEmpty())<sp/>fullScope.prepend(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullScope.prepend(parentScope);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;fullScope=%s\n&quot;,fullScope.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rnd<sp/>=<sp/>getResolvedNamespace(fullScope);</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*mfd<sp/>=<sp/>md-&gt;getFileDef();</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>nsName,rnsName;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mnd)<sp/><sp/>nsName<sp/>=<sp/>mnd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rnd)<sp/>rnsName<sp/>=<sp/>rnd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;matching<sp/>arguments<sp/>for<sp/>%s%s<sp/>%s%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),md-&gt;argsString(),rname.data(),argListToString(root-&gt;argList).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdAl<sp/>=<sp/>md-&gt;argumentList();</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdTempl<sp/>=<sp/>md-&gt;templateArguments();</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>of<sp/>template<sp/>functions,<sp/>we<sp/>need<sp/>to<sp/>check<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>functions<sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>template<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sameNumTemplateArgs<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchingReturnTypes<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdTempl!=0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>)</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdTempl-&gt;count()!=root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;getLast()-&gt;count())</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sameNumTemplateArgs<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;typeString()!=removeRedundantWhiteSpace(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>))</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchingReturnTypes<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>staticsInDifferentFiles<sp/>=<sp/></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref><sp/>&amp;&amp;<sp/>md-&gt;isStatic()<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>!=md-&gt;getDefFileName();</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(md-&gt;getOuterScope(),mfd,mdAl,</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rnd<sp/>?<sp/>rnd<sp/>:<sp/>Doxygen::globalScope,rfd,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sameNumTemplateArgs<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchingReturnTypes<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!staticsInDifferentFiles</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd=0;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>-&gt;first()!=0)</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd<sp/>=<sp/>Doxygen::groupSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>-&gt;first()-&gt;groupname.data());</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;match!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;mnd=%p<sp/>rnd=%p<sp/>nsName=%s<sp/>rnsName=%s\n&quot;,mnd,rnd,nsName.data(),rnsName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>need<sp/>to<sp/>create<sp/>a<sp/>new<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=(mnd<sp/>&amp;&amp;<sp/>rnd<sp/>&amp;&amp;<sp/>nsName==rnsName)<sp/>||<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>members<sp/>are<sp/>in<sp/>the<sp/>same<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((mnd==0<sp/>&amp;&amp;<sp/>rnd==0<sp/>&amp;&amp;<sp/>mfd!=0<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>external<sp/>reference<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfd-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>()==root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref><sp/></highlight><highlight class="comment">//<sp/>prototype<sp/>in<sp/>the<sp/>same<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>allow<sp/>a<sp/>duplicate<sp/>global<sp/>member<sp/>with<sp/>the<sp/>same<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>gd<sp/>&amp;&amp;<sp/>gd==md-&gt;getGroupDef()<sp/>&amp;&amp;<sp/>nsName==rnsName)</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>is<sp/>already<sp/>in<sp/>the<sp/>group,<sp/>so<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>add<sp/>it<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;combining<sp/>function<sp/>with<sp/>prototype<sp/>found=%d<sp/>in<sp/>namespace<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>found,nsName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>argument<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeArguments(mdAl,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty());</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;documentation().isEmpty()<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*argList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,argList);</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>)</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;setDeclArgumentList<sp/>to<sp/>%p\n&quot;,argList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDeclArgumentList(argList);</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setArgumentList(argList);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setInbodyDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getStartBodyLine()!=-1<sp/>&amp;&amp;<sp/>md-&gt;getStartBodyLine()==-1)</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(rfd);</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;briefDescription().isEmpty()<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setArgsString(root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>);</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBriefDescription(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;addSectionsToDefinition(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallGraph(md-&gt;hasCallGraph()<sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallerGraph(md-&gt;hasCallerGraph()<sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>ingroup<sp/>specifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getGroupDef()==0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>-&gt;first()!=0)</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getGroupDef()!=0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>-&gt;count()==0)</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;existing<sp/>member<sp/>is<sp/>grouped,<sp/>new<sp/>member<sp/>not\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>-&gt;append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d59/struct_grouping" kindref="compound" tooltip="Grouping info.">Grouping</ref>(md-&gt;getGroupDef()-&gt;name(),<sp/>md-&gt;getGroupPri()));</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getGroupDef()!=0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>-&gt;first()!=0)</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;both<sp/>members<sp/>are<sp/>grouped\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>md<sp/>is<sp/>a<sp/>declaration<sp/>and<sp/>root<sp/>is<sp/>the<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>definition,<sp/>then<sp/>turn<sp/>md<sp/>into<sp/>a<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isPrototype()<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>)</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setPrototype(FALSE);</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/></highlight><highlight class="comment">/*<sp/>global<sp/>function<sp/>is<sp/>unique<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Functions,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>--&gt;<sp/>new<sp/>function<sp/>%s<sp/>found!\n&quot;</highlight><highlight class="normal">,rname.data());</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;New<sp/>function<sp/>type=`%s&apos;<sp/>name=`%s&apos;<sp/>args=`%s&apos;<sp/>bodyLine=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;type.data(),rname.data(),root-&gt;args.data(),root-&gt;bodyLine);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>global<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tArgList<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;last()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>name=removeRedundantWhiteSpace(rname);</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,name,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>,</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aaf045b9c026443fd192064117083911b" kindref="member" tooltip="virtualness of the entry">virt</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>,Member,</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType_Function,tArgList,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>);</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setId(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//md-&gt;setDefFile(root-&gt;fileName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//md-&gt;setDefLine(root-&gt;startLine);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBriefDescription(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setInbodyDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setPrototype(root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTypeConstraints(root-&gt;<ref refid="d4/dd7/class_entry_1a77d30ef01feb28bf83b77d4148968f84" kindref="member" tooltip="where clause (C#) for type constraints">typeConstr</ref>);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//md-&gt;setBody(root-&gt;body);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;addSectionsToDefinition(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>function<sp/>is<sp/>inside<sp/>a<sp/>namespace<sp/>that<sp/>was<sp/>not<sp/>part<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>name<sp/>already<sp/>(in<sp/>that<sp/>case<sp/>nd<sp/>should<sp/>be<sp/>non-zero<sp/>already)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd==0<sp/>&amp;&amp;<sp/>rootNav-&gt;parent()-&gt;section()<sp/>==<sp/>Entry::NAMESPACE_SEC<sp/>)</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>nscope=removeAnonymousScopes(rootNav-&gt;parent()-&gt;name());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>nscope=rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nscope.isEmpty())</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd<sp/>=<sp/>getResolvedNamespace(nscope);</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scope.isEmpty())</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>sep<sp/>=<sp/>getLanguageSpecificSeparator(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep!=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope<sp/>=<sp/>substitute(scope,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,sep);</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope+=sep;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>def;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty())</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>)</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+scope+name;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+scope+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>)</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=scope+name.copy();</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def=scope+name+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Functions,0,</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Global<sp/>Function:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>`%s&apos;<sp/>`%s&apos;::`%s&apos;<sp/>`%s&apos;<sp/>proto=%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>def=`%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;parent()-&gt;name().data(),</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rname.data(),</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.data(),</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>,</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def.data()</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(def);</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(root-&gt;mGrpId!=-1)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>md-&gt;setMemberGroup(memberGroupDict[root-&gt;mGrpId]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd<sp/>&amp;&amp;<sp/>!nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setNamespace(nd);</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;insertMember(md);<sp/></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>the<sp/>file<sp/>(we<sp/>do<sp/>this<sp/>even<sp/>if<sp/>we<sp/>have<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inserted<sp/>it<sp/>into<sp/>the<sp/>namespace)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setFileDef(fd);<sp/></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a84f7bb05a4a830056b208d94c6c2bd59" kindref="member">insertMember</ref>(md);</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>the<sp/>list<sp/>of<sp/>file<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>member=%s\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::functionNameSDict-&gt;find(name)))</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(name);</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(name,mn);</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>Simple)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>a<sp/>relatesalso<sp/>command,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>find<sp/>Member<sp/>to<sp/>pick<sp/>it<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;changeSection(Entry::EMPTY_SEC);<sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>we<sp/>have<sp/>finished<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>this<sp/>entry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>member<sp/>to<sp/>the<sp/>file<sp/>(we<sp/>do<sp/>this<sp/>even<sp/>if<sp/>we<sp/>have<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inserted<sp/>it<sp/>into<sp/>the<sp/>namespace)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a84f7bb05a4a830056b208d94c6c2bd59" kindref="member">insertMember</ref>(md);</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;unrelated<sp/>function<sp/>%d<sp/>`%s&apos;<sp/>`%s&apos;<sp/>`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;parent-&gt;section,root-&gt;type.data(),rname.data(),root-&gt;args.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Functions,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>--&gt;<sp/>%s<sp/>not<sp/>processed!\n&quot;</highlight><highlight class="normal">,rname.data());</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rname.isEmpty())</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Illegal<sp/>member<sp/>name<sp/>found.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(buildFunctionList,rootNav);</highlight></codeline>
<codeline lineno="3772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findFriends()</highlight></codeline>
<codeline lineno="3777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;findFriends()\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>fnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fn=fnli.current());++fnli)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>global<sp/>function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Function<sp/>name=`%s&apos;\n&quot;,fn-&gt;memberName());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::memberNameSDict-&gt;find(fn-&gt;memberName())))</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>members<sp/>with<sp/>the<sp/>same<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Function<sp/>name<sp/>is<sp/>also<sp/>a<sp/>member<sp/>name\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd;</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fmd=fni.current());++fni)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>function<sp/>with<sp/>that<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mmd;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(mmd=mni.current());++mni)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>with<sp/>that<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Checking<sp/>for<sp/>matching<sp/>arguments<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;isRelated()=%d<sp/>mmd-&gt;isFriend()=%d<sp/>mmd-&gt;isFunction()=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mmd-&gt;isRelated(),mmd-&gt;isFriend(),mmd-&gt;isFunction());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mmdAl<sp/>=<sp/>mmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*fmdAl<sp/>=<sp/>fmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mmd-&gt;isFriend()<sp/>||<sp/>(mmd-&gt;isRelated()<sp/>&amp;&amp;<sp/>mmd-&gt;isFunction()))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(mmd-&gt;getOuterScope(),<sp/>mmd-&gt;getFileDef(),<sp/>mmdAl,</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;getOuterScope(),<sp/>fmd-&gt;getFileDef(),<sp/>fmdAl,</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>member<sp/>is<sp/>related<sp/>and<sp/>the<sp/>arguments<sp/>match<sp/>then<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>is<sp/>actually<sp/>a<sp/>friend.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeArguments(mmdAl,fmdAl);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fmd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(fmd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>());</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mmd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(mmd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),mmd-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),mmd-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>());</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty()<sp/>&amp;&amp;<sp/>!fmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty())</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(fmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>());</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty()<sp/>&amp;&amp;<sp/>!fmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty())</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(mmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),mmd-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),mmd-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>());</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fmd-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(fmd-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>());</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mmd-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(mmd-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>(),mmd-&gt;<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),mmd-&gt;<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>());</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;body<sp/>mmd<sp/>%d<sp/>fmd<sp/>%d\n&quot;,mmd-&gt;getStartBodyLine(),fmd-&gt;getStartBodyLine());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mmd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()==-1<sp/>&amp;&amp;<sp/>fmd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()!=-1)</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;setBodySegment(fmd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),fmd-&gt;<ref refid="d5/dcc/class_definition_1a11056f29c65e1dddc184036bce5d5456" kindref="member">getEndBodyLine</ref>());</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;setBodyDef(fmd-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>());</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mmd-&gt;setBodyMember(fmd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mmd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()!=-1<sp/>&amp;&amp;<sp/>fmd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()==-1)</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setBodySegment(mmd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),mmd-&gt;<ref refid="d5/dcc/class_definition_1a11056f29c65e1dddc184036bce5d5456" kindref="member">getEndBodyLine</ref>());</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setBodyDef(mmd-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>());</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fmd-&gt;setBodyMember(mmd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;setDocsForDefinition(fmd-&gt;isDocsForDefinition());</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;enableCallGraph(mmd-&gt;hasCallGraph()<sp/>||<sp/>fmd-&gt;hasCallGraph());</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmd-&gt;enableCallerGraph(mmd-&gt;hasCallerGraph()<sp/>||<sp/>fmd-&gt;hasCallerGraph());</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;enableCallGraph(mmd-&gt;hasCallGraph()<sp/>||<sp/>fmd-&gt;hasCallGraph());</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;enableCallerGraph(mmd-&gt;hasCallerGraph()<sp/>||<sp/>fmd-&gt;hasCallerGraph());</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transferFunctionDocumentation()</highlight></codeline>
<codeline lineno="3864"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;----<sp/>transferFunctionDocumentation()\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>matching<sp/>function<sp/>declaration<sp/>and<sp/>definitions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(mn=mnli.current());++mnli)</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;memberName=%s<sp/>count=%d\n&quot;,mn-&gt;memberName(),mn-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mdef=0,*mdec=0;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni1(*mn);</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>a<sp/>matching<sp/>function<sp/>declaration<sp/>and<sp/>definition<sp/>for<sp/>this<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(mdec=mni1.current());++mni1)</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdec-&gt;isPrototype()<sp/>||</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mdec-&gt;isVariable()<sp/>&amp;&amp;<sp/>mdec-&gt;isExternal())<sp/></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni2(*mn);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(mdef=mni2.current());++mni2)</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combineDeclarationAndDefinition(mdec,mdef);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transferFunctionReferences()</highlight></codeline>
<codeline lineno="3895"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(mn=mnli.current());++mnli)</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md,*mdef=0,*mdec=0;</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>a<sp/>matching<sp/>function<sp/>declaration<sp/>and<sp/>definition<sp/>for<sp/>this<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isPrototype())<sp/></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec=md;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isVariable()<sp/>&amp;&amp;<sp/>md-&gt;isExternal())<sp/></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec=md;</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isFunction()<sp/>&amp;&amp;<sp/>!md-&gt;isStatic()<sp/>&amp;&amp;<sp/>!md-&gt;isPrototype())<sp/></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef=md;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isVariable()<sp/>&amp;&amp;<sp/>!md-&gt;isExternal()<sp/>&amp;&amp;<sp/>!md-&gt;isStatic())</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef=md;</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdef<sp/>&amp;&amp;<sp/>mdec)</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdefAl<sp/>=<sp/>mdef-&gt;argumentList();</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdecAl<sp/>=<sp/>mdec-&gt;argumentList();</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(mdef-&gt;getOuterScope(),mdef-&gt;getFileDef(),mdefAl,</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;getOuterScope(),mdec-&gt;getFileDef(),mdecAl,</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">/*<sp/>match<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/dd6/class_member_s_dict" kindref="compound" tooltip="A sorted dictionary of MemberDef objects.">MemberSDict</ref><sp/>*defDict<sp/>=<sp/>mdef-&gt;getReferencesMembers();</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/dd6/class_member_s_dict" kindref="compound" tooltip="A sorted dictionary of MemberDef objects.">MemberSDict</ref><sp/>*decDict<sp/>=<sp/>mdec-&gt;getReferencesMembers();</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defDict!=0)</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberSDict::IteratorDict<sp/>msdi(*defDict);</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd;</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(msdi.toFirst();(rmd=msdi.current());++msdi)</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decDict==0<sp/>||<sp/>decDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(rmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())==0)</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;addSourceReferences(rmd);</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decDict!=0)</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberSDict::IteratorDict<sp/>msdi(*decDict);</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd;</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(msdi.toFirst();(rmd=msdi.current());++msdi)</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defDict==0<sp/>||<sp/>defDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(rmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())==0)</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;addSourceReferences(rmd);</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defDict<sp/>=<sp/>mdef-&gt;getReferencedByMembers();</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decDict<sp/>=<sp/>mdec-&gt;getReferencedByMembers();</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defDict!=0)</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberSDict::IteratorDict<sp/>msdi(*defDict);</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd;</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(msdi.toFirst();(rmd=msdi.current());++msdi)</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decDict==0<sp/>||<sp/>decDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(rmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())==0)</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdec-&gt;addSourceReferencedBy(rmd);</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decDict!=0)</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberSDict::IteratorDict<sp/>msdi(*decDict);</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(msdi.toFirst();(rmd=msdi.current());++msdi)</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(defDict==0<sp/>||<sp/>defDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(rmd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())==0)</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdef-&gt;addSourceReferencedBy(rmd);</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transferRelatedFunctionDocumentation()</highlight></codeline>
<codeline lineno="3987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>match<sp/>between<sp/>function<sp/>declaration<sp/>and<sp/>definition<sp/>for<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>related<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mnli.toFirst();(mn=mnli.current());++mnli)</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>a<sp/>matching<sp/>function<sp/>declaration<sp/>and<sp/>definition<sp/>for<sp/>this<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>global<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Function<sp/>`%s&apos;\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*rmn;</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rmn=Doxygen::memberNameSDict-&gt;find(md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())))<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>there<sp/>is<sp/>a<sp/>member<sp/>with<sp/>the<sp/>same<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Member<sp/>name<sp/>found\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>rmni(*rmn);</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rmni.toFirst();(rmd=rmni.current());++rmni)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>with<sp/>the<sp/>same<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdAl<sp/>=<sp/>md-&gt;argumentList();</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*rmdAl<sp/>=<sp/>rmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Member<sp/>found:<sp/>related=`%d&apos;\n&quot;,rmd-&gt;isRelated());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rmd-&gt;isRelated()<sp/>||<sp/>rmd-&gt;isForeign())<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>related<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(<sp/>md-&gt;getOuterScope(),<sp/>md-&gt;getFileDef(),<sp/>mdAl,</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmd-&gt;getOuterScope(),rmd-&gt;getFileDef(),rmdAl,</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Found<sp/>related<sp/>member<sp/>`%s&apos;\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rmd-&gt;relatedAlso())</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRelatedAlso(rmd-&gt;relatedAlso());</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rmd-&gt;isForeign())</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;makeForeign();</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;makeRelated();</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;int&gt;<sp/>*getTemplateArgumentsInName(<ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*templateArguments,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="4040"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/>QDict&lt;int&gt;<sp/>*templateNames<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QDict&lt;int&gt;(17);</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/>templateNames-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QRegExp<sp/>re(</highlight><highlight class="stringliteral">&quot;[a-z_A-Z][a-z_A-Z0-9:]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templateArguments)</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>ali(*templateArguments);</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*arg;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();(arg=ali.current());++ali,count++)</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0,l;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(name,p,&amp;l))!=-1)</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>n<sp/>=<sp/>name.mid(i,l);</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n==arg-&gt;<ref refid="d1/dee/struct_argument_1a334668ce5d1f650c804e69f1bc941a3b" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templateNames-&gt;find(n)==0)</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateNames-&gt;insert(n,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(count));</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>templateNames;</highlight></codeline>
<codeline lineno="4067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*findClassWithinClassContext(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context,<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="4073"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=cd-&gt;<ref refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" kindref="member" tooltip="Returns the file in which this compound&amp;#39;s definition can be found.">getFileDef</ref>();</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*result=0;</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context<sp/>&amp;&amp;<sp/>cd!=context)</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getResolvedClass(context,0,name,0,0,TRUE,TRUE);</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result==0)</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getResolvedClass(cd,fd,name,0,0,TRUE,TRUE);</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result==0)<sp/></highlight><highlight class="comment">//<sp/>try<sp/>direct<sp/>class,<sp/>needed<sp/>for<sp/>namespaced<sp/>classes<sp/>imported<sp/>via<sp/>tag<sp/>files<sp/>(see<sp/>bug624095)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getClass(name);</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result==0<sp/>&amp;&amp;<sp/>cd<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>()==SrcLangExt_CSharp<sp/>&amp;&amp;<sp/>name.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)!=-1)</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Doxygen::genericsDict-&gt;find(name);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;**<sp/>Trying<sp/>to<sp/>find<sp/>%s<sp/>within<sp/>context<sp/>%s<sp/>class<sp/>%s<sp/>result=%s<sp/>lookup=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>?<sp/>context-&gt;name().data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>cd-&gt;name().data()<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/><sp/>?<sp/>result-&gt;name().data()<sp/><sp/>:<sp/>&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::classSDict-&gt;find(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findUsedClassesForClass(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context,</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*masterCd,</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*instanceCd,</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isArtificial,</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*actualArgs=0,</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;int&gt;<sp/>*templateNames=0</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/>masterCd-&gt;visited=TRUE;</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*formalArgs<sp/>=<sp/>masterCd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>();</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(masterCd-&gt;<ref refid="d1/dcf/class_class_def_1a1dfaf495dfdfa1e23a19704c22784f98" kindref="member" tooltip="Returns a dictionary of all members.">memberNameInfoSDict</ref>())</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/>MemberNameInfoSDict::Iterator<sp/>mnili(*masterCd-&gt;<ref refid="d1/dcf/class_class_def_1a1dfaf495dfdfa1e23a19704c22784f98" kindref="member" tooltip="Returns a dictionary of all members.">memberNameInfoSDict</ref>());</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d27/class_member_name_info" kindref="compound" tooltip="Class representing all MemberInfo objects with the same name.">MemberNameInfo</ref><sp/>*mni;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(mni=mnili.current());++mnili)</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d1b/class_member_name_info_iterator" kindref="compound" tooltip="Iterator for MemberInfo objects in a MemberNameInfo list.">MemberNameInfoIterator</ref><sp/>mnii(*mni);</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d49/struct_member_info" kindref="compound" tooltip="Data associated with a MemberDef in an inheritance relation.">MemberInfo</ref><sp/>*mi;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mnii.toFirst();(mi=mnii.current());++mnii)</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=mi-&gt;memberDef;</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isVariable()<sp/>||<sp/>md-&gt;isObjCProperty())<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>variable<sp/>in<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>Found<sp/>variable<sp/>%s<sp/>in<sp/>class<sp/>%s\n&quot;,md-&gt;name().data(),masterCd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>type<sp/>=<sp/>normalizeNonTemplateArgumentsInString(md-&gt;typeString(),masterCd,formalArgs);</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>typedefValue<sp/>=<sp/>resolveTypeDef(masterCd,type);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!typedefValue.isEmpty())</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>typedefValue;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos=0;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>usedClassName;</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>templSpec;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>type<sp/>can<sp/>contain<sp/>template<sp/>variables,<sp/>replace<sp/>them<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualArgs)</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>substituteTemplateArgumentsInString(type,formalArgs,actualArgs);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>substitution<sp/>gives=%s\n&quot;,type.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>extractClassNameFromType(type,pos,usedClassName,templSpec,rootNav-&gt;lang())!=-1)</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>type<sp/>(if<sp/>any)<sp/>that<sp/>matches<sp/>usedClassName</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*typeCd<sp/>=<sp/>getResolvedClass(masterCd,</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterCd-&gt;<ref refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" kindref="member" tooltip="Returns the file in which this compound&amp;#39;s definition can be found.">getFileDef</ref>(),</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedClassName,</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,TRUE</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;====&gt;<sp/><sp/>usedClassName=%s<sp/>-&gt;<sp/>typeCd=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>usedClassName.data(),typeCd?typeCd-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeCd)</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedClassName<sp/>=<sp/>typeCd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp=usedClassName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sp==-1)<sp/>sp=0;</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si=usedClassName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,sp);</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si!=-1)</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>any<sp/>namespace<sp/>aliases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaceNamespaceAliases(usedClassName,si);</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>any<sp/>template<sp/>arguments<sp/>to<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>usedName<sp/>=<sp/>removeRedundantWhiteSpace(usedClassName+templSpec);</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>usedName=%s\n&quot;,usedName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delTempNames=FALSE;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templateNames==0)</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateNames<sp/>=<sp/>getTemplateArgumentsInName(formalArgs,usedName);</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delTempNames=TRUE;</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>bi(usedName,Public,Normal);</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findClassRelation(rootNav,context,instanceCd,&amp;bi,templateNames,TemplateInstances,isArtificial);</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(masterCd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>())</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>ali(*masterCd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>());</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*arg;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ali.toFirst();(arg=ali.current());++ali,++count)</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg-&gt;name==usedName)<sp/></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>a<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>New<sp/>used<sp/>class<sp/>`%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>usedName.data());</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*usedCd<sp/>=<sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(usedName);</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usedCd==0)</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>(</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterCd-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),masterCd-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterCd-&gt;<ref refid="d5/dcc/class_definition_1abc16ee564cb0be049ec0f17e2adf0bca" kindref="member">getDefColumn</ref>(),</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedName,</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClassDef::Class);</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;making<sp/>%s<sp/>a<sp/>template<sp/>argument!!!\n&quot;,usedCd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd-&gt;makeTemplateArgument();</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd-&gt;setUsedOnly(TRUE);</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd-&gt;setLanguage(masterCd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>());</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(usedName,usedCd);</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usedCd)</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isArtificial)<sp/>usedCd-&gt;setArtificial(TRUE);</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Adding<sp/>used<sp/>class<sp/>`%s&apos;<sp/>(1)\n&quot;</highlight><highlight class="normal">,<sp/>usedCd-&gt;name().data());</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instanceCd-&gt;addUsedClass(usedCd,md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),md-&gt;protection());</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd-&gt;addUsedByClass(instanceCd,md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),md-&gt;protection());</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*usedCd=findClassWithinClassContext(context,masterCd,usedName);</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Looking<sp/>for<sp/>used<sp/>class<sp/>%s:<sp/>result=%s<sp/>master=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>usedName.data(),usedCd?usedCd-&gt;name().data():&quot;&lt;none&gt;&quot;,masterCd?masterCd-&gt;name().data():&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usedCd)<sp/></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Adding<sp/>used<sp/>class<sp/>`%s&apos;<sp/>(2)\n&quot;</highlight><highlight class="normal">,<sp/>usedCd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instanceCd-&gt;addUsedClass(usedCd,md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),md-&gt;protection());<sp/></highlight><highlight class="comment">//<sp/>class<sp/>exists<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd-&gt;addUsedByClass(instanceCd,md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),md-&gt;protection());</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delTempNames)</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>templateNames;</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateNames=0;</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>!type.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>used<sp/>class<sp/>is<sp/>not<sp/>documented<sp/>in<sp/>any<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*usedCd<sp/>=<sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(type);</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usedCd==0<sp/>&amp;&amp;<sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_UNDOC_RELATIONS&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.right(2)==</highlight><highlight class="stringliteral">&quot;(*&quot;</highlight><highlight class="normal"><sp/>||<sp/>type.right(2)==</highlight><highlight class="stringliteral">&quot;(^&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>a<sp/>function<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type+=md-&gt;argsString();</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>New<sp/>undocumented<sp/>used<sp/>class<sp/>`%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>type.data());</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>(</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterCd-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>(),masterCd-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>(),</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterCd-&gt;<ref refid="d5/dcc/class_definition_1abc16ee564cb0be049ec0f17e2adf0bca" kindref="member">getDefColumn</ref>(),</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,ClassDef::Class);</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd-&gt;setUsedOnly(TRUE);</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd-&gt;setLanguage(masterCd-&gt;<ref refid="d5/dcc/class_definition_1a55485230d99cc877348db64f01dde092" kindref="member" tooltip="Returns the programming language this definition was written in.">getLanguage</ref>());</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(type,usedCd);</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usedCd)</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isArtificial)<sp/>usedCd-&gt;setArtificial(TRUE);</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Adding<sp/>used<sp/>class<sp/>`%s&apos;<sp/>(3)\n&quot;</highlight><highlight class="normal">,<sp/>usedCd-&gt;name().data());</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instanceCd-&gt;addUsedClass(usedCd,md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),md-&gt;protection());<sp/></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedCd-&gt;addUsedByClass(instanceCd,md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),md-&gt;protection());</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;no<sp/>members<sp/>for<sp/>class<sp/>%s<sp/>(%p)\n&quot;,masterCd-&gt;name().data(),masterCd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findBaseClassesForClass(</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context,</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*masterCd,</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*instanceCd,</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FindBaseClassRelation_Mode<sp/>mode,</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isArtificial,</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*actualArgs=0,</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;int&gt;<sp/>*templateNames=0</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(masterCd-&gt;visited)<sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/>masterCd-&gt;visited=TRUE;</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>class<sp/>could<sp/>ofcouse<sp/>also<sp/>be<sp/>a<sp/>non-nested<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*formalArgs<sp/>=<sp/>masterCd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>();</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>QListIterator&lt;BaseInfo&gt;<sp/>bii(*root-&gt;<ref refid="d4/dd7/class_entry_1a22b4c7b8255e183b68c49d5bd9f04017" kindref="member" tooltip="list of base classes">extends</ref>);</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>*bi=0;</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bii.toFirst();(bi=bii.current());++bii)</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;masterCd=%s<sp/>bi-&gt;name=&apos;%s&apos;<sp/>#actualArgs=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>masterCd-&gt;localName().data(),bi-&gt;name.data(),actualArgs?(int)actualArgs-&gt;count():-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delTempNames=FALSE;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templateNames==0)</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>templateNames<sp/>=<sp/>getTemplateArgumentsInName(formalArgs,bi-&gt;<ref refid="de/d64/struct_base_info_1ae8bba327d477830b4664f9d03b05c97b" kindref="member" tooltip="the name of the base class">name</ref>);</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delTempNames=TRUE;</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>tbi(bi-&gt;<ref refid="de/d64/struct_base_info_1ae8bba327d477830b4664f9d03b05c97b" kindref="member" tooltip="the name of the base class">name</ref>,bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>,bi-&gt;<ref refid="de/d64/struct_base_info_1ab32fa6c3344b6608768043f6ee5a8e6b" kindref="member" tooltip="virtualness">virt</ref>);</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actualArgs)<sp/></highlight><highlight class="comment">//<sp/>substitute<sp/>the<sp/>formal<sp/>template<sp/>arguments<sp/>of<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbi.name<sp/>=<sp/>substituteTemplateArgumentsInString(bi-&gt;<ref refid="de/d64/struct_base_info_1ae8bba327d477830b4664f9d03b05c97b" kindref="member" tooltip="the name of the base class">name</ref>,formalArgs,actualArgs);</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bi-&gt;name=%s<sp/>tbi.name=%s\n&quot;,bi-&gt;name.data(),tbi.name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode==DocumentedOnly)</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>a<sp/>documented<sp/>base<sp/>class<sp/>in<sp/>the<sp/>correct<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!findClassRelation(rootNav,context,instanceCd,&amp;tbi,templateNames,DocumentedOnly,isArtificial))</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.8.2:<sp/>decided<sp/>to<sp/>show<sp/>inheritance<sp/>relations<sp/>even<sp/>if<sp/>not<sp/>documented,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>do<sp/>make<sp/>them<sp/>artificial,<sp/>so<sp/>they<sp/>do<sp/>not<sp/>appear<sp/>in<sp/>the<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!Config_getBool(&quot;HIDE_UNDOC_RELATIONS&quot;))<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_UNDOC_RELATIONS&quot;</highlight><highlight class="normal">)<sp/>?<sp/>TRUE<sp/>:<sp/>isArtificial;</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>documented<sp/>base<sp/>class<sp/>-&gt;<sp/>try<sp/>to<sp/>find<sp/>an<sp/>undocumented<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findClassRelation(rootNav,context,instanceCd,&amp;tbi,templateNames,Undocumented,b);</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode==TemplateInstances)</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findClassRelation(rootNav,context,instanceCd,&amp;tbi,templateNames,TemplateInstances,isArtificial);</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delTempNames)</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>templateNames;</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>templateNames=0;</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>findTemplateInstanceRelation(<ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root,</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context,</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*templateClass,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;templSpec,</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;int&gt;<sp/>*templateNames,</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isArtificial)</highlight></codeline>
<codeline lineno="4344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>derived<sp/>from<sp/>template<sp/>%s<sp/>with<sp/>parameters<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateClass-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data(),templSpec.data());</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;findTemplateInstanceRelation(base=%s<sp/>templSpec=%s<sp/>templateNames=&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>templateClass-&gt;name().data(),templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(templateNames)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>QDictIterator&lt;int&gt;<sp/>qdi(*templateNames);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>int<sp/>*tempArgIndex;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(;(tempArgIndex=qdi.current());++qdi)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;(%s-&gt;%d)<sp/>&quot;,qdi.currentKey(),*tempArgIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>existingClass<sp/>=<sp/>(templSpec<sp/>==</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempArgListToString(templateClass-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>())</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(existingClass)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>freshInstance=FALSE;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*instanceClass<sp/>=<sp/>templateClass-&gt;insertTemplateInstance(</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,templSpec,freshInstance);</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isArtificial)<sp/>instanceClass-&gt;setArtificial(TRUE);</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/>instanceClass-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freshInstance)</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>fresh<sp/>instance<sp/>&apos;%s&apos;!\n&quot;</highlight><highlight class="normal">,instanceClass-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(instanceClass-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),instanceClass);</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/>instanceClass-&gt;setTemplateBaseClassNames(templateNames);</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>new<sp/>template<sp/>instances<sp/>caused<sp/>by<sp/>base<sp/>classes<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instanceClass<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*templateRootNav<sp/>=<sp/>g_classEntries.find(templateClass-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templateRootNav)</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unloadNeeded=FALSE;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*templateRoot<sp/>=<sp/>templateRootNav-&gt;entry();</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templateRoot==0)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>yet<sp/>loaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateRootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateRoot<sp/>=<sp/>templateRootNav-&gt;entry();</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(templateRoot!=0);<sp/></highlight><highlight class="comment">//<sp/>now<sp/>it<sp/>should<sp/>really<sp/>be<sp/>loaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unloadNeeded=TRUE;</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>root<sp/>found<sp/>%s<sp/>templSpec=%s!\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateRoot-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data(),templSpec.data());</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*templArgs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(templSpec,templArgs);</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findBaseClassesForClass(templateRootNav,context,templateClass,instanceClass,</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TemplateInstances,isArtificial,templArgs,templateNames);</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"></highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findUsedClassesForClass(templateRootNav,context,templateClass,instanceClass,</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isArtificial,templArgs,templateNames);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>templArgs;</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unloadNeeded)<sp/></highlight><highlight class="comment">//<sp/>still<sp/>cleanup<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateRootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no<sp/>template<sp/>root<sp/>entry<sp/>found!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>what<sp/>happened<sp/>if<sp/>we<sp/>get<sp/>here?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Debug::print(Debug::Classes,0,&quot;<sp/><sp/><sp/><sp/>Template<sp/>instance<sp/>%s<sp/>:<sp/>\n&quot;,instanceClass-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ArgumentList<sp/>*tl<sp/>=<sp/>templateClass-&gt;templateArguments();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>instance<sp/>already<sp/>exists!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRecursiveBaseClass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;scope,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;name)</highlight></codeline>
<codeline lineno="4425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/>QCString<sp/>n=name;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=n.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index!=-1)</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/>n=n.left(index);</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>rightScopeMatch(scope,n);</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight></codeline>
<codeline lineno="4449"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>findEndOfTemplate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startPos)</highlight></codeline>
<codeline lineno="4450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>locate<sp/>end<sp/>of<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=startPos;</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>brCount=1;</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>roundCount=0;</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>s.length();</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>insideString=FALSE;</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>insideChar=FALSE;</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(e&lt;len<sp/>&amp;&amp;<sp/>brCount!=0)</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=s.at(e);</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideString<sp/>&amp;&amp;<sp/>!insideChar)</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e&lt;len-1<sp/>&amp;&amp;<sp/>s.at(e+1)==</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e++;<sp/></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(roundCount==0)</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brCount++;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideString<sp/>&amp;&amp;<sp/>!insideChar)</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e&lt;len-1<sp/>&amp;&amp;<sp/>s.at(e+1)==</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e++;<sp/></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(roundCount==0)</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brCount--;</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideString<sp/>&amp;&amp;<sp/>!insideChar)<sp/></highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roundCount++;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideString<sp/>&amp;&amp;<sp/>!insideChar)<sp/></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roundCount--;</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideChar)</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insideString<sp/>&amp;&amp;<sp/>pc!=</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insideString=FALSE;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insideString=TRUE;</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insideString)</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insideChar<sp/>&amp;&amp;<sp/>pc!=</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insideChar=FALSE;</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insideChar=TRUE;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/>pc<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/>e++;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>brCount==0<sp/>?<sp/>e<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>findClassRelation(</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*context,</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd,</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>*bi,</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;int&gt;<sp/>*templateNames,</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindBaseClassRelation_Mode<sp/>mode,</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isArtificial</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;findClassRelation(class=%s<sp/>base=%s<sp/>templateNames=&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd-&gt;name().data(),bi-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(templateNames)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>QDictIterator&lt;int&gt;<sp/>qdi(*templateNames);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>int<sp/>*tempArgIndex;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(;(tempArgIndex=qdi.current());++qdi)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;(%s-&gt;%d)<sp/>&quot;,qdi.currentKey(),*tempArgIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/>QCString<sp/>biName=bi-&gt;<ref refid="de/d64/struct_base_info_1ae8bba327d477830b4664f9d03b05c97b" kindref="member" tooltip="the name of the base class">name</ref>;</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>explicitGlobalScope=FALSE;</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;findClassRelation:<sp/>biName=`%s&apos;\n&quot;,biName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(biName.left(2)==</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>global<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>biName=biName.right(biName.length()-2);</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>explicitGlobalScope=TRUE;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*parentNode=rootNav-&gt;parent();</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lastParent=FALSE;</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>parent<sp/>scope,<sp/>starting<sp/>with<sp/>the<sp/>largest<sp/>scope<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(in<sp/>case<sp/>of<sp/>nested<sp/>classes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>scopeName=<sp/>parentNode<sp/>?<sp/>parentNode-&gt;name().data()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scopeOffset=explicitGlobalScope<sp/>?<sp/>0<sp/>:<sp/>scopeName.length();</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>try<sp/>all<sp/>parent<sp/>scope<sp/>prefixes,<sp/>starting<sp/>with<sp/>the<sp/>largest<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopePrefix=`%s&apos;<sp/>biName=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scopeName.left(scopeOffset).data(),biName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>baseClassName=biName;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeOffset&gt;0)</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName.prepend(scopeName.left(scopeOffset)+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>stripped;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//baseClassName=stripTemplateSpecifiersFromScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(removeRedundantWhiteSpace(baseClassName),TRUE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;stripped);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*baseClassTypeDef=0;</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>templSpec;</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*baseClass=getResolvedClass(explicitGlobalScope<sp/>?<sp/>Doxygen::globalScope<sp/>:<sp/>context,</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" kindref="member" tooltip="Returns the file in which this compound&amp;#39;s definition can be found.">getFileDef</ref>(),<sp/></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName,</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;baseClassTypeDef,</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;templSpec,</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode==Undocumented,</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;baseClassName=%s<sp/>baseClass=%p<sp/>cd=%p<sp/>explicitGlobalScope=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>baseClassName.data(),baseClass,cd,explicitGlobalScope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/>scope=`%s&apos;<sp/>baseClassName=`%s&apos;<sp/>baseClass=%s<sp/>templSpec=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/>?<sp/>cd-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass?baseClass-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templSpec.data()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(baseClassName.left(root-&gt;name.length())!=root-&gt;name<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>baseClassName.at(root-&gt;name.length())!=&apos;&lt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>)<sp/>//<sp/>Check<sp/>for<sp/>base<sp/>class<sp/>with<sp/>the<sp/>same<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>found<sp/>then<sp/>look<sp/>in<sp/>the<sp/>outer<sp/>scope<sp/>for<sp/>a<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>prevent<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isRecursiveBaseClass(rootNav-&gt;name(),baseClassName)</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>explicitGlobalScope</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sadly<sp/>isRecursiveBaseClass<sp/>always<sp/>true<sp/>for<sp/>UNO<sp/>IDL<sp/>ifc/svc<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(i.e.<sp/>this<sp/>is<sp/>needed<sp/>for<sp/>addInterfaceOrServiceToServiceOrSingleton)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(rootNav-&gt;lang()==SrcLangExt_IDL<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;section()==Entry::EXPORTED_INTERFACE_SEC<sp/>||</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::INCLUDED_SERVICE_SEC)))</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>class<sp/>relation<sp/>%s<sp/>inherited/used<sp/>by<sp/>%s<sp/>found<sp/>(%s<sp/>and<sp/>%s)<sp/>templSpec=&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName.data(),</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;name().data(),</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>==Private)?</highlight><highlight class="stringliteral">&quot;private&quot;</highlight><highlight class="normal">:((bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>==Protected)?</highlight><highlight class="stringliteral">&quot;protected&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;public&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bi-&gt;<ref refid="de/d64/struct_base_info_1ab32fa6c3344b6608768043f6ee5a8e6b" kindref="member" tooltip="virtualness">virt</ref>==Normal)?</highlight><highlight class="stringliteral">&quot;normal&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;virtual&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templSpec.data()</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"></highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=baseClassName.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si=baseClassName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,i==-1<sp/>?<sp/>baseClassName.length()<sp/>:<sp/>i);</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si==-1)<sp/>si=0;</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseClass==0<sp/>&amp;&amp;<sp/>i!=-1)<sp/></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>class<sp/>has<sp/>template<sp/>specifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref><sp/>==<sp/>SrcLangExt_CSharp)</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass<sp/>=<sp/>Doxygen::genericsDict-&gt;find(baseClassName);</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>here<sp/>we<sp/>should<sp/>try<sp/>to<sp/>find<sp/>the<sp/>correct<sp/>template<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>for<sp/>now,<sp/>we<sp/>only<sp/>look<sp/>for<sp/>the<sp/>unspecializated<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=findEndOfTemplate(baseClassName,i+1);</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;baseClass==0<sp/>i=%d<sp/>e=%d\n&quot;,i,e);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e!=-1)<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>template<sp/>was<sp/>found<sp/>at<sp/>e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templSpec=removeRedundantWhiteSpace(baseClassName.mid(i,e-i));</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName=baseClassName.left(i)+baseClassName.right(baseClassName.length()-e);</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=getResolvedClass(explicitGlobalScope<sp/>?<sp/>Doxygen::globalScope<sp/>:<sp/>context,</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" kindref="member" tooltip="Returns the file in which this compound&amp;#39;s definition can be found.">getFileDef</ref>(),</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName,</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;baseClassTypeDef,</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="comment">//&amp;templSpec,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode==Undocumented,</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;baseClass=%p<sp/>-&gt;<sp/>baseClass=%s<sp/>templSpec=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>baseClass,baseClassName.data(),templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseClass<sp/>&amp;&amp;<sp/>!templSpec.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>a<sp/>known<sp/>class,<sp/>but<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>know<sp/>it<sp/>is<sp/>a<sp/>template,<sp/>so<sp/>see<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>also<sp/>link<sp/>to<sp/>the<sp/>explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instance<sp/>(for<sp/>instance<sp/>if<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>derived<sp/>from<sp/>a<sp/>template<sp/>argument)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;baseClass=%p<sp/>templSpec=%s\n&quot;,baseClass,templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*templClass=getClass(baseClass-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+templSpec);</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templClass)</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>template<sp/>instance<sp/>instead<sp/>of<sp/>the<sp/>template<sp/>base.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass<sp/>=<sp/>templClass;</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templSpec.resize(0);</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;cd=%p<sp/>baseClass=%p\n&quot;,cd,baseClass);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=baseClass!=0<sp/>&amp;&amp;<sp/>(baseClass!=cd<sp/>||<sp/>mode==TemplateInstances);</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;1.<sp/>found=%d\n&quot;,found);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>si!=-1)</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>tmpTemplSpec;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>any<sp/>namespace<sp/>aliases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaceNamespaceAliases(baseClassName,si);</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=getResolvedClass(explicitGlobalScope<sp/>?<sp/>Doxygen::globalScope<sp/>:<sp/>context,</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1ac30c86b68f74495d90bc44bb5b432529" kindref="member" tooltip="Returns the file in which this compound&amp;#39;s definition can be found.">getFileDef</ref>(),</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName,</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;baseClassTypeDef,</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;tmpTemplSpec,</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode==Undocumented,</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=baseClass!=0<sp/>&amp;&amp;<sp/>baseClass!=cd;</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>templSpec<sp/>=<sp/>tmpTemplSpec;</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;2.<sp/>found=%d\n&quot;,found);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root-&gt;name=%s<sp/>biName=%s<sp/>baseClassName=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;name.data(),biName.data(),baseClassName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(cd-&gt;isCSharp()<sp/>&amp;&amp;<sp/>i!=-1)<sp/>//<sp/>C#<sp/>generic<sp/>-&gt;<sp/>add<sp/>internal<sp/>-g<sp/>postfix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>baseClassName+=&quot;-g&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=findClassWithinClassContext(context,cd,baseClassName);</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;findClassWithinClassContext(%s,%s)=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd-&gt;name().data(),baseClassName.data(),baseClass);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>baseClass!=0<sp/>&amp;&amp;<sp/>baseClass!=cd;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>PHP<sp/>the<sp/>&quot;use<sp/>A\B<sp/>as<sp/>C&quot;<sp/>construct<sp/>map<sp/>class<sp/>C<sp/>to<sp/>A::B,<sp/>so<sp/>we<sp/>lookup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>class<sp/>name<sp/>also<sp/>in<sp/>the<sp/>alias<sp/>mapping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>*aliasName<sp/>=<sp/>Doxygen::namespaceAliasDict[baseClassName];</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aliasName)<sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>it<sp/>is<sp/>indeed<sp/>a<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=getClass(*aliasName);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>baseClass!=0<sp/>&amp;&amp;<sp/>baseClass!=cd;</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isATemplateArgument<sp/>=<sp/>templateNames!=0<sp/>&amp;&amp;<sp/>templateNames-&gt;find(biName)!=0;</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>templSpec<sp/>canonical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>warning:<sp/>the<sp/>following<sp/>line<sp/>doesn&apos;t<sp/>work<sp/>for<sp/>Mixin<sp/>classes<sp/>(see<sp/>bug<sp/>560623)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>templSpec<sp/>=<sp/>getCanonicalTemplateSpec(cd,<sp/>cd-&gt;getFileDef(),<sp/>templSpec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;3.<sp/>found=%d\n&quot;,found);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Documented<sp/>base<sp/>class<sp/>`%s&apos;<sp/>templSpec=%s\n&quot;</highlight><highlight class="normal">,biName.data(),templSpec.isEmpty()?</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">:templSpec.data());</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>base<sp/>class<sp/>to<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>templSpec<sp/>is<sp/>not<sp/>empty<sp/>then<sp/>we<sp/>should<sp/>&quot;instantiate&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>template<sp/>baseClass.<sp/>A<sp/>new<sp/>ClassDef<sp/>should<sp/>be<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>represent<sp/>the<sp/>instance.<sp/>To<sp/>be<sp/>able<sp/>to<sp/>add<sp/>the<sp/>(instantiated)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>members<sp/>and<sp/>documentation<sp/>of<sp/>a<sp/>template<sp/>class<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(inserted<sp/>in<sp/>that<sp/>template<sp/>class<sp/>at<sp/>a<sp/>later<sp/>stage),<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>template<sp/>should<sp/>know<sp/>about<sp/>its<sp/>instances.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>instantiation<sp/>process,<sp/>should<sp/>be<sp/>done<sp/>in<sp/>a<sp/>recursive<sp/>way,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>instantiating<sp/>a<sp/>template<sp/>may<sp/>introduce<sp/>new<sp/>inheritance<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!templSpec.isEmpty()<sp/>&amp;&amp;<sp/>mode==TemplateInstances)</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>baseClass<sp/>is<sp/>actually<sp/>a<sp/>typedef<sp/>then<sp/>we<sp/>should<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instantiate<sp/>it,<sp/>since<sp/>typedefs<sp/>are<sp/>in<sp/>a<sp/>different<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>bug531637<sp/>for<sp/>an<sp/>example<sp/>where<sp/>this<sp/>would<sp/>otherwise<sp/>hang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseClassTypeDef==0)</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=&gt;<sp/>findTemplateInstanceRelation:<sp/>%p\n&quot;,baseClassTypeDef);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findTemplateInstanceRelation(root,context,baseClass,templSpec,templateNames,isArtificial);</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode==DocumentedOnly<sp/>||<sp/>mode==Undocumented)</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=&gt;<sp/>insert<sp/>base<sp/>class\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>usedName;</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseClassTypeDef<sp/>||<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a5d2fd562edd7ea2cbea161c5eecfaeb4" kindref="member" tooltip="Returns TRUE if this class is implemented in C#.">isCSharp</ref>())<sp/></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usedName=biName;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;*****<sp/>usedName=%s<sp/>templSpec=%s\n&quot;,usedName.data(),templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sipSupport<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;SIP_SUPPORT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sipSupport)<sp/>bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>=Public;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cd-&gt;<ref refid="d1/dcf/class_class_def_1a89449570106d125574aead5e6a7bee1e" kindref="member" tooltip="Returns TRUE iff bcd is a direct or indirect sub class of this class.">isSubClass</ref>(baseClass))<sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>recursion,<sp/>see<sp/>bug690787</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertBaseClass(baseClass,usedName,bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>,bi-&gt;<ref refid="de/d64/struct_base_info_1ab32fa6c3344b6608768043f6ee5a8e6b" kindref="member" tooltip="virtualness">virt</ref>,templSpec);</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>this<sp/>class<sp/>as<sp/>super<sp/>class<sp/>to<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;insertSubClass(cd,bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>,bi-&gt;<ref refid="de/d64/struct_base_info_1ab32fa6c3344b6608768043f6ee5a8e6b" kindref="member" tooltip="virtualness">virt</ref>,templSpec);</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Detected<sp/>potential<sp/>recursive<sp/>class<sp/>relation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;between<sp/>class<sp/>%s<sp/>and<sp/>base<sp/>class<sp/>%s!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data(),baseClass-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data()</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode==Undocumented<sp/>&amp;&amp;<sp/>(scopeOffset==0<sp/>||<sp/>isATemplateArgument))</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>New<sp/>undocumented<sp/>base<sp/>class<sp/>`%s&apos;<sp/>baseClassName=%s<sp/>templSpec=%s<sp/>isArtificial=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>biName.data(),baseClassName.data(),templSpec.data(),isArtificial</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=0;</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isATemplateArgument)</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(baseClassName);</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseClass==0)</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName,</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClassDef::Class);</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(baseClassName,baseClass);</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isArtificial)<sp/>baseClass-&gt;setArtificial(TRUE);</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(baseClassName);</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;***<sp/>classDDict-&gt;find(%s)=%p<sp/>biName=%s<sp/>templSpec=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>baseClassName.data(),baseClass,biName.data(),templSpec.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseClass==0)</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassName,</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClassDef::Class);</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(baseClassName,baseClass);</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isArtificial)<sp/>baseClass-&gt;setArtificial(TRUE);</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si<sp/>=<sp/>baseClassName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si!=-1)<sp/></highlight><highlight class="comment">//<sp/>class<sp/>is<sp/>nested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*sd<sp/>=<sp/>findScopeFromQualifiedName(Doxygen::globalScope,baseClassName.left(si));</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sd==0<sp/>||<sp/>sd==Doxygen::globalScope)<sp/></highlight><highlight class="comment">//<sp/>outer<sp/>scope<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;setArtificial(TRUE);<sp/></highlight><highlight class="comment">//<sp/>see<sp/>bug678139</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(biName.right(2)==</highlight><highlight class="stringliteral">&quot;-p&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>biName=</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">+biName.left(biName.length()-2)+</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>base<sp/>class<sp/>to<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertBaseClass(baseClass,biName,bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>,bi-&gt;<ref refid="de/d64/struct_base_info_1ab32fa6c3344b6608768043f6ee5a8e6b" kindref="member" tooltip="virtualness">virt</ref>,templSpec);</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>this<sp/>class<sp/>as<sp/>super<sp/>class<sp/>to<sp/>the<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;insertSubClass(cd,bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>,bi-&gt;<ref refid="de/d64/struct_base_info_1ab32fa6c3344b6608768043f6ee5a8e6b" kindref="member" tooltip="virtualness">virt</ref>,templSpec);</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>undocumented<sp/>base<sp/>was<sp/>found<sp/>in<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;setOuterScope(Doxygen::globalScope);</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseClassName.right(2)==</highlight><highlight class="stringliteral">&quot;-p&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;setCompoundType(ClassDef::Protocol);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Base<sp/>class<sp/>`%s&apos;<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,biName.data());</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode!=TemplateInstances)</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Detected<sp/>potential<sp/>recursive<sp/>class<sp/>relation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;between<sp/>class<sp/>%s<sp/>and<sp/>base<sp/>class<sp/>%s!\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data(),baseClassName.data()</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>mode==TemplateInstance<sp/>this<sp/>case<sp/>is<sp/>quite<sp/>common<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indicates<sp/>a<sp/>relation<sp/>between<sp/>a<sp/>template<sp/>class<sp/>and<sp/>a<sp/>template<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instance<sp/>with<sp/>the<sp/>same<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scopeOffset==0)</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=-1;</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((scopeOffset=scopeName.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,scopeOffset-1))==-1)</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeOffset=0;</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>scopeOffset=`%d&apos;&quot;,scopeOffset);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(scopeOffset&gt;=0);</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"></highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parentNode==0)</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastParent=TRUE;</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parentNode=parentNode-&gt;parent();</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lastParent);</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"></highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>base<sp/>and<sp/>super<sp/>classes<sp/>for<sp/>each<sp/>class<sp/>in<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isClassSection(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="4874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!rootNav-&gt;name().isEmpty()<sp/>)</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()<sp/>&amp;<sp/>Entry::COMPOUND_MASK)</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>it<sp/>a<sp/>compound<sp/>(class,<sp/>struct,<sp/>union,<sp/>interface<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()<sp/>&amp;<sp/>Entry::COMPOUNDDOC_MASK)<sp/></highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>it<sp/>a<sp/>documentation<sp/>block<sp/>with<sp/>inheritance<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extends<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a22b4c7b8255e183b68c49d5bd9f04017" kindref="member" tooltip="list of base classes">extends</ref>-&gt;count()&gt;0;</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();<sp/></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extends)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="4893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findClassEntries(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="4899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isClassSection(rootNav))</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/>g_classEntries.insert(rootNav-&gt;name(),rootNav);</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findClassEntries,rootNav);</highlight></codeline>
<codeline lineno="4905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight></codeline>
<codeline lineno="4912"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findInheritedTemplateInstances()</highlight></codeline>
<codeline lineno="4913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();cli.current();++cli)<sp/>cli.current()-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/>QDictIterator&lt;EntryNav&gt;<sp/>edi(g_classEntries);</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(rootNav=edi.current());++edi)</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>any<sp/>anonymous<sp/>scopes<sp/>first<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>bName=stripAnonymousNamespaceScope(rootNav-&gt;name());</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/>bName=stripTemplateSpecifiersFromScope(bName);</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Inheritance:<sp/>Class<sp/>%s<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,bName.data());</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(bName)))</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Class<sp/>%s<sp/>%d\n&quot;,cd-&gt;name().data(),root-&gt;extends-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findBaseClassesForClass(rootNav,cd,cd,cd,TemplateInstances,FALSE);</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findUsedTemplateInstances()</highlight></codeline>
<codeline lineno="4936"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();cli.current();++cli)<sp/>cli.current()-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/>QDictIterator&lt;EntryNav&gt;<sp/>edi(g_classEntries);</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(rootNav=edi.current());++edi)</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>any<sp/>anonymous<sp/>scopes<sp/>first<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>bName=stripAnonymousNamespaceScope(rootNav-&gt;name());</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/>bName=stripTemplateSpecifiersFromScope(bName);</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Usage:<sp/>Class<sp/>%s<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,bName.data());</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(bName)))</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findUsedClassesForClass(rootNav,cd,cd,cd,TRUE);</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"></highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computeClassRelations()</highlight></codeline>
<codeline lineno="4958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();cli.current();++cli)<sp/>cli.current()-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/>QDictIterator&lt;EntryNav&gt;<sp/>edi(g_classEntries);</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav;</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(rootNav=edi.current());++edi)</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>any<sp/>anonymous<sp/>scopes<sp/>first<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>bName=stripAnonymousNamespaceScope(rootNav-&gt;name());</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/>bName=stripTemplateSpecifiersFromScope(bName);</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Relations:<sp/>Class<sp/>%s<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,bName.data());</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(bName)))</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findBaseClassesForClass(rootNav,cd,cd,cd,DocumentedOnly,FALSE);</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numMembers<sp/>=<sp/>cd<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a1dfaf495dfdfa1e23a19704c22784f98" kindref="member" tooltip="Returns a dictionary of all members.">memberNameInfoSDict</ref>()<sp/>?<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a1dfaf495dfdfa1e23a19704c22784f98" kindref="member" tooltip="Returns a dictionary of all members.">memberNameInfoSDict</ref>()-&gt;<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd==0<sp/>||<sp/>(!cd-&gt;<ref refid="d1/dcf/class_class_def_1ab753d57a3b39906b612a8c81a1b93f1e" kindref="member" tooltip="returns TRUE if this class has documentation">hasDocumentation</ref>()<sp/>&amp;&amp;<sp/>!cd-&gt;<ref refid="d1/dcf/class_class_def_1affb81a94d66c7a831bd3aef71f8c175a" kindref="member" tooltip="Returns TRUE if this class is imported via a tag file.">isReference</ref>()))<sp/>&amp;&amp;<sp/>numMembers&gt;0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bName.right(2)!=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.isEmpty()<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>normal<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(guessSection(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>)==Entry::HEADER_SEC<sp/>||<sp/></highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_LOCAL_CLASSES&quot;</highlight><highlight class="normal">))<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>defined<sp/>in<sp/>source<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protectionLevelVisible(root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>)<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>hidden<sp/>by<sp/>protection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_UNDOC_CLASSES&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>undocumented<sp/>class<sp/>are<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_undoc(</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Compound<sp/>%s<sp/>is<sp/>not<sp/>documented.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data()</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computeTemplateClassRelations()</highlight></codeline>
<codeline lineno="5000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/>QDictIterator&lt;EntryNav&gt;<sp/>edi(g_classEntries);</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(rootNav=edi.current());++edi)</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"></highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>bName=stripAnonymousNamespaceScope(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/>bName=stripTemplateSpecifiersFromScope(bName);</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=getClass(bName);</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>any<sp/>anonymous<sp/>scopes<sp/>first<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/>QDict&lt;ClassDef&gt;<sp/>*templInstances<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>(templInstances=cd-&gt;<ref refid="d1/dcf/class_class_def_1a40a4d62d34cfa2f075c58acf6477e67f" kindref="member" tooltip="Returns a sorted dictionary with all template instances found for this template class.">getTemplateInstances</ref>()))</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Template<sp/>class<sp/>%s<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QDictIterator&lt;ClassDef&gt;<sp/>tdi(*templInstances);</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*tcd;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(tdi.toFirst();(tcd=tdi.current());++tdi)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>template<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::Classes,0,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Template<sp/>instance<sp/>%s<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">,tcd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>templSpec<sp/>=<sp/>tdi.currentKey();</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*templArgs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(templSpec,templArgs);</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;BaseInfo&gt;</ref><sp/>*baseList=root-&gt;<ref refid="d4/dd7/class_entry_1a22b4c7b8255e183b68c49d5bd9f04017" kindref="member" tooltip="list of base classes">extends</ref>;</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>*bi=baseList-&gt;first();</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bi)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>base<sp/>class<sp/>of<sp/>the<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>base<sp/>class<sp/>is<sp/>a<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>tbi(bi-&gt;<ref refid="de/d64/struct_base_info_1ae8bba327d477830b4664f9d03b05c97b" kindref="member" tooltip="the name of the base class">name</ref>,bi-&gt;<ref refid="de/d64/struct_base_info_1aaf46efd63ca2b598a79324042bac83f3" kindref="member" tooltip="inheritance type">prot</ref>,bi-&gt;<ref refid="de/d64/struct_base_info_1ab32fa6c3344b6608768043f6ee5a8e6b" kindref="member" tooltip="virtualness">virt</ref>);</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tl<sp/>=<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a3ba3cce6c993005b394e616267f31b3c" kindref="member" tooltip="Returns the template arguments of this class Will return 0 if not applicable.">templateArguments</ref>();</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tl)</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;int&gt;<sp/>*baseClassNames<sp/>=<sp/>tcd-&gt;getTemplateBaseClassNames();</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;int&gt;<sp/>*templateNames<sp/>=<sp/>getTemplateArgumentsInName(tl,bi-&gt;<ref refid="de/d64/struct_base_info_1ae8bba327d477830b4664f9d03b05c97b" kindref="member" tooltip="the name of the base class">name</ref>);</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>template<sp/>name<sp/>that<sp/>we<sp/>inherit<sp/>from<sp/>we<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>substitute<sp/>the<sp/>formal<sp/>with<sp/>the<sp/>actual<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;int&gt;<sp/>*actualTemplateNames<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QDict&lt;int&gt;(17);</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualTemplateNames-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDictIterator&lt;int&gt;<sp/>qdi(*templateNames);</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(qdi.toFirst();qdi.current();++qdi)</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>templIndex<sp/>=<sp/>*qdi.current();</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*actArg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templIndex&lt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)templArgs-&gt;count())<sp/></highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actArg=templArgs-&gt;at(templIndex);</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actArg!=0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassNames!=0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClassNames-&gt;find(actArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>)!=0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualTemplateNames-&gt;find(actArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>)==0</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualTemplateNames-&gt;insert(actArg-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(templIndex));</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>templateNames;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tbi.name<sp/>=<sp/>substituteTemplateArgumentsInString(bi-&gt;<ref refid="de/d64/struct_base_info_1ae8bba327d477830b4664f9d03b05c97b" kindref="member" tooltip="the name of the base class">name</ref>,tl,templArgs);</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>a<sp/>documented<sp/>base<sp/>class<sp/>in<sp/>the<sp/>correct<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!findClassRelation(rootNav,cd,tcd,&amp;tbi,actualTemplateNames,DocumentedOnly,FALSE))</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>documented<sp/>base<sp/>class<sp/>-&gt;<sp/>try<sp/>to<sp/>find<sp/>an<sp/>undocumented<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findClassRelation(rootNav,cd,tcd,&amp;tbi,actualTemplateNames,Undocumented,TRUE);</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>actualTemplateNames;</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bi=baseList-&gt;next();</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>templArgs;</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>class<sp/>has<sp/>no<sp/>base<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>references<sp/>(anchors<sp/>in<sp/>HTML)<sp/>for<sp/>each<sp/>function<sp/>in<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5080"><highlight class="normal"></highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computeMemberReferences()</highlight></codeline>
<codeline lineno="5082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;computeAnchors();</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn=Doxygen::inputNameList-&gt;first();</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fn)</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=fn-&gt;first();</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a8ab814579e542ea5325a6d5d386c56a2" kindref="member">computeAnchors</ref>();</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=fn-&gt;next();</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/>fn=Doxygen::inputNameList-&gt;next();</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=0;</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nli.toFirst();(nd=nli.current());++nli)</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;computeAnchors();</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/>GroupSDict::Iterator<sp/>gli(*Doxygen::groupSDict);</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/>gd-&gt;<ref refid="d8/d09/class_group_def_1a2b3099f398ccdb867feab801bcb970cd" kindref="member">computeAnchors</ref>();</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addListReferences()</highlight></codeline>
<codeline lineno="5117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::memberNameSDict);</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=0;</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mnli.toFirst();(mn=mnli.current());++mnli)</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>fnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(mn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;addListReferences();</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn=Doxygen::inputNameList-&gt;first();</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fn)</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=fn-&gt;first();</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addListReferences();</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=fn-&gt;next();</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/>fn=Doxygen::inputNameList-&gt;next();</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=0;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nli.toFirst();(nd=nli.current());++nli)</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;addListReferences();</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/>GroupSDict::Iterator<sp/>gli(*Doxygen::groupSDict);</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/>gd-&gt;addListReferences();</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/>PageSDict::Iterator<sp/>pdi(*Doxygen::pageSDict);</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd=0;</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pdi.toFirst();(pd=pdi.current());++pdi)</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name<sp/>=<sp/>pd-&gt;<ref refid="dd/d41/class_page_def_1aa08ebea225e51faed63111ba64e78960" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pd-&gt;getGroupDef())</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>pd-&gt;getGroupDef()-&gt;<ref refid="d8/d09/class_group_def_1a67914ef80cfb1958b5b5f36b13866b83" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ListItemInfo&gt;</ref><sp/>*xrefItems<sp/>=<sp/>pd-&gt;xrefListItems();</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addRefItem(xrefItems,</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theTranslator-&gt;trPage(TRUE,TRUE),</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,pd-&gt;title(),0);</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/>DirSDict::Iterator<sp/>ddi(*Doxygen::directories);</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><ref refid="d4/dd4/class_dir_def" kindref="compound" tooltip="A model of a directory symbol.">DirDef</ref><sp/>*dd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ddi.toFirst();(dd=ddi.current());++ddi)</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name<sp/>=<sp/>dd-&gt;<ref refid="d4/dd4/class_dir_def_1a45b42037a0ed21aaba3950e7fb53fbd9" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(dd-&gt;getGroupDef())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>name<sp/>=<sp/>dd-&gt;getGroupDef()-&gt;getOutputFileBase();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ListItemInfo&gt;</ref><sp/>*xrefItems<sp/>=<sp/>dd-&gt;xrefListItems();</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/>addRefItem(xrefItems,</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theTranslator-&gt;trDir(TRUE,TRUE),</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,dd-&gt;<ref refid="d4/dd4/class_dir_def_1a360c7e6d3deaf6782329a019c80b110a" kindref="member">displayName</ref>(),0);</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"></highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateXRefPages()</highlight></codeline>
<codeline lineno="5206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/>QDictIterator&lt;RefList&gt;<sp/>di(*Doxygen::xrefLists);</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><ref refid="d7/de8/class_ref_list" kindref="compound" tooltip="List of cross-referenced items.">RefList</ref><sp/>*rl;</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(di.toFirst();(rl=di.current());++di)</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/>rl-&gt;generatePage();</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"></highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>documentation<sp/>in<sp/>entry<sp/>`root&apos;<sp/>to<sp/>member<sp/>definition<sp/>`md&apos;<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>function<sp/>declaration<sp/>of<sp/>the<sp/>member<sp/>to<sp/>`funcDecl&apos;.<sp/>If<sp/>the<sp/>boolean<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>over_load<sp/>is<sp/>set<sp/>the<sp/>standard<sp/>overload<sp/>text<sp/>is<sp/>added.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMemberDocs(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcDecl,</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al,</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>over_load,</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;addMemberDocs:<sp/>`%s&apos;::`%s&apos;<sp/>`%s&apos;<sp/>funcDecl=`%s&apos;<sp/>mSpec=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>root-&gt;parent-&gt;name.data(),md-&gt;name().data(),md-&gt;argsString(),funcDecl,root-&gt;spec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/>QCString<sp/>fDecl=funcDecl;</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>extern<sp/>specifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/>fDecl.stripPrefix(</highlight><highlight class="stringliteral">&quot;extern<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/>md-&gt;setDefinition(fDecl);</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/><sp/><sp/><sp/>*cd=md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=md-&gt;getNamespaceDef();</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/>QCString<sp/>fullName;</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/>fullName<sp/>=<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd)<sp/></highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/>fullName<sp/>=<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fullName.isEmpty())<sp/>fullName+=</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/>fullName+=md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>();</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*rfd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"></highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>determine<sp/>scope<sp/>based<sp/>on<sp/>root<sp/>not<sp/>md</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*rscope<sp/>=<sp/>md-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"></highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdAl<sp/>=<sp/>md-&gt;argumentList();</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al)</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;merging<sp/>arguments<sp/>(1)<sp/>docs=%d\n&quot;,root-&gt;doc.isEmpty());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/>mergeArguments(mdAl,al,!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty());</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(<sp/>md-&gt;getOuterScope(),<sp/>md-&gt;getFileDef(),<sp/>mdAl,</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rscope,rfd,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;merging<sp/>arguments<sp/>(2)\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mergeArguments(mdAl,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty());</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(over_load)<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>\overload<sp/>keyword<sp/>was<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>doc=getOverloadDocs();</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty())</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doc+=</highlight><highlight class="stringliteral">&quot;&lt;p&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>doc+=root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>;</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(doc,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);<sp/></highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;overwrite!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;overwrite!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"></highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(md-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty()<sp/>||</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!rootNav-&gt;parent()-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>.isEmpty()</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"></highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;initializer:<sp/>&apos;%s&apos;(isEmpty=%d)<sp/>&apos;%s&apos;(isEmpty=%d)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;initializer().data(),md-&gt;initializer().isEmpty(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;initializer.data(),root-&gt;initializer.isEmpty()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;initializer().isEmpty()<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a2a0c9e7ce364ed2981f49314c33245f9" kindref="member" tooltip="initial value (for variables)">initializer</ref>.isEmpty())</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;setInitializer\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;setInitializer(root-&gt;<ref refid="d4/dd7/class_entry_1a2a0c9e7ce364ed2981f49314c33245f9" kindref="member" tooltip="initial value (for variables)">initializer</ref>);</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/>md-&gt;setMaxInitLines(root-&gt;<ref refid="d4/dd7/class_entry_1ae283a992b9a74c6925c6f602ba7d830d" kindref="member" tooltip="define/variable initializer lines to show">initLines</ref>);</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rfd)</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((md-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()==-1<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>!=-1)<sp/></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Setting<sp/>new<sp/>body<sp/>segment<sp/>[%d,%d]\n&quot;,root-&gt;bodyLine,root-&gt;endBodyLine);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(rfd);</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/>md-&gt;enableCallGraph(md-&gt;hasCallGraph()<sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/>md-&gt;enableCallerGraph(md-&gt;hasCallerGraph()<sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"></highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/>md-&gt;mergeMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root-&gt;mGrpId=%d\n&quot;,root-&gt;mGrpId);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>!=-1)</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getMemberGroupId()!=-1)</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getMemberGroupId()!=root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>)</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;member<sp/>%s<sp/>belongs<sp/>to<sp/>two<sp/>different<sp/>groups.<sp/>The<sp/>second<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;one<sp/>found<sp/>here<sp/>will<sp/>be<sp/>ignored.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data()</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>set<sp/>group<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;setMemberGroupId=%d<sp/>md=%s\n&quot;,root-&gt;mGrpId,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight></codeline>
<codeline lineno="5356"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find<sp/>a<sp/>class<sp/>definition<sp/>given<sp/>the<sp/>scope<sp/>name<sp/>and<sp/>(optionally)<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>list<sp/>specifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5359"><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*findClassDefinition(<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd,<ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd,</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*scopeName)</highlight></codeline>
<codeline lineno="5362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*tcd<sp/>=<sp/>getResolvedClass(nd,fd,scopeName,0,0,TRUE,TRUE);</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tcd;</highlight></codeline>
<codeline lineno="5365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>documentation<sp/>contained<sp/>in<sp/>`root&apos;<sp/>to<sp/>a<sp/>global<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>name<sp/>`name&apos;<sp/>and<sp/>argument<sp/>list<sp/>`args&apos;<sp/>(for<sp/>overloading)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>declaration<sp/>`decl&apos;<sp/>to<sp/>the<sp/>corresponding<sp/>member<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>findGlobalMember(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,<sp/></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;namespaceName,</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tempArg,</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decl)</highlight></codeline>
<codeline lineno="5380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2.<sp/>findGlobalMember(namespace=%s,type=%s,name=%s,tempArg=%s,decl=%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaceName.data(),type,name,tempArg,decl);</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/>QCString<sp/>n=name;</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)!=-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>undefined<sp/>class<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(n+tempArg);<sp/></highlight><highlight class="comment">//<sp/>look<sp/>in<sp/>function<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn==0)</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/>mn=Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(n);<sp/></highlight><highlight class="comment">//<sp/>try<sp/>without<sp/>template<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)<sp/></highlight><highlight class="comment">//<sp/>function<sp/>name<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight><highlight class="stringliteral">&quot;3.<sp/>Found<sp/>symbol<sp/>scope\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>count=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current())<sp/>&amp;&amp;<sp/>!found;++mni)</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=md-&gt;getNamespaceDef();</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Namespace<sp/>namespaceName=%s<sp/>nd=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>namespaceName.data(),nd<sp/>?<sp/>nd-&gt;name().data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5406"><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;File<sp/>%s\n&quot;,fd<sp/>?<sp/>fd-&gt;name().data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*nl<sp/>=<sp/>fd<sp/>?<sp/>fd-&gt;getUsedNamespaces()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SDict&lt;Definition&gt;<sp/>*cl<sp/>=<sp/>fd<sp/>?<sp/>fd-&gt;getUsedClasses()<sp/><sp/><sp/><sp/>:<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;NamespaceList<sp/>%p\n&quot;,nl);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5412"><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>in<sp/>the<sp/>list<sp/>of<sp/>namespaces<sp/>that<sp/>are<sp/>imported<sp/>via<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>viaUsingDirective<sp/>=<sp/>nl<sp/>&amp;&amp;<sp/>nd<sp/>&amp;&amp;<sp/>nl-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(nd-&gt;<ref refid="d5/dcc/class_definition_1aacd9b72da80deb37974a18d2001ed715" kindref="member">qualifiedName</ref>())!=0;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"></highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((namespaceName.isEmpty()<sp/>&amp;&amp;<sp/>nd==0)<sp/>||<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>in<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(nd<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==namespaceName)<sp/>||<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>in<sp/>the<sp/>same<sp/>namespace<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viaUsingDirective<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>in<sp/>`using&apos;<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight><highlight class="stringliteral">&quot;4.<sp/>Try<sp/>to<sp/>add<sp/>member<sp/>`%s&apos;<sp/>to<sp/>scope<sp/>`%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data(),namespaceName.data());</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>nsName<sp/>=<sp/>nd<sp/>?<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*rnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!namespaceName.isEmpty())<sp/>rnd<sp/>=<sp/>Doxygen::namespaceSDict-&gt;find(namespaceName);</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"></highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdAl<sp/>=<sp/>md-&gt;argumentList();</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matching=</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mdAl==0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>-&gt;count()==0)<sp/>||</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;isVariable()<sp/>||<sp/>md-&gt;isTypedef()<sp/>||<sp/></highlight><highlight class="comment">/*<sp/>in<sp/>case<sp/>of<sp/>function<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(md-&gt;getOuterScope(),md-&gt;getFileDef(),mdAl,</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rnd<sp/>?<sp/>rnd<sp/>:<sp/>Doxygen::globalScope,fd,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE);</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>template<sp/>members<sp/>we<sp/>need<sp/>to<sp/>check<sp/>if<sp/>the<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>arguments<sp/>is<sp/>the<sp/>same,<sp/>otherwise<sp/>we<sp/>are<sp/>dealing<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matching<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>)</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdTempl<sp/>=<sp/>md-&gt;templateArguments();</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mdTempl)</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;getLast()-&gt;count()!=mdTempl-&gt;count())</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matching=FALSE;</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"></highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s&lt;-&gt;%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>argListToString(md-&gt;argumentList()).data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>argListToString(root-&gt;argList).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5455"><highlight class="normal"></highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>static<sp/>members<sp/>we<sp/>also<sp/>check<sp/>if<sp/>the<sp/>comment<sp/>block<sp/>was<sp/>found<sp/>in<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>file.<sp/>This<sp/>is<sp/>needed<sp/>because<sp/>static<sp/>members<sp/>with<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>can<sp/>be<sp/>in<sp/>different<sp/>files.<sp/>Thus<sp/>it<sp/>would<sp/>be<sp/>wrong<sp/>to<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>comment<sp/>block<sp/>at<sp/>the<sp/>first<sp/>syntactically<sp/>matching<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matching<sp/>&amp;&amp;<sp/>md-&gt;isStatic()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>()!=root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;count()&gt;1)</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matching<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"></highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>template<sp/>member<sp/>we<sp/>also<sp/>need<sp/>to<sp/>check<sp/>the<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;templateArguments()!=0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>!=0)</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Comparing<sp/>return<sp/>types<sp/>&apos;%s&apos;&lt;-&gt;&apos;%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;typeString(),type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;templateArguments()-&gt;count()!=root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;last()-&gt;count()<sp/>||</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qstrcmp(md-&gt;typeString(),type)!=0)</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/>---&gt;<sp/>no<sp/>matching\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matching<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"></highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matching)<sp/></highlight><highlight class="comment">//<sp/>add<sp/>docs<sp/>to<sp/>the<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight><highlight class="stringliteral">&quot;5.<sp/>Match<sp/>found\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberDocs(rootNav,md,decl,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,FALSE);</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>!=<sp/>Duplicate<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::FUNCTION_SEC)<sp/></highlight><highlight class="comment">//<sp/>no<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fullFuncDecl=decl;</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>)<sp/>fullFuncDecl+=argListToString(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,TRUE);</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>warnMsg<sp/>=</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString(</highlight><highlight class="stringliteral">&quot;no<sp/>matching<sp/>file<sp/>member<sp/>found<sp/>for<sp/>\n&quot;</highlight><highlight class="normal">)+substitute(fullFuncDecl,</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;%%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;\nPossible<sp/>candidates:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;<sp/>&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=substitute(md-&gt;declaration(),</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;%%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;&apos;<sp/>at<sp/>line<sp/>&quot;</highlight><highlight class="normal">+QCString().setNum(md-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>())+</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>file&quot;</highlight><highlight class="normal">+md-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>()+</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,warnMsg);</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>got<sp/>docs<sp/>for<sp/>an<sp/>undefined<sp/>member!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>!=</highlight><highlight class="stringliteral">&quot;friend<sp/>class&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>!=</highlight><highlight class="stringliteral">&quot;friend<sp/>struct&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>!=</highlight><highlight class="stringliteral">&quot;friend<sp/>union&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!Config_getBool(</highlight><highlight class="stringliteral">&quot;TYPEDEF_HIDES_STRUCT&quot;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.find(</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal">)==-1)</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;documented<sp/>symbol<sp/>`%s&apos;<sp/>was<sp/>not<sp/>declared<sp/>or<sp/>defined.&quot;</highlight><highlight class="normal">,decl</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="5523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSpecialization(</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>&amp;srcTempArgLists,</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>&amp;dstTempArgLists</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>srclali(srcTempArgLists);</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>dstlali(dstTempArgLists);</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;srclali.current();++srclali,++dstlali)</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*sal<sp/>=<sp/>srclali.current();</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*dal<sp/>=<sp/>dstlali.current();</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(sal<sp/>&amp;&amp;<sp/>dal<sp/>&amp;&amp;<sp/>sal-&gt;count()==dal-&gt;count()))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="5539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"></highlight></codeline>
<codeline lineno="5541"><highlight class="normal"></highlight></codeline>
<codeline lineno="5542"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>substituteTemplatesInString(</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>&amp;srcTempArgLists,</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>&amp;dstTempArgLists,</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*funcTempArgList,<sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>to<sp/>match<sp/>template<sp/>specializations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;src</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/>QCString<sp/>dst;</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/>QRegExp<sp/>re(<sp/></highlight><highlight class="stringliteral">&quot;[A-Za-z_][A-Za-z_0-9]*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;type=%s\n&quot;,sa-&gt;type.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,p=0,l;<sp/></highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i=re.match(src,p,&amp;l))!=-1)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>word<sp/>in<sp/>srcType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/>dst+=src.mid(p,i-p);</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name=src.mid(i,l);</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>srclali(srcTempArgLists);</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>dstlali(dstTempArgLists);</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;srclali.current()<sp/>&amp;&amp;<sp/>!found;++srclali,++dstlali)</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>tsali(*srclali.current());</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentListIterator<sp/>tdali(*dstlali.current());</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*tsa<sp/>=0,*tda=0,<sp/>*fa=0;</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcTempArgList)</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fa=funcTempArgList-&gt;first();</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"></highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(tsali.toFirst();(tsa=tsali.current())<sp/>&amp;&amp;<sp/>!found;++tsali)</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tda<sp/>=<sp/>tdali.current();</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(tda)<sp/>printf(&quot;tsa=%s|%s<sp/>tda=%s|%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tsa-&gt;type.data(),tsa-&gt;name.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tda-&gt;type.data(),tda-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name==tsa-&gt;name)</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tda<sp/>&amp;&amp;<sp/>tda-&gt;name.isEmpty())</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vc=0;</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tda-&gt;type.left(6)==</highlight><highlight class="stringliteral">&quot;class<sp/>&quot;</highlight><highlight class="normal">)<sp/>vc=6;</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tda-&gt;type.left(9)==</highlight><highlight class="stringliteral">&quot;typename<sp/>&quot;</highlight><highlight class="normal">)<sp/>vc=9;</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vc&gt;0)<sp/></highlight><highlight class="comment">//<sp/>convert<sp/>type==&quot;class<sp/>T&quot;<sp/>to<sp/>type==&quot;class&quot;<sp/>name==&quot;T&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tda-&gt;name<sp/>=<sp/>tda-&gt;type.mid(vc);</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tda-&gt;type<sp/>=<sp/>tda-&gt;type.left(vc-1);</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tda<sp/>&amp;&amp;<sp/>!tda-&gt;name.isEmpty())</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=tda-&gt;name;<sp/></highlight><highlight class="comment">//<sp/>substitute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fa)</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=fa-&gt;type;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tda)<sp/></highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++tdali;<sp/></highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fa)<sp/></highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fa=funcTempArgList-&gt;next();</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/>srcList=&apos;%s&apos;<sp/>dstList=&apos;%s<sp/>faList=&apos;%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>argListToString(srclali.current()).data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>argListToString(dstlali.current()).data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>funcTempArgList<sp/>?<sp/>argListToString(funcTempArgList).data()<sp/>:<sp/>&quot;&lt;none&gt;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/>dst+=name;<sp/></highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/>p=i+l;</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/>dst+=src.right(src.length()-p);</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>substituteTemplatesInString(%s)=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>src.data(),dst.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dst;</highlight></codeline>
<codeline lineno="5618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"></highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>substituteTemplatesInArgList(</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>&amp;srcTempArgLists,</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>&amp;dstTempArgLists,</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*src,</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*funcTempArgs<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/>ArgumentListIterator<sp/>sali(*src);</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*sa=0;</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref><sp/>*da=dst-&gt;first();</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"></highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sali.toFirst();(sa=sali.current());++sali)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>dstType<sp/>=<sp/>substituteTemplatesInString(</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcTempArgLists,dstTempArgLists,funcTempArgs,</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>dstArray<sp/>=<sp/>substituteTemplatesInString(</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcTempArgLists,dstTempArgLists,funcTempArgs,</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(da==0)</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>da=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dee/struct_argument" kindref="compound" tooltip="This class contains the information about the argument of a function or template.">Argument</ref>(*sa);</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;append(da);</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>da-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>=dstType;</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>da-&gt;<ref refid="d1/dee/struct_argument_1a9e33101befb3a977ac863d8a595ed210" kindref="member">array</ref>=dstArray;</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>da=0;</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>da-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>=dstType;</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>da-&gt;<ref refid="d1/dee/struct_argument_1a1ad588d2b3cc71fe3f74c8272b4ec32e" kindref="member">type</ref>=dstArray;</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>da=dst-&gt;next();</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/>dst-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>src-&gt;<ref refid="d7/df8/class_argument_list_1ae466c241240301ea30065310134ab639" kindref="member">constSpecifier</ref>;</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/>dst-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref><sp/><sp/>=<sp/>src-&gt;<ref refid="d7/df8/class_argument_list_1ae058c8cda0c6ce8837aab723e0af62bd" kindref="member">volatileSpecifier</ref>;</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/>dst-&gt;<ref refid="d7/df8/class_argument_list_1a3f023c090551e0ecaa588b25f895c047" kindref="member">pureSpecifier</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>src-&gt;<ref refid="d7/df8/class_argument_list_1a3f023c090551e0ecaa588b25f895c047" kindref="member">pureSpecifier</ref>;</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/>dst-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref><sp/>=<sp/>substituteTemplatesInString(</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcTempArgLists,dstTempArgLists,</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcTempArgs,src-&gt;<ref refid="d7/df8/class_argument_list_1ac41ea581a7578480e4bed0d6c5e1af78" kindref="member">trailingReturnType</ref>);</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;substituteTemplatesInArgList:<sp/>replacing<sp/>%s<sp/>with<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>argListToString(src).data(),argListToString(dst).data()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"></highlight></codeline>
<codeline lineno="5666"><highlight class="normal"></highlight></codeline>
<codeline lineno="5667"><highlight class="normal"></highlight></codeline>
<codeline lineno="5677"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findMember(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>funcDecl,</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overloaded,</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFunc</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;findMember(root=%p,funcDecl=`%s&apos;,related=`%s&apos;,overload=%d,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isFunc=%d<sp/>mGrpId=%d<sp/>tArgList=%p<sp/>(#=%d)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;spec=%lld<sp/>lang=%x\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root,funcDecl.data(),root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.data(),overloaded,isFunc,root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>,</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;count()<sp/>:<sp/>0,</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref></highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"></highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/>QCString<sp/>scopeName;</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/>QCString<sp/>className;</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/>QCString<sp/>namespaceName;</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/>QCString<sp/>funcType;</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/>QCString<sp/>funcName;</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/>QCString<sp/>funcArgs;</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/>QCString<sp/>funcTempList;</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/>QCString<sp/>exceptions;</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/>QCString<sp/>funcSpec;</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRelated=FALSE;</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMemberOf=FALSE;</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFriend=FALSE;</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/>done=TRUE;</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcDecl.stripPrefix(</highlight><highlight class="stringliteral">&quot;friend<sp/>&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//<sp/>treat<sp/>friends<sp/>as<sp/>related<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isFriend=TRUE;</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcDecl.stripPrefix(</highlight><highlight class="stringliteral">&quot;inline<sp/>&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>|=Entry::Inline;</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcDecl.stripPrefix(</highlight><highlight class="stringliteral">&quot;explicit<sp/>&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>|=Entry::Explicit;</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcDecl.stripPrefix(</highlight><highlight class="stringliteral">&quot;mutable<sp/>&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>|=Entry::Mutable;</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcDecl.stripPrefix(</highlight><highlight class="stringliteral">&quot;virtual<sp/>&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>done=FALSE;</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!done);</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"></highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>any<sp/>;<sp/>from<sp/>the<sp/>function<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sep;</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((sep=funcDecl.find(</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">))!=-1)</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/>funcDecl=(funcDecl.left(sep)+funcDecl.right(funcDecl.length()-sep-1)).stripWhiteSpace();</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>first<sp/>character<sp/>is<sp/>a<sp/>space<sp/>to<sp/>simplify<sp/>searching.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!funcDecl.isEmpty()<sp/>&amp;&amp;<sp/>funcDecl[0]!=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>funcDecl.prepend(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>some<sp/>superfluous<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/>funcDecl=<sp/>substitute(</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substitute(</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substitute(funcDecl,</highlight><highlight class="stringliteral">&quot;~<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;::<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>::&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>).stripWhiteSpace();</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;funcDecl=`%s&apos;\n&quot;,funcDecl.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFriend<sp/>&amp;&amp;<sp/>funcDecl.left(6)==</highlight><highlight class="stringliteral">&quot;class<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;friend<sp/>class\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/>funcDecl=funcDecl.right(funcDecl.length()-6);</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/>funcName<sp/>=<sp/>funcDecl.copy();</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFriend<sp/>&amp;&amp;<sp/>funcDecl.left(7)==</highlight><highlight class="stringliteral">&quot;struct<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/>funcDecl=funcDecl.right(funcDecl.length()-7);</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/>funcName<sp/>=<sp/>funcDecl.copy();</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>information<sp/>from<sp/>the<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/>parseFuncDecl(funcDecl,root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>==SrcLangExt_ObjC,scopeName,funcType,funcName,</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcArgs,funcTempList,exceptions</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopeName=`%s&apos;<sp/>funcType=`%s&apos;<sp/>funcName=`%s&apos;<sp/>funcArgs=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scopeName.data(),funcType.data(),funcName.data(),funcArgs.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5776"><highlight class="normal"></highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>class<sp/>name<sp/>can<sp/>also<sp/>be<sp/>a<sp/>namespace<sp/>name,<sp/>we<sp/>decide<sp/>this<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>related<sp/>class<sp/>name<sp/>is<sp/>specified<sp/>and<sp/>the<sp/>class<sp/>name<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>be<sp/>derived<sp/>from<sp/>the<sp/>function<sp/>declaration,<sp/>then<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>related<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopeName=`%s&apos;<sp/>className=`%s&apos;<sp/>namespaceName=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scopeName.data(),className.data(),namespaceName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty())<sp/></highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>related<sp/>member,<sp/>prefix<sp/>user<sp/>specified<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/>isRelated=TRUE;</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/>isMemberOf=(root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>MemberOf);</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClass(root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>)==0<sp/>&amp;&amp;<sp/>!scopeName.isEmpty())</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeName=<sp/>mergeScopes(scopeName,root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>);</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeName<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>;</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"></highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty()<sp/>&amp;&amp;<sp/>rootNav-&gt;parent()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((rootNav-&gt;parent()-&gt;section()&amp;Entry::SCOPE_MASK)<sp/>||</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rootNav-&gt;parent()-&gt;section()==Entry::OBJCIMPL_SEC)</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!rootNav-&gt;parent()-&gt;name().isEmpty())<sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>can<sp/>combine<sp/>scopeName<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>scope<sp/>in<sp/>which<sp/>it<sp/>was<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>joinedName<sp/>=<sp/>rootNav-&gt;parent()-&gt;name()+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+scopeName;</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scopeName.isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(getClass(joinedName)<sp/>||<sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(joinedName)))</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeName<sp/>=<sp/>joinedName;</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeName<sp/>=<sp/>mergeScopes(rootNav-&gt;parent()-&gt;name(),scopeName);</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>can<sp/>prefix<sp/>a<sp/>namespace<sp/>or<sp/>class<sp/>that<sp/>is<sp/>used<sp/>from<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref><sp/>*fnl<sp/>=<sp/>fd-&gt;getUsedNamespaces();</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fnl)</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>joinedName;</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*fnd;</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamespaceSDict::Iterator<sp/>nsdi(*fnl);</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nsdi.toFirst();(fnd=nsdi.current());++nsdi)</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joinedName<sp/>=<sp/>fnd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+scopeName;</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::namespaceSDict-&gt;find(joinedName))</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName=joinedName;</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/>scopeName=stripTemplateSpecifiersFromScope(</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removeRedundantWhiteSpace(scopeName),FALSE,&amp;funcSpec);<sp/></highlight></codeline>
<codeline lineno="5840"><highlight class="normal"></highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>funcSpec<sp/>contains<sp/>the<sp/>last<sp/>template<sp/>specifiers<sp/>of<sp/>the<sp/>given<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>method<sp/>does<sp/>not<sp/>have<sp/>any<sp/>template<sp/>arguments<sp/>or<sp/>they<sp/>are<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>while<sp/>funcSpec<sp/>is<sp/>not<sp/>empty<sp/>we<sp/>assume<sp/>this<sp/>is<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specialization<sp/>of<sp/>a<sp/>method.<sp/>If<sp/>not,<sp/>we<sp/>clear<sp/>the<sp/>funcSpec<sp/>and<sp/>treat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>as<sp/>a<sp/>normal<sp/>method<sp/>of<sp/>a<sp/>template<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;count()&gt;0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;first()-&gt;count()==0</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/>funcSpec.resize(0);</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>split<sp/>scope<sp/>into<sp/>a<sp/>namespace<sp/>and<sp/>a<sp/>class<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/>extractNamespaceName(scopeName,className,namespaceName,TRUE);</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopeName=`%s&apos;<sp/>className=`%s&apos;<sp/>namespaceName=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName.data(),className.data(),namespaceName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//namespaceName=removeAnonymousScopes(namespaceName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(namespaceName.find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)!=-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>stuff<sp/>in<sp/>anonymous<sp/>namespace...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5862"><highlight class="normal"></highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;namespaceName=`%s&apos;<sp/>className=`%s&apos;\n&quot;,namespaceName.data(),className.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>class<sp/>and<sp/>namespace<sp/>scopes<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/>scopeName.resize(0);</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!namespaceName.isEmpty())</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className.isEmpty())</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeName=namespaceName;</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty()<sp/>||<sp/></highlight><highlight class="comment">//<sp/>relates<sp/>command<sp/>with<sp/>explicit<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!getClass(className))<sp/></highlight><highlight class="comment">//<sp/>class<sp/>name<sp/>only<sp/>exists<sp/>in<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeName=namespaceName+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+className;</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scopeName=className;</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!className.isEmpty())</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/>scopeName=className;</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>scope=`%s&apos;\n&quot;,scopeName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5887"><highlight class="normal"></highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/>QCString<sp/>tempScopeName=scopeName;</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=getClass(scopeName);</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>)<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;first();</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcSpec.isEmpty())</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempScopeName=cd-&gt;qualifiedNameWithTemplateParameters(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>);</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempScopeName=scopeName+funcSpec;</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopeName=%s<sp/>cd=%p<sp/>root-&gt;tArgLists=%p<sp/>result=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scopeName.data(),cd,root-&gt;tArgLists,tempScopeName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopeName=`%s&apos;<sp/>className=`%s&apos;\n&quot;,scopeName.data(),className.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>the<sp/>function<sp/>declaration<sp/>(needed<sp/>to<sp/>get<sp/>the<sp/>scope<sp/>right).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scopeName.isEmpty()<sp/>&amp;&amp;<sp/>!isRelated<sp/>&amp;&amp;<sp/>!isFriend<sp/>&amp;&amp;<sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!funcType.isEmpty())</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFunc)<sp/></highlight><highlight class="comment">//<sp/>a<sp/>function<sp/>-&gt;<sp/>we<sp/>use<sp/>argList<sp/>for<sp/>the<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=funcType+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+tempScopeName+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+funcName+funcTempList;</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=funcType+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+tempScopeName+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+funcName+funcArgs;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFunc)<sp/></highlight><highlight class="comment">//<sp/>a<sp/>function<sp/>=&gt;<sp/>we<sp/>use<sp/>argList<sp/>for<sp/>the<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=tempScopeName+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+funcName+funcTempList;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>=&gt;<sp/>add<sp/>`argument&apos;<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=tempScopeName+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+funcName+funcArgs;</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>build<sp/>declaration<sp/>without<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!funcType.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>but<sp/>with<sp/>a<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFunc)<sp/></highlight><highlight class="comment">//<sp/>function<sp/>=&gt;<sp/>omit<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=funcType+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+funcName+funcTempList;</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>=&gt;<sp/>add<sp/>`argument&apos;<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=funcType+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+funcName+funcArgs;</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFunc)</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=funcName+funcTempList;</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=funcName+funcArgs;</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcType==</highlight><highlight class="stringliteral">&quot;template<sp/>class&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!funcTempList.isEmpty())</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>explicit<sp/>template<sp/>instantiations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;findMember()<sp/>Parse<sp/>results:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>namespaceName=`%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>className=`%s`\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>funcType=`%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>funcSpec=`%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>funcName=`%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>funcArgs=`%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>funcTempList=`%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>funcDecl=`%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>related=`%s&apos;\n&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>exceptions=`%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>isRelated=%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>isMemberOf=%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>isFriend=%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>isFunc=%d\n\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaceName.data(),className.data(),</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcType.data(),funcSpec.data(),funcName.data(),funcArgs.data(),funcTempList.data(),</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl.data(),root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.data(),exceptions.data(),isRelated,isMemberOf,isFriend,</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isFunc</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"></highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=0;</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!funcName.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>function<sp/>name<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1.<sp/>funcName=`%s&apos;\n&quot;</highlight><highlight class="normal">,funcName.data());</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcName.left(9)==</highlight><highlight class="stringliteral">&quot;operator<sp/>&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>class<sp/>scope<sp/>from<sp/>cast<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcName<sp/>=<sp/>substitute(funcName,className+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!funcTempList.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>try<sp/>with<sp/>member<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mn=Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(funcName+funcTempList);</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn==0)<sp/></highlight><highlight class="comment">//<sp/>try<sp/>without<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mn=Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(funcName);</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isRelated<sp/>&amp;&amp;<sp/>mn)<sp/></highlight><highlight class="comment">//<sp/>function<sp/>name<sp/>already<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2.<sp/>member<sp/>name<sp/>exists<sp/>(%d<sp/>members<sp/>with<sp/>this<sp/>name)\n&quot;</highlight><highlight class="normal">,mn-&gt;count());</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!className.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>class<sp/>name<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcSpec.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>member<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noMatchCount=0;</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>memFound=FALSE;</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();!memFound<sp/>&amp;&amp;<sp/>(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;3.<sp/>member<sp/>definition<sp/>found,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;scope<sp/>needed=`%s&apos;<sp/>scope=`%s&apos;<sp/>args=`%s&apos;<sp/>fileName=%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName.data(),cd<sp/>?<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&lt;none&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;argsString(),</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>.data());</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Member<sp/>%s<sp/>(member<sp/>scopeName=%s)<sp/>(this<sp/>scopeName=%s)<sp/>classTempList=%s\n&quot;,md-&gt;name().data(),cd-&gt;name().data(),scopeName.data(),classTempList.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=0;</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!namespaceName.isEmpty())<sp/>nd=getResolvedNamespace(namespaceName);</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"></highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopeName<sp/>%s-&gt;%s\n&quot;,scopeName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stripTemplateSpecifiersFromScope(scopeName,FALSE).data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6029"><highlight class="normal"></highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*tcd=findClassDefinition(fd,nd,scopeName);</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tcd==0<sp/>&amp;&amp;<sp/>stripAnonymousNamespaceScope(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())==scopeName)</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>be<sp/>fooled<sp/>by<sp/>anonymous<sp/>scopes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tcd=cd;</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Looking<sp/>for<sp/>%s<sp/>inside<sp/>nd=%s<sp/>result=%p<sp/>(%s)<sp/>cd=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>scopeName.data(),nd?nd-&gt;name().data():&quot;&lt;none&gt;&quot;,tcd,tcd?tcd-&gt;name().data():&quot;&quot;,cd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6038"><highlight class="normal"></highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>tcd==cd)<sp/></highlight><highlight class="comment">//<sp/>member&apos;s<sp/>classes<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;4.<sp/>class<sp/>definition<sp/>%s<sp/>found\n&quot;</highlight><highlight class="normal">,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"></highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>template<sp/>parameter<sp/>lists<sp/>found<sp/>at<sp/>the<sp/>member<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>declTemplArgs;</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a6f188c06597898555fac6353ce0d512b" kindref="member" tooltip="Returns the template parameter lists that form the template declaration of this class.">getTemplateParameterLists</ref>(declTemplArgs);</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*templAl<sp/>=<sp/>md-&gt;templateArguments();</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templAl)</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declTemplArgs.append(templAl);</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"></highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>template<sp/>parameter<sp/>lists<sp/>found<sp/>at<sp/>the<sp/>member<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/daa/class_q_list" kindref="compound">QList&lt;ArgumentList&gt;</ref><sp/>*defTemplArgs<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>;</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;defTemplArgs=%p\n&quot;,defTemplArgs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6056"><highlight class="normal"></highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>we<sp/>replace<sp/>the<sp/>decl<sp/>argument<sp/>lists<sp/>with<sp/>the<sp/>def<sp/>argument<sp/>lists?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>substDone=FALSE;</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*argList=0;</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"></highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>substitute<sp/>the<sp/>occurrences<sp/>of<sp/>class<sp/>template<sp/>names<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline lineno="6062"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>argument<sp/>list<sp/>before<sp/>matching<sp/></highlight></codeline>
<codeline lineno="6063"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdAl<sp/>=<sp/>md-&gt;argumentList();</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(declTemplArgs.count()&gt;0<sp/>&amp;&amp;<sp/>defTemplArgs<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declTemplArgs.count()==defTemplArgs-&gt;count()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdAl</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>function<sp/>definition<sp/>has<sp/>template<sp/>arguments</highlight></codeline>
<codeline lineno="6071"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>the<sp/>class<sp/>definition<sp/>also<sp/>has<sp/>template<sp/>arguments,<sp/>so</highlight></codeline>
<codeline lineno="6072"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>must<sp/>substitute<sp/>the<sp/>template<sp/>names<sp/>of<sp/>the<sp/>class<sp/>by<sp/>that</highlight></codeline>
<codeline lineno="6073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>function<sp/>definition<sp/>before<sp/>matching.</highlight></codeline>
<codeline lineno="6074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substituteTemplatesInArgList(declTemplArgs,*defTemplArgs,</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdAl,argList);</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"></highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substDone=TRUE;</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>template<sp/>arguments,<sp/>compare<sp/>argument<sp/>lists<sp/>directly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argList<sp/>=<sp/>mdAl;</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"></highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;5.<sp/>matching<sp/>`%s&apos;&lt;=&gt;`%s&apos;<sp/>className=%s<sp/>namespaceName=%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argListToString(argList,TRUE).data(),argListToString(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,TRUE).data(),</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className.data(),namespaceName.data()</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"></highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matching=</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;isVariable()<sp/>||<sp/>md-&gt;isTypedef()<sp/>||<sp/></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mdAl==0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>-&gt;count()==0)<sp/>||<sp/></highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(</highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;getClassDef(),md-&gt;getFileDef(),argList,<sp/></highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd,fd,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE);</highlight></codeline>
<codeline lineno="6099"><highlight class="normal"></highlight></codeline>
<codeline lineno="6100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getLanguage()==SrcLangExt_ObjC<sp/>&amp;&amp;<sp/>md-&gt;isVariable()<sp/>&amp;&amp;<sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>&amp;Entry::FUNCTION_SEC))</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matching<sp/>=<sp/>FALSE;<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>match<sp/>methods<sp/>and<sp/>attributes<sp/>with<sp/>the<sp/>same<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>template<sp/>member<sp/>we<sp/>also<sp/>need<sp/>to<sp/>check<sp/>the<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;templateArguments()!=0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>!=0)</highlight></codeline>
<codeline lineno="6107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Comparing<sp/>return<sp/>types<sp/>&apos;%s&apos;&lt;-&gt;&apos;%s&apos;<sp/>args<sp/>%d&lt;-&gt;%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;typeString(),funcType.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;templateArguments()-&gt;count(),root-&gt;tArgLists-&gt;last()-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;templateArguments()-&gt;count()!=root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;last()-&gt;count()<sp/>||</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qstrcmp(md-&gt;typeString(),funcType))</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/>---&gt;<sp/>no<sp/>matching\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matching<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight></codeline>
<codeline lineno="6119"><highlight class="normal"></highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;6.<sp/>match<sp/>results<sp/>of<sp/>matchArguments2<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,matching);</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"></highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(substDone)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>new<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matching)<sp/></highlight><highlight class="comment">//<sp/>replace<sp/>member&apos;s<sp/>argument<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinitionTemplateParameterLists(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>);</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setArgumentList(argList);<sp/></highlight><highlight class="comment">//<sp/>new<sp/>owner<sp/>of<sp/>the<sp/>list<sp/>=&gt;<sp/>no<sp/>delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>match<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!funcTempList.isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSpecialization(declTemplArgs,*defTemplArgs))</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>are<sp/>dealing<sp/>with<sp/>a<sp/>partial<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specialization.<sp/>In<sp/>this<sp/>case<sp/>we<sp/>add<sp/>it<sp/>to<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>though<sp/>the<sp/>member<sp/>arguments<sp/>do<sp/>not<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>copy<sp/>other<sp/>aspects?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>=md-&gt;protection();<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>protection<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMethodToClass(rootNav,cd,md-&gt;name(),isFriend);</highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>argList;</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matching)<sp/></highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberDocs(rootNav,md,funcDecl,0,overloaded,0</highlight><highlight class="comment">/*<sp/>TODO<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memFound=TRUE;</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>cd!=tcd)<sp/></highlight><highlight class="comment">//<sp/>we<sp/>did<sp/>find<sp/>a<sp/>class<sp/>with<sp/>the<sp/>same<sp/>name<sp/>as<sp/>cd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>in<sp/>a<sp/>different<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noMatchCount++;</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==0<sp/>&amp;&amp;<sp/>rootNav-&gt;parent()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;parent()-&gt;section()==Entry::OBJCIMPL_SEC)</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>localObjCMethod;</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==0<sp/>&amp;&amp;<sp/>!(isFriend<sp/>&amp;&amp;<sp/>funcType==</highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>candidates=0;</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*ecd<sp/>=<sp/>0,<sp/>*ucd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*emd<sp/>=<sp/>0,<sp/>*umd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Assume<sp/>template<sp/>class\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*ccd=md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*cmd=md;</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;ccd-&gt;name()==%s<sp/>className=%s\n&quot;,ccd-&gt;name().data(),className.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ccd!=0<sp/>&amp;&amp;<sp/>rightScopeMatch(ccd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),className))<sp/></highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*templAl<sp/>=<sp/>md-&gt;templateArguments();</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>&amp;&amp;<sp/>templAl!=0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;getLast()-&gt;count()&lt;=templAl-&gt;count())</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMethodToClass(rootNav,ccd,md-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),isFriend);</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;argsString()==argListToString(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,TRUE,FALSE))</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>exact<sp/>argument<sp/>list<sp/>match<sp/>-&gt;<sp/>remember</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucd<sp/>=<sp/>ecd<sp/>=<sp/>ccd;</highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>umd<sp/>=<sp/>emd<sp/>=<sp/>cmd;</highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;7.<sp/>new<sp/>candidate<sp/>className=%s<sp/>scope=%s<sp/>args=%s<sp/>exact<sp/>match\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className.data(),ccd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data(),md-&gt;argsString());</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>arguments<sp/>do<sp/>not<sp/>match,<sp/>but<sp/>member<sp/>name<sp/>and<sp/>scope<sp/>do<sp/>-&gt;<sp/>remember</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucd<sp/>=<sp/>ccd;</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>umd<sp/>=<sp/>cmd;</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;7.<sp/>new<sp/>candidate<sp/>className=%s<sp/>scope=%s<sp/>args=%s<sp/>no<sp/>match\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className.data(),ccd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data(),md-&gt;argsString());</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidates++;</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>strictProtoMatching<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;STRICT_PROTO_MATCHING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strictProtoMatching)</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidates==1<sp/>&amp;&amp;<sp/>ucd<sp/>&amp;&amp;<sp/>umd)</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>didn&apos;t<sp/>find<sp/>an<sp/>actual<sp/>match<sp/>on<sp/>argument<sp/>lists,<sp/>but<sp/>there<sp/>is<sp/>only<sp/>1<sp/>member<sp/>with<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>in<sp/>the<sp/>same<sp/>scope,<sp/>so<sp/>that<sp/>has<sp/>to<sp/>be<sp/>the<sp/>one.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberDocs(rootNav,umd,funcDecl,0,overloaded,0);</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidates&gt;1<sp/>&amp;&amp;<sp/>ecd<sp/>&amp;&amp;<sp/>emd)</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>didn&apos;t<sp/>find<sp/>a<sp/>unique<sp/>match<sp/>using<sp/>type<sp/>resolution,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>one<sp/>of<sp/>the<sp/>matches<sp/>has<sp/>the<sp/>exact<sp/>same<sp/>signature<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>take<sp/>that<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberDocs(rootNav,emd,funcDecl,0,overloaded,0);</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"></highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>warnMsg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noMatchCount&gt;1)<sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;uniquely<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;matching<sp/>class<sp/>member<sp/>found<sp/>for<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"></highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>)</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QListIterator&lt;ArgumentList&gt;<sp/>alli(*root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>);</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*al;</highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(al=alli.current());++alli)</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;<sp/><sp/>template<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=tempArgListToString(al);</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fullFuncDecl=funcDecl.copy();</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFunc)<sp/>fullFuncDecl+=argListToString(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,TRUE);</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"></highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=fullFuncDecl;</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"></highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidates&gt;0)</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;Possible<sp/>candidates:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd!=0<sp/>&amp;&amp;<sp/>rightScopeMatch(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),className))</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*templAl<sp/>=<sp/>md-&gt;templateArguments();</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templAl!=0)</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&apos;template<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=tempArgListToString(templAl);</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;typeString())<sp/></highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=md-&gt;typeString();</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>qScope<sp/>=<sp/>cd-&gt;qualifiedNameWithTemplateParameters();</highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!qScope.isEmpty())<sp/></highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=qScope+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+md-&gt;name();</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;argsString())<sp/></highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=md-&gt;argsString();</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noMatchCount&gt;1)<sp/></highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="stringliteral">&quot;&apos;<sp/>at<sp/>line<sp/>&quot;</highlight><highlight class="normal">+QCString().setNum(md-&gt;getDefLine())<sp/>+</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>file<sp/>&quot;</highlight><highlight class="normal">+md-&gt;getDefFileName();</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"></highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnMsg+=</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_simple(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,warnMsg);</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)<sp/></highlight><highlight class="comment">//<sp/>member<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*declMd=0;</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="6294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getClassDef()==cd)<sp/></highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>we<sp/>should<sp/>probably<sp/>also<sp/>check<sp/>for<sp/>matching<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declMd<sp/>=<sp/>md;</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType<sp/>mtype=MemberType_Function;</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tArgList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref>;</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>getTemplateArgumentsFromName(cd-&gt;name()+&quot;::&quot;+funcName,root-&gt;tArgLists);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcType,funcName,funcArgs,exceptions,</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declMd<sp/>?<sp/>declMd-&gt;protection()<sp/>:<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1aaf045b9c026443fd192064117083911b" kindref="member" tooltip="virtualness of the entry">virt</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>,Member,</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype,tArgList,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>);</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>specialized<sp/>member<sp/>%s<sp/>args=`%s&apos;\n&quot;,md-&gt;name().data(),funcArgs.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberClass(cd);</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTemplateSpecialization(TRUE);</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTypeConstraints(root-&gt;<ref refid="d4/dd7/class_entry_1a77d30ef01feb28bf83b77d4148968f84" kindref="member" tooltip="where clause (C#) for type constraints">typeConstr</ref>);</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(funcDecl);</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setPrototype(root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tArgList;</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;***<sp/>Specialized<sp/>member<sp/>%s<sp/>of<sp/>unknown<sp/>scope<sp/>%s%s<sp/>found!\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopeName.data(),funcName.data(),funcArgs.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overloaded)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>function<sp/>belongs<sp/>to<sp/>only<sp/>one<sp/>class<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>unique<sp/>overloaded<sp/>member<sp/>we<sp/>allow<sp/>the<sp/>class<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>omitted,<sp/>this<sp/>is<sp/>to<sp/>be<sp/>Qt<sp/>compatible.<sp/>Using<sp/>this<sp/>should<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>however<sp/>be<sp/>avoided,<sp/>because<sp/>it<sp/>is<sp/>error<sp/>prone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=mni.toFirst();</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(md);</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(cd);</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>className=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++mni;</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unique=TRUE;</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className!=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>())<sp/>unique=FALSE;<sp/></highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unique)</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType<sp/>mtype;</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Signal)<sp/><sp/>mtype=MemberType_Signal;</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Slot)<sp/><sp/><sp/><sp/>mtype=MemberType_Slot;</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==DCOP)<sp/><sp/><sp/><sp/>mtype=MemberType_DCOP;</highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Function;</highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>overloaded<sp/>member<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*tArgList<sp/>=<sp/></highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getTemplateArgumentsFromName(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+funcName,root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>);</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;new<sp/>related<sp/>member<sp/>%s<sp/>args=`%s&apos;\n&quot;,md-&gt;name().data(),funcArgs.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcType,funcName,funcArgs,exceptions,</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aaf045b9c026443fd192064117083911b" kindref="member" tooltip="virtualness of the entry">virt</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>,Related,</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype,tArgList,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>);</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setId(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTypeConstraints(root-&gt;<ref refid="d4/dd7/class_entry_1a77d30ef01feb28bf83b77d4148968f84" kindref="member" tooltip="where clause (C#) for type constraints">typeConstr</ref>);</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberClass(cd);</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(funcDecl);</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>doc=getOverloadDocs();</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc+=</highlight><highlight class="stringliteral">&quot;&lt;p&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc+=root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>;</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocumentation(doc,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setInbodyDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setPrototype(root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;addSectionsToDefinition(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>unrelated<sp/>function<sp/>with<sp/>the<sp/>same<sp/>name<sp/>as<sp/>a<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!findGlobalMember(rootNav,namespaceName,funcType,funcName,funcTempList,funcArgs,funcDecl))</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fullFuncDecl=funcDecl.copy();</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFunc)<sp/>fullFuncDecl+=argListToString(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,TRUE);</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>determine<sp/>class<sp/>for<sp/>function\n%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullFuncDecl.data()</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRelated<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty())</highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight><highlight class="stringliteral">&quot;2.<sp/>related<sp/>function\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>scopeName=%s<sp/>className=%s\n&quot;</highlight><highlight class="normal">,scopeName.data(),className.data());</highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className.isEmpty())<sp/>className=root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>;</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopeName=`%s&apos;<sp/>className=`%s&apos;\n&quot;,scopeName.data(),className.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((cd=getClass(scopeName)))</highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newMember=TRUE;<sp/></highlight><highlight class="comment">//<sp/>assume<sp/>we<sp/>have<sp/>a<sp/>new<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newMemberName=FALSE;<sp/></highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*mdDefine=0;</highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDefine=FALSE;</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn<sp/>=<sp/>Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(funcName);</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdDefine<sp/>=<sp/>mn-&gt;first();</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mdDefine<sp/>&amp;&amp;<sp/>!isDefine)</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isDefine<sp/>=<sp/>isDefine<sp/>||<sp/>mdDefine-&gt;isDefine();</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isDefine)<sp/>mdDefine<sp/>=<sp/>mn-&gt;next();</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"></highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"></highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::memberNameSDict-&gt;find(funcName))==0)</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(funcName);</highlight></codeline>
<codeline lineno="6448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMemberName=TRUE;<sp/></highlight><highlight class="comment">//<sp/>we<sp/>create<sp/>a<sp/>new<sp/>member<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd=mn-&gt;first();</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rmd<sp/>&amp;&amp;<sp/>newMember)<sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>got<sp/>another<sp/>member<sp/>with<sp/>matching<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*rmdAl<sp/>=<sp/>rmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"></highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMember=</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className!=rmd-&gt;getOuterScope()-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()<sp/>||</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!matchArguments2(rmd-&gt;getOuterScope(),rmd-&gt;getFileDef(),rmdAl,</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd,fd,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE);</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMember)<sp/>rmd=mn-&gt;next();</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newMember<sp/>&amp;&amp;<sp/>rmd)<sp/></highlight><highlight class="comment">//<sp/>member<sp/>already<sp/>exists<sp/>as<sp/>rmd<sp/>-&gt;<sp/>add<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;addMemberDocs<sp/>for<sp/>related<sp/>member<sp/>%s\n&quot;,root-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//rmd-&gt;setMemberDefTemplateArguments(root-&gt;mtArgList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberDocs(rootNav,rmd,funcDecl,0,overloaded);</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"></highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMember)<sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>create<sp/>a<sp/>new<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType<sp/>mtype;</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isDefine)</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Define;</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Signal)<sp/><sp/></highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Signal;</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==Slot)<sp/></highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Slot;</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a4669c5294781bce55ce0ad654460acbd" kindref="member" tooltip="signal, slot, (dcop) method, or property?">mtype</ref>==DCOP)</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_DCOP;</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype=MemberType_Function;</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"></highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isDefine<sp/>&amp;&amp;<sp/>mdDefine)</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mdDefine-&gt;setHidden(TRUE);</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcType=</highlight><highlight class="stringliteral">&quot;#define&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcArgs=mdDefine-&gt;argsString();</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcDecl=funcType<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>funcName;</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="6493"><highlight class="normal"></highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;New<sp/>related<sp/>name<sp/>`%s&apos;<sp/>`%d&apos;\n&quot;,funcName.data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;argList<sp/>?<sp/>(int)root-&gt;argList-&gt;count()<sp/>:<sp/>-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6496"><highlight class="normal"></highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>note<sp/>that<sp/>we<sp/>pass:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(root-&gt;tArgLists<sp/>?<sp/>root-&gt;tArgLists-&gt;last()<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>template<sp/>arguments<sp/>fo<sp/>the<sp/>new<sp/>&quot;member.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>accurately<sp/>reflects<sp/>the<sp/>template<sp/>arguments<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>related<sp/>function,<sp/>which<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>those<sp/>of<sp/>the<sp/>related<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcType,funcName,funcArgs,exceptions,</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aaf045b9c026443fd192064117083911b" kindref="member" tooltip="virtualness of the entry">virt</ref>,</highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref><sp/>&amp;&amp;<sp/>!isMemberOf,</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMemberOf<sp/>?<sp/>Foreign<sp/>:<sp/>isRelated<sp/>?<sp/>Related<sp/>:<sp/>Member,</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype,</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref><sp/>?<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>-&gt;last()<sp/>:<sp/>0),</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcArgs.isEmpty()<sp/>?<sp/>0<sp/>:<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>);</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"></highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isDefine<sp/>&amp;&amp;<sp/>mdDefine)</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setInitializer(mdDefine-&gt;initializer());</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6517"><highlight class="normal"></highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>still<sp/>have<sp/>the<sp/>problem<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MemberDef::writeDocumentation()<sp/>in<sp/>memberdef.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writes<sp/>the<sp/>template<sp/>argument<sp/>list<sp/>for<sp/>the<sp/>class,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>if<sp/>this<sp/>member<sp/>is<sp/>a<sp/>member<sp/>of<sp/>the<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fortunately,<sp/>MemberDef::writeDocumentation()<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>special<sp/>mechanism<sp/>that<sp/>allows<sp/>us<sp/>to<sp/>totally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>override<sp/>the<sp/>set<sp/>of<sp/>template<sp/>argument<sp/>lists<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>printed.<sp/><sp/>We<sp/>use<sp/>that<sp/>and<sp/>set<sp/>it<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>argument<sp/>lists<sp/>of<sp/>the<sp/>related<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinitionTemplateParameterLists(root-&gt;<ref refid="d4/dd7/class_entry_1a6fe1bee76d0edf07bdae161814b8e490" kindref="member" tooltip="template argument declarations">tArgLists</ref>);</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"></highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"></highlight></codeline>
<codeline lineno="6533"><highlight class="normal"></highlight></codeline>
<codeline lineno="6534"><highlight class="normal"></highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Related<sp/>member<sp/>name=`%s&apos;<sp/>decl=`%s&apos;<sp/>bodyLine=`%d&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcName.data(),funcDecl.data(),root-&gt;bodyLine);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6537"><highlight class="normal"></highlight></codeline>
<codeline lineno="6538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>find<sp/>the<sp/>matching<sp/>line<sp/>number<sp/>of<sp/>the<sp/>body<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>function<sp/>list<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>==-1)</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*rmn=Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(funcName);</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rmn)</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd=rmn-&gt;first();</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rmd<sp/>&amp;&amp;<sp/>!found)<sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>got<sp/>another<sp/>member<sp/>with<sp/>matching<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*rmdAl<sp/>=<sp/>rmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>matching<sp/>argument<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(rmd-&gt;getOuterScope(),rmd-&gt;getFileDef(),rmdAl,</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd,fd,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE)</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>rmd=rmn-&gt;next();</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rmd)<sp/></highlight><highlight class="comment">//<sp/>member<sp/>found<sp/>-&gt;<sp/>copy<sp/>line<sp/>number<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(rmd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),rmd-&gt;<ref refid="d5/dcc/class_definition_1a11056f29c65e1dddc184036bce5d5456" kindref="member">getEndBodyLine</ref>());</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(rmd-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>());</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//md-&gt;setBodyMember(rmd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/></highlight><highlight class="comment">//<sp/>line<sp/>number<sp/>could<sp/>not<sp/>be<sp/>found<sp/>or<sp/>is<sp/>available<sp/>in<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(root-&gt;mGrpId!=-1)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>md-&gt;setMemberGroup(memberGroupDict[root-&gt;mGrpId]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberClass(cd);</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(funcDecl);</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setPrototype(root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//md-&gt;setMemberDefTemplateArguments(root-&gt;mtArgList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>Duplicate)<sp/>md-&gt;setRelatedAlso(cd);</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isDefine)</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>member=%s\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMemberName)</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Doxygen::memberNameList.append(mn);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Doxygen::memberNameDict.insert(funcName,mn);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(funcName,mn);</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>Duplicate)</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!findGlobalMember(rootNav,namespaceName,funcType,funcName,funcTempList,funcArgs,funcDecl))</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>fullFuncDecl=funcDecl.copy();</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFunc)<sp/>fullFuncDecl+=argListToString(root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>,TRUE);</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>determine<sp/>file/namespace<sp/>for<sp/>relatedalso<sp/>function\n%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullFuncDecl.data()</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_undoc(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;class<sp/>`%s&apos;<sp/>for<sp/>related<sp/>function<sp/>`%s&apos;<sp/>is<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;documented.&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className.data(),funcName.data()</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;parent()<sp/>&amp;&amp;<sp/>rootNav-&gt;parent()-&gt;section()==Entry::OBJCIMPL_SEC)</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6636"><highlight class="normal">localObjCMethod:</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;scopeName=`%s&apos;<sp/>className=`%s&apos;\n&quot;,scopeName.data(),className.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_LOCAL_METHODS&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(cd=getClass(scopeName)))</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight><highlight class="stringliteral">&quot;4.<sp/>Local<sp/>objective<sp/>C<sp/>method<sp/>%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>scopeName=%s<sp/>className=%s\n&quot;</highlight><highlight class="normal">,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data(),scopeName.data(),className.data());</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Local<sp/>objective<sp/>C<sp/>method<sp/>`%s&apos;<sp/>of<sp/>class<sp/>`%s&apos;<sp/>found\n&quot;,root-&gt;name.data(),cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcType,funcName,funcArgs,exceptions,</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aaf045b9c026443fd192064117083911b" kindref="member" tooltip="virtualness of the entry">virt</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>,Member,</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType_Function,0,root-&gt;<ref refid="d4/dd7/class_entry_1a7dfa4587991698fbc8550e563cd71948" kindref="member" tooltip="member arguments as a list">argList</ref>);</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setId(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;makeImplementationDetail();</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberClass(cd);</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(funcDecl);</highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBriefDescription(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setInbodyDocumentation(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setPrototype(root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;addSectionsToDefinition(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(fd);</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::memberNameSDict-&gt;find(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>)))</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,mn);</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>objective<sp/>C<sp/>method<sp/>found<sp/>for<sp/>class<sp/>without<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>unrelated<sp/>not<sp/>overloaded<sp/>member<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>globMem<sp/>=<sp/>findGlobalMember(rootNav,namespaceName,funcType,funcName,funcTempList,funcArgs,funcDecl);</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className.isEmpty()<sp/>&amp;&amp;<sp/>!globMem)</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;class<sp/>for<sp/>member<sp/>`%s&apos;<sp/>cannot<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;be<sp/>found.&quot;</highlight><highlight class="normal">,<sp/>funcName.data()</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/></highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!className.isEmpty()<sp/>&amp;&amp;<sp/>!globMem)</highlight></codeline>
<codeline lineno="6698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;member<sp/>`%s&apos;<sp/>of<sp/>class<sp/>`%s&apos;<sp/>cannot<sp/>be<sp/>found&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcName.data(),className.data());</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>not<sp/>be<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;member<sp/>with<sp/>no<sp/>name<sp/>found.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6712"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="6713"><highlight class="normal"></highlight></codeline>
<codeline lineno="6714"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>members<sp/>corresponding<sp/>to<sp/>the<sp/>different<sp/>documentation<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>extracted<sp/>from<sp/>the<sp/>sources.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6717"><highlight class="normal"></highlight></codeline>
<codeline lineno="6718"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>filterMemberDocumentation(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="6719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=-1,l;</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/>Debug::print(Debug::FindMembers,0,</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;findMemberDocumentation():<sp/>root-&gt;type=`%s&apos;<sp/>root-&gt;inside=`%s&apos;<sp/>root-&gt;name=`%s&apos;<sp/>root-&gt;args=`%s&apos;<sp/>section=%x<sp/>root-&gt;spec=%lld<sp/>root-&gt;mGrpId=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.data(),root-&gt;<ref refid="d4/dd7/class_entry_1af88583a31bcd3cfc5aa52691f958833f" kindref="member" tooltip="name of the class in which documents are found">inside</ref>.data(),root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data(),root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.data(),root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref></highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;rootNav-&gt;parent()-&gt;name()=%s\n&quot;,rootNav-&gt;parent()-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFunc=TRUE;</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"></highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>Duplicate<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty())</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>tmp<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>;</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.resize(0);</highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/>filterMemberDocumentation(rootNav);</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref><sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"></highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="comment">//<sp/>detect<sp/>func<sp/>variable/typedef<sp/>to<sp/>func<sp/>ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(i=findFunctionPtr(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>,&amp;l))!=-1<sp/></highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Fixing<sp/>function<sp/>pointer!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fix<sp/>type<sp/>and<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.prepend(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.right(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.length()-i-l));</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>=root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.left(i+l);</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Results<sp/>type=%s,name=%s,args=%s\n&quot;,root-&gt;type.data(),root-&gt;name.data(),root-&gt;args.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/>isFunc=FALSE;</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.left(8)==</highlight><highlight class="stringliteral">&quot;typedef<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.find(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)!=-1))<sp/></highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>function<sp/>types<sp/>marked<sp/>as<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/>isFunc=FALSE;</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"></highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Member<sp/>%s<sp/>isFunc=%d\n&quot;,root-&gt;name.data(),isFunc);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::MEMBERDOC_SEC)</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Documentation<sp/>for<sp/>inline<sp/>member<sp/>`%s&apos;<sp/>found<sp/>args=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;name.data(),root-&gt;args.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(root-&gt;relates.length())<sp/>printf(&quot;<sp/><sp/>Relates<sp/>%s\n&quot;,root-&gt;relates.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty())</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findMember(rootNav,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>,FALSE,isFunc);</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findMember(rootNav,root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>,FALSE,isFunc);</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::OVERLOADDOC_SEC)<sp/></highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Overloaded<sp/>member<sp/>%s<sp/>found\n&quot;,root-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/>findMember(rootNav,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,TRUE,isFunc);</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/>((root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::FUNCTION_SEC<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::VARIABLE_SEC<sp/>&amp;&amp;<sp/><sp/></highlight><highlight class="comment">//<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_compoundKeywordDict.find(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>)==0<sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>not<sp/>a<sp/>keyword<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(to<sp/>skip<sp/>forward<sp/>declaration<sp/>of<sp/>class<sp/>etc.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Documentation<sp/>for<sp/>member<sp/>`%s&apos;<sp/>found<sp/>args=`%s&apos;<sp/>excp=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;name.data(),root-&gt;args.data(),root-&gt;exception.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(root-&gt;relates.length())<sp/>printf(&quot;<sp/><sp/>Relates<sp/>%s\n&quot;,root-&gt;relates.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Inside=%s\n<sp/>Relates=%s\n&quot;,root-&gt;inside.data(),root-&gt;relates.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>==</highlight><highlight class="stringliteral">&quot;friend<sp/>class&quot;</highlight><highlight class="normal"><sp/>||<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>==</highlight><highlight class="stringliteral">&quot;friend<sp/>struct&quot;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>==</highlight><highlight class="stringliteral">&quot;friend<sp/>union&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findMember(rootNav,</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,FALSE);</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"></highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>.isEmpty())</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findMember(rootNav,</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1af88583a31bcd3cfc5aa52691f958833f" kindref="member" tooltip="name of the class in which documents are found">inside</ref>+</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>+</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>+</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>,</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,isFunc);</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findMember(rootNav,</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1af88583a31bcd3cfc5aa52691f958833f" kindref="member" tooltip="name of the class in which documents are found">inside</ref>+</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>+</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>+</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a81b9c13cc15e3460c8d9fdcabeb9342d" kindref="member" tooltip="throw specification">exception</ref>,</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE,isFunc);</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::DEFINE_SEC<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty())</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/><sp/>findMember(rootNav,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,FALSE,!root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.isEmpty());</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::VARIABLEDOC_SEC)</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Documentation<sp/>for<sp/>variable<sp/>%s<sp/>found\n&quot;,root-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!root-&gt;relates.isEmpty())<sp/>printf(&quot;<sp/><sp/>Relates<sp/>%s\n&quot;,root-&gt;relates.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/>findMember(rootNav,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,FALSE,FALSE);</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::EXPORTED_INTERFACE_SEC<sp/>||</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::INCLUDED_SERVICE_SEC)</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/><sp/><sp/>findMember(rootNav,root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,FALSE,FALSE);</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>section<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;skip<sp/>section\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"></highlight></codeline>
<codeline lineno="6840"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findMemberDocumentation(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="6841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::MEMBERDOC_SEC<sp/>||</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::OVERLOADDOC_SEC<sp/>||</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::FUNCTION_SEC<sp/>||</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::VARIABLE_SEC<sp/>||</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::VARIABLEDOC_SEC<sp/>||</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::DEFINE_SEC<sp/>||</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::INCLUDED_SERVICE_SEC<sp/>||</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::EXPORTED_INTERFACE_SEC</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="6851"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"></highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/>filterMemberDocumentation(rootNav);</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"></highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;children())</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*rootNav-&gt;children());</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*e;</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(e=eli.current());++eli)</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;section()!=Entry::ENUM_SEC)<sp/>findMemberDocumentation(e);</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"></highlight></codeline>
<codeline lineno="6869"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6870"><highlight class="normal"></highlight></codeline>
<codeline lineno="6871"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findObjCMethodDefinitions(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="6872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;children())</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*rootNav-&gt;children());</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*objCImplNav;</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(objCImplNav=eli.current());++eli)</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCImplNav-&gt;section()==Entry::OBJCIMPL_SEC<sp/>&amp;&amp;<sp/>objCImplNav-&gt;children())</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>seli(*objCImplNav-&gt;children());</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*objCMethodNav;</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(objCMethodNav=seli.current());++seli)</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objCMethodNav-&gt;section()==Entry::FUNCTION_SEC)</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCMethodNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*objCMethod<sp/>=<sp/>objCMethodNav-&gt;entry();</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"></highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Printf(&quot;<sp/><sp/>Found<sp/>ObjC<sp/>method<sp/>definition<sp/>%s\n&quot;,objCMethod-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findMember(objCMethodNav,<sp/>objCMethod-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+objCImplNav-&gt;name()+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCMethod-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+objCMethod-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,<sp/>FALSE,TRUE);</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCMethod-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>=Entry::EMPTY_SEC;</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"></highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objCMethodNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"></highlight></codeline>
<codeline lineno="6903"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find<sp/>and<sp/>add<sp/>the<sp/>enumeration<sp/>to<sp/>their<sp/>classes,<sp/>namespaces<sp/>or<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6905"><highlight class="normal"></highlight></codeline>
<codeline lineno="6906"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findEnums(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="6907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::ENUM_SEC)</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"></highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/><sp/><sp/><sp/><sp/><sp/>*md=0;</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cd=0;</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fd=0;</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/><sp/><sp/>*nd=0;</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref><sp/>*mnsd=0;</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGlobal;</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRelated=FALSE;</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMemberOf=FALSE;</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>enum<sp/>with<sp/>name<sp/>`%s&apos;<sp/>relates=%s\n&quot;,root-&gt;name.data(),root-&gt;relates.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"></highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name;</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>scope;</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"></highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">))!=-1)<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>is<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.left(i);<sp/></highlight><highlight class="comment">//<sp/>extract<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.right(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.length()-i-2);<sp/></highlight><highlight class="comment">//<sp/>extract<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(scope))==0)<sp/>nd=getResolvedNamespace(scope);</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>scope,<sp/>check<sp/>the<sp/>scope<sp/>in<sp/>which<sp/>the<sp/>docs<sp/>where<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<sp/>rootNav-&gt;parent()-&gt;section()<sp/>&amp;<sp/>Entry::SCOPE_MASK<sp/>)</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!rootNav-&gt;parent()-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>enum<sp/>docs<sp/>inside<sp/>a<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(scope))==0)<sp/>nd=getResolvedNamespace(scope);</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"></highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty())<sp/></highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>related<sp/>member,<sp/>prefix<sp/>user<sp/>specified<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isRelated=TRUE;</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isMemberOf=(root-&gt;<ref refid="d4/dd7/class_entry_1a74ff1e30a3ed19f82ce61f70b8a5a413" kindref="member" tooltip="how relates is handled">relatesType</ref><sp/>==<sp/>MemberOf);</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClass(root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>)==0<sp/>&amp;&amp;<sp/>!scope.isEmpty())</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=mergeScopes(scope,root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>);</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.copy();</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(scope))==0)<sp/>nd=getResolvedNamespace(scope);</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"></highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>!name.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>enum<sp/>inside<sp/>a<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Enum<sp/>`%s&apos;::`%s&apos;\n&quot;,cd-&gt;name(),name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=0;</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mnsd=Doxygen::memberNameSDict;</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isGlobal=FALSE;</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd<sp/>&amp;&amp;<sp/>!nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>enum<sp/>inside<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mnsd=Doxygen::functionNameSDict;</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isGlobal=TRUE;</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>global<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mnsd=Doxygen::functionNameSDict;</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isGlobal=TRUE;</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"></highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.isEmpty())</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>enum<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,name,0,0,</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1acbb1b4e99978a710863cf9cab6c90553" kindref="member" tooltip="class protection">protection</ref>,Normal,FALSE,</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isMemberOf<sp/>?<sp/>Foreign<sp/>:<sp/>isRelated<sp/>?<sp/>Related<sp/>:<sp/>Member,</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType_Enumeration,</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0);</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isGlobal)<sp/>md-&gt;setMemberClass(cd);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>md-&gt;setFileDef(fd);</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(rootNav-&gt;fileDef());</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberSpecifiers(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>);<sp/></highlight><highlight class="comment">//<sp/>UNO<sp/>IDL<sp/>&quot;published&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setEnumBaseType(root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>);</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Enum<sp/>%s<sp/>definition<sp/>at<sp/>line<sp/>%d<sp/>of<sp/>%s:<sp/>protection=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;name.data(),root-&gt;bodyLine,root-&gt;fileName.data(),root-&gt;protection);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallGraph(root-&gt;<ref refid="d4/dd7/class_entry_1ac3b5637ee0f8469650e2d8d694733314" kindref="member" tooltip="do we need to draw the call graph?">callGraph</ref>);</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;enableCallerGraph(root-&gt;<ref refid="d4/dd7/class_entry_1a3693baa860ccc1625b5ac4fd3bc1761c" kindref="member" tooltip="do we need to draw the caller graph?">callerGraph</ref>);</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s::setRefItems(%d)\n&quot;,md-&gt;name().data(),root-&gt;sli?root-&gt;sli-&gt;count():-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>enum<sp/>%s<sp/>nd=%p\n&quot;,name.data(),nd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defSet=FALSE;</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"></highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>baseType<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>;</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!baseType.isEmpty())</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseType.prepend(</highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"></highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd<sp/>&amp;&amp;<sp/>!nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRelated<sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(name+baseType);<sp/><sp/></highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+name+baseType);<sp/><sp/></highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;definition=%s\n&quot;,md-&gt;definition());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defSet=TRUE;</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setNamespace(nd);</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"></highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>if<sp/>we<sp/>have<sp/>already<sp/>added<sp/>the<sp/>enum<sp/>to<sp/>a<sp/>namespace,<sp/>we<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>want<sp/>to<sp/>add<sp/>it<sp/>to<sp/>other<sp/>appropriate<sp/>places<sp/>such<sp/>as<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGlobal)</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defSet)<sp/>md-&gt;setDefinition(name+baseType);</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd==0<sp/>&amp;&amp;<sp/>rootNav-&gt;parent())</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd=rootNav-&gt;parent()-&gt;fileDef();</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd)<sp/></highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setFileDef(fd);</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a84f7bb05a4a830056b208d94c6c2bd59" kindref="member">insertMember</ref>(md);</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRelated<sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_SCOPE_NAMES&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(name+baseType);<sp/><sp/></highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDefinition(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">+name+baseType);<sp/><sp/></highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertMember(md);</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertUsedFile(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>);</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"></highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>member=%s\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=(*mnsd)[name]))</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>used<sp/>if<sp/>the<sp/>same<sp/>enum<sp/>is<sp/>in<sp/>multiple<sp/>namespaces/classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>new<sp/>enum<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(name);</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnsd-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(name,mn);</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;add<sp/>%s<sp/>to<sp/>new<sp/>memberName.<sp/>Now<sp/>%d<sp/>members\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.data(),mn-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/>RECURSE_ENTRYTREE(findEnums,rootNav);</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"></highlight></codeline>
<codeline lineno="7085"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7086"><highlight class="normal"></highlight></codeline>
<codeline lineno="7087"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addEnumValuesToEnums(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="7088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::ENUM_SEC)</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non<sp/>anonymous<sp/>enumeration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"></highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cd=0;</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fd=0;</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/><sp/><sp/>*nd=0;</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref><sp/>*mnsd=0;</highlight></codeline>
<codeline lineno="7099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGlobal;</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRelated=FALSE;</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>enum<sp/>with<sp/>name<sp/>`%s&apos;<sp/>relates=%s\n&quot;,root-&gt;name.data(),root-&gt;relates.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"></highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name;</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>scope;</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"></highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">))!=-1)<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>is<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.left(i);<sp/></highlight><highlight class="comment">//<sp/>extract<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.right(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.length()-i-2);<sp/></highlight><highlight class="comment">//<sp/>extract<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(scope))==0)<sp/>nd=getResolvedNamespace(scope);</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>scope,<sp/>check<sp/>the<sp/>scope<sp/>in<sp/>which<sp/>the<sp/>docs<sp/>where<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<sp/>rootNav-&gt;parent()-&gt;section()<sp/>&amp;<sp/>Entry::SCOPE_MASK<sp/>)</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!rootNav-&gt;parent()-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>enum<sp/>docs<sp/>inside<sp/>a<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=rootNav-&gt;parent()-&gt;name();</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(scope))==0)<sp/>nd=getResolvedNamespace(scope);</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>;</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"></highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.isEmpty())<sp/></highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>related<sp/>member,<sp/>prefix<sp/>user<sp/>specified<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isRelated=TRUE;</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getClass(root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>)==0<sp/>&amp;&amp;<sp/>!scope.isEmpty())</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=mergeScopes(scope,root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>);</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scope=root-&gt;<ref refid="d4/dd7/class_entry_1a611ec017dea1768b7093bea6e4177cba" kindref="member" tooltip="related class (doc block)">relates</ref>.copy();</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd=getClass(scope))==0)<sp/>nd=getResolvedNamespace(scope);</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"></highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>!name.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>enum<sp/>inside<sp/>a<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Enum<sp/>in<sp/>class<sp/>`%s&apos;::`%s&apos;\n&quot;,cd-&gt;name().data(),name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=0;</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mnsd=Doxygen::memberNameSDict;</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isGlobal=FALSE;</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd<sp/>&amp;&amp;<sp/>!nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>enum<sp/>inside<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Enum<sp/>in<sp/>namespace<sp/>`%s&apos;::`%s&apos;\n&quot;,nd-&gt;name().data(),name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mnsd=Doxygen::functionNameSDict;</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isGlobal=TRUE;</highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>global<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=rootNav-&gt;fileDef();</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Enum<sp/>in<sp/>file<sp/>`%s&apos;:<sp/>`%s&apos;\n&quot;,fd-&gt;name().data(),name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mnsd=Doxygen::functionNameSDict;</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isGlobal=TRUE;</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"></highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.isEmpty())</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;**<sp/>name=%s\n&quot;,name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn<sp/>=<sp/>mnsd-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name);<sp/></highlight><highlight class="comment">//<sp/>for<sp/>all<sp/>members<sp/>with<sp/>this<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();<sp/>(md=mni.current())<sp/>;<sp/>++mni)<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>enum<sp/>in<sp/>this<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isEnumerate()<sp/>&amp;&amp;<sp/>rootNav-&gt;children())</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/><sp/>enum<sp/>with<sp/>%d<sp/>children\n&quot;,rootNav-&gt;children()-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*rootNav-&gt;children());<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>enum<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*e;</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(e=eli.current());++eli)</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d49/types_8h_1a9974623ce72fc23df5d64426b9178bf2" kindref="member" tooltip="Language as given by extension.">SrcLangExt</ref><sp/>sle;</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="7175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sle=rootNav-&gt;lang())==SrcLangExt_CSharp<sp/>||<sp/></highlight></codeline>
<codeline lineno="7176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sle==SrcLangExt_Java<sp/>||<sp/></highlight></codeline>
<codeline lineno="7177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sle==SrcLangExt_XML<sp/>||</highlight></codeline>
<codeline lineno="7178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a3019e7d39a5c382fb924e22913198133" kindref="member" tooltip="class/member specifiers">spec</ref>&amp;Entry::Strong)</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>classic<sp/>C/C++<sp/>enums,<sp/>for<sp/>C++11,<sp/>C#<sp/>&amp;<sp/>Java<sp/>enum<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>are<sp/>only<sp/>visible<sp/>inside<sp/>the<sp/>enum<sp/>scope,<sp/>so<sp/>we<sp/>must<sp/>create<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>them<sp/>here<sp/>and<sp/>only<sp/>add<sp/>them<sp/>to<sp/>the<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>e-&gt;entry();</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;md-&gt;qualifiedName()=%s<sp/>rootNav-&gt;name()=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;qualifiedName().data(),rootNav-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(substitute(md-&gt;<ref refid="da/d09/class_member_def_1a51e9fb5513286c69c8e3f95e968f7ba1" kindref="member">qualifiedName</ref>(),</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)==<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>function<sp/>to<sp/>get<sp/>canonical<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substitute(rootNav-&gt;name(),</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>value<sp/>scope<sp/>matches<sp/>that<sp/>of<sp/>the<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a59c06b1f3be3c3220404df1d3fdc5bfb" kindref="member" tooltip="start column of entry in the source">startColumn</ref>,</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a79a9b5736630c3769e645f71dc357b9f" kindref="member" tooltip="member type">type</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,0,</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Public,<sp/>Normal,root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>,Member,</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemberType_EnumValue,0,0);</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(md-&gt;getClassDef())<sp/><sp/><sp/><sp/><sp/>fmd-&gt;setMemberClass(md-&gt;getClassDef());</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getNamespaceDef())<sp/>fmd-&gt;setNamespace(md-&gt;getNamespaceDef());</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getFileDef())<sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setFileDef(md-&gt;getFileDef());</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setOuterScope(md-&gt;getOuterScope());</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setTagInfo(e-&gt;tagInfo());</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="7202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;<ref refid="d5/dcc/class_definition_1ae653664eee43cfe5992cd91377f8e91b" kindref="member">setId</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a338fb12273a1a4f5dc124a1faf47d473" kindref="member" tooltip="libclang id">id</ref>);</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="7204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setInitializer(root-&gt;<ref refid="d4/dd7/class_entry_1a2a0c9e7ce364ed2981f49314c33245f9" kindref="member" tooltip="initial value (for variables)">initializer</ref>);</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setMaxInitLines(root-&gt;<ref refid="d4/dd7/class_entry_1ae283a992b9a74c6925c6f602ba7d830d" kindref="member" tooltip="define/variable initializer lines to show">initLines</ref>);</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setExplicitExternal(root-&gt;<ref refid="d4/dd7/class_entry_1a6c5a4c9eda694f2bfd2037d7da08ba5d" kindref="member" tooltip="explicitly defined as external?">explicitExternal</ref>);</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setAnchor();</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;insertEnumField(fmd);</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setEnumScope(md,TRUE);</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=mnsd-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(fmd);</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(fmd);</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mnsd-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,mn);</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;e-&gt;name=%s<sp/>isRelated=%d\n&quot;,e-&gt;name().data(),isRelated);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*fmn=0;</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref><sp/>*emnsd<sp/>=<sp/>isRelated<sp/>?<sp/>Doxygen::functionNameSDict<sp/>:<sp/>mnsd;</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!e-&gt;name().isEmpty()<sp/>&amp;&amp;<sp/>(fmn=(*emnsd)[e-&gt;name()]))<sp/></highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>list<sp/>of<sp/>members<sp/>with<sp/>the<sp/>same<sp/>name<sp/>as<sp/>the<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>fmni(*fmn);</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd;</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fmni.toFirst();<sp/>(fmd=fmni.current())<sp/>;<sp/>++fmni)<sp/></highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd-&gt;isEnumValue()<sp/>&amp;&amp;<sp/>fmd-&gt;getOuterScope()==md-&gt;getOuterScope())<sp/></highlight><highlight class="comment">//<sp/>in<sp/>same<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>enum<sp/>value<sp/>with<sp/>same<sp/>name<sp/>%s<sp/>in<sp/>scope<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fmd-&gt;name().data(),fmd-&gt;getOuterScope()-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd<sp/>&amp;&amp;<sp/>!nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().isEmpty()<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*fnd=fmd-&gt;getNamespaceDef();</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fnd==nd)<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>value<sp/>is<sp/>inside<sp/>a<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;insertEnumField(fmd);</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setEnumScope(md);</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isGlobal)</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*ffd=fmd-&gt;getFileDef();</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ffd==fd)<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>value<sp/>has<sp/>file<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;insertEnumField(fmd);</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setEnumScope(md);</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRelated<sp/>&amp;&amp;<sp/>cd)<sp/></highlight><highlight class="comment">//<sp/>reparent<sp/>enum<sp/>value<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>match<sp/>the<sp/>enum&apos;s<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;insertEnumField(fmd);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>field<sp/>def<sp/>to<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setEnumScope(md);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cross<sp/>ref<sp/>with<sp/>enum<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setEnumClassScope(cd);<sp/></highlight><highlight class="comment">//<sp/>cross<sp/>ref<sp/>with<sp/>enum<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setOuterScope(cd);</highlight></codeline>
<codeline lineno="7269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;makeRelated();</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;insertMember(fmd);</highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*fcd=fmd-&gt;getClassDef();</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcd==cd)<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>value<sp/>is<sp/>inside<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Inserting<sp/>enum<sp/>field<sp/>%s<sp/>in<sp/>enum<sp/>scope<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fmd-&gt;name().data(),md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;insertEnumField(fmd);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>field<sp/>def<sp/>to<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;setEnumScope(md);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cross<sp/>ref<sp/>with<sp/>enum<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="7284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7292"><highlight class="normal"></highlight></codeline>
<codeline lineno="7293"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="7294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/><sp/><sp/>RECURSE_ENTRYTREE(addEnumValuesToEnums,rootNav);</highlight></codeline>
<codeline lineno="7298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"></highlight></codeline>
<codeline lineno="7301"><highlight class="normal"></highlight></codeline>
<codeline lineno="7302"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>documentation<sp/>blocks<sp/>for<sp/>the<sp/>enumerations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7304"><highlight class="normal"></highlight></codeline>
<codeline lineno="7305"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findEnumDocumentation(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="7306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::ENUMDOC_SEC</highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>rootNav-&gt;name().at(0)!=</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>anonymous<sp/>enums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"></highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>docs<sp/>for<sp/>enum<sp/>with<sp/>name<sp/>`%s&apos;<sp/>in<sp/>context<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;name.data(),root-&gt;parent-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name;</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>scope;</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.findRev(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">))!=-1)<sp/></highlight><highlight class="comment">//<sp/>scope<sp/>is<sp/>specified<sp/>as<sp/>part<sp/>of<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.right(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.length()-i-2);<sp/></highlight><highlight class="comment">//<sp/>extract<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.left(i);<sp/></highlight><highlight class="comment">//<sp/>extract<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Scope=`%s&apos;<sp/>Name=`%s&apos;\n&quot;,scope.data(),name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>just<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name=root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>;</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<sp/>rootNav-&gt;parent()-&gt;section()<sp/>&amp;<sp/>Entry::SCOPE_MASK<sp/>)</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!rootNav-&gt;parent()-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="7332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>found<sp/>enum<sp/>docs<sp/>inside<sp/>a<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scope.isEmpty())<sp/>scope.prepend(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scope.prepend(rootNav-&gt;parent()-&gt;name());</highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=getClass(scope);</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"></highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.isEmpty())</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd)</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Enum:<sp/>scope=`%s&apos;<sp/>name=`%s&apos;\n&quot;,cd-&gt;name(),name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>className=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().copy();</highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name);</highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current())<sp/>&amp;&amp;<sp/>!found;++mni)</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()==className<sp/>&amp;&amp;<sp/>md-&gt;isEnumerate())</highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>documentation<sp/>outside<sp/>a<sp/>compound<sp/>overrides<sp/>the<sp/>documentation<sp/>inside<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="7358"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>()<sp/>||<sp/>rootNav-&gt;parent()-&gt;name().isEmpty())<sp/></highlight></codeline>
<codeline lineno="7359"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7364"><highlight class="normal"></highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>brief<sp/>descriptions<sp/>inside<sp/>a<sp/>compound<sp/>override<sp/>the<sp/>documentation<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>outside<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7367"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="7368"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>()<sp/>||<sp/>!rootNav-&gt;parent()-&gt;name().isEmpty())</highlight></codeline>
<codeline lineno="7369"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"></highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!md-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>()<sp/>||<sp/>!rootNav-&gt;parent()-&gt;name().isEmpty())</highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7378"><highlight class="normal"></highlight></codeline>
<codeline lineno="7379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>!=-1<sp/>&amp;&amp;<sp/>md-&gt;getMemberGroupId()==-1)</highlight></codeline>
<codeline lineno="7380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7383"><highlight class="normal"></highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="7385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"></highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd=md-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd==0<sp/>&amp;&amp;root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>-&gt;first()!=0)<sp/></highlight><highlight class="comment">//<sp/>member<sp/>not<sp/>grouped<sp/>but<sp/>out-of-line<sp/>documentation<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"></highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;MemberName<sp/>%s<sp/>not<sp/>found!\n&quot;,name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>enum<sp/>outside<sp/>class<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Enum<sp/>outside<sp/>class:<sp/>%s<sp/>grpId=%d\n&quot;,name.data(),root-&gt;mGrpId);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(name);</highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current())<sp/>&amp;&amp;<sp/>!found;++mni)</highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isEnumerate())</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="7420"><highlight class="normal"></highlight></codeline>
<codeline lineno="7421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd=md-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="7422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd==0<sp/>&amp;&amp;<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1af10b19c474b2a7173a79b97124d25fc3" kindref="member" tooltip="list of groups this entry belongs to">groups</ref>-&gt;first()!=0)<sp/></highlight><highlight class="comment">//<sp/>member<sp/>not<sp/>grouped<sp/>but<sp/>out-of-line<sp/>documentation<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"></highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="7435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Documentation<sp/>for<sp/>undefined<sp/>enum<sp/>`%s&apos;<sp/>found.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.data()</highlight></codeline>
<codeline lineno="7437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="7438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7440"><highlight class="normal"></highlight></codeline>
<codeline lineno="7441"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7443"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findEnumDocumentation,rootNav);</highlight></codeline>
<codeline lineno="7444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7445"><highlight class="normal"></highlight></codeline>
<codeline lineno="7446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>each<sp/>enum<sp/>(member<sp/>or<sp/>function)<sp/>in<sp/>mnl<sp/>if<sp/>it<sp/>has<sp/>documented<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7448"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findDEV(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref><sp/>&amp;mnsd)</highlight></codeline>
<codeline lineno="7449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7450"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="7451"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(mnsd);</highlight></codeline>
<codeline lineno="7452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mnli.toFirst();(mn=mnli.current());++mnli)</highlight></codeline>
<codeline lineno="7454"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="7456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="7457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="7459"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;isEnumerate())<sp/></highlight><highlight class="comment">//<sp/>member<sp/>is<sp/>an<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d13/class_member_list" kindref="compound" tooltip="A list of MemberDef objects.">MemberList</ref><sp/>*fmdl<sp/>=<sp/>md-&gt;enumFieldList();</highlight></codeline>
<codeline lineno="7463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>documentedEnumValues=0;</highlight></codeline>
<codeline lineno="7464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmdl)<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>has<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d3c/class_member_list_iterator" kindref="compound" tooltip="An iterator for MemberDef objects in a MemberList.">MemberListIterator</ref><sp/>fmni(*fmdl);</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd;</highlight></codeline>
<codeline lineno="7468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>enum<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fmni.toFirst();(fmd=fmni.current());++fmni)</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd-&gt;<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>())<sp/>documentedEnumValues++;</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>least<sp/>one<sp/>enum<sp/>value<sp/>is<sp/>documented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(documentedEnumValues&gt;0)<sp/>md-&gt;setDocumentedEnumValues(TRUE);</highlight></codeline>
<codeline lineno="7476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"></highlight></codeline>
<codeline lineno="7481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>each<sp/>enum<sp/>(member<sp/>or<sp/>function)<sp/>if<sp/>it<sp/>has<sp/>documented<sp/>enum<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findDocumentedEnumValues()</highlight></codeline>
<codeline lineno="7484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/>findDEV(*Doxygen::memberNameSDict);</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/>findDEV(*Doxygen::functionNameSDict);<sp/></highlight></codeline>
<codeline lineno="7487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"></highlight></codeline>
<codeline lineno="7489"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7490"><highlight class="normal"></highlight></codeline>
<codeline lineno="7491"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMembersToIndex()</highlight></codeline>
<codeline lineno="7492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::memberNameSDict);</highlight></codeline>
<codeline lineno="7495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mnli.toFirst();(mn=mnli.current());++mnli)</highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addClassMemberNameToIndex(md);</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>fnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(mn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;getNamespaceDef())</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addNamespaceMemberNameToIndex(md);</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addFileMemberNameToIndex(md);</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7526"><highlight class="normal"></highlight></codeline>
<codeline lineno="7527"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>computes<sp/>the<sp/>relation<sp/>between<sp/>all<sp/>members.<sp/>For<sp/>each<sp/>member<sp/>`m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>members<sp/>that<sp/>override<sp/>the<sp/>implementation<sp/>of<sp/>`m&apos;<sp/>are<sp/>searched<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>member<sp/>that<sp/>`m&apos;<sp/>overrides<sp/>is<sp/>searched.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7531"><highlight class="normal"></highlight></codeline>
<codeline lineno="7532"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computeMemberRelations()</highlight></codeline>
<codeline lineno="7533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::memberNameSDict);</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(mn=mnli.current())<sp/>;<sp/>++mnli<sp/>)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mdi(*mn);</highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(md=mdi.current())<sp/>;<sp/>++mdi<sp/>)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>member<sp/>with<sp/>a<sp/>specific<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bmd<sp/>=<sp/>mn-&gt;first();<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>other<sp/>member<sp/>with<sp/>the<sp/>same<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bmd)</highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*mcd<sp/><sp/>=<sp/>md-&gt;getClassDef();</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mcd<sp/>&amp;&amp;<sp/>mcd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>())</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*bmcd<sp/>=<sp/>bmd-&gt;getClassDef();</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Check<sp/>relation<sp/>between<sp/>`%s&apos;::`%s&apos;<sp/>(%p)<sp/>and<sp/>`%s&apos;::`%s&apos;<sp/>(%p)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>mcd-&gt;name().data(),md-&gt;name().data(),md,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmcd-&gt;name().data(),bmd-&gt;name().data(),bmd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md!=bmd<sp/>&amp;&amp;<sp/>bmcd<sp/>&amp;&amp;<sp/>mcd<sp/>&amp;&amp;<sp/>bmcd!=mcd<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bmd-&gt;virtualness()!=Normal<sp/>||<sp/></highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmcd-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>()==ClassDef::Interface<sp/>||<sp/></highlight></codeline>
<codeline lineno="7556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmcd-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>()==ClassDef::Protocol</highlight></codeline>
<codeline lineno="7557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;isFunction()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mcd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmcd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mcd-&gt;<ref refid="d1/dcf/class_class_def_1a500d1c453352fa69a791749b2a5a2423" kindref="member" tooltip="Returns TRUE iff bcd is a direct or indirect base class of this class.">isBaseClass</ref>(bmcd,TRUE))</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>derived<sp/>scope\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*bmdAl<sp/>=<sp/>bmd-&gt;argumentList();</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>*mdAl<sp/>=<sp/><sp/>md-&gt;argumentList();</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/>Base<sp/>argList=`%s&apos;\n<sp/>Super<sp/>argList=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argListToString(bmdAl.pointer()).data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argListToString(mdAl.pointer()).data()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchArguments2(bmd-&gt;getOuterScope(),bmd-&gt;getFileDef(),bmdAl,</highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;getOuterScope(),<sp/>md-&gt;getFileDef(),<sp/>mdAl,</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*rmd;</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rmd=md-&gt;reimplements())==0<sp/>||</highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minClassDistance(mcd,bmcd)&lt;minClassDistance(mcd,rmd-&gt;getClassDef())</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;setting<sp/>(new)<sp/>reimplements<sp/>member\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setReimplements(bmd);</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s:<sp/>add<sp/>reimplementedBy<sp/>member<sp/>%s\n&quot;,bmcd-&gt;name().data(),mcd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmd-&gt;insertReimplementedBy(md);</highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmd<sp/>=<sp/>mn-&gt;next();</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="7594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7595"><highlight class="normal"></highlight></codeline>
<codeline lineno="7596"><highlight class="normal"></highlight></codeline>
<codeline lineno="7597"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7598"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>void<sp/>computeClassImplUsageRelations()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7599"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7600"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ClassDef<sp/>*cd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7601"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7602"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(;(cd=cli.current());++cli)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7603"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7604"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd-&gt;determineImplUsageRelation();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7605"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7606"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7607"><highlight class="normal"></highlight></codeline>
<codeline lineno="7608"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7609"><highlight class="normal"></highlight></codeline>
<codeline lineno="7610"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createTemplateInstanceMembers()</highlight></codeline>
<codeline lineno="7611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="7613"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="7614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>a<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/><sp/><sp/>QDict&lt;ClassDef&gt;<sp/>*templInstances<sp/>=<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a40a4d62d34cfa2f075c58acf6477e67f" kindref="member" tooltip="Returns a sorted dictionary with all template instances found for this template class.">getTemplateInstances</ref>();</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(templInstances)</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QDictIterator&lt;ClassDef&gt;<sp/>qdi(*templInstances);</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*tcd=0;</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>instance<sp/>of<sp/>the<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(qdi.toFirst();(tcd=qdi.current());++qdi)</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tcd-&gt;addMembersToTemplateInstance(cd,qdi.currentKey());</highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"></highlight></codeline>
<codeline lineno="7632"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7633"><highlight class="normal"></highlight></codeline>
<codeline lineno="7634"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mergeCategories()</highlight></codeline>
<codeline lineno="7635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>members<sp/>of<sp/>categories<sp/>into<sp/>the<sp/>class<sp/>they<sp/>extend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=-1)<sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>an<sp/>Objective-C<sp/>category</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>baseName=cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().left(i);</highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*baseClass=Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(baseName);</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseClass)</highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;***<sp/>merging<sp/>members<sp/>of<sp/>category<sp/>%s<sp/>into<sp/>%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cd-&gt;name().data(),baseClass-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseClass-&gt;<ref refid="d1/dcf/class_class_def_1a67f89df2361269ef583f33b2ee087a2b" kindref="member">mergeCategory</ref>(cd);</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7655"><highlight class="normal"></highlight></codeline>
<codeline lineno="7656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>list<sp/>of<sp/>all<sp/>members<sp/>for<sp/>each<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7657"><highlight class="normal"></highlight></codeline>
<codeline lineno="7658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildCompleteMemberLists()</highlight></codeline>
<codeline lineno="7659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>the<sp/>member<sp/>list<sp/>of<sp/>base<sp/>classes<sp/>into<sp/>the<sp/>inherited<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="comment">//<sp/>!cd-&gt;isReference()<sp/>&amp;&amp;<sp/>//<sp/>not<sp/>an<sp/>external<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1ae230c3a3d93cc56b7e467eacd7dca90a" kindref="member" tooltip="Returns the list of sub classes that directly derive from this class.">subClasses</ref>()==0<sp/>&amp;&amp;<sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>root<sp/>of<sp/>the<sp/>hierarchy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a7f2e3c9d1a1e5f4bcc4bcdfc06a06bc7" kindref="member" tooltip="Returns the list of base classes from which this class directly inherits.">baseClasses</ref>())<sp/></highlight><highlight class="comment">//<sp/>and<sp/>has<sp/>at<sp/>least<sp/>one<sp/>base<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;***<sp/>merging<sp/>members<sp/>for<sp/>%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a91edf0e1d111bb5b90561af28ec93409" kindref="member">mergeMembers</ref>();</highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>sort<sp/>the<sp/>member<sp/>list<sp/>of<sp/>all<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a1dfaf495dfdfa1e23a19704c22784f98" kindref="member" tooltip="Returns a dictionary of all members.">memberNameInfoSDict</ref>())<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a1dfaf495dfdfa1e23a19704c22784f98" kindref="member" tooltip="Returns a dictionary of all members.">memberNameInfoSDict</ref>()-&gt;<ref refid="d1/d50/class_s_dict_1ab6da88a61ee284dfbd07830fcd63aed3" kindref="member">sort</ref>();</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7679"><highlight class="normal"></highlight></codeline>
<codeline lineno="7680"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7681"><highlight class="normal"></highlight></codeline>
<codeline lineno="7682"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateFileSources()</highlight></codeline>
<codeline lineno="7683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::inputNameList-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7686"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_LIBCLANG</highlight></codeline>
<codeline lineno="7687"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clangAssistedParsing<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CLANG_ASSISTED_PARSING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clangAssistedParsing)</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;void&gt;<sp/>g_processedFiles(10007);</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"></highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>dictionary<sp/>with<sp/>files<sp/>to<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;void&gt;<sp/>g_filesToProcess(10007);</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d32/class_file_name_list_iterator" kindref="compound" tooltip="Iterator for FileName objects in a FileNameList.">FileNameListIterator</ref><sp/>fnli(*Doxygen::inputNameList);<sp/></highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="7699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="7700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_filesToProcess.insert(fd-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>(),(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="7703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>source<sp/>files<sp/>(and<sp/>their<sp/>include<sp/>dependencies)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="7709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="7710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="7711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd-&gt;<ref refid="de/db0/class_file_def_1a55085b4099e8e80109dd8dd7ce87e5a5" kindref="member">isSource</ref>()<sp/>&amp;&amp;<sp/>!fd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>filesInSameTu;</highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;getAllIncludeFilesRecursively(filesInSameTu);</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;startParsing();</highlight></codeline>
<codeline lineno="7717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd-&gt;generateSourceFile())<sp/></highlight><highlight class="comment">//<sp/>sources<sp/>need<sp/>to<sp/>be<sp/>shown<sp/>in<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>code<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,fd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a5ed9987b075539aa61654cc55d3bac28" kindref="member">writeSource</ref>(*g_outputList,FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="7721"><highlight class="normal"></highlight></codeline>
<codeline lineno="7722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>()<sp/>&amp;&amp;<sp/>Doxygen::parseSourcesNeeded)</highlight></codeline>
<codeline lineno="7724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>needed<sp/>to<sp/>parse<sp/>the<sp/>sources<sp/>even<sp/>if<sp/>we<sp/>do<sp/>not<sp/>show<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Parsing<sp/>code<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,fd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;parseSource(FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="7728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7729"><highlight class="normal"></highlight></codeline>
<codeline lineno="7730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*incFile<sp/>=<sp/>filesInSameTu.first();</highlight></codeline>
<codeline lineno="7731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(incFile<sp/>&amp;&amp;<sp/>g_filesToProcess.find(incFile))</highlight></codeline>
<codeline lineno="7732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>()!=incFile<sp/>&amp;&amp;<sp/>!g_processedFiles.find(incFile))</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>moreFiles;</highlight></codeline>
<codeline lineno="7736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="7737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*ifd=findFileDef(Doxygen::inputNameDict,incFile,ambig);</highlight></codeline>
<codeline lineno="7738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifd<sp/>&amp;&amp;<sp/>!ifd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="7739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifd-&gt;generateSourceFile())<sp/></highlight><highlight class="comment">//<sp/>sources<sp/>need<sp/>to<sp/>be<sp/>shown<sp/>in<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/>Generating<sp/>code<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,ifd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifd-&gt;<ref refid="de/db0/class_file_def_1a5ed9987b075539aa61654cc55d3bac28" kindref="member">writeSource</ref>(*g_outputList,TRUE,moreFiles);</highlight></codeline>
<codeline lineno="7744"><highlight class="normal"></highlight></codeline>
<codeline lineno="7745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ifd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>()<sp/>&amp;&amp;<sp/>Doxygen::parseSourcesNeeded)</highlight></codeline>
<codeline lineno="7747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>needed<sp/>to<sp/>parse<sp/>the<sp/>sources<sp/>even<sp/>if<sp/>we<sp/>do<sp/>not<sp/>show<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/>Parsing<sp/>code<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,ifd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifd-&gt;parseSource(TRUE,moreFiles);</highlight></codeline>
<codeline lineno="7751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_processedFiles.insert(incFile,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="7753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incFile<sp/>=<sp/>filesInSameTu.next();</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;finishParsing();</highlight></codeline>
<codeline lineno="7758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_processedFiles.insert(fd-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>(),(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="7759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>remaining<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="7767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_processedFiles.find(fd-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>()))<sp/></highlight><highlight class="comment">//<sp/>not<sp/>yet<sp/>processed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>filesInSameTu;</highlight></codeline>
<codeline lineno="7772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;startParsing();</highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd-&gt;generateSourceFile())<sp/></highlight><highlight class="comment">//<sp/>sources<sp/>need<sp/>to<sp/>be<sp/>shown<sp/>in<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>code<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,fd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a5ed9987b075539aa61654cc55d3bac28" kindref="member">writeSource</ref>(*g_outputList,FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="7777"><highlight class="normal"></highlight></codeline>
<codeline lineno="7778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>()<sp/>&amp;&amp;<sp/>Doxygen::parseSourcesNeeded)</highlight></codeline>
<codeline lineno="7780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>needed<sp/>to<sp/>parse<sp/>the<sp/>sources<sp/>even<sp/>if<sp/>we<sp/>do<sp/>not<sp/>show<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Parsing<sp/>code<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,fd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;parseSource(FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="7784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;finishParsing();</highlight></codeline>
<codeline lineno="7786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7791"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="7792"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d32/class_file_name_list_iterator" kindref="compound" tooltip="Iterator for FileName objects in a FileNameList.">FileNameListIterator</ref><sp/>fnli(*Doxygen::inputNameList);<sp/></highlight></codeline>
<codeline lineno="7794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="7795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="7796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="7798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="7799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="7800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>filesInSameTu;</highlight></codeline>
<codeline lineno="7802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;startParsing();</highlight></codeline>
<codeline lineno="7803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd-&gt;generateSourceFile())<sp/></highlight><highlight class="comment">//<sp/>sources<sp/>need<sp/>to<sp/>be<sp/>shown<sp/>in<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>code<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,fd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a5ed9987b075539aa61654cc55d3bac28" kindref="member">writeSource</ref>(*g_outputList,FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="7807"><highlight class="normal"></highlight></codeline>
<codeline lineno="7808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>()<sp/>&amp;&amp;<sp/>Doxygen::parseSourcesNeeded)</highlight></codeline>
<codeline lineno="7810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>needed<sp/>to<sp/>parse<sp/>the<sp/>sources<sp/>even<sp/>if<sp/>we<sp/>do<sp/>not<sp/>show<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Parsing<sp/>code<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,fd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;parseSource(FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="7814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;finishParsing();</highlight></codeline>
<codeline lineno="7816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7821"><highlight class="normal"></highlight></codeline>
<codeline lineno="7822"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7823"><highlight class="normal"></highlight></codeline>
<codeline lineno="7824"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateFileDocs()</highlight></codeline>
<codeline lineno="7825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(documentedHtmlFiles==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7827"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="7828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::inputNameList-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="7829"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d32/class_file_name_list_iterator" kindref="compound" tooltip="Iterator for FileName objects in a FileNameList.">FileNameListIterator</ref><sp/>fnli(*Doxygen::inputNameList);</highlight></codeline>
<codeline lineno="7831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="7832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="7833"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="7835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="7836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fni.toFirst();(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="7837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a19db473ad3a95f44c28b0ba2378fdac2" kindref="member">isLinkableInProject</ref>();</highlight></codeline>
<codeline lineno="7839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doc)</highlight></codeline>
<codeline lineno="7840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>docs<sp/>for<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,fd-&gt;<ref refid="de/db0/class_file_def_1ae07162f94ec462b163e0ff743023f71c" kindref="member">docName</ref>().data());</highlight></codeline>
<codeline lineno="7842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;<ref refid="de/db0/class_file_def_1a7a73cf8448a6995be00369858d4768e8" kindref="member">writeDocumentation</ref>(*g_outputList);</highlight></codeline>
<codeline lineno="7843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7848"><highlight class="normal"></highlight></codeline>
<codeline lineno="7849"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7850"><highlight class="normal"></highlight></codeline>
<codeline lineno="7851"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSourceReferences()</highlight></codeline>
<codeline lineno="7852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>source<sp/>references<sp/>for<sp/>class<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7854"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="7855"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="7856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="7857"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=cd-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>();</highlight></codeline>
<codeline lineno="7859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1acb4255cf08ddb71608af6467b6850783" kindref="member" tooltip="returns TRUE iff a link is possible to this item within this project.">isLinkableInProject</ref>()<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()!=-1)</highlight></codeline>
<codeline lineno="7860"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addSourceRef(cd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),cd,0);</highlight></codeline>
<codeline lineno="7862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>source<sp/>references<sp/>for<sp/>namespace<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7865"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="7866"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=0;</highlight></codeline>
<codeline lineno="7867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nli.toFirst();(nd=nli.current());++nli)</highlight></codeline>
<codeline lineno="7868"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=nd-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>();</highlight></codeline>
<codeline lineno="7870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d0/d07/class_namespace_def_1abdc3193c30d63172fd72c9ab38d22312" kindref="member">isLinkableInProject</ref>()<sp/>&amp;&amp;<sp/>nd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()!=-1)</highlight></codeline>
<codeline lineno="7871"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addSourceRef(nd-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),nd,0);</highlight></codeline>
<codeline lineno="7873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7874"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7875"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="7876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>source<sp/>references<sp/>for<sp/>member<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7877"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::memberNameSDict);</highlight></codeline>
<codeline lineno="7878"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=0;</highlight></codeline>
<codeline lineno="7879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mnli.toFirst();(mn=mnli.current());++mnli)</highlight></codeline>
<codeline lineno="7880"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="7882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="7883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="7884"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;class<sp/>member<sp/>%s:<sp/>def=%s<sp/>body=%d<sp/>link?=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;getBodyDef()?md-&gt;getBodyDef()-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;getStartBodyLine(),md-&gt;isLinkableInProject());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>();</highlight></codeline>
<codeline lineno="7890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()!=-1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fd-&gt;generateSourceFile()<sp/>||<sp/>Doxygen::parseSourcesNeeded)</highlight></codeline>
<codeline lineno="7894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>member<sp/>`%s&apos;<sp/>in<sp/>file<sp/>`%s&apos;<sp/>at<sp/>line<sp/>`%d&apos;<sp/>def=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),fd-&gt;name().data(),md-&gt;getStartBodyLine(),md-&gt;getOuterScope()-&gt;name().data());<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addSourceRef(md-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),md-&gt;getOuterScope(),md);</highlight></codeline>
<codeline lineno="7899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7902"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>fnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="7903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(mn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="7904"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="7906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=0;</highlight></codeline>
<codeline lineno="7907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mni.toFirst();(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="7908"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=md-&gt;<ref refid="d5/dcc/class_definition_1aba56816cd19b24f234c7fd3f4f7ebe47" kindref="member">getBodyDef</ref>();</highlight></codeline>
<codeline lineno="7910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;member<sp/>%s<sp/>body=[%d,%d]<sp/>fd=%p<sp/>link=%d<sp/>parseSources=%d\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;getStartBodyLine(),md-&gt;getEndBodyLine(),fd,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;isLinkableInProject(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Doxygen::parseSourcesNeeded);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>()!=-1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a23011e35c9dc3c5df977302fba58e2de" kindref="member">isLinkableInProject</ref>()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="7918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fd-&gt;generateSourceFile()<sp/>||<sp/>Doxygen::parseSourcesNeeded)</highlight></codeline>
<codeline lineno="7919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="7920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>member<sp/>`%s&apos;<sp/>in<sp/>file<sp/>`%s&apos;<sp/>at<sp/>line<sp/>`%d&apos;<sp/>def=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>md-&gt;name().data(),fd-&gt;name().data(),md-&gt;getStartBodyLine(),md-&gt;getOuterScope()-&gt;name().data());<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addSourceRef(md-&gt;<ref refid="d5/dcc/class_definition_1ac1b628c3fd8382f3c8f365c5af01bc87" kindref="member">getStartBodyLine</ref>(),md-&gt;getOuterScope(),md);</highlight></codeline>
<codeline lineno="7924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="7925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7928"><highlight class="normal"></highlight></codeline>
<codeline lineno="7929"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7930"><highlight class="normal"></highlight></codeline>
<codeline lineno="7931"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sortMemberLists()</highlight></codeline>
<codeline lineno="7932"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>class<sp/>member<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7934"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="7935"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="7936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cli.toFirst();(cd=cli.current());++cli)</highlight></codeline>
<codeline lineno="7937"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7938"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;sortMemberLists();</highlight></codeline>
<codeline lineno="7939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7940"><highlight class="normal"></highlight></codeline>
<codeline lineno="7941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>namespace<sp/>member<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7942"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="7943"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd=0;</highlight></codeline>
<codeline lineno="7944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nli.toFirst();(nd=nli.current());++nli)</highlight></codeline>
<codeline lineno="7945"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7946"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;sortMemberLists();</highlight></codeline>
<codeline lineno="7947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7948"><highlight class="normal"></highlight></codeline>
<codeline lineno="7949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>file<sp/>member<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7950"><highlight class="normal"><sp/><sp/><ref refid="db/d32/class_file_name_list_iterator" kindref="compound" tooltip="Iterator for FileName objects in a FileNameList.">FileNameListIterator</ref><sp/>fnli(*Doxygen::inputNameList);<sp/></highlight></codeline>
<codeline lineno="7951"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="7952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="7953"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="7955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="7956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="7957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;sortMemberLists();</highlight></codeline>
<codeline lineno="7959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7961"><highlight class="normal"></highlight></codeline>
<codeline lineno="7962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>group<sp/>member<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7963"><highlight class="normal"><sp/><sp/>GroupSDict::Iterator<sp/>gli(*Doxygen::groupSDict);</highlight></codeline>
<codeline lineno="7964"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="7965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="7966"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7967"><highlight class="normal"><sp/><sp/><sp/><sp/>gd-&gt;sortMemberLists();</highlight></codeline>
<codeline lineno="7968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7970"><highlight class="normal"></highlight></codeline>
<codeline lineno="7971"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generate<sp/>the<sp/>documentation<sp/>of<sp/>all<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7973"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="7974"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateClassList(<ref refid="d9/d3d/class_class_s_dict" kindref="compound" tooltip="A sorted dictionary of ClassDef objects.">ClassSDict</ref><sp/>&amp;classSDict)</highlight></codeline>
<codeline lineno="7975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7976"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(classSDict);</highlight></codeline>
<codeline lineno="7977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>cli.current()<sp/>;<sp/>++cli<sp/>)</highlight></codeline>
<codeline lineno="7978"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=cli.current();</highlight></codeline>
<codeline lineno="7980"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="7981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;cd=%s<sp/>getOuterScope=%p<sp/>global=%p\n&quot;,cd-&gt;name().data(),cd-&gt;getOuterScope(),Doxygen::globalScope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cd-&gt;getOuterScope()==0<sp/>||<sp/></highlight><highlight class="comment">//<sp/>&lt;--<sp/>should<sp/>not<sp/>happen,<sp/>but<sp/>can<sp/>if<sp/>we<sp/>read<sp/>an<sp/>old<sp/>tag<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;getOuterScope()==Doxygen::globalScope<sp/></highlight><highlight class="comment">//<sp/>only<sp/>look<sp/>at<sp/>global<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;&amp;<sp/>!cd-&gt;<ref refid="d5/dcc/class_definition_1ab322705fb59551eb0e8aa3b08c4dfbee" kindref="member">isHidden</ref>()<sp/>&amp;&amp;<sp/>!cd-&gt;isEmbeddedInOuterScope()</highlight></codeline>
<codeline lineno="7985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="7986"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>external<sp/>references,<sp/>anonymous<sp/>compounds<sp/>and<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>instances<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1acb4255cf08ddb71608af6467b6850783" kindref="member" tooltip="returns TRUE iff a link is possible to this item within this project.">isLinkableInProject</ref>()<sp/>&amp;&amp;<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1af6d871db00924a443ef14c86c830c0d9" kindref="member" tooltip="Returns the template master of which this class is an instance.">templateMaster</ref>()==0)</highlight></codeline>
<codeline lineno="7990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>docs<sp/>for<sp/>compound<sp/>%s...\n&quot;</highlight><highlight class="normal">,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="7992"><highlight class="normal"></highlight></codeline>
<codeline lineno="7993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;writeDocumentation(*g_outputList);</highlight></codeline>
<codeline lineno="7994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;writeMemberList(*g_outputList);</highlight></codeline>
<codeline lineno="7995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>for<sp/>undocumented<sp/>classes,<sp/>the<sp/>inner<sp/>classes<sp/>can<sp/>be<sp/>documented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;writeDocumentationForInnerClasses(*g_outputList);</highlight></codeline>
<codeline lineno="7998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8001"><highlight class="normal"></highlight></codeline>
<codeline lineno="8002"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateClassDocs()</highlight></codeline>
<codeline lineno="8003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8004"><highlight class="normal"><sp/><sp/>generateClassList(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/>generateClassList(*Doxygen::hiddenClasses);</highlight></codeline>
<codeline lineno="8006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8007"><highlight class="normal"></highlight></codeline>
<codeline lineno="8008"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8009"><highlight class="normal"></highlight></codeline>
<codeline lineno="8010"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inheritDocumentation()</highlight></codeline>
<codeline lineno="8011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8012"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::memberNameSDict);</highlight></codeline>
<codeline lineno="8013"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="8014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>count=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(mn=mnli.current());++mnli)</highlight></codeline>
<codeline lineno="8016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*mn);</highlight></codeline>
<codeline lineno="8018"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md;</highlight></codeline>
<codeline lineno="8019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(md=mni.current());++mni)</highlight></codeline>
<codeline lineno="8020"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%04d<sp/>Member<sp/>`%s&apos;\n&quot;,count++,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty()<sp/>&amp;&amp;<sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty())</highlight></codeline>
<codeline lineno="8023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>no<sp/>documentation<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*bmd<sp/>=<sp/>md-&gt;reimplements();</highlight></codeline>
<codeline lineno="8025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bmd<sp/>&amp;&amp;<sp/>bmd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="8026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty()</highlight></codeline>
<codeline lineno="8027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="8028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>search<sp/>up<sp/>the<sp/>inheritance<sp/>tree<sp/>for<sp/>a<sp/>documentation<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bmd=%s<sp/>class=%s\n&quot;,bmd-&gt;name().data(),bmd-&gt;getClassDef()-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmd<sp/>=<sp/>bmd-&gt;reimplements();</highlight></codeline>
<codeline lineno="8031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bmd)<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>documentation<sp/>from<sp/>the<sp/>reimplemented<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setInheritsDocsFrom(bmd);</highlight></codeline>
<codeline lineno="8035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(bmd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>(),bmd-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),bmd-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>());</highlight></codeline>
<codeline lineno="8036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(bmd-&gt;isDocsForDefinition());</highlight></codeline>
<codeline lineno="8037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(bmd-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>(),bmd-&gt;<ref refid="d5/dcc/class_definition_1a3c37121dca58fcb1c3d499b52e0a70fd" kindref="member">briefFile</ref>(),bmd-&gt;<ref refid="d5/dcc/class_definition_1a26799d5c03900e931fb1382a5aa56bdd" kindref="member">briefLine</ref>());</highlight></codeline>
<codeline lineno="8038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;copyArgumentNames(bmd);</highlight></codeline>
<codeline lineno="8039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(bmd-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>(),bmd-&gt;<ref refid="d5/dcc/class_definition_1afcb2ccbaedf4f06fee6f332c3468f370" kindref="member">inbodyFile</ref>(),bmd-&gt;<ref refid="d5/dcc/class_definition_1aa443907e0f5fe04afb2851068c95d706" kindref="member">inbodyLine</ref>());</highlight></codeline>
<codeline lineno="8040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8045"><highlight class="normal"></highlight></codeline>
<codeline lineno="8046"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8047"><highlight class="normal"></highlight></codeline>
<codeline lineno="8048"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>combineUsingRelations()</highlight></codeline>
<codeline lineno="8049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8051"><highlight class="normal"><sp/><sp/><ref refid="db/d32/class_file_name_list_iterator" kindref="compound" tooltip="Iterator for FileName objects in a FileNameList.">FileNameListIterator</ref><sp/>fnli(*Doxygen::inputNameList);</highlight></codeline>
<codeline lineno="8052"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="8053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="8054"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="8056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="8057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fni.toFirst();(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="8058"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="8060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fnli.toFirst();(fn=fnli.current());++fnli)</highlight></codeline>
<codeline lineno="8063"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d01/class_file_name_iterator" kindref="compound" tooltip="Iterator for FileDef objects in a FileName list.">FileNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="8065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="8066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(fni.toFirst();(fd=fni.current());++fni)</highlight></codeline>
<codeline lineno="8067"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;combineUsingRelations();</highlight></codeline>
<codeline lineno="8069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8071"><highlight class="normal"></highlight></codeline>
<codeline lineno="8072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8073"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="8074"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="8075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nli.toFirst()<sp/>;<sp/>(nd=nli.current())<sp/>;<sp/>++nli<sp/>)</highlight></codeline>
<codeline lineno="8076"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8077"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;visited=FALSE;</highlight></codeline>
<codeline lineno="8078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nli.toFirst()<sp/>;<sp/>(nd=nli.current())<sp/>;<sp/>++nli<sp/>)</highlight></codeline>
<codeline lineno="8080"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8081"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;combineUsingRelations();</highlight></codeline>
<codeline lineno="8082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8084"><highlight class="normal"></highlight></codeline>
<codeline lineno="8085"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8086"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="8087"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMembersToMemberGroup()</highlight></codeline>
<codeline lineno="8088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8090"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="8091"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="8092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(cd=cli.current())<sp/>;<sp/>++cli<sp/>)</highlight></codeline>
<codeline lineno="8093"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8094"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;addMembersToMemberGroup();</highlight></codeline>
<codeline lineno="8095"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8097"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn=Doxygen::inputNameList-&gt;first();</highlight></codeline>
<codeline lineno="8098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fn)</highlight></codeline>
<codeline lineno="8099"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=fn-&gt;first();</highlight></codeline>
<codeline lineno="8101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="8102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;addMembersToMemberGroup();</highlight></codeline>
<codeline lineno="8104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=fn-&gt;next();</highlight></codeline>
<codeline lineno="8105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8106"><highlight class="normal"><sp/><sp/><sp/><sp/>fn=Doxygen::inputNameList-&gt;next();</highlight></codeline>
<codeline lineno="8107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8109"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="8110"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="8111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(nd=nli.current())<sp/>;<sp/>++nli<sp/>)</highlight></codeline>
<codeline lineno="8112"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8113"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;addMembersToMemberGroup();</highlight></codeline>
<codeline lineno="8114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8116"><highlight class="normal"><sp/><sp/>GroupSDict::Iterator<sp/>gli(*Doxygen::groupSDict);</highlight></codeline>
<codeline lineno="8117"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="8118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="8119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8120"><highlight class="normal"><sp/><sp/><sp/><sp/>gd-&gt;addMembersToMemberGroup();</highlight></codeline>
<codeline lineno="8121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8123"><highlight class="normal"></highlight></codeline>
<codeline lineno="8124"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8125"><highlight class="normal"></highlight></codeline>
<codeline lineno="8126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>distributeMemberGroupDocumentation()</highlight></codeline>
<codeline lineno="8127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8129"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="8130"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="8131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(cd=cli.current())<sp/>;<sp/>++cli<sp/>)</highlight></codeline>
<codeline lineno="8132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8133"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;distributeMemberGroupDocumentation();</highlight></codeline>
<codeline lineno="8134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8136"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn=Doxygen::inputNameList-&gt;first();</highlight></codeline>
<codeline lineno="8137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fn)</highlight></codeline>
<codeline lineno="8138"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=fn-&gt;first();</highlight></codeline>
<codeline lineno="8140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="8141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;distributeMemberGroupDocumentation();</highlight></codeline>
<codeline lineno="8143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=fn-&gt;next();</highlight></codeline>
<codeline lineno="8144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8145"><highlight class="normal"><sp/><sp/><sp/><sp/>fn=Doxygen::inputNameList-&gt;next();</highlight></codeline>
<codeline lineno="8146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8148"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="8149"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="8150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(nd=nli.current())<sp/>;<sp/>++nli<sp/>)</highlight></codeline>
<codeline lineno="8151"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8152"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;distributeMemberGroupDocumentation();</highlight></codeline>
<codeline lineno="8153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8155"><highlight class="normal"><sp/><sp/>GroupSDict::Iterator<sp/>gli(*Doxygen::groupSDict);</highlight></codeline>
<codeline lineno="8156"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="8157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="8158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8159"><highlight class="normal"><sp/><sp/><sp/><sp/>gd-&gt;distributeMemberGroupDocumentation();</highlight></codeline>
<codeline lineno="8160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8162"><highlight class="normal"></highlight></codeline>
<codeline lineno="8163"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8164"><highlight class="normal"></highlight></codeline>
<codeline lineno="8165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findSectionsInDocumentation()</highlight></codeline>
<codeline lineno="8166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8168"><highlight class="normal"><sp/><sp/>ClassSDict::Iterator<sp/>cli(*Doxygen::classSDict);</highlight></codeline>
<codeline lineno="8169"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd;</highlight></codeline>
<codeline lineno="8170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(cd=cli.current())<sp/>;<sp/>++cli<sp/>)</highlight></codeline>
<codeline lineno="8171"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8172"><highlight class="normal"><sp/><sp/><sp/><sp/>cd-&gt;findSectionsInDocumentation();</highlight></codeline>
<codeline lineno="8173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8175"><highlight class="normal"><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn=Doxygen::inputNameList-&gt;first();</highlight></codeline>
<codeline lineno="8176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fn)</highlight></codeline>
<codeline lineno="8177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=fn-&gt;first();</highlight></codeline>
<codeline lineno="8179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fd)</highlight></codeline>
<codeline lineno="8180"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd-&gt;findSectionsInDocumentation();</highlight></codeline>
<codeline lineno="8182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fd=fn-&gt;next();</highlight></codeline>
<codeline lineno="8183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8184"><highlight class="normal"><sp/><sp/><sp/><sp/>fn=Doxygen::inputNameList-&gt;next();</highlight></codeline>
<codeline lineno="8185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8187"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="8188"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="8189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>(nd=nli.current())<sp/>;<sp/>++nli<sp/>)</highlight></codeline>
<codeline lineno="8190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8191"><highlight class="normal"><sp/><sp/><sp/><sp/>nd-&gt;findSectionsInDocumentation();</highlight></codeline>
<codeline lineno="8192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8194"><highlight class="normal"><sp/><sp/>GroupSDict::Iterator<sp/>gli(*Doxygen::groupSDict);</highlight></codeline>
<codeline lineno="8195"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="8196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="8197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8198"><highlight class="normal"><sp/><sp/><sp/><sp/>gd-&gt;findSectionsInDocumentation();</highlight></codeline>
<codeline lineno="8199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8201"><highlight class="normal"><sp/><sp/>PageSDict::Iterator<sp/>pdi(*Doxygen::pageSDict);</highlight></codeline>
<codeline lineno="8202"><highlight class="normal"><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd=0;</highlight></codeline>
<codeline lineno="8203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pdi.toFirst();(pd=pdi.current());++pdi)</highlight></codeline>
<codeline lineno="8204"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8205"><highlight class="normal"><sp/><sp/><sp/><sp/>pd-&gt;findSectionsInDocumentation();</highlight></codeline>
<codeline lineno="8206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::mainPage)<sp/>Doxygen::mainPage-&gt;findSectionsInDocumentation();</highlight></codeline>
<codeline lineno="8208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8209"><highlight class="normal"></highlight></codeline>
<codeline lineno="8210"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flushCachedTemplateRelations()</highlight></codeline>
<codeline lineno="8211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>all<sp/>references<sp/>to<sp/>classes<sp/>from<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>there<sp/>can<sp/>be<sp/>new<sp/>template<sp/>instances<sp/>in<sp/>the<sp/>inheritance<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>this<sp/>class.<sp/>Optimization:<sp/>only<sp/>remove<sp/>those<sp/>classes<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>inheritance<sp/>instances<sp/>as<sp/>direct<sp/>or<sp/>indirect<sp/>sub<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8216"><highlight class="normal"><sp/><sp/>QCacheIterator&lt;LookupInfo&gt;<sp/>ci(*Doxygen::lookupCache);</highlight></codeline>
<codeline lineno="8217"><highlight class="normal"><sp/><sp/><ref refid="d7/d19/struct_lookup_info" kindref="compound">LookupInfo</ref><sp/>*li=0;</highlight></codeline>
<codeline lineno="8218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci.toFirst();(li=ci.current());++ci)</highlight></codeline>
<codeline lineno="8219"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(li-&gt;classDef)</highlight></codeline>
<codeline lineno="8221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::lookupCache-&gt;remove(ci.currentKey());</highlight></codeline>
<codeline lineno="8223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>all<sp/>cached<sp/>typedef<sp/>resolutions<sp/>whose<sp/>target<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>class<sp/>as<sp/>this<sp/>may<sp/>now<sp/>be<sp/>a<sp/>template<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8227"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>fnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="8228"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="8229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fn=fnli.current());++fnli)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>global<sp/>function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="8232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd;</highlight></codeline>
<codeline lineno="8233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fmd=fni.current());++fni)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>function<sp/>with<sp/>that<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd-&gt;isTypedefValCached())</highlight></codeline>
<codeline lineno="8236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>fmd-&gt;getCachedTypedefVal();</highlight></codeline>
<codeline lineno="8238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a1cf3d48d5fdfce179f11d463d379d5f9" kindref="member" tooltip="Returns TRUE if this class is a template.">isTemplate</ref>())<sp/>fmd-&gt;invalidateTypedefValCache();</highlight></codeline>
<codeline lineno="8239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8242"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::memberNameSDict);</highlight></codeline>
<codeline lineno="8243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fn=mnli.current());++mnli)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class<sp/>method<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8244"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*fn);</highlight></codeline>
<codeline lineno="8246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd;</highlight></codeline>
<codeline lineno="8247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fmd=mni.current());++mni)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>function<sp/>with<sp/>that<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmd-&gt;isTypedefValCached())</highlight></codeline>
<codeline lineno="8250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd<sp/>=<sp/>fmd-&gt;getCachedTypedefVal();</highlight></codeline>
<codeline lineno="8252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1a1cf3d48d5fdfce179f11d463d379d5f9" kindref="member" tooltip="Returns TRUE if this class is a template.">isTemplate</ref>())<sp/>fmd-&gt;invalidateTypedefValCache();</highlight></codeline>
<codeline lineno="8253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8257"><highlight class="normal"></highlight></codeline>
<codeline lineno="8258"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8259"><highlight class="normal"></highlight></codeline>
<codeline lineno="8260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flushUnresolvedRelations()</highlight></codeline>
<codeline lineno="8261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>all<sp/>unresolved<sp/>references<sp/>to<sp/>classes<sp/>from<sp/>the<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>needed<sp/>before<sp/>resolving<sp/>the<sp/>inheritance<sp/>relations,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>would<sp/>otherwise<sp/>not<sp/>find<sp/>the<sp/>inheritance<sp/>relation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>C<sp/>in<sp/>the<sp/>example<sp/>below,<sp/>as<sp/>B::I<sp/>was<sp/>already<sp/>found<sp/>to<sp/>be<sp/>unresolvable<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(which<sp/>is<sp/>correct<sp/>if<sp/>you<sp/>igore<sp/>the<sp/>inheritance<sp/>relation<sp/>between<sp/>A<sp/>and<sp/>B).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>A<sp/>{<sp/>class<sp/>I<sp/>{}<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>B<sp/>:<sp/>public<sp/>A<sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>C<sp/>:<sp/>public<sp/>B::I<sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8272"><highlight class="normal"><sp/><sp/>QCacheIterator&lt;LookupInfo&gt;<sp/>ci(*Doxygen::lookupCache);</highlight></codeline>
<codeline lineno="8273"><highlight class="normal"><sp/><sp/><ref refid="d7/d19/struct_lookup_info" kindref="compound">LookupInfo</ref><sp/>*li=0;</highlight></codeline>
<codeline lineno="8274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ci.toFirst();(li=ci.current());++ci)</highlight></codeline>
<codeline lineno="8275"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(li-&gt;classDef==0<sp/>&amp;&amp;<sp/>li-&gt;typeDef==0)</highlight></codeline>
<codeline lineno="8277"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::lookupCache-&gt;remove(ci.currentKey());</highlight></codeline>
<codeline lineno="8279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8281"><highlight class="normal"></highlight></codeline>
<codeline lineno="8282"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>fnli(*Doxygen::functionNameSDict);</highlight></codeline>
<codeline lineno="8283"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*fn;</highlight></codeline>
<codeline lineno="8284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fn=fnli.current());++fnli)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>global<sp/>function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8285"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>fni(*fn);</highlight></codeline>
<codeline lineno="8287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd;</highlight></codeline>
<codeline lineno="8288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fmd=fni.current());++fni)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>function<sp/>with<sp/>that<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;invalidateCachedArgumentTypes();</highlight></codeline>
<codeline lineno="8291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8293"><highlight class="normal"><sp/><sp/>MemberNameSDict::Iterator<sp/>mnli(*Doxygen::memberNameSDict);</highlight></codeline>
<codeline lineno="8294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fn=mnli.current());++mnli)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class<sp/>method<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8295"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d28/class_member_name_iterator" kindref="compound" tooltip="Iterator for MemberDef objects in a MemberName list.">MemberNameIterator</ref><sp/>mni(*fn);</highlight></codeline>
<codeline lineno="8297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*fmd;</highlight></codeline>
<codeline lineno="8298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(fmd=mni.current());++mni)<sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>function<sp/>with<sp/>that<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmd-&gt;invalidateCachedArgumentTypes();</highlight></codeline>
<codeline lineno="8301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8303"><highlight class="normal"></highlight></codeline>
<codeline lineno="8304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8305"><highlight class="normal"></highlight></codeline>
<codeline lineno="8306"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8307"><highlight class="normal"></highlight></codeline>
<codeline lineno="8308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findDefineDocumentation(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="8309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rootNav-&gt;section()==Entry::DEFINEDOC_SEC<sp/>||</highlight></codeline>
<codeline lineno="8311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::DEFINE_SEC)<sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="8312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="8313"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8314"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="8315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="8316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="8317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;found<sp/>define<sp/>`%s&apos;<sp/>`%s&apos;<sp/>brief=`%s&apos;<sp/>doc=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;name.data(),root-&gt;args.data(),root-&gt;brief.data(),root-&gt;doc.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8319"><highlight class="normal"></highlight></codeline>
<codeline lineno="8320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;tagInfo()<sp/>&amp;&amp;<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>define<sp/>read<sp/>from<sp/>a<sp/>tag<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref>(</highlight><highlight class="stringliteral">&quot;&lt;tagfile&gt;&quot;</highlight><highlight class="normal">,1,1,</highlight></codeline>
<codeline lineno="8323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#define&quot;</highlight><highlight class="normal">,root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>,0,</highlight></codeline>
<codeline lineno="8324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Public,Normal,FALSE,Member,MemberType_Define,0,0);</highlight></codeline>
<codeline lineno="8325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setTagInfo(rootNav-&gt;tagInfo());</highlight></codeline>
<codeline lineno="8326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="8327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Searching<sp/>for<sp/>`%s&apos;<sp/>fd=%p\n&quot;,filePathName.data(),fd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setFileDef(rootNav-&gt;parent()-&gt;fileDef());</highlight></codeline>
<codeline lineno="8329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Adding<sp/>member=%s\n&quot;,md-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn;</highlight></codeline>
<codeline lineno="8331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mn=Doxygen::functionNameSDict-&gt;find(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>)))</highlight></codeline>
<codeline lineno="8332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="8334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="8336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="8338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn-&gt;append(md);</highlight></codeline>
<codeline lineno="8339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,mn);</highlight></codeline>
<codeline lineno="8340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d7e/class_member_name" kindref="compound" tooltip="Class representing all MemberDef objects with the same name.">MemberName</ref><sp/>*mn=Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>);</highlight></codeline>
<codeline lineno="8343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="8344"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="8346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md=mn-&gt;first();</highlight></codeline>
<codeline lineno="8347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(md)</highlight></codeline>
<codeline lineno="8348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;memberType()==MemberType_Define)<sp/>count++;</highlight></codeline>
<codeline lineno="8350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mn-&gt;next();</highlight></codeline>
<codeline lineno="8351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==1)</highlight></codeline>
<codeline lineno="8353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mn-&gt;first();</highlight></codeline>
<codeline lineno="8355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(md)</highlight></codeline>
<codeline lineno="8356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;memberType()==MemberType_Define)</highlight></codeline>
<codeline lineno="8358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="8360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="8361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="8362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="8363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="8365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="8367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(rootNav-&gt;fileDef());</highlight></codeline>
<codeline lineno="8368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="8369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setMaxInitLines(root-&gt;<ref refid="d4/dd7/class_entry_1ae283a992b9a74c6925c6f602ba7d830d" kindref="member" tooltip="define/variable initializer lines to show">initLines</ref>);</highlight></codeline>
<codeline lineno="8370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="8371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>!=-1)<sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="8372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="8373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mn-&gt;next();</highlight></codeline>
<codeline lineno="8375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count&gt;1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="8378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty()<sp/>||<sp/></highlight></codeline>
<codeline lineno="8379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>.isEmpty()<sp/>||<sp/></highlight></codeline>
<codeline lineno="8380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>!=-1</highlight></codeline>
<codeline lineno="8381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="8382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="8383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>defines<sp/>don&apos;t<sp/>know<sp/>where<sp/>to<sp/>add<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>maybe<sp/>they<sp/>are<sp/>in<sp/>different<sp/>files<sp/>together<sp/>with<sp/>their<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mn-&gt;first();</highlight></codeline>
<codeline lineno="8387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(md)</highlight></codeline>
<codeline lineno="8388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;memberType()==MemberType_Define)</highlight></codeline>
<codeline lineno="8390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=md-&gt;getFileDef();</highlight></codeline>
<codeline lineno="8392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&amp;&amp;<sp/>fd-&gt;<ref refid="de/db0/class_file_def_1aae767e854233ec05108d7dccf458d27d" kindref="member">absFilePath</ref>()==root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>)<sp/></highlight></codeline>
<codeline lineno="8393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doc<sp/>and<sp/>define<sp/>in<sp/>the<sp/>same<sp/>file<sp/>assume<sp/>they<sp/>belong<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8395"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="8396"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="8397"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="8398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a357486962b5d04cf93dbb52a7a2f2bf6" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="8400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setDocsForDefinition(!root-&gt;<ref refid="d4/dd7/class_entry_1a14c9abc36afe46d02521ef846e6bcc27" kindref="member" tooltip="prototype ?">proto</ref>);</highlight></codeline>
<codeline lineno="8401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8402"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="8403"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;<ref refid="d5/dcc/class_definition_1a748b55a1bf2566464f1e46daf1fd2ef0" kindref="member">briefDescription</ref>().isEmpty())</highlight></codeline>
<codeline lineno="8404"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="8405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1ac4a25886f70c3888e60c8e5d736720e5" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="8407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(md-&gt;<ref refid="d5/dcc/class_definition_1af85914f95149aa84386f479ff075fd86" kindref="member">inbodyDocumentation</ref>().isEmpty())</highlight></codeline>
<codeline lineno="8409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="da/d09/class_member_def_1a6c64c400180a47b04ad9a1d18a535184" kindref="member">setInbodyDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1aee8cba460792393b5051230c78fbb204" kindref="member" tooltip="file in which the body doc was found">inbodyFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a8eed853bf654e1d583e10f04062ccdde" kindref="member" tooltip="line number at which the body doc was found">inbodyLine</ref>);</highlight></codeline>
<codeline lineno="8411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodySegment(root-&gt;<ref refid="d4/dd7/class_entry_1a9a2b1e3404f4723d8a6bef5966146ed0" kindref="member" tooltip="line number of the definition in the source">bodyLine</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a2db88158279ecfe391ea775f63869fc1" kindref="member" tooltip="line number where the definition ends">endBodyLine</ref>);</highlight></codeline>
<codeline lineno="8413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setBodyDef(rootNav-&gt;fileDef());</highlight></codeline>
<codeline lineno="8414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="8415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="8416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="8417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>!=-1)<sp/>md-&gt;setMemberGroupId(root-&gt;<ref refid="d4/dd7/class_entry_1a9f7167fc5b369f1fcd343946803efa0d" kindref="member" tooltip="member group id">mGrpId</ref>);</highlight></codeline>
<codeline lineno="8418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMemberToGroups(root,md);</highlight></codeline>
<codeline lineno="8419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md=mn-&gt;next();</highlight></codeline>
<codeline lineno="8422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//warn(&quot;define<sp/>%s<sp/>found<sp/>in<sp/>the<sp/>following<sp/>files:\n&quot;,root-&gt;name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//warn(&quot;Cannot<sp/>determine<sp/>where<sp/>to<sp/>add<sp/>the<sp/>documentation<sp/>found<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&quot;at<sp/>line<sp/>%d<sp/>of<sp/>file<sp/>%s.<sp/>\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>root-&gt;startLine,root-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>.isEmpty()<sp/>||<sp/>!root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>.isEmpty())<sp/></highlight><highlight class="comment">//<sp/>define<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>preEnabled<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;ENABLE_PREPROCESSING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preEnabled)</highlight></codeline>
<codeline lineno="8433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="8435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;documentation<sp/>for<sp/>unknown<sp/>define<sp/>%s<sp/>found.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data()</highlight></codeline>
<codeline lineno="8437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="8438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="8442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;found<sp/>documented<sp/>#define<sp/>but<sp/>ignoring<sp/>it<sp/>because<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ENABLE_PREPROCESSING<sp/>is<sp/>NO.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data()</highlight></codeline>
<codeline lineno="8445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="8446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8448"><highlight class="normal"></highlight></codeline>
<codeline lineno="8449"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="8450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8451"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findDefineDocumentation,rootNav);</highlight></codeline>
<codeline lineno="8452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8453"><highlight class="normal"></highlight></codeline>
<codeline lineno="8454"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8455"><highlight class="normal"></highlight></codeline>
<codeline lineno="8456"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findDirDocumentation(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="8457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()<sp/>==<sp/>Entry::DIRDOC_SEC)</highlight></codeline>
<codeline lineno="8459"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8460"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="8461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="8462"><highlight class="normal"></highlight></codeline>
<codeline lineno="8463"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>normalizedName<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>;</highlight></codeline>
<codeline lineno="8464"><highlight class="normal"><sp/><sp/><sp/><sp/>normalizedName<sp/>=<sp/>substitute(normalizedName,</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root-&gt;docFile=%s<sp/>normalizedName=%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>root-&gt;docFile.data(),normalizedName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>==normalizedName)<sp/></highlight><highlight class="comment">//<sp/>current<sp/>dir?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8468"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastSlashPos=normalizedName.findRev(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="8470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastSlashPos!=-1)<sp/></highlight><highlight class="comment">//<sp/>strip<sp/>file<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalizedName=normalizedName.left(lastSlashPos);</highlight></codeline>
<codeline lineno="8473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalizedName.at(normalizedName.length()-1)!=</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8476"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalizedName+=</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd4/class_dir_def" kindref="compound" tooltip="A model of a directory symbol.">DirDef</ref><sp/>*dir,*matchingDir=0;</highlight></codeline>
<codeline lineno="8480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound" tooltip="Ordered dictionary of elements of type T.">SDict&lt;DirDef&gt;::Iterator</ref><sp/>sdi(*Doxygen::directories);</highlight></codeline>
<codeline lineno="8481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sdi.toFirst();(dir=sdi.current());++sdi)</highlight></codeline>
<codeline lineno="8482"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Dir:<sp/>%s&lt;-&gt;%s\n&quot;,dir-&gt;name().data(),normalizedName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().right(normalizedName.length())==normalizedName)</highlight></codeline>
<codeline lineno="8485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchingDir)</highlight></codeline>
<codeline lineno="8487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="8489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\\dir<sp/>command<sp/>matches<sp/>multiple<sp/>directories.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Applying<sp/>the<sp/>command<sp/>for<sp/>directory<sp/>%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Ignoring<sp/>the<sp/>command<sp/>for<sp/>directory<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchingDir-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data(),dir-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data()</highlight></codeline>
<codeline lineno="8493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="8494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchingDir=dir;</highlight></codeline>
<codeline lineno="8498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchingDir)</highlight></codeline>
<codeline lineno="8502"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Match<sp/>for<sp/>with<sp/>dir<sp/>%s\n&quot;,matchingDir-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchingDir-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="8505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchingDir-&gt;<ref refid="d5/dcc/class_definition_1af13e2148f395d2704535e52f50ccc418" kindref="member">setDocumentation</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>);</highlight></codeline>
<codeline lineno="8506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matchingDir-&gt;setRefItems(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>);</highlight></codeline>
<codeline lineno="8507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addDirToGroups(root,matchingDir);</highlight></codeline>
<codeline lineno="8508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight><highlight class="stringliteral">&quot;No<sp/>matching<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;directory<sp/>found<sp/>for<sp/>command<sp/>\\dir<sp/>%s\n&quot;</highlight><highlight class="normal">,normalizedName.data());</highlight></codeline>
<codeline lineno="8513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8514"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="8515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8516"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findDirDocumentation,rootNav);</highlight></codeline>
<codeline lineno="8517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8518"><highlight class="normal"></highlight></codeline>
<codeline lineno="8519"><highlight class="normal"></highlight></codeline>
<codeline lineno="8520"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>(sorted)<sp/>list<sp/>of<sp/>separate<sp/>documentation<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8522"><highlight class="normal"></highlight></codeline>
<codeline lineno="8523"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildPageList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="8524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()<sp/>==<sp/>Entry::PAGEDOC_SEC)</highlight></codeline>
<codeline lineno="8526"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8527"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="8528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="8529"><highlight class="normal"></highlight></codeline>
<codeline lineno="8530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.isEmpty())</highlight></codeline>
<codeline lineno="8531"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addRelatedPage(rootNav);</highlight></codeline>
<codeline lineno="8533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8534"><highlight class="normal"></highlight></codeline>
<codeline lineno="8535"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="8536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()<sp/>==<sp/>Entry::MAINPAGEDOC_SEC)</highlight></codeline>
<codeline lineno="8538"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8539"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="8540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="8541"><highlight class="normal"></highlight></codeline>
<codeline lineno="8542"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>title=root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.stripWhiteSpace();</highlight></codeline>
<codeline lineno="8543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(title.isEmpty())<sp/>title=theTranslator-&gt;trMainPage();</highlight></codeline>
<codeline lineno="8544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>name<sp/>=<sp/>Config_getBool(&quot;GENERATE_TREEVIEW&quot;)?&quot;main&quot;:&quot;index&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8545"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8546"><highlight class="normal"><sp/><sp/><sp/><sp/>addRefItem(root-&gt;<ref refid="d4/dd7/class_entry_1a5328bd7f1580a30ad2345840044c2a4b" kindref="member" tooltip="special lists (test/todo/bug/deprecated/..) this entry is in">sli</ref>,</highlight></codeline>
<codeline lineno="8547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,</highlight></codeline>
<codeline lineno="8548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;page&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,</highlight></codeline>
<codeline lineno="8550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>title,</highlight></codeline>
<codeline lineno="8551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="8552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="8553"><highlight class="normal"></highlight></codeline>
<codeline lineno="8554"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="8555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8556"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(buildPageList,rootNav);</highlight></codeline>
<codeline lineno="8557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8558"><highlight class="normal"></highlight></codeline>
<codeline lineno="8559"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findMainPage(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="8560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()<sp/>==<sp/>Entry::MAINPAGEDOC_SEC)</highlight></codeline>
<codeline lineno="8562"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8563"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="8564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="8565"><highlight class="normal"></highlight></codeline>
<codeline lineno="8566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::mainPage==0)</highlight></codeline>
<codeline lineno="8567"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Found<sp/>main<sp/>page!<sp/>\n======\n%s\n=======\n&quot;,root-&gt;doc.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>title=root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>.stripWhiteSpace();</highlight></codeline>
<codeline lineno="8570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>indexName=Config_getBool(&quot;GENERATE_TREEVIEW&quot;)?&quot;main&quot;:&quot;index&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>indexName=</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::mainPage<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ac6841c6ec8fd7ae6121364e7e1895e94" kindref="member" tooltip="file in which the documentation was found">docFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a180b5fdd7f3b963e4b0d2c4ea6e0b1b5" kindref="member" tooltip="line number at which the documentation was found">docLine</ref>,</highlight></codeline>
<codeline lineno="8573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexName,<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,title);</highlight></codeline>
<codeline lineno="8574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//setFileNameForSections(root-&gt;anchors,&quot;index&quot;,Doxygen::mainPage);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::mainPage-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="8576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::mainPage-&gt;setFileName(indexName);</highlight></codeline>
<codeline lineno="8577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::mainPage-&gt;setShowToc(root-&gt;<ref refid="d4/dd7/class_entry_1ab5f1d92a0b5d8abdf4d42cefc134fdfa" kindref="member" tooltip="static ?">stat</ref>);</highlight></codeline>
<codeline lineno="8578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addPageToContext(Doxygen::mainPage,rootNav);</highlight></codeline>
<codeline lineno="8579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="8580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>page<sp/>name<sp/>is<sp/>a<sp/>label<sp/>as<sp/>well!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d5b/struct_section_info" kindref="compound" tooltip="Class representing a section in a page.">SectionInfo</ref><sp/>*si=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d5b/struct_section_info" kindref="compound" tooltip="Class representing a section in a page.">SectionInfo</ref>(</highlight></codeline>
<codeline lineno="8582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexName,</highlight></codeline>
<codeline lineno="8583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::mainPage-&gt;name(),</highlight></codeline>
<codeline lineno="8584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::mainPage-&gt;title(),</highlight></codeline>
<codeline lineno="8585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionInfo::Page,</highlight></codeline>
<codeline lineno="8586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);<sp/></highlight><highlight class="comment">//<sp/>level<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::sectionDict-&gt;<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(indexName,si);</highlight></codeline>
<codeline lineno="8588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::mainPage-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="8589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8591"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="8593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;found<sp/>more<sp/>than<sp/>one<sp/>\\mainpage<sp/>comment<sp/>block!<sp/>Skipping<sp/>this<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;block.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="8596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8597"><highlight class="normal"></highlight></codeline>
<codeline lineno="8598"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="8599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8600"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(findMainPage,rootNav);</highlight></codeline>
<codeline lineno="8601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8602"><highlight class="normal"></highlight></codeline>
<codeline lineno="8603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computePageRelations(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="8604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rootNav-&gt;section()==Entry::PAGEDOC_SEC<sp/>||<sp/></highlight></codeline>
<codeline lineno="8606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section()==Entry::MAINPAGEDOC_SEC</highlight></codeline>
<codeline lineno="8607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="8608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty()</highlight></codeline>
<codeline lineno="8609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="8610"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8611"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="8612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="8613"><highlight class="normal"></highlight></codeline>
<codeline lineno="8614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd<sp/>=<sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a9197cdd8acd8fc0670e2911a407f3d04" kindref="member" tooltip="entry type (see Sections);">section</ref>==Entry::PAGEDOC_SEC<sp/>?</highlight></codeline>
<codeline lineno="8615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::pageSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>)<sp/>:<sp/></highlight></codeline>
<codeline lineno="8616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::mainPage;<sp/></highlight></codeline>
<codeline lineno="8617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pd)</highlight></codeline>
<codeline lineno="8618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QListIterator&lt;BaseInfo&gt;<sp/>bii(*root-&gt;<ref refid="d4/dd7/class_entry_1a22b4c7b8255e183b68c49d5bd9f04017" kindref="member" tooltip="list of base classes">extends</ref>);</highlight></codeline>
<codeline lineno="8620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d64/struct_base_info" kindref="compound" tooltip="This class stores information about an inheritance relation.">BaseInfo</ref><sp/>*bi;</highlight></codeline>
<codeline lineno="8621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bii.toFirst();(bi=bii.current());++bii)</highlight></codeline>
<codeline lineno="8622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*subPd<sp/>=<sp/>Doxygen::pageSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(bi-&gt;<ref refid="de/d64/struct_base_info_1ae8bba327d477830b4664f9d03b05c97b" kindref="member" tooltip="the name of the base class">name</ref>);</highlight></codeline>
<codeline lineno="8624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subPd)</highlight></codeline>
<codeline lineno="8625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;addInnerCompound(subPd);</highlight></codeline>
<codeline lineno="8627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;***<sp/>Added<sp/>subpage<sp/>relation:<sp/>%s-&gt;%s\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pd-&gt;name().data(),subPd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8632"><highlight class="normal"></highlight></codeline>
<codeline lineno="8633"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="8634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8635"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(computePageRelations,rootNav);</highlight></codeline>
<codeline lineno="8636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8637"><highlight class="normal"></highlight></codeline>
<codeline lineno="8638"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkPageRelations()</highlight></codeline>
<codeline lineno="8639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8640"><highlight class="normal"><sp/><sp/>PageSDict::Iterator<sp/>pdi(*Doxygen::pageSDict);</highlight></codeline>
<codeline lineno="8641"><highlight class="normal"><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd=0;</highlight></codeline>
<codeline lineno="8642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pdi.toFirst();(pd=pdi.current());++pdi)</highlight></codeline>
<codeline lineno="8643"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*ppd<sp/>=<sp/>pd-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="8645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ppd)</highlight></codeline>
<codeline lineno="8646"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ppd==pd)</highlight></codeline>
<codeline lineno="8648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;page<sp/>defined<sp/>at<sp/>line<sp/>%d<sp/>of<sp/>file<sp/>%s<sp/>with<sp/>label<sp/>%s<sp/>is<sp/>a<sp/>subpage<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>itself!<sp/>Please<sp/>remove<sp/>this<sp/>cyclic<sp/>dependency.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),pd-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>().data(),pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="8652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="8653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ppd=ppd-&gt;getOuterScope();</highlight></codeline>
<codeline lineno="8655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8658"><highlight class="normal"></highlight></codeline>
<codeline lineno="8659"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8660"><highlight class="normal"></highlight></codeline>
<codeline lineno="8661"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resolveUserReferences()</highlight></codeline>
<codeline lineno="8662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8663"><highlight class="normal"><sp/><sp/><ref refid="d1/d50/class_s_dict" kindref="compound" tooltip="Ordered dictionary of elements of type T.">SDict&lt;SectionInfo&gt;::Iterator</ref><sp/>sdi(*Doxygen::sectionDict);</highlight></codeline>
<codeline lineno="8664"><highlight class="normal"><sp/><sp/><ref refid="d5/d5b/struct_section_info" kindref="compound" tooltip="Class representing a section in a page.">SectionInfo</ref><sp/>*si;</highlight></codeline>
<codeline lineno="8665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(si=sdi.current());++sdi)</highlight></codeline>
<codeline lineno="8666"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;si-&gt;label=`%s&apos;<sp/>si-&gt;definition=%s<sp/>si-&gt;fileName=`%s&apos;\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>si-&gt;label.data(),si-&gt;definition?si-&gt;definition-&gt;name().data():&quot;&lt;none&gt;&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>si-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd=0;</highlight></codeline>
<codeline lineno="8671"><highlight class="normal"></highlight></codeline>
<codeline lineno="8672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hack:<sp/>the<sp/>items<sp/>of<sp/>a<sp/>todo/test/bug/deprecated<sp/>list<sp/>are<sp/>all<sp/>fragments<sp/>from<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>files,<sp/>so<sp/>the<sp/>resulting<sp/>section&apos;s<sp/>all<sp/>have<sp/>the<sp/>wrong<sp/>file<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>(not<sp/>from<sp/>the<sp/>todo/test/bug/deprecated<sp/>list,<sp/>but<sp/>from<sp/>the<sp/>file<sp/>in<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>they<sp/>are<sp/>defined).<sp/>We<sp/>correct<sp/>this<sp/>here<sp/>by<sp/>looking<sp/>at<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generated<sp/>section<sp/>labels!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8677"><highlight class="normal"><sp/><sp/><sp/><sp/>QDictIterator&lt;RefList&gt;<sp/>rli(*Doxygen::xrefLists);</highlight></codeline>
<codeline lineno="8678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/de8/class_ref_list" kindref="compound" tooltip="List of cross-referenced items.">RefList</ref><sp/>*rl;</highlight></codeline>
<codeline lineno="8679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rli.toFirst();(rl=rli.current());++rli)</highlight></codeline>
<codeline lineno="8680"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>label=</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+rl-&gt;<ref refid="d7/de8/class_ref_list_1a2ab3866977ce58fab559d6f03d7a5d4c" kindref="member">listName</ref>();<sp/></highlight><highlight class="comment">//<sp/>&quot;_todo&quot;,<sp/>&quot;_test&quot;,<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si-&gt;label.left(label.length())==label)</highlight></codeline>
<codeline lineno="8683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>si-&gt;fileName=rl-&gt;<ref refid="d7/de8/class_ref_list_1a2ab3866977ce58fab559d6f03d7a5d4c" kindref="member">listName</ref>();</highlight></codeline>
<codeline lineno="8685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>si-&gt;generated=TRUE;</highlight></codeline>
<codeline lineno="8686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8689"><highlight class="normal"></highlight></codeline>
<codeline lineno="8690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;start:<sp/>si-&gt;label=%s<sp/>si-&gt;fileName=%s\n&quot;,si-&gt;label.data(),si-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!si-&gt;generated)</highlight></codeline>
<codeline lineno="8692"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>section<sp/>is<sp/>in<sp/>a<sp/>page<sp/>and<sp/>the<sp/>page<sp/>is<sp/>in<sp/>a<sp/>group,<sp/>then<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>adjust<sp/>the<sp/>link<sp/>file<sp/>name<sp/>to<sp/>point<sp/>to<sp/>the<sp/>group.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!si-&gt;fileName.isEmpty()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="8696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pd=Doxygen::pageSDict-&gt;<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(si-&gt;fileName))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;getGroupDef())</highlight></codeline>
<codeline lineno="8698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>si-&gt;fileName=pd-&gt;getGroupDef()-&gt;<ref refid="d8/d09/class_group_def_1a67914ef80cfb1958b5b5f36b13866b83" kindref="member">getOutputFileBase</ref>().copy();</highlight></codeline>
<codeline lineno="8700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8701"><highlight class="normal"></highlight></codeline>
<codeline lineno="8702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si-&gt;definition)</highlight></codeline>
<codeline lineno="8703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>there<sp/>should<sp/>be<sp/>one<sp/>function<sp/>in<sp/>Definition<sp/>that<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>to<sp/>link<sp/>to,<sp/>so<sp/>we<sp/>can<sp/>avoid<sp/>the<sp/>following<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd=0;</highlight></codeline>
<codeline lineno="8707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si-&gt;definition-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember)</highlight></codeline>
<codeline lineno="8708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gd<sp/>=<sp/>((<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*)si-&gt;definition)-&gt;getGroupDef();</highlight></codeline>
<codeline lineno="8710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8711"><highlight class="normal"></highlight></codeline>
<codeline lineno="8712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gd)</highlight></codeline>
<codeline lineno="8713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>si-&gt;fileName=gd-&gt;<ref refid="d8/d09/class_group_def_1a67914ef80cfb1958b5b5f36b13866b83" kindref="member">getOutputFileBase</ref>().copy();</highlight></codeline>
<codeline lineno="8715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//si-&gt;fileName=si-&gt;definition-&gt;getOutputFileBase().copy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Setting<sp/>si-&gt;fileName<sp/>to<sp/>%s\n&quot;,si-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;end:<sp/>si-&gt;label=%s<sp/>si-&gt;fileName=%s\n&quot;,si-&gt;label.data(),si-&gt;fileName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8726"><highlight class="normal"></highlight></codeline>
<codeline lineno="8727"><highlight class="normal"></highlight></codeline>
<codeline lineno="8728"><highlight class="normal"></highlight></codeline>
<codeline lineno="8729"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generate<sp/>all<sp/>separate<sp/>documentation<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8731"><highlight class="normal"></highlight></codeline>
<codeline lineno="8732"><highlight class="normal"></highlight></codeline>
<codeline lineno="8733"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generatePageDocs()</highlight></codeline>
<codeline lineno="8734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;documentedPages=%d<sp/>real=%d\n&quot;,documentedPages,Doxygen::pageSDict-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(documentedPages==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8737"><highlight class="normal"><sp/><sp/>PageSDict::Iterator<sp/>pdi(*Doxygen::pageSDict);</highlight></codeline>
<codeline lineno="8738"><highlight class="normal"><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd=0;</highlight></codeline>
<codeline lineno="8739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pdi.toFirst();(pd=pdi.current());++pdi)</highlight></codeline>
<codeline lineno="8740"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pd-&gt;getGroupDef()<sp/>&amp;&amp;<sp/>!pd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="8742"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>docs<sp/>for<sp/>page<sp/>%s...\n&quot;</highlight><highlight class="normal">,pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="8744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::insideMainPage=TRUE;</highlight></codeline>
<codeline lineno="8745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;writeDocumentation(*g_outputList);</highlight></codeline>
<codeline lineno="8746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::insideMainPage=FALSE;</highlight></codeline>
<codeline lineno="8747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8750"><highlight class="normal"></highlight></codeline>
<codeline lineno="8751"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>(sorted)<sp/>list<sp/>&amp;<sp/>dictionary<sp/>of<sp/>example<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8753"><highlight class="normal"></highlight></codeline>
<codeline lineno="8754"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildExampleList(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="8755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;section()==Entry::EXAMPLE_SEC<sp/>&amp;&amp;<sp/>!rootNav-&gt;name().isEmpty())<sp/></highlight></codeline>
<codeline lineno="8757"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8758"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;loadEntry(g_storage);</highlight></codeline>
<codeline lineno="8759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root<sp/>=<sp/>rootNav-&gt;entry();</highlight></codeline>
<codeline lineno="8760"><highlight class="normal"></highlight></codeline>
<codeline lineno="8761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::exampleSDict-&gt;find(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>))</highlight></codeline>
<codeline lineno="8762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>warn(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="8764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Example<sp/>%s<sp/>was<sp/>already<sp/>documented.<sp/>Ignoring<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;documentation<sp/>found<sp/>here.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>.data()</highlight></codeline>
<codeline lineno="8767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="8768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8770"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a736f1dfadfe0c0fabb022c533aa27fdc" kindref="member" tooltip="file this entry was extracted from">fileName</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a81bf40c0a6646dc1e33097d7e2552c96" kindref="member" tooltip="start line of entry in the source">startLine</ref>,</highlight></codeline>
<codeline lineno="8772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1ac02a6c1dd922221351f6de0286d48d77" kindref="member" tooltip="documentation block (partly parsed)">doc</ref>+root-&gt;<ref refid="d4/dd7/class_entry_1a51e209dbd21d11b0c63d246efa6182f2" kindref="member" tooltip="documentation inside the body of a function">inbodyDocs</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a795acc50f8bb2497b2385ee715304076" kindref="member" tooltip="member argument string">args</ref>);</highlight></codeline>
<codeline lineno="8773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a5f6f7e25d740acb612b57365f9fccfc2" kindref="member">setBriefDescription</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1ad602ba19af5785515ed81790d843ce4c" kindref="member" tooltip="brief description (doc block)">brief</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1a9a0b7ed65e6082088ededf633771d3d1" kindref="member" tooltip="file in which the brief desc. was found">briefFile</ref>,root-&gt;<ref refid="d4/dd7/class_entry_1add7a19978ab2b30a9755b8d5e3cbd00a" kindref="member" tooltip="line number at which the brief desc. was found">briefLine</ref>);</highlight></codeline>
<codeline lineno="8774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;setFileName(convertNameToFile(pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;-example&quot;</highlight><highlight class="normal">,FALSE,TRUE));</highlight></codeline>
<codeline lineno="8775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a2314524366e46c9d0cd8bcb528d6238d" kindref="member">addSectionsToDefinition</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a4608d738e9d9c7798d8b83a2846b3d12" kindref="member" tooltip="list of anchors defined in this entry">anchors</ref>);</highlight></codeline>
<codeline lineno="8776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;setLanguage(root-&gt;<ref refid="d4/dd7/class_entry_1a4ee5bbd6ac8bdf2f017d93edcefce5e9" kindref="member" tooltip="programming language in which this entry was found">lang</ref>);</highlight></codeline>
<codeline lineno="8777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pi-&gt;addSections(root-&gt;anchors);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8778"><highlight class="normal"></highlight></codeline>
<codeline lineno="8779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::exampleSDict-&gt;<ref refid="d1/d50/class_s_dict_1a25a85aeba441b4c855ea7be25a4741b5" kindref="member">inSort</ref>(root-&gt;<ref refid="d4/dd7/class_entry_1a87d6afbe10ea84859ef03b6f046e34d3" kindref="member" tooltip="member name">name</ref>,pd);</highlight></codeline>
<codeline lineno="8780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>don&apos;t<sp/>add<sp/>example<sp/>to<sp/>groups<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//addExampleToGroups(root,pd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8783"><highlight class="normal"></highlight></codeline>
<codeline lineno="8784"><highlight class="normal"><sp/><sp/><sp/><sp/>rootNav-&gt;releaseEntry();</highlight></codeline>
<codeline lineno="8785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8786"><highlight class="normal"><sp/><sp/>RECURSE_ENTRYTREE(buildExampleList,rootNav);</highlight></codeline>
<codeline lineno="8787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8788"><highlight class="normal"></highlight></codeline>
<codeline lineno="8789"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prints<sp/>the<sp/>Entry<sp/>tree<sp/>(for<sp/>debugging)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8791"><highlight class="normal"></highlight></codeline>
<codeline lineno="8792"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printNavTree(<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline lineno="8793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8794"><highlight class="normal"><sp/><sp/>QCString<sp/>indentStr;</highlight></codeline>
<codeline lineno="8795"><highlight class="normal"><sp/><sp/>indentStr.fill(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,indent);</highlight></codeline>
<codeline lineno="8796"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;%s%s<sp/>(sec=0x%x)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indentStr.isEmpty()?</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">:indentStr.data(),</highlight></codeline>
<codeline lineno="8798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;name().isEmpty()?</highlight><highlight class="stringliteral">&quot;&lt;empty&gt;&quot;</highlight><highlight class="normal">:rootNav-&gt;name().data(),</highlight></codeline>
<codeline lineno="8799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rootNav-&gt;section());</highlight></codeline>
<codeline lineno="8800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rootNav-&gt;children())<sp/></highlight></codeline>
<codeline lineno="8801"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8802"><highlight class="normal"><sp/><sp/><sp/><sp/>EntryNavListIterator<sp/>eli(*rootNav-&gt;children());</highlight></codeline>
<codeline lineno="8803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;eli.current();++eli)<sp/>printNavTree(eli.current(),indent+2);</highlight></codeline>
<codeline lineno="8804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8806"><highlight class="normal"></highlight></codeline>
<codeline lineno="8807"><highlight class="normal"></highlight></codeline>
<codeline lineno="8808"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generate<sp/>the<sp/>example<sp/>documentation<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8810"><highlight class="normal"></highlight></codeline>
<codeline lineno="8811"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateExampleDocs()</highlight></codeline>
<codeline lineno="8812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8813"><highlight class="normal"><sp/><sp/>g_outputList-&gt;<ref refid="df/dc8/class_output_list_1a22f8c17b8c14518aa55f8af3c2abab0f" kindref="member">disable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="8814"><highlight class="normal"><sp/><sp/>PageSDict::Iterator<sp/>pdi(*Doxygen::exampleSDict);</highlight></codeline>
<codeline lineno="8815"><highlight class="normal"><sp/><sp/><ref refid="dd/d41/class_page_def" kindref="compound" tooltip="A model of a page symbol.">PageDef</ref><sp/>*pd=0;</highlight></codeline>
<codeline lineno="8816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pdi.toFirst();(pd=pdi.current());++pdi)</highlight></codeline>
<codeline lineno="8817"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8818"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>docs<sp/>for<sp/>example<sp/>%s...\n&quot;</highlight><highlight class="normal">,pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="8819"><highlight class="normal"><sp/><sp/><sp/><sp/>resetCCodeParserState();</highlight></codeline>
<codeline lineno="8820"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>n=pd-&gt;<ref refid="dd/d41/class_page_def_1aa08ebea225e51faed63111ba64e78960" kindref="member">getOutputFileBase</ref>();</highlight></codeline>
<codeline lineno="8821"><highlight class="normal"><sp/><sp/><sp/><sp/>startFile(*g_outputList,n,n,pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="8822"><highlight class="normal"><sp/><sp/><sp/><sp/>startTitle(*g_outputList,n);</highlight></codeline>
<codeline lineno="8823"><highlight class="normal"><sp/><sp/><sp/><sp/>g_outputList-&gt;<ref refid="df/dc8/class_output_list_1a3335d926bd59e1c9e3912c4352ca5bc6" kindref="member">docify</ref>(pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="8824"><highlight class="normal"><sp/><sp/><sp/><sp/>endTitle(*g_outputList,n,0);</highlight></codeline>
<codeline lineno="8825"><highlight class="normal"><sp/><sp/><sp/><sp/>g_outputList-&gt;startContents();</highlight></codeline>
<codeline lineno="8826"><highlight class="normal"><sp/><sp/><sp/><sp/>g_outputList-&gt;generateDoc(pd-&gt;<ref refid="d5/dcc/class_definition_1a7c5f8f793b451b8e9bbc68b40a9e8faa" kindref="member">docFile</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a1eddb1e4af4660518113a159e76ca983" kindref="member">docLine</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>startLine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memberDef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a9ed55eb9487bcf1fd7ebb4a967e7b3a1" kindref="member">documentation</ref>()+</highlight><highlight class="stringliteral">&quot;\n\n\\include<sp/>&quot;</highlight><highlight class="normal">+pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()</highlight></codeline>
<codeline lineno="8834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="8835"><highlight class="normal"><sp/><sp/><sp/><sp/>endFile(*g_outputList);<sp/></highlight><highlight class="comment">//<sp/>contains<sp/>g_outputList-&gt;endContents()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8837"><highlight class="normal"><sp/><sp/>g_outputList-&gt;<ref refid="df/dc8/class_output_list_1a4006394472d6c49f7db435628832c49d" kindref="member">enable</ref>(OutputGenerator::Man);</highlight></codeline>
<codeline lineno="8838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8839"><highlight class="normal"></highlight></codeline>
<codeline lineno="8840"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8841"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generate<sp/>module<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8842"><highlight class="normal"></highlight></codeline>
<codeline lineno="8843"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateGroupDocs()</highlight></codeline>
<codeline lineno="8844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8845"><highlight class="normal"><sp/><sp/>GroupSDict::Iterator<sp/>gli(*Doxygen::groupSDict);</highlight></codeline>
<codeline lineno="8846"><highlight class="normal"><sp/><sp/><ref refid="d8/d09/class_group_def" kindref="compound" tooltip="A model of a group of symbols.">GroupDef</ref><sp/>*gd;</highlight></codeline>
<codeline lineno="8847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gli.toFirst();(gd=gli.current());++gli)</highlight></codeline>
<codeline lineno="8848"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="8850"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gd-&gt;writeDocumentation(*g_outputList);</highlight></codeline>
<codeline lineno="8852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8855"><highlight class="normal"></highlight></codeline>
<codeline lineno="8856"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8857"><highlight class="normal"></highlight></codeline>
<codeline lineno="8858"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>void<sp/>generatePackageDocs()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8859"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8860"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>writePackageIndex(*g_outputList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8861"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8862"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(Doxygen::packageDict.count()&gt;0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8863"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8864"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>PackageSDict::Iterator<sp/>pdi(Doxygen::packageDict);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8865"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>PackageDef<sp/>*pd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8866"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(pdi.toFirst();(pd=pdi.current());++pdi)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8867"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8868"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>pd-&gt;writeDocumentation(*g_outputList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8869"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8870"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8871"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8872"><highlight class="normal"></highlight></codeline>
<codeline lineno="8873"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generate<sp/>module<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8875"><highlight class="normal"></highlight></codeline>
<codeline lineno="8876"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateNamespaceDocs()</highlight></codeline>
<codeline lineno="8877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//writeNamespaceIndex(*g_outputList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8879"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="8880"><highlight class="normal"><sp/><sp/>NamespaceSDict::Iterator<sp/>nli(*Doxygen::namespaceSDict);</highlight></codeline>
<codeline lineno="8881"><highlight class="normal"><sp/><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref><sp/>*nd;</highlight></codeline>
<codeline lineno="8882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>namespace...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(nd=nli.current());++nli)</highlight></codeline>
<codeline lineno="8884"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8885"><highlight class="normal"></highlight></codeline>
<codeline lineno="8886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nd-&gt;<ref refid="d0/d07/class_namespace_def_1abdc3193c30d63172fd72c9ab38d22312" kindref="member">isLinkableInProject</ref>())</highlight></codeline>
<codeline lineno="8887"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>docs<sp/>for<sp/>namespace<sp/>%s\n&quot;</highlight><highlight class="normal">,nd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="8889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nd-&gt;writeDocumentation(*g_outputList);</highlight></codeline>
<codeline lineno="8890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8891"><highlight class="normal"></highlight></codeline>
<codeline lineno="8892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>class<sp/>in<sp/>the<sp/>namespace...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8893"><highlight class="normal"><sp/><sp/><sp/><sp/>ClassSDict::Iterator<sp/>cli(*nd-&gt;<ref refid="d0/d07/class_namespace_def_1adf0931f038ed73eb2b7723e9cacdca11" kindref="member">getClassSDict</ref>());</highlight></codeline>
<codeline lineno="8894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>cli.current()<sp/>;<sp/>++cli<sp/>)</highlight></codeline>
<codeline lineno="8895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=cli.current();</highlight></codeline>
<codeline lineno="8897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1acb4255cf08ddb71608af6467b6850783" kindref="member" tooltip="returns TRUE iff a link is possible to this item within this project.">isLinkableInProject</ref>()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="8898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1af6d871db00924a443ef14c86c830c0d9" kindref="member" tooltip="Returns the template master of which this class is an instance.">templateMaster</ref>()==0</highlight></codeline>
<codeline lineno="8899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>external<sp/>references,<sp/>anonymous<sp/>compounds<sp/>and<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>instances<sp/>and<sp/>nested<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!cd-&gt;<ref refid="d5/dcc/class_definition_1ab322705fb59551eb0e8aa3b08c4dfbee" kindref="member">isHidden</ref>()<sp/>&amp;&amp;<sp/>!cd-&gt;isEmbeddedInOuterScope()</highlight></codeline>
<codeline lineno="8902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="8903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Generating<sp/>docs<sp/>for<sp/>compound<sp/>%s...\n&quot;</highlight><highlight class="normal">,cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().data());</highlight></codeline>
<codeline lineno="8905"><highlight class="normal"></highlight></codeline>
<codeline lineno="8906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;writeDocumentation(*g_outputList);</highlight></codeline>
<codeline lineno="8907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;writeMemberList(*g_outputList);</highlight></codeline>
<codeline lineno="8908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;writeDocumentationForInnerClasses(*g_outputList);</highlight></codeline>
<codeline lineno="8910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8913"><highlight class="normal"></highlight></codeline>
<codeline lineno="8914"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)</highlight></codeline>
<codeline lineno="8915"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>fixSlashes(QCString<sp/>&amp;s)</highlight></codeline>
<codeline lineno="8916"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8917"><highlight class="normal"><sp/><sp/>QCString<sp/>result;</highlight></codeline>
<codeline lineno="8918"><highlight class="normal"><sp/><sp/>uint<sp/>i;</highlight></codeline>
<codeline lineno="8919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;s.length();i++)</highlight></codeline>
<codeline lineno="8920"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(s.at(i))</highlight></codeline>
<codeline lineno="8922"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="8924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="8925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="8926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result+=s.at(i);</highlight></codeline>
<codeline lineno="8929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="8934"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8935"><highlight class="normal"></highlight></codeline>
<codeline lineno="8936"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8937"><highlight class="normal"></highlight></codeline>
<codeline lineno="8938"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>openOutputFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*outFile,QFile<sp/>&amp;f)</highlight></codeline>
<codeline lineno="8939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fileOpened=FALSE;</highlight></codeline>
<codeline lineno="8941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeToStdout=(outFile[0]==</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>outFile[1]==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writeToStdout)<sp/></highlight><highlight class="comment">//<sp/>write<sp/>to<sp/>stdout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8943"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8944"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOpened<sp/>=<sp/>f.open(IO_WriteOnly,stdout);</highlight></codeline>
<codeline lineno="8945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>write<sp/>to<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8947"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8948"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(outFile);</highlight></codeline>
<codeline lineno="8949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi.exists())<sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>backup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8950"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QDir<sp/>dir=fi.dir();</highlight></codeline>
<codeline lineno="8952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QFileInfo<sp/>backup(fi.fileName()+</highlight><highlight class="stringliteral">&quot;.bak&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backup.exists())<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>existing<sp/>backup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.remove(backup.fileName());</highlight></codeline>
<codeline lineno="8955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dir.rename(fi.fileName(),fi.fileName()+</highlight><highlight class="stringliteral">&quot;.bak&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8956"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="8957"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="d5/dcc/class_definition_1aaa3c1632bd89cb3db7c7713df4e36db0" kindref="member">setName</ref>(outFile);</highlight></codeline>
<codeline lineno="8958"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOpened<sp/>=<sp/>f.open(IO_WriteOnly|IO_Translate);</highlight></codeline>
<codeline lineno="8959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fileOpened;</highlight></codeline>
<codeline lineno="8961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8962"><highlight class="normal"></highlight></codeline>
<codeline lineno="8967"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateConfigFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*configFile,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shortList,</highlight></codeline>
<codeline lineno="8968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateOnly=FALSE)</highlight></codeline>
<codeline lineno="8969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8970"><highlight class="normal"><sp/><sp/>QFile<sp/>f;</highlight></codeline>
<codeline lineno="8971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fileOpened=openOutputFile(configFile,f);</highlight></codeline>
<codeline lineno="8972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeToStdout=(configFile[0]==</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>configFile[1]==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileOpened)</highlight></codeline>
<codeline lineno="8974"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d3c/class_f_text_stream" kindref="compound" tooltip="Simplified and optimized version of QTextStream.">FTextStream</ref><sp/>t(&amp;f);</highlight></codeline>
<codeline lineno="8976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1ae9e299c7239061edc8c369f51d3948e6" kindref="member">writeTemplate</ref>(t,shortList,updateOnly);</highlight></codeline>
<codeline lineno="8977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!writeToStdout)</highlight></codeline>
<codeline lineno="8978"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!updateOnly)</highlight></codeline>
<codeline lineno="8980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;\n\nConfiguration<sp/>file<sp/>`%s&apos;<sp/>created.\n\n&quot;</highlight><highlight class="normal">,configFile);</highlight></codeline>
<codeline lineno="8982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Now<sp/>edit<sp/>the<sp/>configuration<sp/>file<sp/>and<sp/>enter\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstrcmp(configFile,</highlight><highlight class="stringliteral">&quot;Doxyfile&quot;</highlight><highlight class="normal">)<sp/>||<sp/>qstrcmp(configFile,</highlight><highlight class="stringliteral">&quot;doxyfile&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="8984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>doxygen<sp/>%s\n\n&quot;</highlight><highlight class="normal">,configFile);</highlight></codeline>
<codeline lineno="8985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>doxygen\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;to<sp/>generate<sp/>the<sp/>documentation<sp/>for<sp/>your<sp/>project\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;\n\nConfiguration<sp/>file<sp/>`%s&apos;<sp/>updated.\n\n&quot;</highlight><highlight class="normal">,configFile);</highlight></codeline>
<codeline lineno="8992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8996"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8997"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>open<sp/>file<sp/>%s<sp/>for<sp/>writing\n&quot;</highlight><highlight class="normal">,configFile);</highlight></codeline>
<codeline lineno="8998"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="8999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9001"><highlight class="normal"></highlight></codeline>
<codeline lineno="9002"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>read<sp/>and<sp/>parse<sp/>a<sp/>tag<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9004"><highlight class="normal"></highlight></codeline>
<codeline lineno="9005"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>bool<sp/>readLineFromFile(QFile<sp/>&amp;f,QCString<sp/>&amp;s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9006"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9007"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>char<sp/>c=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9008"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>s.resize(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9009"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>while<sp/>(!f.atEnd()<sp/>&amp;&amp;<sp/>(c=f.getch())!=&apos;\n&apos;)<sp/>s+=c;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9010"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>f.atEnd();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9011"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9012"><highlight class="normal"></highlight></codeline>
<codeline lineno="9013"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9014"><highlight class="normal"></highlight></codeline>
<codeline lineno="9015"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>readTagFile(<ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tl)</highlight></codeline>
<codeline lineno="9016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9017"><highlight class="normal"><sp/><sp/>QCString<sp/>tagLine<sp/>=<sp/>tl;</highlight></codeline>
<codeline lineno="9018"><highlight class="normal"><sp/><sp/>QCString<sp/>fileName;</highlight></codeline>
<codeline lineno="9019"><highlight class="normal"><sp/><sp/>QCString<sp/>destName;</highlight></codeline>
<codeline lineno="9020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eqPos<sp/>=<sp/>tagLine.find(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eqPos!=-1)<sp/></highlight><highlight class="comment">//<sp/>tag<sp/>command<sp/>contains<sp/>a<sp/>destination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9022"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9023"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>tagLine.left(eqPos).stripWhiteSpace();</highlight></codeline>
<codeline lineno="9024"><highlight class="normal"><sp/><sp/><sp/><sp/>destName<sp/>=<sp/>tagLine.right(tagLine.length()-eqPos-1).stripWhiteSpace();</highlight></codeline>
<codeline lineno="9025"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(fileName);</highlight></codeline>
<codeline lineno="9026"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagDestinationDict.insert(fi.absFilePath().utf8(),</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QCString(destName));</highlight></codeline>
<codeline lineno="9027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;insert<sp/>tagDestination<sp/>%s-&gt;%s\n&quot;,fi.fileName().data(),destName.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9028"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9030"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9031"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>tagLine;</highlight></codeline>
<codeline lineno="9032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9034"><highlight class="normal"><sp/><sp/>QFileInfo<sp/>fi(fileName);</highlight></codeline>
<codeline lineno="9035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi.exists()<sp/>||<sp/>!fi.isFile())</highlight></codeline>
<codeline lineno="9036"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9037"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Tag<sp/>file<sp/>`%s&apos;<sp/>does<sp/>not<sp/>exist<sp/>or<sp/>is<sp/>not<sp/>a<sp/>file.<sp/>Skipping<sp/>it...\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="9038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileName.data());</highlight></codeline>
<codeline lineno="9039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9041"><highlight class="normal"></highlight></codeline>
<codeline lineno="9042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!destName.isEmpty())</highlight></codeline>
<codeline lineno="9043"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Reading<sp/>tag<sp/>file<sp/>`%s&apos;,<sp/>location<sp/>`%s&apos;...\n&quot;</highlight><highlight class="normal">,fileName.data(),destName.data());</highlight></codeline>
<codeline lineno="9044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9045"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Reading<sp/>tag<sp/>file<sp/>`%s&apos;...\n&quot;</highlight><highlight class="normal">,fileName.data());</highlight></codeline>
<codeline lineno="9046"><highlight class="normal"></highlight></codeline>
<codeline lineno="9047"><highlight class="normal"><sp/><sp/>parseTagFile(root,fi.absFilePath().utf8());</highlight></codeline>
<codeline lineno="9048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9049"><highlight class="normal"></highlight></codeline>
<codeline lineno="9050"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9051"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyStyleSheet()</highlight></codeline>
<codeline lineno="9052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9053"><highlight class="normal"><sp/><sp/>QCString<sp/>&amp;htmlStyleSheet<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_STYLESHEET&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!htmlStyleSheet.isEmpty())</highlight></codeline>
<codeline lineno="9055"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9056"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(htmlStyleSheet);</highlight></codeline>
<codeline lineno="9057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi.exists())</highlight></codeline>
<codeline lineno="9058"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Style<sp/>sheet<sp/>&apos;%s&apos;<sp/>specified<sp/>by<sp/>HTML_STYLESHEET<sp/>does<sp/>not<sp/>exist!\n&quot;</highlight><highlight class="normal">,htmlStyleSheet.data());</highlight></codeline>
<codeline lineno="9060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>htmlStyleSheet.resize(0);<sp/></highlight><highlight class="comment">//<sp/>revert<sp/>to<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9063"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>destFileName<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">)+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+fi.fileName().data();</highlight></codeline>
<codeline lineno="9065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyFile(htmlStyleSheet,destFileName);</highlight></codeline>
<codeline lineno="9066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9068"><highlight class="normal"><sp/><sp/>QCString<sp/>&amp;htmlExtraStyleSheet<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_EXTRA_STYLESHEET&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!htmlExtraStyleSheet.isEmpty())</highlight></codeline>
<codeline lineno="9070"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9071"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(htmlExtraStyleSheet);</highlight></codeline>
<codeline lineno="9072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi.exists())</highlight></codeline>
<codeline lineno="9073"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Style<sp/>sheet<sp/>&apos;%s&apos;<sp/>specified<sp/>by<sp/>HTML_EXTRA_STYLESHEET<sp/>does<sp/>not<sp/>exist!\n&quot;</highlight><highlight class="normal">,htmlExtraStyleSheet.data());</highlight></codeline>
<codeline lineno="9075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>htmlExtraStyleSheet.resize(0);<sp/></highlight><highlight class="comment">//<sp/>revert<sp/>to<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9078"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>destFileName<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">)+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+fi.fileName().data();</highlight></codeline>
<codeline lineno="9080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyFile(htmlExtraStyleSheet,destFileName);</highlight></codeline>
<codeline lineno="9081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9083"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="9084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9085"><highlight class="normal"></highlight></codeline>
<codeline lineno="9086"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyLogo()</highlight></codeline>
<codeline lineno="9087"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9088"><highlight class="normal"><sp/><sp/>QCString<sp/>&amp;projectLogo<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;PROJECT_LOGO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!projectLogo.isEmpty())</highlight></codeline>
<codeline lineno="9090"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9091"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(projectLogo);</highlight></codeline>
<codeline lineno="9092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi.exists())</highlight></codeline>
<codeline lineno="9093"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Project<sp/>logo<sp/>&apos;%s&apos;<sp/>specified<sp/>by<sp/>PROJECT_LOGO<sp/>does<sp/>not<sp/>exist!\n&quot;</highlight><highlight class="normal">,projectLogo.data());</highlight></codeline>
<codeline lineno="9095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>projectLogo.resize(0);<sp/></highlight><highlight class="comment">//<sp/>revert<sp/>to<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9096"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9098"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>destFileName<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">)+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+fi.fileName().data();</highlight></codeline>
<codeline lineno="9100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyFile(projectLogo,destFileName);</highlight></codeline>
<codeline lineno="9101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;addImageFile(fi.fileName().data());</highlight></codeline>
<codeline lineno="9102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9105"><highlight class="normal"></highlight></codeline>
<codeline lineno="9106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyExtraFiles(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString&amp;<sp/>filesOption,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;outputOption)</highlight></codeline>
<codeline lineno="9107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9108"><highlight class="normal"><sp/><sp/>QStrList<sp/>files<sp/>=<sp/>Config_getList(filesOption);</highlight></codeline>
<codeline lineno="9109"><highlight class="normal"><sp/><sp/>uint<sp/>i;</highlight></codeline>
<codeline lineno="9110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;files.count();<sp/>++i)</highlight></codeline>
<codeline lineno="9111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9112"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>fileName(files.at(i));</highlight></codeline>
<codeline lineno="9113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fileName.isEmpty())</highlight></codeline>
<codeline lineno="9115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(fileName);</highlight></codeline>
<codeline lineno="9117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi.exists())<sp/></highlight></codeline>
<codeline lineno="9118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Extra<sp/>file<sp/>&apos;%s&apos;<sp/>specified<sp/>in&quot;</highlight><highlight class="normal"><sp/>+<sp/>filesOption<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>exist!\n&quot;</highlight><highlight class="normal">,<sp/>fileName.data());</highlight></codeline>
<codeline lineno="9120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>destFileName<sp/>=<sp/>Config_getString(outputOption)+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+fi.fileName().data();</highlight></codeline>
<codeline lineno="9124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;addImageFile(fi.fileName().utf8());</highlight></codeline>
<codeline lineno="9125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyFile(fileName,<sp/>destFileName);</highlight></codeline>
<codeline lineno="9126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9130"><highlight class="normal"></highlight></codeline>
<codeline lineno="9131"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9132"><highlight class="normal"></highlight></codeline>
<codeline lineno="9133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d5/d84/class_parser_interface" kindref="compound" tooltip="Abstract interface for programming language parsers.">ParserInterface</ref><sp/>*getParserForFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn)</highlight></codeline>
<codeline lineno="9134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9135"><highlight class="normal"><sp/><sp/>QCString<sp/>fileName=fn;</highlight></codeline>
<codeline lineno="9136"><highlight class="normal"><sp/><sp/>QCString<sp/>extension;</highlight></codeline>
<codeline lineno="9137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ei<sp/>=<sp/>fileName.findRev(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ei!=-1)</highlight></codeline>
<codeline lineno="9139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9140"><highlight class="normal"><sp/><sp/><sp/><sp/>extension=fileName.right(fileName.length()-ei);</highlight></codeline>
<codeline lineno="9141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9144"><highlight class="normal"><sp/><sp/><sp/><sp/>extension<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.no_extension&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9146"><highlight class="normal"></highlight></codeline>
<codeline lineno="9147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1a69f9874c260df7559242ec5833051ac5" kindref="member" tooltip="Gets the interface to the parser associated with given extension.">getParser</ref>(extension);</highlight></codeline>
<codeline lineno="9148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9149"><highlight class="normal"></highlight></codeline>
<codeline lineno="9150"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseFile(<ref refid="d5/d84/class_parser_interface" kindref="compound" tooltip="Abstract interface for programming language parsers.">ParserInterface</ref><sp/>*parser,</highlight></codeline>
<codeline lineno="9151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root,<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav,<ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn,</highlight></codeline>
<codeline lineno="9152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sameTu,QStrList<sp/>&amp;filesInSameTu)</highlight></codeline>
<codeline lineno="9153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_LIBCLANG</highlight></codeline>
<codeline lineno="9155"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clangAssistedParsing<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CLANG_ASSISTED_PARSING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9156"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="9157"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clangAssistedParsing<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="9158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="9159"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>QCString<sp/>fileName=fn;</highlight></codeline>
<codeline lineno="9160"><highlight class="normal"><sp/><sp/>QCString<sp/>extension;</highlight></codeline>
<codeline lineno="9161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ei<sp/>=<sp/>fileName.findRev(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ei!=-1)</highlight></codeline>
<codeline lineno="9163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9164"><highlight class="normal"><sp/><sp/><sp/><sp/>extension=fileName.right(fileName.length()-ei);</highlight></codeline>
<codeline lineno="9165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9168"><highlight class="normal"><sp/><sp/><sp/><sp/>extension<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.no_extension&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9170"><highlight class="normal"></highlight></codeline>
<codeline lineno="9171"><highlight class="normal"><sp/><sp/>QFileInfo<sp/>fi(fileName);</highlight></codeline>
<codeline lineno="9172"><highlight class="normal"><sp/><sp/><ref refid="d5/d64/class_buf_str" kindref="compound" tooltip="Buffer used to store strings.">BufStr</ref><sp/>preBuf(fi.size()+4096);</highlight></codeline>
<codeline lineno="9173"><highlight class="normal"></highlight></codeline>
<codeline lineno="9174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;ENABLE_PREPROCESSING&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="9175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;<ref refid="d5/d84/class_parser_interface_1a36c669b17b64a6e3847f27d70a5398d2" kindref="member" tooltip="Returns TRUE if the language identified by extension needs the C preprocessor to be run before feed t...">needsPreprocessing</ref>(extension))</highlight></codeline>
<codeline lineno="9176"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d64/class_buf_str" kindref="compound" tooltip="Buffer used to store strings.">BufStr</ref><sp/>inBuf(fi.size()+4096);</highlight></codeline>
<codeline lineno="9178"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Preprocessing<sp/>%s...\n&quot;</highlight><highlight class="normal">,fn);</highlight></codeline>
<codeline lineno="9179"><highlight class="normal"><sp/><sp/><sp/><sp/>readInputFile(fileName,inBuf);</highlight></codeline>
<codeline lineno="9180"><highlight class="normal"><sp/><sp/><sp/><sp/>preprocessFile(fileName,inBuf,preBuf);</highlight></codeline>
<codeline lineno="9181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>preprocessing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9184"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Reading<sp/>%s...\n&quot;</highlight><highlight class="normal">,fn);</highlight></codeline>
<codeline lineno="9185"><highlight class="normal"><sp/><sp/><sp/><sp/>readInputFile(fileName,preBuf);</highlight></codeline>
<codeline lineno="9186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9187"><highlight class="normal"></highlight></codeline>
<codeline lineno="9188"><highlight class="normal"><sp/><sp/><ref refid="d5/d64/class_buf_str" kindref="compound" tooltip="Buffer used to store strings.">BufStr</ref><sp/>convBuf(preBuf.curPos()+1024);</highlight></codeline>
<codeline lineno="9189"><highlight class="normal"></highlight></codeline>
<codeline lineno="9190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>multi-line<sp/>C++<sp/>comments<sp/>to<sp/>C<sp/>style<sp/>comments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9191"><highlight class="normal"><sp/><sp/>convertCppComments(&amp;preBuf,&amp;convBuf,fileName);</highlight></codeline>
<codeline lineno="9192"><highlight class="normal"></highlight></codeline>
<codeline lineno="9193"><highlight class="normal"><sp/><sp/>convBuf.addChar(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9194"><highlight class="normal"></highlight></codeline>
<codeline lineno="9195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clangAssistedParsing<sp/>&amp;&amp;<sp/>!sameTu)</highlight></codeline>
<codeline lineno="9196"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9197"><highlight class="normal"><sp/><sp/><sp/><sp/>fd-&gt;getAllIncludeFilesRecursively(filesInSameTu);</highlight></codeline>
<codeline lineno="9198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9199"><highlight class="normal"></highlight></codeline>
<codeline lineno="9200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>language<sp/>parse<sp/>to<sp/>parse<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9201"><highlight class="normal"><sp/><sp/>parser-&gt;<ref refid="d5/d84/class_parser_interface_1a09ced377e619d40b7339187bad88341e" kindref="member" tooltip="Parses a single input file with the goal to build an Entry tree.">parseInput</ref>(fileName,convBuf.data(),root,sameTu,filesInSameTu);</highlight></codeline>
<codeline lineno="9202"><highlight class="normal"></highlight></codeline>
<codeline lineno="9203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>Entry<sp/>tree<sp/>in<sp/>a<sp/>file<sp/>and<sp/>create<sp/>an<sp/>index<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>navigate/load<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;root-&gt;createNavigationIndex<sp/>for<sp/>%s\n&quot;,fd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9206"><highlight class="normal"><sp/><sp/>root-&gt;createNavigationIndex(rootNav,g_storage,fd);</highlight></codeline>
<codeline lineno="9207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9208"><highlight class="normal"></highlight></codeline>
<codeline lineno="9210"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseFiles(<ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root,<ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav)</highlight></codeline>
<codeline lineno="9211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_LIBCLANG</highlight></codeline>
<codeline lineno="9213"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clangAssistedParsing<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CLANG_ASSISTED_PARSING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clangAssistedParsing)</highlight></codeline>
<codeline lineno="9215"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9216"><highlight class="normal"><sp/><sp/><sp/><sp/>QDict&lt;void&gt;<sp/>g_processedFiles(10007);</highlight></codeline>
<codeline lineno="9217"><highlight class="normal"></highlight></codeline>
<codeline lineno="9218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>dictionary<sp/>with<sp/>files<sp/>to<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9219"><highlight class="normal"><sp/><sp/><sp/><sp/>QDict&lt;void&gt;<sp/>g_filesToProcess(10007);</highlight></codeline>
<codeline lineno="9220"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*s=g_inputFiles.first();</highlight></codeline>
<codeline lineno="9221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="9222"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_filesToProcess.insert(*s,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s=g_inputFiles.next();</highlight></codeline>
<codeline lineno="9225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9226"><highlight class="normal"><sp/><sp/><sp/><sp/>s=g_inputFiles.first();</highlight></codeline>
<codeline lineno="9227"><highlight class="normal"></highlight></codeline>
<codeline lineno="9228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>source<sp/>files<sp/>(and<sp/>their<sp/>include<sp/>dependencies)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="9230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="9232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=findFileDef(Doxygen::inputNameDict,s-&gt;data(),ambig);</highlight></codeline>
<codeline lineno="9233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(fd!=0);</highlight></codeline>
<codeline lineno="9234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd-&gt;<ref refid="de/db0/class_file_def_1a55085b4099e8e80109dd8dd7ce87e5a5" kindref="member">isSource</ref>()<sp/>&amp;&amp;<sp/>!fd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>source<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>filesInSameTu;</highlight></codeline>
<codeline lineno="9237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d84/class_parser_interface" kindref="compound" tooltip="Abstract interface for programming language parsers.">ParserInterface</ref><sp/>*<sp/>parser<sp/>=<sp/>getParserForFile(s-&gt;data());</highlight></codeline>
<codeline lineno="9238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;<ref refid="d5/d84/class_parser_interface_1a72478f87ead5fde10d7d6bbe32a73024" kindref="member" tooltip="Starts processing a translation unit (source files + headers).">startTranslationUnit</ref>(s-&gt;data());</highlight></codeline>
<codeline lineno="9239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFile(parser,root,rootNav,fd,s-&gt;data(),FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="9240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>got<sp/>%d<sp/>extra<sp/>files<sp/>in<sp/>tu\n&quot;,filesInSameTu.count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9241"><highlight class="normal"></highlight></codeline>
<codeline lineno="9242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>process<sp/>any<sp/>include<sp/>files<sp/>in<sp/>the<sp/>same<sp/>translation<sp/>unit<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first.<sp/>When<sp/>libclang<sp/>is<sp/>used<sp/>this<sp/>is<sp/>much<sp/>more<sp/>efficient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*incFile<sp/>=<sp/>filesInSameTu.first();</highlight></codeline>
<codeline lineno="9245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(incFile<sp/>&amp;&amp;<sp/>g_filesToProcess.find(incFile))</highlight></codeline>
<codeline lineno="9246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstrcmp(incFile,s-&gt;data())<sp/>&amp;&amp;<sp/>!g_processedFiles.find(incFile))</highlight></codeline>
<codeline lineno="9248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*ifd=findFileDef(Doxygen::inputNameDict,incFile,ambig);</highlight></codeline>
<codeline lineno="9250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifd<sp/>&amp;&amp;<sp/>!ifd-&gt;<ref refid="d5/dcc/class_definition_1aeac1898371c546441cf689c1f66e359b" kindref="member">isReference</ref>())</highlight></codeline>
<codeline lineno="9251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>moreFiles;</highlight></codeline>
<codeline lineno="9253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>Processing<sp/>%s<sp/>in<sp/>same<sp/>translation<sp/>unit<sp/>as<sp/>%s\n&quot;,incFile,s-&gt;data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFile(parser,root,rootNav,ifd,incFile,TRUE,moreFiles);</highlight></codeline>
<codeline lineno="9255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_processedFiles.insert(incFile,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incFile<sp/>=<sp/>filesInSameTu.next();</highlight></codeline>
<codeline lineno="9259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;<ref refid="d5/d84/class_parser_interface_1af3acd64c6a33852e2e46e7288eb9c9cf" kindref="member" tooltip="Called after all files in a translation unit have been processed.">finishTranslationUnit</ref>();</highlight></codeline>
<codeline lineno="9261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_processedFiles.insert(*s,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s=g_inputFiles.next();</highlight></codeline>
<codeline lineno="9264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>remaining<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9266"><highlight class="normal"><sp/><sp/><sp/><sp/>s=g_inputFiles.first();</highlight></codeline>
<codeline lineno="9267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="9268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_processedFiles.find(*s))<sp/></highlight><highlight class="comment">//<sp/>not<sp/>yet<sp/>processed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="9272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>filesInSameTu;</highlight></codeline>
<codeline lineno="9273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=findFileDef(Doxygen::inputNameDict,s-&gt;data(),ambig);</highlight></codeline>
<codeline lineno="9274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(fd!=0);</highlight></codeline>
<codeline lineno="9275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d84/class_parser_interface" kindref="compound" tooltip="Abstract interface for programming language parsers.">ParserInterface</ref><sp/>*<sp/>parser<sp/>=<sp/>getParserForFile(s-&gt;data());</highlight></codeline>
<codeline lineno="9276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;<ref refid="d5/d84/class_parser_interface_1a72478f87ead5fde10d7d6bbe32a73024" kindref="member" tooltip="Starts processing a translation unit (source files + headers).">startTranslationUnit</ref>(s-&gt;data());</highlight></codeline>
<codeline lineno="9277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFile(parser,root,rootNav,fd,s-&gt;data(),FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="9278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;<ref refid="d5/d84/class_parser_interface_1af3acd64c6a33852e2e46e7288eb9c9cf" kindref="member" tooltip="Called after all files in a translation unit have been processed.">finishTranslationUnit</ref>();</highlight></codeline>
<codeline lineno="9279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_processedFiles.insert(*s,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s=g_inputFiles.next();</highlight></codeline>
<codeline lineno="9282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>normal<sp/>pocessing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="9286"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9287"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>*s=g_inputFiles.first();</highlight></codeline>
<codeline lineno="9288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="9289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ambig;</highlight></codeline>
<codeline lineno="9291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>filesInSameTu;</highlight></codeline>
<codeline lineno="9292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/>*fd=findFileDef(Doxygen::inputNameDict,s-&gt;data(),ambig);</highlight></codeline>
<codeline lineno="9293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(fd!=0);</highlight></codeline>
<codeline lineno="9294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d84/class_parser_interface" kindref="compound" tooltip="Abstract interface for programming language parsers.">ParserInterface</ref><sp/>*<sp/>parser<sp/>=<sp/>getParserForFile(s-&gt;data());</highlight></codeline>
<codeline lineno="9295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;<ref refid="d5/d84/class_parser_interface_1a72478f87ead5fde10d7d6bbe32a73024" kindref="member" tooltip="Starts processing a translation unit (source files + headers).">startTranslationUnit</ref>(s-&gt;data());</highlight></codeline>
<codeline lineno="9296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parseFile(parser,root,rootNav,fd,s-&gt;data(),FALSE,filesInSameTu);</highlight></codeline>
<codeline lineno="9297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s=g_inputFiles.next();</highlight></codeline>
<codeline lineno="9298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9301"><highlight class="normal"></highlight></codeline>
<codeline lineno="9302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>resolves<sp/>a<sp/>path<sp/>that<sp/>may<sp/>include<sp/>symlinks,<sp/>if<sp/>a<sp/>recursive<sp/>symlink<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>an<sp/>empty<sp/>string<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9304"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>resolveSymlink(QCString<sp/>path)</highlight></codeline>
<codeline lineno="9305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sepPos=0;</highlight></codeline>
<codeline lineno="9307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldPos=0;</highlight></codeline>
<codeline lineno="9308"><highlight class="normal"><sp/><sp/>QFileInfo<sp/>fi;</highlight></codeline>
<codeline lineno="9309"><highlight class="normal"><sp/><sp/>QDict&lt;void&gt;<sp/>nonSymlinks;</highlight></codeline>
<codeline lineno="9310"><highlight class="normal"><sp/><sp/>QDict&lt;void&gt;<sp/>known;</highlight></codeline>
<codeline lineno="9311"><highlight class="normal"><sp/><sp/>QCString<sp/>result<sp/>=<sp/>path;</highlight></codeline>
<codeline lineno="9312"><highlight class="normal"><sp/><sp/>QCString<sp/>oldPrefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9314"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9315"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="9316"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UNC<sp/>path,<sp/>skip<sp/>server<sp/>and<sp/>share<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sepPos==0<sp/>&amp;&amp;<sp/>(result.left(2)==</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal"><sp/>||<sp/>result.left(2)==</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="9318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepPos<sp/>=<sp/>result.find(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,2);</highlight></codeline>
<codeline lineno="9319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sepPos!=-1)<sp/></highlight></codeline>
<codeline lineno="9320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sepPos<sp/>=<sp/>result.find(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,sepPos+1);</highlight></codeline>
<codeline lineno="9321"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="9322"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>sepPos<sp/>=<sp/>result.find(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,sepPos+1);</highlight></codeline>
<codeline lineno="9323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="9324"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>prefix<sp/>=<sp/>sepPos==-1<sp/>?<sp/>result<sp/>:<sp/>result.left(sepPos);</highlight></codeline>
<codeline lineno="9325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonSymlinks.find(prefix)==0)</highlight></codeline>
<codeline lineno="9326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fi.setFile(prefix);</highlight></codeline>
<codeline lineno="9328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi.isSymLink())</highlight></codeline>
<codeline lineno="9329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/>target<sp/>=<sp/>fi.readLink();</highlight></codeline>
<codeline lineno="9331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRelative<sp/>=<sp/>QFileInfo(target).isRelative();</highlight></codeline>
<codeline lineno="9332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRelative)</highlight></codeline>
<codeline lineno="9333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>QDir::cleanDirPath(oldPrefix+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+target.data());</highlight></codeline>
<codeline lineno="9335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sepPos!=-1)</highlight></codeline>
<codeline lineno="9337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi.isDir()<sp/>&amp;&amp;<sp/>target.length()&gt;0<sp/>&amp;&amp;<sp/>target.at(target.length()-1)!=</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target+=</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target+=result.mid(sepPos);</highlight></codeline>
<codeline lineno="9343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>QDir::cleanDirPath(target).data();</highlight></codeline>
<codeline lineno="9345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(known.find(result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QCString();<sp/></highlight><highlight class="comment">//<sp/>recursive<sp/>symlink!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>known.insert(result,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isRelative)</highlight></codeline>
<codeline lineno="9349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepPos<sp/>=<sp/>oldPos;</highlight></codeline>
<codeline lineno="9351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>absolute<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sepPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldPrefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonSymlinks.insert(prefix,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldPrefix<sp/>=<sp/>prefix;</highlight></codeline>
<codeline lineno="9362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldPos<sp/>=<sp/>sepPos;</highlight></codeline>
<codeline lineno="9364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sepPos!=-1);</highlight></codeline>
<codeline lineno="9367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QDir::cleanDirPath(result).data();</highlight></codeline>
<codeline lineno="9368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9369"><highlight class="normal"></highlight></codeline>
<codeline lineno="9370"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QDict&lt;void&gt;<sp/>g_pathsVisited(1009);</highlight></codeline>
<codeline lineno="9371"><highlight class="normal"></highlight></codeline>
<codeline lineno="9372"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>all<sp/>files<sp/>matching<sp/>at<sp/>least<sp/>one<sp/>pattern<sp/>in<sp/>`patList&apos;<sp/>in<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>directory<sp/>represented<sp/>by<sp/>`fi&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>directory<sp/>is<sp/>read<sp/>iff<sp/>the<sp/>recusiveFlag<sp/>is<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>contents<sp/>of<sp/>all<sp/>files<sp/>is<sp/>append<sp/>to<sp/>the<sp/>input<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9377"><highlight class="normal"></highlight></codeline>
<codeline lineno="9378"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readDir(QFileInfo<sp/>*fi,</highlight></codeline>
<codeline lineno="9379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d8c/class_file_name_list" kindref="compound" tooltip="Class representing a list of FileName objects.">FileNameList</ref><sp/>*fnList,</highlight></codeline>
<codeline lineno="9380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/>*fnDict,</highlight></codeline>
<codeline lineno="9381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref><sp/><sp/>*exclDict,</highlight></codeline>
<codeline lineno="9382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>*patList,</highlight></codeline>
<codeline lineno="9383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>*exclPatList,</highlight></codeline>
<codeline lineno="9384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringList<sp/>*resultList,</highlight></codeline>
<codeline lineno="9385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref><sp/>*resultDict,</highlight></codeline>
<codeline lineno="9386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>errorIfNotExist,</highlight></codeline>
<codeline lineno="9387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursive,</highlight></codeline>
<codeline lineno="9388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;void&gt;<sp/>*killDict,</highlight></codeline>
<codeline lineno="9389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;void&gt;<sp/>*paths</highlight></codeline>
<codeline lineno="9390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="9391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9392"><highlight class="normal"><sp/><sp/>QCString<sp/>dirName<sp/>=<sp/>fi-&gt;absFilePath().utf8();</highlight></codeline>
<codeline lineno="9393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paths<sp/>&amp;&amp;<sp/>paths-&gt;find(dirName)==0)</highlight></codeline>
<codeline lineno="9394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9395"><highlight class="normal"><sp/><sp/><sp/><sp/>paths-&gt;insert(dirName,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi-&gt;isSymLink())</highlight></codeline>
<codeline lineno="9398"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9399"><highlight class="normal"><sp/><sp/><sp/><sp/>dirName<sp/>=<sp/>resolveSymlink(dirName.data());</highlight></codeline>
<codeline lineno="9400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dirName.isEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recusive<sp/>symlink</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_pathsVisited.find(dirName))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>already<sp/>visited<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9402"><highlight class="normal"><sp/><sp/><sp/><sp/>g_pathsVisited.insert(dirName,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9404"><highlight class="normal"><sp/><sp/>QDir<sp/>dir(dirName);</highlight></codeline>
<codeline lineno="9405"><highlight class="normal"><sp/><sp/>dir.setFilter(<sp/>QDir::Files<sp/>|<sp/>QDir::Dirs<sp/>|<sp/>QDir::Hidden<sp/>);</highlight></codeline>
<codeline lineno="9406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSize=0;</highlight></codeline>
<codeline lineno="9407"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>files<sp/>in<sp/>directory<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>fi-&gt;absFilePath().data());</highlight></codeline>
<codeline lineno="9408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;killDict=%p<sp/>count=%d\n&quot;,killDict,killDict-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9409"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="9410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QFileInfoList<sp/>*list<sp/>=<sp/>dir.entryInfoList();</highlight></codeline>
<codeline lineno="9411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list)</highlight></codeline>
<codeline lineno="9412"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9413"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfoListIterator<sp/>it(<sp/>*list<sp/>);</highlight></codeline>
<codeline lineno="9414"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>*cfi;</highlight></codeline>
<codeline lineno="9415"><highlight class="normal"></highlight></codeline>
<codeline lineno="9416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((cfi=it.current()))</highlight></codeline>
<codeline lineno="9417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exclDict==0<sp/>||<sp/>exclDict-&gt;find(cfi-&gt;absFilePath().utf8())==0)<sp/></highlight></codeline>
<codeline lineno="9419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>file<sp/>should<sp/>not<sp/>be<sp/>excluded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;killDict-&gt;find(%s)\n&quot;,cfi-&gt;absFilePath().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cfi-&gt;exists()<sp/>||<sp/>!cfi-&gt;isReadable())</highlight></codeline>
<codeline lineno="9422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errorIfNotExist)</highlight></codeline>
<codeline lineno="9424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;source<sp/>%s<sp/>is<sp/>not<sp/>a<sp/>readable<sp/>file<sp/>or<sp/>directory...<sp/>skipping.\n&quot;</highlight><highlight class="normal">,cfi-&gt;absFilePath().data());</highlight></codeline>
<codeline lineno="9426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cfi-&gt;isFile()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="9429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!Config_getBool(</highlight><highlight class="stringliteral">&quot;EXCLUDE_SYMLINKS&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!cfi-&gt;isSymLink())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(patList==0<sp/>||<sp/>patternMatch(*cfi,patList))<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="9431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!patternMatch(*cfi,exclPatList)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(killDict==0<sp/>||<sp/>killDict-&gt;find(cfi-&gt;absFilePath().utf8())==0)</highlight></codeline>
<codeline lineno="9433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="9434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize+=cfi-&gt;size()+cfi-&gt;absFilePath().length()+4;</highlight></codeline>
<codeline lineno="9436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>name=cfi-&gt;fileName().utf8();</highlight></codeline>
<codeline lineno="9437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;New<sp/>file<sp/>%s\n&quot;,name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fnDict)</highlight></codeline>
<codeline lineno="9439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/>*fd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref>(cfi-&gt;dirPath().utf8()+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn=0;</highlight></codeline>
<codeline lineno="9442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.isEmpty()<sp/>&amp;&amp;<sp/>(fn=(*fnDict)[name]))</highlight></codeline>
<codeline lineno="9443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn-&gt;append(fd);</highlight></codeline>
<codeline lineno="9445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref>(cfi-&gt;absFilePath().utf8(),name);</highlight></codeline>
<codeline lineno="9449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn-&gt;append(fd);</highlight></codeline>
<codeline lineno="9450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fnList)<sp/>fnList-&gt;inSort(fn);</highlight></codeline>
<codeline lineno="9451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnDict-&gt;insert(name,fn);</highlight></codeline>
<codeline lineno="9452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>*rs=0;</highlight></codeline>
<codeline lineno="9455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultList<sp/>||<sp/>resultDict)</highlight></codeline>
<codeline lineno="9456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rs=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QCString(cfi-&gt;absFilePath().utf8());</highlight></codeline>
<codeline lineno="9458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultList)<sp/>resultList-&gt;append(rs);</highlight></codeline>
<codeline lineno="9460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultDict)<sp/>resultDict-&gt;insert(cfi-&gt;absFilePath().utf8(),rs);</highlight></codeline>
<codeline lineno="9461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(killDict)<sp/>killDict-&gt;insert(cfi-&gt;absFilePath().utf8(),(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0x8);</highlight></codeline>
<codeline lineno="9462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recursive<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!Config_getBool(</highlight><highlight class="stringliteral">&quot;EXCLUDE_SYMLINKS&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!cfi-&gt;isSymLink())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfi-&gt;isDir()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="9466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!patternMatch(*cfi,exclPatList)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfi-&gt;fileName().at(0)!=</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>&quot;.&quot;<sp/>&quot;..&quot;<sp/>and<sp/>&quot;.dir&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfi-&gt;setFile(cfi-&gt;absFilePath());</highlight></codeline>
<codeline lineno="9470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize+=readDir(cfi,fnList,fnDict,exclDict,</highlight></codeline>
<codeline lineno="9471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patList,exclPatList,resultList,resultDict,errorIfNotExist,</highlight></codeline>
<codeline lineno="9472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recursive,killDict,paths);</highlight></codeline>
<codeline lineno="9473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="9476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totalSize;</highlight></codeline>
<codeline lineno="9479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9480"><highlight class="normal"></highlight></codeline>
<codeline lineno="9481"><highlight class="normal"></highlight></codeline>
<codeline lineno="9482"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>read<sp/>a<sp/>file<sp/>or<sp/>all<sp/>files<sp/>in<sp/>a<sp/>directory<sp/>and<sp/>append<sp/>their<sp/>contents<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>input<sp/>string.<sp/>The<sp/>names<sp/>of<sp/>the<sp/>files<sp/>are<sp/>appended<sp/>to<sp/>the<sp/>`fiList&apos;<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9485"><highlight class="normal"></highlight></codeline>
<codeline lineno="9486"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readFileOrDirectory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,</highlight></codeline>
<codeline lineno="9487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d8c/class_file_name_list" kindref="compound" tooltip="Class representing a list of FileName objects.">FileNameList</ref><sp/>*fnList,</highlight></codeline>
<codeline lineno="9488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref><sp/>*fnDict,</highlight></codeline>
<codeline lineno="9489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref><sp/>*exclDict,</highlight></codeline>
<codeline lineno="9490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>*patList,</highlight></codeline>
<codeline lineno="9491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QStrList<sp/>*exclPatList,</highlight></codeline>
<codeline lineno="9492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringList<sp/>*resultList,</highlight></codeline>
<codeline lineno="9493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref><sp/>*resultDict,</highlight></codeline>
<codeline lineno="9494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursive,</highlight></codeline>
<codeline lineno="9495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>errorIfNotExist,</highlight></codeline>
<codeline lineno="9496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;void&gt;<sp/>*killDict,</highlight></codeline>
<codeline lineno="9497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QDict&lt;void&gt;<sp/>*paths</highlight></codeline>
<codeline lineno="9498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="9499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;killDict=%p<sp/>count=%d\n&quot;,killDict,killDict-&gt;count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>trailing<sp/>slashes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9503"><highlight class="normal"><sp/><sp/>QCString<sp/>fs<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="9504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lc<sp/>=<sp/>fs.at(fs.length()-1);</highlight></codeline>
<codeline lineno="9505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lc==</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>lc==</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>fs<sp/>=<sp/>fs.left(fs.length()-1);</highlight></codeline>
<codeline lineno="9506"><highlight class="normal"></highlight></codeline>
<codeline lineno="9507"><highlight class="normal"><sp/><sp/>QFileInfo<sp/>fi(fs);</highlight></codeline>
<codeline lineno="9508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;readFileOrDirectory(%s)\n&quot;,s);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSize=0;</highlight></codeline>
<codeline lineno="9510"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exclDict==0<sp/>||<sp/>exclDict-&gt;find(fi.absFilePath().utf8())==0)</highlight></codeline>
<codeline lineno="9512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fi.exists()<sp/>||<sp/>!fi.isReadable())</highlight></codeline>
<codeline lineno="9514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errorIfNotExist)</highlight></codeline>
<codeline lineno="9516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;source<sp/>%s<sp/>is<sp/>not<sp/>a<sp/>readable<sp/>file<sp/>or<sp/>directory...<sp/>skipping.\n&quot;</highlight><highlight class="normal">,s);</highlight></codeline>
<codeline lineno="9518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Config_getBool(</highlight><highlight class="stringliteral">&quot;EXCLUDE_SYMLINKS&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!fi.isSymLink())</highlight></codeline>
<codeline lineno="9521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi.isFile())</highlight></codeline>
<codeline lineno="9523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>dirPath<sp/>=<sp/>fi.dirPath(TRUE).utf8();</highlight></codeline>
<codeline lineno="9525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>filePath<sp/>=<sp/>fi.absFilePath().utf8();</highlight></codeline>
<codeline lineno="9526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paths<sp/>&amp;&amp;<sp/>paths-&gt;find(dirPath))</highlight></codeline>
<codeline lineno="9527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paths-&gt;insert(dirPath,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0x8);</highlight></codeline>
<codeline lineno="9529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;killDict-&gt;find(%s)\n&quot;,fi.absFilePath().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(killDict==0<sp/>||<sp/>killDict-&gt;find(filePath)==0)</highlight></codeline>
<codeline lineno="9532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize+=fi.size()+fi.absFilePath().length()+4;<sp/></highlight><highlight class="comment">//readFile(&amp;fi,fiList,input);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fiList-&gt;inSort(new<sp/>FileInfo(fi));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>name=fi.fileName().utf8();</highlight></codeline>
<codeline lineno="9536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;New<sp/>file<sp/>%s\n&quot;,name.data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fnDict)</highlight></codeline>
<codeline lineno="9538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref><sp/><sp/>*fd=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/db0/class_file_def" kindref="compound" tooltip="A model of a file symbol.">FileDef</ref>(dirPath+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref><sp/>*fn=0;</highlight></codeline>
<codeline lineno="9541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.isEmpty()<sp/>&amp;&amp;<sp/>(fn=(*fnDict)[name]))</highlight></codeline>
<codeline lineno="9542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn-&gt;append(fd);</highlight></codeline>
<codeline lineno="9544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/db9/class_file_name" kindref="compound" tooltip="Class representing all files with a certain base name.">FileName</ref>(filePath,name);</highlight></codeline>
<codeline lineno="9548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fn-&gt;append(fd);</highlight></codeline>
<codeline lineno="9549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fnList)<sp/>fnList-&gt;inSort(fn);</highlight></codeline>
<codeline lineno="9550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnDict-&gt;insert(name,fn);</highlight></codeline>
<codeline lineno="9551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>*rs=0;</highlight></codeline>
<codeline lineno="9554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultList<sp/>||<sp/>resultDict)</highlight></codeline>
<codeline lineno="9555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rs=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QCString(filePath);</highlight></codeline>
<codeline lineno="9557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultList)<sp/>resultList-&gt;append(rs);</highlight></codeline>
<codeline lineno="9558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultDict)<sp/>resultDict-&gt;insert(filePath,rs);</highlight></codeline>
<codeline lineno="9559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9560"><highlight class="normal"></highlight></codeline>
<codeline lineno="9561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(killDict)<sp/>killDict-&gt;insert(fi.absFilePath().utf8(),(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0x8);</highlight></codeline>
<codeline lineno="9562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi.isDir())<sp/></highlight><highlight class="comment">//<sp/>readable<sp/>dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize+=readDir(&amp;fi,fnList,fnDict,exclDict,patList,</highlight></codeline>
<codeline lineno="9567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exclPatList,resultList,resultDict,errorIfNotExist,</highlight></codeline>
<codeline lineno="9568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recursive,killDict,paths);</highlight></codeline>
<codeline lineno="9569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totalSize;</highlight></codeline>
<codeline lineno="9574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9575"><highlight class="normal"></highlight></codeline>
<codeline lineno="9576"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9577"><highlight class="normal"></highlight></codeline>
<codeline lineno="9578"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>readFormulaRepository()</highlight></codeline>
<codeline lineno="9579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9580"><highlight class="normal"><sp/><sp/>QFile<sp/>f(Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">)+</highlight><highlight class="stringliteral">&quot;/formula.repository&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.open(IO_ReadOnly))<sp/></highlight><highlight class="comment">//<sp/>open<sp/>repository</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9582"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9583"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Reading<sp/>formula<sp/>repository...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9584"><highlight class="normal"><sp/><sp/><sp/><sp/>QTextStream<sp/>t(&amp;f);</highlight></codeline>
<codeline lineno="9585"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>line;</highlight></codeline>
<codeline lineno="9586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!t.eof())</highlight></codeline>
<codeline lineno="9587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line=t.readLine().utf8();</highlight></codeline>
<codeline lineno="9589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>se=line.find(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>find<sp/>name<sp/>and<sp/>text<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(se==-1)</highlight></codeline>
<codeline lineno="9591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;formula.repository<sp/>is<sp/>corrupted!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>formName<sp/>=<sp/>line.left(se);</highlight></codeline>
<codeline lineno="9598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>formText<sp/>=<sp/>line.right(line.length()-se-1);<sp/></highlight></codeline>
<codeline lineno="9599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/db0/class_formula" kindref="compound" tooltip="Class representing a formula in the output.">Formula</ref><sp/>*f=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/db0/class_formula" kindref="compound" tooltip="Class representing a formula in the output.">Formula</ref>(formText);</highlight></codeline>
<codeline lineno="9600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::formulaList-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="9601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::formulaList-&gt;append(f);</highlight></codeline>
<codeline lineno="9602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::formulaDict-&gt;insert(formText,f);</highlight></codeline>
<codeline lineno="9603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::formulaNameDict-&gt;insert(formName,f);</highlight></codeline>
<codeline lineno="9604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9608"><highlight class="normal"></highlight></codeline>
<codeline lineno="9609"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9610"><highlight class="normal"></highlight></codeline>
<codeline lineno="9611"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>expandAliases()</highlight></codeline>
<codeline lineno="9612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9613"><highlight class="normal"><sp/><sp/>QDictIterator&lt;QCString&gt;<sp/>adi(Doxygen::aliasDict);</highlight></codeline>
<codeline lineno="9614"><highlight class="normal"><sp/><sp/>QCString<sp/>*s;</highlight></codeline>
<codeline lineno="9615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(adi.toFirst();(s=adi.current());++adi)</highlight></codeline>
<codeline lineno="9616"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9617"><highlight class="normal"><sp/><sp/><sp/><sp/>*s<sp/>=<sp/>expandAlias(adi.currentKey(),*s);</highlight></codeline>
<codeline lineno="9618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9620"><highlight class="normal"></highlight></codeline>
<codeline lineno="9621"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9622"><highlight class="normal"></highlight></codeline>
<codeline lineno="9623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>escapeAliases()</highlight></codeline>
<codeline lineno="9624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9625"><highlight class="normal"><sp/><sp/>QDictIterator&lt;QCString&gt;<sp/>adi(Doxygen::aliasDict);</highlight></codeline>
<codeline lineno="9626"><highlight class="normal"><sp/><sp/>QCString<sp/>*s;</highlight></codeline>
<codeline lineno="9627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(adi.toFirst();(s=adi.current());++adi)</highlight></codeline>
<codeline lineno="9628"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9629"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>value=*s,newValue;</highlight></codeline>
<codeline lineno="9630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in,p=0;</highlight></codeline>
<codeline lineno="9631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>\n<sp/>in<sp/>the<sp/>alias<sp/>command<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((in=value.find(</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">,p))!=-1)</highlight></codeline>
<codeline lineno="9633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newValue+=value.mid(p,in-p);</highlight></codeline>
<codeline lineno="9635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>\n&apos;s<sp/>except<sp/>if<sp/>\n<sp/>is<sp/>part<sp/>of<sp/>a<sp/>built-in<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.mid(in,5)!=</highlight><highlight class="stringliteral">&quot;\\note&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="9637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.mid(in,5)!=</highlight><highlight class="stringliteral">&quot;\\name&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="9638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.mid(in,10)!=</highlight><highlight class="stringliteral">&quot;\\namespace&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="9639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value.mid(in,14)!=</highlight><highlight class="stringliteral">&quot;\\nosubgrouping&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight></codeline>
<codeline lineno="9641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newValue+=</highlight><highlight class="stringliteral">&quot;\\_linebr<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="9645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newValue+=</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p=in+2;</highlight></codeline>
<codeline lineno="9649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9650"><highlight class="normal"><sp/><sp/><sp/><sp/>newValue+=value.mid(p,value.length()-p);</highlight></codeline>
<codeline lineno="9651"><highlight class="normal"><sp/><sp/><sp/><sp/>*s=newValue;</highlight></codeline>
<codeline lineno="9652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Alias<sp/>%s<sp/>has<sp/>value<sp/>%s\n&quot;,adi.currentKey().data(),s-&gt;data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9655"><highlight class="normal"></highlight></codeline>
<codeline lineno="9656"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9657"><highlight class="normal"></highlight></codeline>
<codeline lineno="9658"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>readAliases()</highlight></codeline>
<codeline lineno="9659"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="9660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>aliases<sp/>to<sp/>a<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9661"><highlight class="normal"><sp/><sp/>Doxygen::aliasDict.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="9662"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;aliasList<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;ALIASES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=aliasList.first();</highlight></codeline>
<codeline lineno="9664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="9665"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::aliasDict[s]==0)</highlight></codeline>
<codeline lineno="9667"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>alias=s;</highlight></codeline>
<codeline lineno="9669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=alias.find(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0)</highlight></codeline>
<codeline lineno="9671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>name=alias.left(i).stripWhiteSpace();</highlight></codeline>
<codeline lineno="9673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>value=alias.right(alias.length()-i-1);</highlight></codeline>
<codeline lineno="9674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Alias:<sp/>found<sp/>name=`%s&apos;<sp/>value=`%s&apos;\n&quot;,name.data(),value.data());<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.isEmpty())</highlight></codeline>
<codeline lineno="9676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>*dn=Doxygen::aliasDict[name];</highlight></codeline>
<codeline lineno="9678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dn==0)<sp/></highlight><highlight class="comment">//<sp/>insert<sp/>new<sp/>alias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::aliasDict.insert(name,</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QCString(value));</highlight></codeline>
<codeline lineno="9681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>overwrite<sp/>previous<sp/>alias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dn=value;</highlight></codeline>
<codeline lineno="9685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9689"><highlight class="normal"><sp/><sp/><sp/><sp/>s=aliasList.next();</highlight></codeline>
<codeline lineno="9690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9691"><highlight class="normal"><sp/><sp/>expandAliases();</highlight></codeline>
<codeline lineno="9692"><highlight class="normal"><sp/><sp/>escapeAliases();</highlight></codeline>
<codeline lineno="9693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9694"><highlight class="normal"></highlight></codeline>
<codeline lineno="9695"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9696"><highlight class="normal"></highlight></codeline>
<codeline lineno="9697"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dumpSymbol(<ref refid="dc/d3c/class_f_text_stream" kindref="compound" tooltip="Simplified and optimized version of QTextStream.">FTextStream</ref><sp/>&amp;t,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d)</highlight></codeline>
<codeline lineno="9698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9699"><highlight class="normal"><sp/><sp/>QCString<sp/>anchor;</highlight></codeline>
<codeline lineno="9700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==Definition::TypeMember)</highlight></codeline>
<codeline lineno="9701"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*md<sp/>=<sp/>(<ref refid="da/d09/class_member_def" kindref="compound" tooltip="A model of a class/file/namespace member symbol.">MemberDef</ref><sp/>*)d;</highlight></codeline>
<codeline lineno="9703"><highlight class="normal"><sp/><sp/><sp/><sp/>anchor=</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">+md-&gt;<ref refid="da/d09/class_member_def_1a09dd84c129c5b2cdd39fca8d9ef096a8" kindref="member">anchor</ref>();</highlight></codeline>
<codeline lineno="9704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9705"><highlight class="normal"><sp/><sp/>QCString<sp/>scope;</highlight></codeline>
<codeline lineno="9706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;getOuterScope()<sp/>&amp;&amp;<sp/>d-&gt;getOuterScope()!=Doxygen::globalScope)<sp/></highlight></codeline>
<codeline lineno="9707"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9708"><highlight class="normal"><sp/><sp/><sp/><sp/>scope<sp/>=<sp/>d-&gt;getOuterScope()-&gt;<ref refid="d5/dcc/class_definition_1acabecdc6bfda2015811eed5f3436322d" kindref="member">getOutputFileBase</ref>()+Doxygen::htmlFileExtension;</highlight></codeline>
<codeline lineno="9709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9710"><highlight class="normal"><sp/><sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;REPLACE<sp/>INTO<sp/>symbols<sp/>(symbol_id,scope_id,name,file,line)<sp/>VALUES(&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9711"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>d-&gt;<ref refid="d5/dcc/class_definition_1acabecdc6bfda2015811eed5f3436322d" kindref="member">getOutputFileBase</ref>()+Doxygen::htmlFileExtension+anchor<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;,&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9712"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>scope<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;,&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9713"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>d-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;,&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9714"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>d-&gt;<ref refid="d5/dcc/class_definition_1ad399d0ee903e4102c479c2b099b0a051" kindref="member">getDefFileName</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;,&apos;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9715"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>d-&gt;<ref refid="d5/dcc/class_definition_1adf4945611e38928b4dd6846c912d4b3a" kindref="member">getDefLine</ref>()</highlight></codeline>
<codeline lineno="9716"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;);&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="9717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9718"><highlight class="normal"></highlight></codeline>
<codeline lineno="9719"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dumpSymbolMap()</highlight></codeline>
<codeline lineno="9720"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="9721"><highlight class="normal"><sp/><sp/>QFile<sp/>f(</highlight><highlight class="stringliteral">&quot;symbols.sql&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.open(IO_WriteOnly))</highlight></codeline>
<codeline lineno="9723"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9724"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d3c/class_f_text_stream" kindref="compound" tooltip="Simplified and optimized version of QTextStream.">FTextStream</ref><sp/>t(&amp;f);</highlight></codeline>
<codeline lineno="9725"><highlight class="normal"><sp/><sp/><sp/><sp/>QDictIterator&lt;DefinitionIntf&gt;<sp/>di(*Doxygen::symbolMap);</highlight></codeline>
<codeline lineno="9726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d4a/class_definition_intf" kindref="compound" tooltip="Abstract interface for a Definition or DefinitionList.">DefinitionIntf</ref><sp/>*intf;</highlight></codeline>
<codeline lineno="9727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;(intf=di.current());++di)</highlight></codeline>
<codeline lineno="9728"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intf-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==DefinitionIntf::TypeSymbolList)<sp/></highlight><highlight class="comment">//<sp/>list<sp/>of<sp/>symbols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0b/class_definition_list_iterator" kindref="compound" tooltip="An iterator for Definition objects in a DefinitionList.">DefinitionListIterator</ref><sp/>dli(*(<ref refid="da/d39/class_definition_list" kindref="compound" tooltip="A list of Definition objects.">DefinitionList</ref>*)intf);</highlight></codeline>
<codeline lineno="9732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d;</highlight></codeline>
<codeline lineno="9733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dli.toFirst();(d=dli.current());++dli)</highlight></codeline>
<codeline lineno="9735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumpSymbol(t,d);</highlight></codeline>
<codeline lineno="9737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>single<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*d<sp/>=<sp/>(<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*)intf;</highlight></codeline>
<codeline lineno="9742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d!=Doxygen::globalScope)<sp/>dumpSymbol(t,d);</highlight></codeline>
<codeline lineno="9743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9747"><highlight class="normal"></highlight></codeline>
<codeline lineno="9748"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9749"><highlight class="normal"></highlight></codeline>
<codeline lineno="9750"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dumpConfigAsXML()</highlight></codeline>
<codeline lineno="9751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9752"><highlight class="normal"><sp/><sp/>QFile<sp/>f(</highlight><highlight class="stringliteral">&quot;config.xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.open(IO_WriteOnly))</highlight></codeline>
<codeline lineno="9754"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9755"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d3c/class_f_text_stream" kindref="compound" tooltip="Simplified and optimized version of QTextStream.">FTextStream</ref><sp/>t(&amp;f);</highlight></codeline>
<codeline lineno="9756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1aebf15fc68e1b907ab56d68094735134e" kindref="member" tooltip="Write XML representation of the config file.">writeXML</ref>(t);</highlight></codeline>
<codeline lineno="9757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9759"><highlight class="normal"></highlight></codeline>
<codeline lineno="9760"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>usage<sp/>of<sp/>doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9762"><highlight class="normal"></highlight></codeline>
<codeline lineno="9763"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="9764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9765"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Doxygen<sp/>version<sp/>%s\nCopyright<sp/>Dimitri<sp/>van<sp/>Heesch<sp/>1997-2013\n\n&quot;</highlight><highlight class="normal">,versionString);</highlight></codeline>
<codeline lineno="9766"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;You<sp/>can<sp/>use<sp/>doxygen<sp/>in<sp/>a<sp/>number<sp/>of<sp/>ways:\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9767"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;1)<sp/>Use<sp/>doxygen<sp/>to<sp/>generate<sp/>a<sp/>template<sp/>configuration<sp/>file:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9768"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s<sp/>[-s]<sp/>-g<sp/>[configName]\n\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9769"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>If<sp/>-<sp/>is<sp/>used<sp/>for<sp/>configName<sp/>doxygen<sp/>will<sp/>write<sp/>to<sp/>standard<sp/>output.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9770"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;2)<sp/>Use<sp/>doxygen<sp/>to<sp/>update<sp/>an<sp/>old<sp/>configuration<sp/>file:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9771"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s<sp/>[-s]<sp/>-u<sp/>[configName]\n\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9772"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;3)<sp/>Use<sp/>doxygen<sp/>to<sp/>generate<sp/>documentation<sp/>using<sp/>an<sp/>existing<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9773"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;configuration<sp/>file:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9774"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s<sp/>[configName]\n\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9775"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>If<sp/>-<sp/>is<sp/>used<sp/>for<sp/>configName<sp/>doxygen<sp/>will<sp/>read<sp/>from<sp/>standard<sp/>input.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9776"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;4)<sp/>Use<sp/>doxygen<sp/>to<sp/>generate<sp/>a<sp/>template<sp/>file<sp/>controlling<sp/>the<sp/>layout<sp/>of<sp/>the\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9777"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>generated<sp/>documentation:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9778"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>%s<sp/>-l<sp/>layoutFileName.xml\n\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9779"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;5)<sp/>Use<sp/>doxygen<sp/>to<sp/>generate<sp/>a<sp/>template<sp/>style<sp/>sheet<sp/>file<sp/>for<sp/>RTF,<sp/>HTML<sp/>or<sp/>Latex.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9780"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>RTF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%s<sp/>-w<sp/>rtf<sp/>styleSheetFile\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9781"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>HTML:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>%s<sp/>-w<sp/>html<sp/>headerFile<sp/>footerFile<sp/>styleSheetFile<sp/>[configFile]\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9782"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>LaTeX:<sp/><sp/><sp/><sp/><sp/><sp/>%s<sp/>-w<sp/>latex<sp/>headerFile<sp/>footerFile<sp/>styleSheetFile<sp/>[configFile]\n\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9783"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;6)<sp/>Use<sp/>doxygen<sp/>to<sp/>generate<sp/>an<sp/>rtf<sp/>extensions<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9784"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>RTF:<sp/><sp/><sp/>%s<sp/>-e<sp/>rtf<sp/>extensionsFile\n\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="9785"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;If<sp/>-s<sp/>is<sp/>specified<sp/>the<sp/>comments<sp/>in<sp/>the<sp/>config<sp/>file<sp/>will<sp/>be<sp/>omitted.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9786"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;If<sp/>configName<sp/>is<sp/>omitted<sp/>`Doxyfile&apos;<sp/>will<sp/>be<sp/>used<sp/>as<sp/>a<sp/>default.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9787"><highlight class="normal"><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="9788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9789"><highlight class="normal"></highlight></codeline>
<codeline lineno="9790"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>argument<sp/>of<sp/>option<sp/>`c&apos;<sp/>from<sp/>the<sp/>comment<sp/>argument<sp/>list<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>option<sp/>index<sp/>`optind&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9793"><highlight class="normal"></highlight></codeline>
<codeline lineno="9794"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getArg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;optind)</highlight></codeline>
<codeline lineno="9795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=0;</highlight></codeline>
<codeline lineno="9797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstrlen(&amp;argv[optind][2])&gt;0)</highlight></codeline>
<codeline lineno="9798"><highlight class="normal"><sp/><sp/><sp/><sp/>s=&amp;argv[optind][2];</highlight></codeline>
<codeline lineno="9799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind+1&lt;argc<sp/>&amp;&amp;<sp/>argv[optind+1][0]!=</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9800"><highlight class="normal"><sp/><sp/><sp/><sp/>s=argv[++optind];</highlight></codeline>
<codeline lineno="9801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="9802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9803"><highlight class="normal"></highlight></codeline>
<codeline lineno="9804"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9805"><highlight class="normal"></highlight></codeline>
<codeline lineno="9806"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initDoxygen()</highlight></codeline>
<codeline lineno="9807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lang<sp/>=<sp/>portable_getenv(</highlight><highlight class="stringliteral">&quot;LC_ALL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lang)<sp/>portable_setenv(</highlight><highlight class="stringliteral">&quot;LANG&quot;</highlight><highlight class="normal">,lang);</highlight></codeline>
<codeline lineno="9810"><highlight class="normal"><sp/><sp/>setlocale(LC_ALL,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9811"><highlight class="normal"><sp/><sp/>setlocale(LC_CTYPE,</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>to<sp/>get<sp/>isspace(0xA0)==0,<sp/>needed<sp/>for<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9812"><highlight class="normal"><sp/><sp/>setlocale(LC_NUMERIC,</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9813"><highlight class="normal"></highlight></codeline>
<codeline lineno="9814"><highlight class="normal"><sp/><sp/>Doxygen::runningTime.start();</highlight></codeline>
<codeline lineno="9815"><highlight class="normal"><sp/><sp/>initPreprocessor();</highlight></codeline>
<codeline lineno="9816"><highlight class="normal"></highlight></codeline>
<codeline lineno="9817"><highlight class="normal"><sp/><sp/>Doxygen::parserManager<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/d0d/class_parser_manager" kindref="compound" tooltip="Manages programming language parsers.">ParserManager</ref>;</highlight></codeline>
<codeline lineno="9818"><highlight class="normal"><sp/><sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1ae532c1adf9e98fbafc25a415d56f9753" kindref="member" tooltip="Registers an additional parser.">registerParser</ref>(</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d32/class_c_language_scanner" kindref="compound" tooltip="C-like language parser using state-based lexical scanning.">CLanguageScanner</ref>,<sp/>TRUE);</highlight></codeline>
<codeline lineno="9819"><highlight class="normal"><sp/><sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1ae532c1adf9e98fbafc25a415d56f9753" kindref="member" tooltip="Registers an additional parser.">registerParser</ref>(</highlight><highlight class="stringliteral">&quot;python&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d7e/class_python_language_scanner" kindref="compound" tooltip="Python Language parser using state-based lexical scanning.">PythonLanguageScanner</ref>);</highlight></codeline>
<codeline lineno="9820"><highlight class="normal"><sp/><sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1ae532c1adf9e98fbafc25a415d56f9753" kindref="member" tooltip="Registers an additional parser.">registerParser</ref>(</highlight><highlight class="stringliteral">&quot;fortran&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/de4/class_fortran_language_scanner" kindref="compound" tooltip="Fortran language parser using state-based lexical scanning.">FortranLanguageScanner</ref>);</highlight></codeline>
<codeline lineno="9821"><highlight class="normal"><sp/><sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1ae532c1adf9e98fbafc25a415d56f9753" kindref="member" tooltip="Registers an additional parser.">registerParser</ref>(</highlight><highlight class="stringliteral">&quot;vhdl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/def/class_v_h_d_l_language_scanner" kindref="compound" tooltip="VHDL parser using state-based lexical scanning.">VHDLLanguageScanner</ref>);</highlight></codeline>
<codeline lineno="9822"><highlight class="normal"><sp/><sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1ae532c1adf9e98fbafc25a415d56f9753" kindref="member" tooltip="Registers an additional parser.">registerParser</ref>(</highlight><highlight class="stringliteral">&quot;dbusxml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d18/class_d_bus_x_m_l_scanner" kindref="compound" tooltip="D-Bus XML parser.">DBusXMLScanner</ref>);</highlight></codeline>
<codeline lineno="9823"><highlight class="normal"><sp/><sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1ae532c1adf9e98fbafc25a415d56f9753" kindref="member" tooltip="Registers an additional parser.">registerParser</ref>(</highlight><highlight class="stringliteral">&quot;tcl&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/de4/class_tcl_language_scanner" kindref="compound" tooltip="Tcl language parser using state-based lexical scanning.">TclLanguageScanner</ref>);</highlight></codeline>
<codeline lineno="9824"><highlight class="normal"><sp/><sp/>Doxygen::parserManager-&gt;<ref refid="d4/d0d/class_parser_manager_1ae532c1adf9e98fbafc25a415d56f9753" kindref="member" tooltip="Registers an additional parser.">registerParser</ref>(</highlight><highlight class="stringliteral">&quot;md&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d8f/class_markdown_file_parser" kindref="compound">MarkdownFileParser</ref>);</highlight></codeline>
<codeline lineno="9825"><highlight class="normal"></highlight></codeline>
<codeline lineno="9826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>any<sp/>additional<sp/>parsers<sp/>here...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9827"><highlight class="normal"></highlight></codeline>
<codeline lineno="9828"><highlight class="normal"><sp/><sp/>initDefaultExtensionMapping();</highlight></codeline>
<codeline lineno="9829"><highlight class="normal"><sp/><sp/>initClassMemberIndices();</highlight></codeline>
<codeline lineno="9830"><highlight class="normal"><sp/><sp/>initNamespaceMemberIndices();</highlight></codeline>
<codeline lineno="9831"><highlight class="normal"><sp/><sp/>initFileMemberIndices();</highlight></codeline>
<codeline lineno="9832"><highlight class="normal"></highlight></codeline>
<codeline lineno="9833"><highlight class="normal"><sp/><sp/>Doxygen::symbolMap<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QDict&lt;DefinitionIntf&gt;(50177);</highlight></codeline>
<codeline lineno="9834"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_LIBCLANG</highlight></codeline>
<codeline lineno="9835"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>Doxygen::clangUsrMap<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QDict&lt;Definition&gt;(50177);</highlight></codeline>
<codeline lineno="9836"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="9837"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>Doxygen::inputNameList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d8c/class_file_name_list" kindref="compound" tooltip="Class representing a list of FileName objects.">FileNameList</ref>;</highlight></codeline>
<codeline lineno="9838"><highlight class="normal"><sp/><sp/>Doxygen::inputNameList-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="9839"><highlight class="normal"><sp/><sp/>Doxygen::memberNameSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref>(10000);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9840"><highlight class="normal"><sp/><sp/>Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9841"><highlight class="normal"><sp/><sp/>Doxygen::functionNameSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d7e/class_member_name_s_dict" kindref="compound" tooltip="Sorted dictionary of MemberName objects.">MemberNameSDict</ref>(10000);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9842"><highlight class="normal"><sp/><sp/>Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9843"><highlight class="normal"><sp/><sp/>Doxygen::groupSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d32/class_group_s_dict" kindref="compound" tooltip="A sorted dictionary of GroupDef objects.">GroupSDict</ref>(17);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9844"><highlight class="normal"><sp/><sp/>Doxygen::groupSDict-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9845"><highlight class="normal"><sp/><sp/>Doxygen::globalScope<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d07/class_namespace_def" kindref="compound" tooltip="A model of a namespace symbol.">NamespaceDef</ref>(</highlight><highlight class="stringliteral">&quot;&lt;globalScope&gt;&quot;</highlight><highlight class="normal">,1,1,</highlight><highlight class="stringliteral">&quot;&lt;globalScope&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9846"><highlight class="normal"><sp/><sp/>Doxygen::namespaceSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/d8d/class_namespace_s_dict" kindref="compound" tooltip="A sorted dictionary of NamespaceDef objects.">NamespaceSDict</ref>(20);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9847"><highlight class="normal"><sp/><sp/>Doxygen::namespaceSDict-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9848"><highlight class="normal"><sp/><sp/>Doxygen::classSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d3d/class_class_s_dict" kindref="compound" tooltip="A sorted dictionary of ClassDef objects.">ClassSDict</ref>(1009);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9849"><highlight class="normal"><sp/><sp/>Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9850"><highlight class="normal"><sp/><sp/>Doxygen::hiddenClasses<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d3d/class_class_s_dict" kindref="compound" tooltip="A sorted dictionary of ClassDef objects.">ClassSDict</ref>(257);</highlight></codeline>
<codeline lineno="9851"><highlight class="normal"><sp/><sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9852"><highlight class="normal"><sp/><sp/>Doxygen::directories<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/dc8/class_dir_s_dict" kindref="compound" tooltip="A sorted dictionary of DirDef objects.">DirSDict</ref>(17);</highlight></codeline>
<codeline lineno="9853"><highlight class="normal"><sp/><sp/>Doxygen::directories-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9854"><highlight class="normal"><sp/><sp/>Doxygen::pageSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d59/class_page_s_dict" kindref="compound">PageSDict</ref>(1009);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>doc<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9855"><highlight class="normal"><sp/><sp/>Doxygen::pageSDict-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9856"><highlight class="normal"><sp/><sp/>Doxygen::exampleSDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d59/class_page_s_dict" kindref="compound">PageSDict</ref>(1009);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>examples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9857"><highlight class="normal"><sp/><sp/>Doxygen::exampleSDict-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9858"><highlight class="normal"><sp/><sp/>Doxygen::inputNameDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref>(10007);</highlight></codeline>
<codeline lineno="9859"><highlight class="normal"><sp/><sp/>Doxygen::includeNameDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref>(10007);</highlight></codeline>
<codeline lineno="9860"><highlight class="normal"><sp/><sp/>Doxygen::exampleNameDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref>(1009);</highlight></codeline>
<codeline lineno="9861"><highlight class="normal"><sp/><sp/>Doxygen::exampleNameDict-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="9862"><highlight class="normal"><sp/><sp/>Doxygen::imageNameDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref>(257);</highlight></codeline>
<codeline lineno="9863"><highlight class="normal"><sp/><sp/>Doxygen::imageNameDict-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="9864"><highlight class="normal"><sp/><sp/>Doxygen::dotFileNameDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref>(257);</highlight></codeline>
<codeline lineno="9865"><highlight class="normal"><sp/><sp/>Doxygen::mscFileNameDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d0f/class_file_name_dict" kindref="compound" tooltip="Unsorted dictionary of FileName objects.">FileNameDict</ref>(257);</highlight></codeline>
<codeline lineno="9866"><highlight class="normal"><sp/><sp/>Doxygen::memGrpInfoDict.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="9867"><highlight class="normal"><sp/><sp/>Doxygen::tagDestinationDict.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="9868"><highlight class="normal"><sp/><sp/>Doxygen::dirRelations.<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9869"><highlight class="normal"><sp/><sp/>Doxygen::citeDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/dd4/class_cite_dict" kindref="compound" tooltip="Cite database access class.">CiteDict</ref>(257);</highlight></codeline>
<codeline lineno="9870"><highlight class="normal"><sp/><sp/>Doxygen::genericsDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d1b/class_generics_s_dict" kindref="compound">GenericsSDict</ref>;</highlight></codeline>
<codeline lineno="9871"><highlight class="normal"><sp/><sp/>Doxygen::indexList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d57/class_index_list" kindref="compound" tooltip="A list of index interfaces.">IndexList</ref>;</highlight></codeline>
<codeline lineno="9872"><highlight class="normal"><sp/><sp/>Doxygen::formulaList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/dd0/class_formula_list" kindref="compound" tooltip="A list of Formula objects.">FormulaList</ref>;</highlight></codeline>
<codeline lineno="9873"><highlight class="normal"><sp/><sp/>Doxygen::formulaDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/dd0/class_formula_dict" kindref="compound" tooltip="Unsorted dictionary of Formula objects.">FormulaDict</ref>(1009);</highlight></codeline>
<codeline lineno="9874"><highlight class="normal"><sp/><sp/>Doxygen::formulaNameDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/dd0/class_formula_dict" kindref="compound" tooltip="Unsorted dictionary of Formula objects.">FormulaDict</ref>(1009);</highlight></codeline>
<codeline lineno="9875"><highlight class="normal"><sp/><sp/>Doxygen::sectionDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d9a/class_section_dict" kindref="compound" tooltip="Unsorted dictionary of SectionInfo objects.">SectionDict</ref>(257);</highlight></codeline>
<codeline lineno="9876"><highlight class="normal"><sp/><sp/>Doxygen::sectionDict-&gt;<ref refid="d1/d50/class_s_dict_1ac5ed340a2e6b4b4fb8398254cd35ef55" kindref="member">setAutoDelete</ref>(TRUE);</highlight></codeline>
<codeline lineno="9877"><highlight class="normal"></highlight></codeline>
<codeline lineno="9878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="9879"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialize<sp/>some<sp/>global<sp/>constants</highlight></codeline>
<codeline lineno="9880"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9881"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="9882"><highlight class="normal"><sp/><sp/>g_compoundKeywordDict.insert(</highlight><highlight class="stringliteral">&quot;template<sp/>class&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)8);</highlight></codeline>
<codeline lineno="9883"><highlight class="normal"><sp/><sp/>g_compoundKeywordDict.insert(</highlight><highlight class="stringliteral">&quot;template<sp/>struct&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)8);</highlight></codeline>
<codeline lineno="9884"><highlight class="normal"><sp/><sp/>g_compoundKeywordDict.insert(</highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)8);</highlight></codeline>
<codeline lineno="9885"><highlight class="normal"><sp/><sp/>g_compoundKeywordDict.insert(</highlight><highlight class="stringliteral">&quot;struct&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)8);</highlight></codeline>
<codeline lineno="9886"><highlight class="normal"><sp/><sp/>g_compoundKeywordDict.insert(</highlight><highlight class="stringliteral">&quot;union&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)8);</highlight></codeline>
<codeline lineno="9887"><highlight class="normal"><sp/><sp/>g_compoundKeywordDict.insert(</highlight><highlight class="stringliteral">&quot;interface&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)8);</highlight></codeline>
<codeline lineno="9888"><highlight class="normal"><sp/><sp/>g_compoundKeywordDict.insert(</highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)8);</highlight></codeline>
<codeline lineno="9889"><highlight class="normal"></highlight></codeline>
<codeline lineno="9890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9891"><highlight class="normal"></highlight></codeline>
<codeline lineno="9892"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanUpDoxygen()</highlight></codeline>
<codeline lineno="9893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::sectionDict;</highlight></codeline>
<codeline lineno="9895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::formulaNameDict;</highlight></codeline>
<codeline lineno="9896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::formulaDict;</highlight></codeline>
<codeline lineno="9897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::formulaList;</highlight></codeline>
<codeline lineno="9898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::indexList;</highlight></codeline>
<codeline lineno="9899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::genericsDict;</highlight></codeline>
<codeline lineno="9900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::inputNameDict;</highlight></codeline>
<codeline lineno="9901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::includeNameDict;</highlight></codeline>
<codeline lineno="9902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::exampleNameDict;</highlight></codeline>
<codeline lineno="9903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::imageNameDict;</highlight></codeline>
<codeline lineno="9904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::dotFileNameDict;</highlight></codeline>
<codeline lineno="9905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::mscFileNameDict;</highlight></codeline>
<codeline lineno="9906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::mainPage;</highlight></codeline>
<codeline lineno="9907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::pageSDict;<sp/><sp/></highlight></codeline>
<codeline lineno="9908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::exampleSDict;</highlight></codeline>
<codeline lineno="9909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::globalScope;</highlight></codeline>
<codeline lineno="9910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::xrefLists;</highlight></codeline>
<codeline lineno="9911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::parserManager;</highlight></codeline>
<codeline lineno="9912"><highlight class="normal"><sp/><sp/>cleanUpPreprocessor();</highlight></codeline>
<codeline lineno="9913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>theTranslator;</highlight></codeline>
<codeline lineno="9914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>g_outputList;</highlight></codeline>
<codeline lineno="9915"><highlight class="normal"><sp/><sp/>Mappers::freeMappers();</highlight></codeline>
<codeline lineno="9916"><highlight class="normal"><sp/><sp/>codeFreeScanner();</highlight></codeline>
<codeline lineno="9917"><highlight class="normal"></highlight></codeline>
<codeline lineno="9918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::symbolMap)</highlight></codeline>
<codeline lineno="9919"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>through<sp/>Doxygen::symbolMap<sp/>and<sp/>delete<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DefinitionList<sp/>objects,<sp/>since<sp/>they<sp/>have<sp/>no<sp/>owner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9922"><highlight class="normal"><sp/><sp/><sp/><sp/>QDictIterator&lt;DefinitionIntf&gt;<sp/>dli(*Doxygen::symbolMap);</highlight></codeline>
<codeline lineno="9923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d4a/class_definition_intf" kindref="compound" tooltip="Abstract interface for a Definition or DefinitionList.">DefinitionIntf</ref><sp/>*di;</highlight></codeline>
<codeline lineno="9924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dli.toFirst();(di=dli.current());)</highlight></codeline>
<codeline lineno="9925"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di-&gt;<ref refid="d9/d4a/class_definition_intf_1ac8ee00bc1af5558ae37f6896d16f5a3a" kindref="member">definitionType</ref>()==DefinitionIntf::TypeSymbolList)</highlight></codeline>
<codeline lineno="9927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d4a/class_definition_intf" kindref="compound" tooltip="Abstract interface for a Definition or DefinitionList.">DefinitionIntf</ref><sp/>*tmp<sp/>=<sp/>Doxygen::symbolMap-&gt;take(dli.currentKey());</highlight></codeline>
<codeline lineno="9929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(<ref refid="da/d39/class_definition_list" kindref="compound" tooltip="A list of Definition objects.">DefinitionList</ref><sp/>*)tmp;</highlight></codeline>
<codeline lineno="9930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++dli;</highlight></codeline>
<codeline lineno="9934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9935"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="9936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9937"><highlight class="normal"></highlight></codeline>
<codeline lineno="9938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::inputNameList;</highlight></codeline>
<codeline lineno="9939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::memberNameSDict;</highlight></codeline>
<codeline lineno="9940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::functionNameSDict;</highlight></codeline>
<codeline lineno="9941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::groupSDict;</highlight></codeline>
<codeline lineno="9942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::classSDict;</highlight></codeline>
<codeline lineno="9943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::hiddenClasses;</highlight></codeline>
<codeline lineno="9944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::namespaceSDict;</highlight></codeline>
<codeline lineno="9945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::directories;</highlight></codeline>
<codeline lineno="9946"><highlight class="normal"></highlight></codeline>
<codeline lineno="9947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//delete<sp/>Doxygen::symbolMap;<sp/>&lt;-<sp/>we<sp/>cannot<sp/>do<sp/>this<sp/>unless<sp/>all<sp/>static<sp/>lists<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(such<sp/>as<sp/>Doxygen::namespaceSDict)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>objects<sp/>based<sp/>on<sp/>Definition<sp/>are<sp/>made</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9952"><highlight class="normal"></highlight></codeline>
<codeline lineno="9953"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>computeIdealCacheParam(uint<sp/>v)</highlight></codeline>
<codeline lineno="9954"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;computeIdealCacheParam(v=%u)\n&quot;,v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9956"><highlight class="normal"></highlight></codeline>
<codeline lineno="9957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r=0;</highlight></codeline>
<codeline lineno="9958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(v!=0)<sp/>v&gt;&gt;=1,r++;<sp/></highlight></codeline>
<codeline lineno="9959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>r<sp/>=<sp/>log2(v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9960"><highlight class="normal"></highlight></codeline>
<codeline lineno="9961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>a<sp/>valid<sp/>cache<sp/>size<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QMAX(0,QMIN(r-16,9));</highlight></codeline>
<codeline lineno="9963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9964"><highlight class="normal"></highlight></codeline>
<codeline lineno="9965"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>readConfiguration(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="9966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="9968"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handle<sp/>arguments<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9969"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9970"><highlight class="normal"></highlight></codeline>
<codeline lineno="9971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>optind=1;</highlight></codeline>
<codeline lineno="9972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*configName=0;</highlight></codeline>
<codeline lineno="9973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*layoutName=0;</highlight></codeline>
<codeline lineno="9974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*debugLabel;</highlight></codeline>
<codeline lineno="9975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*formatName;</highlight></codeline>
<codeline lineno="9976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>genConfig=FALSE;</highlight></codeline>
<codeline lineno="9977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shortList=FALSE;</highlight></codeline>
<codeline lineno="9978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateConfig=FALSE;</highlight></codeline>
<codeline lineno="9979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>genLayout=FALSE;</highlight></codeline>
<codeline lineno="9980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(optind&lt;argc<sp/>&amp;&amp;<sp/>argv[optind][0]==</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="9981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isalpha(argv[optind][1])<sp/>||<sp/>argv[optind][1]==</highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="9982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv[optind][1]==</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="9984"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="9985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(argv[optind][1])</highlight></codeline>
<codeline lineno="9986"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genConfig=TRUE;</highlight></codeline>
<codeline lineno="9989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configName=getArg(argc,argv,optind);</highlight></codeline>
<codeline lineno="9990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind+1&lt;argc<sp/>&amp;&amp;<sp/>qstrcmp(argv[optind+1],</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="9991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>configName=</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;<sp/>optind++;<sp/>}</highlight></codeline>
<codeline lineno="9992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!configName)<sp/></highlight></codeline>
<codeline lineno="9993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>configName=</highlight><highlight class="stringliteral">&quot;Doxyfile&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="9994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genLayout=TRUE;</highlight></codeline>
<codeline lineno="9997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutName=getArg(argc,argv,optind);</highlight></codeline>
<codeline lineno="9998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layoutName)</highlight></codeline>
<codeline lineno="9999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>layoutName=</highlight><highlight class="stringliteral">&quot;DoxygenLayout.xml&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debugLabel=getArg(argc,argv,optind);</highlight></codeline>
<codeline lineno="10003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug::setFlag(debugLabel);</highlight></codeline>
<codeline lineno="10004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortList=TRUE;</highlight></codeline>
<codeline lineno="10007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateConfig=TRUE;</highlight></codeline>
<codeline lineno="10010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formatName=getArg(argc,argv,optind);</highlight></codeline>
<codeline lineno="10013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!formatName)</highlight></codeline>
<codeline lineno="10014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;option<sp/>-e<sp/>is<sp/>missing<sp/>format<sp/>specifier<sp/>rtf.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstricmp(formatName,</highlight><highlight class="stringliteral">&quot;rtf&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="10020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind+1&gt;=argc)</highlight></codeline>
<codeline lineno="10022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;option<sp/>\&quot;-e<sp/>rtf\&quot;<sp/>is<sp/>missing<sp/>an<sp/>extensions<sp/>file<sp/>name\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QFile<sp/>f;</highlight></codeline>
<codeline lineno="10028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openOutputFile(argv[optind+1],f))</highlight></codeline>
<codeline lineno="10029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTFGenerator::writeExtensionsFile(f);</highlight></codeline>
<codeline lineno="10031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;option<sp/>\&quot;-e\&quot;<sp/>has<sp/>invalid<sp/>format<sp/>specifier.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="10039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formatName=getArg(argc,argv,optind);</highlight></codeline>
<codeline lineno="10041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!formatName)</highlight></codeline>
<codeline lineno="10042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;option<sp/>-w<sp/>is<sp/>missing<sp/>format<sp/>specifier<sp/>rtf,<sp/>html<sp/>or<sp/>latex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="10047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstricmp(formatName,</highlight><highlight class="stringliteral">&quot;rtf&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="10048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind+1&gt;=argc)</highlight></codeline>
<codeline lineno="10050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;option<sp/>\&quot;-w<sp/>rtf\&quot;<sp/>is<sp/>missing<sp/>a<sp/>style<sp/>sheet<sp/>file<sp/>name\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QFile<sp/>f;</highlight></codeline>
<codeline lineno="10056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openOutputFile(argv[optind+1],f))</highlight></codeline>
<codeline lineno="10057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTFGenerator::writeStyleSheetFile(f);</highlight></codeline>
<codeline lineno="10059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstricmp(formatName,</highlight><highlight class="stringliteral">&quot;html&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="10064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind+4&lt;argc<sp/>||<sp/>QFileInfo(</highlight><highlight class="stringliteral">&quot;Doxyfile&quot;</highlight><highlight class="normal">).exists())</highlight></codeline>
<codeline lineno="10066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>df<sp/>=<sp/>optind+4&lt;argc<sp/>?<sp/>argv[optind+4]<sp/>:<sp/>QCString(</highlight><highlight class="stringliteral">&quot;Doxyfile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;parse(df))</highlight></codeline>
<codeline lineno="10069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;error<sp/>opening<sp/>or<sp/>reading<sp/>configuration<sp/>file<sp/>%s!\n&quot;</highlight><highlight class="normal">,argv[optind+4]);</highlight></codeline>
<codeline lineno="10071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a6b714f42522fe1359a3ae30fef026d9b" kindref="member">substituteEnvironmentVars</ref>();</highlight></codeline>
<codeline lineno="10075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a0be224084aa38a9d479ed0260baf27a6" kindref="member">convertStrToVal</ref>();</highlight></codeline>
<codeline lineno="10076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>bootstrapping<sp/>issues<sp/>when<sp/>the<sp/>config<sp/>file<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>refers<sp/>to<sp/>the<sp/>files<sp/>that<sp/>we<sp/>are<sp/>supposed<sp/>to<sp/>parse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_HEADER&quot;</highlight><highlight class="normal">)=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_FOOTER&quot;</highlight><highlight class="normal">)=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a2d04091f571813bab7171cf713917aff" kindref="member">check</ref>();</highlight></codeline>
<codeline lineno="10081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a91bcb187ed95ec673137e413a4d77203" kindref="member">init</ref>();</highlight></codeline>
<codeline lineno="10085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind+3&gt;=argc)</highlight></codeline>
<codeline lineno="10087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;option<sp/>\&quot;-w<sp/>html\&quot;<sp/>does<sp/>not<sp/>have<sp/>enough<sp/>arguments\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10092"><highlight class="normal"></highlight></codeline>
<codeline lineno="10093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>outputLanguage=Config_getEnum(</highlight><highlight class="stringliteral">&quot;OUTPUT_LANGUAGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!setTranslator(outputLanguage))</highlight></codeline>
<codeline lineno="10095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;Output<sp/>language<sp/>%s<sp/>not<sp/>supported!<sp/>Using<sp/>English<sp/>instead.\n&quot;</highlight><highlight class="normal">,<sp/>outputLanguage.data());</highlight></codeline>
<codeline lineno="10097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10098"><highlight class="normal"></highlight></codeline>
<codeline lineno="10099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QFile<sp/>f;</highlight></codeline>
<codeline lineno="10100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openOutputFile(argv[optind+1],f))</highlight></codeline>
<codeline lineno="10101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HtmlGenerator::writeHeaderFile(f,<sp/>argv[optind+3]);</highlight></codeline>
<codeline lineno="10103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.close();</highlight></codeline>
<codeline lineno="10105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openOutputFile(argv[optind+2],f))</highlight></codeline>
<codeline lineno="10106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HtmlGenerator::writeFooterFile(f);</highlight></codeline>
<codeline lineno="10108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.close();</highlight></codeline>
<codeline lineno="10110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openOutputFile(argv[optind+3],f))</highlight></codeline>
<codeline lineno="10111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HtmlGenerator::writeStyleSheetFile(f);</highlight></codeline>
<codeline lineno="10113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="10114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="10116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstricmp(formatName,</highlight><highlight class="stringliteral">&quot;latex&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="10118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind+4&lt;argc)<sp/></highlight><highlight class="comment">//<sp/>use<sp/>config<sp/>file<sp/>to<sp/>get<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;parse(argv[optind+4]))</highlight></codeline>
<codeline lineno="10122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;error<sp/>opening<sp/>or<sp/>reading<sp/>configuration<sp/>file<sp/>%s!\n&quot;</highlight><highlight class="normal">,argv[optind+4]);</highlight></codeline>
<codeline lineno="10124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a6b714f42522fe1359a3ae30fef026d9b" kindref="member">substituteEnvironmentVars</ref>();</highlight></codeline>
<codeline lineno="10127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a0be224084aa38a9d479ed0260baf27a6" kindref="member">convertStrToVal</ref>();</highlight></codeline>
<codeline lineno="10128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;LATEX_HEADER&quot;</highlight><highlight class="normal">)=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a2d04091f571813bab7171cf713917aff" kindref="member">check</ref>();</highlight></codeline>
<codeline lineno="10130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>use<sp/>default<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a91bcb187ed95ec673137e413a4d77203" kindref="member">init</ref>();</highlight></codeline>
<codeline lineno="10134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind+3&gt;=argc)</highlight></codeline>
<codeline lineno="10136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;option<sp/>\&quot;-w<sp/>latex\&quot;<sp/>does<sp/>not<sp/>have<sp/>enough<sp/>arguments\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10141"><highlight class="normal"></highlight></codeline>
<codeline lineno="10142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>outputLanguage=Config_getEnum(</highlight><highlight class="stringliteral">&quot;OUTPUT_LANGUAGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!setTranslator(outputLanguage))</highlight></codeline>
<codeline lineno="10144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;Output<sp/>language<sp/>%s<sp/>not<sp/>supported!<sp/>Using<sp/>English<sp/>instead.\n&quot;</highlight><highlight class="normal">,<sp/>outputLanguage.data());</highlight></codeline>
<codeline lineno="10146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10147"><highlight class="normal"></highlight></codeline>
<codeline lineno="10148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QFile<sp/>f;</highlight></codeline>
<codeline lineno="10149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openOutputFile(argv[optind+1],f))</highlight></codeline>
<codeline lineno="10150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LatexGenerator::writeHeaderFile(f);</highlight></codeline>
<codeline lineno="10152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.close();</highlight></codeline>
<codeline lineno="10154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openOutputFile(argv[optind+2],f))</highlight></codeline>
<codeline lineno="10155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LatexGenerator::writeFooterFile(f);</highlight></codeline>
<codeline lineno="10157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.close();</highlight></codeline>
<codeline lineno="10159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(openOutputFile(argv[optind+3],f))</highlight></codeline>
<codeline lineno="10160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LatexGenerator::writeStyleSheetFile(f);</highlight></codeline>
<codeline lineno="10162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="10165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Illegal<sp/>format<sp/>specifier<sp/>%s:<sp/>should<sp/>be<sp/>one<sp/>of<sp/>rtf,<sp/>html,<sp/>latex,<sp/>or<sp/>bst\n&quot;</highlight><highlight class="normal">,formatName);</highlight></codeline>
<codeline lineno="10169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_dumpSymbolMap<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="10175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_dumpConfigAsXML<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="10178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstrcmp(&amp;argv[optind][2],</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="10181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage(argv[0]);</highlight></codeline>
<codeline lineno="10183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstrcmp(&amp;argv[optind][2],</highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="10185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,versionString);<sp/></highlight></codeline>
<codeline lineno="10187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="10189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setvbuf(stdout,NULL,_IONBF,0);</highlight></codeline>
<codeline lineno="10193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::outputToWizard=TRUE;</highlight></codeline>
<codeline lineno="10194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage(argv[0]);</highlight></codeline>
<codeline lineno="10198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>option<sp/>-%c\n&quot;</highlight><highlight class="normal">,argv[optind][1]);</highlight></codeline>
<codeline lineno="10201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage(argv[0]);</highlight></codeline>
<codeline lineno="10202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10203"><highlight class="normal"><sp/><sp/><sp/><sp/>optind++;</highlight></codeline>
<codeline lineno="10204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10205"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10207"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parse<sp/>or<sp/>generate<sp/>the<sp/>config<sp/>file<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10208"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10209"><highlight class="normal"></highlight></codeline>
<codeline lineno="10210"><highlight class="normal"><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a91bcb187ed95ec673137e413a4d77203" kindref="member">init</ref>();</highlight></codeline>
<codeline lineno="10211"><highlight class="normal"></highlight></codeline>
<codeline lineno="10212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genConfig)</highlight></codeline>
<codeline lineno="10213"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_dumpConfigAsXML)</highlight></codeline>
<codeline lineno="10215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checkConfiguration();</highlight></codeline>
<codeline lineno="10217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>generateConfigFile(configName,shortList);</highlight></codeline>
<codeline lineno="10218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dumpConfigAsXML();</highlight></codeline>
<codeline lineno="10219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);<sp/></highlight></codeline>
<codeline lineno="10220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10222"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>generateConfigFile(configName,shortList);</highlight></codeline>
<codeline lineno="10224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10225"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10226"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="10227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(genLayout)</highlight></codeline>
<codeline lineno="10229"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10230"><highlight class="normal"><sp/><sp/><sp/><sp/>writeDefaultLayoutFile(layoutName);</highlight></codeline>
<codeline lineno="10231"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10232"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="10233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10234"><highlight class="normal"></highlight></codeline>
<codeline lineno="10235"><highlight class="normal"><sp/><sp/>QFileInfo<sp/>configFileInfo1(</highlight><highlight class="stringliteral">&quot;Doxyfile&quot;</highlight><highlight class="normal">),configFileInfo2(</highlight><highlight class="stringliteral">&quot;doxyfile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optind&gt;=argc)</highlight></codeline>
<codeline lineno="10237"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="10238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configFileInfo1.exists())<sp/></highlight></codeline>
<codeline lineno="10239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>configName=</highlight><highlight class="stringliteral">&quot;Doxyfile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configFileInfo2.exists())</highlight></codeline>
<codeline lineno="10243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>configName=</highlight><highlight class="stringliteral">&quot;doxyfile&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Doxyfile<sp/>not<sp/>found<sp/>and<sp/>no<sp/>input<sp/>file<sp/>specified!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usage(argv[0]);</highlight></codeline>
<codeline lineno="10250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10253"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10254"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(argv[optind]);</highlight></codeline>
<codeline lineno="10255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fi.exists()<sp/>||<sp/>qstrcmp(argv[optind],</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">)==0)</highlight></codeline>
<codeline lineno="10256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>configName=argv[optind];</highlight></codeline>
<codeline lineno="10258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;configuration<sp/>file<sp/>%s<sp/>not<sp/>found!\n&quot;</highlight><highlight class="normal">,argv[optind]);</highlight></codeline>
<codeline lineno="10262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usage(argv[0]);</highlight></codeline>
<codeline lineno="10263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10265"><highlight class="normal"></highlight></codeline>
<codeline lineno="10266"><highlight class="normal"></highlight></codeline>
<codeline lineno="10267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;parse(configName))</highlight></codeline>
<codeline lineno="10268"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10269"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>open<sp/>or<sp/>read<sp/>configuration<sp/>file<sp/>%s!\n&quot;</highlight><highlight class="normal">,configName);</highlight></codeline>
<codeline lineno="10270"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10271"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10273"><highlight class="normal"></highlight></codeline>
<codeline lineno="10274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateConfig)</highlight></codeline>
<codeline lineno="10275"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10276"><highlight class="normal"><sp/><sp/><sp/><sp/>generateConfigFile(configName,shortList,TRUE);</highlight></codeline>
<codeline lineno="10277"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10278"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="10279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10280"><highlight class="normal"></highlight></codeline>
<codeline lineno="10281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Perlmod<sp/>wants<sp/>to<sp/>know<sp/>the<sp/>path<sp/>to<sp/>the<sp/>config<sp/>file.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10282"><highlight class="normal"><sp/><sp/>QFileInfo<sp/>configFileInfo(configName);</highlight></codeline>
<codeline lineno="10283"><highlight class="normal"><sp/><sp/>setPerlModDoxyfile(configFileInfo.absFilePath().data());</highlight></codeline>
<codeline lineno="10284"><highlight class="normal"></highlight></codeline>
<codeline lineno="10285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10286"><highlight class="normal"></highlight></codeline>
<codeline lineno="10288"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkConfiguration()</highlight></codeline>
<codeline lineno="10289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10290"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10291"><highlight class="normal"><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a6b714f42522fe1359a3ae30fef026d9b" kindref="member">substituteEnvironmentVars</ref>();</highlight></codeline>
<codeline lineno="10292"><highlight class="normal"><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a0be224084aa38a9d479ed0260baf27a6" kindref="member">convertStrToVal</ref>();</highlight></codeline>
<codeline lineno="10293"><highlight class="normal"><sp/><sp/><ref refid="dd/d34/class_config_1ad62b66142ca8c837019cd04de34c8caa" kindref="member">Config::instance</ref>()-&gt;<ref refid="dd/d34/class_config_1a2d04091f571813bab7171cf713917aff" kindref="member">check</ref>();</highlight></codeline>
<codeline lineno="10294"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10295"><highlight class="normal"><sp/><sp/>initWarningFormat();</highlight></codeline>
<codeline lineno="10296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10297"><highlight class="normal"></highlight></codeline>
<codeline lineno="10299"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustConfiguration()</highlight></codeline>
<codeline lineno="10300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10301"><highlight class="normal"><sp/><sp/>QCString<sp/>outputLanguage=Config_getEnum(</highlight><highlight class="stringliteral">&quot;OUTPUT_LANGUAGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!setTranslator(outputLanguage))</highlight></codeline>
<codeline lineno="10303"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10304"><highlight class="normal"><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;Output<sp/>language<sp/>%s<sp/>not<sp/>supported!<sp/>Using<sp/>English<sp/>instead.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="10305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputLanguage.data());</highlight></codeline>
<codeline lineno="10306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10307"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;includePath<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;INCLUDE_PATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=includePath.first();</highlight></codeline>
<codeline lineno="10309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10310"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10311"><highlight class="normal"><sp/><sp/><sp/><sp/>QFileInfo<sp/>fi(s);</highlight></codeline>
<codeline lineno="10312"><highlight class="normal"><sp/><sp/><sp/><sp/>addSearchDir(fi.absFilePath().utf8());</highlight></codeline>
<codeline lineno="10313"><highlight class="normal"><sp/><sp/><sp/><sp/>s=includePath.next();</highlight></codeline>
<codeline lineno="10314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10315"><highlight class="normal"></highlight></codeline>
<codeline lineno="10316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>global<sp/>html<sp/>file<sp/>extension.<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="10317"><highlight class="normal"><sp/><sp/>Doxygen::htmlFileExtension<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_FILE_EXTENSION&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10318"><highlight class="normal"></highlight></codeline>
<codeline lineno="10319"><highlight class="normal"></highlight></codeline>
<codeline lineno="10320"><highlight class="normal"><sp/><sp/>Doxygen::xrefLists-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="10321"><highlight class="normal"></highlight></codeline>
<codeline lineno="10322"><highlight class="normal"><sp/><sp/>Doxygen::parseSourcesNeeded<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CALL_GRAPH&quot;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="10323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;CALLER_GRAPH&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="10324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;REFERENCES_RELATION&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="10325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;REFERENCED_BY_RELATION&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10326"><highlight class="normal"></highlight></codeline>
<codeline lineno="10327"><highlight class="normal"><sp/><sp/>Doxygen::markdownSupport<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;MARKDOWN_SUPPORT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10328"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10330"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Add<sp/>custom<sp/>extension<sp/>mappings</highlight></codeline>
<codeline lineno="10331"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10332"><highlight class="normal"></highlight></codeline>
<codeline lineno="10333"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;extMaps<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;EXTENSION_MAPPING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mapping<sp/>=<sp/>extMaps.first();</highlight></codeline>
<codeline lineno="10335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mapping)</highlight></codeline>
<codeline lineno="10336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10337"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>mapStr<sp/>=<sp/>mapping;</highlight></codeline>
<codeline lineno="10338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="10339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i=mapStr.find(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">))!=-1)</highlight></codeline>
<codeline lineno="10340"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>ext=mapStr.left(i).stripWhiteSpace().lower();</highlight></codeline>
<codeline lineno="10342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>language=mapStr.mid(i+1).stripWhiteSpace().lower();</highlight></codeline>
<codeline lineno="10343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!updateLanguageMapping(ext,language))</highlight></codeline>
<codeline lineno="10344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>map<sp/>file<sp/>extension<sp/>&apos;%s&apos;<sp/>to<sp/>unsupported<sp/>language<sp/>&apos;%s&apos;.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>the<sp/>EXTENSION_MAPPING<sp/>setting<sp/>in<sp/>the<sp/>config<sp/>file.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="10347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ext.data(),language.data());</highlight></codeline>
<codeline lineno="10348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Adding<sp/>custom<sp/>extension<sp/>mapping:<sp/>.%s<sp/>will<sp/>be<sp/>treated<sp/>as<sp/>language<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="10352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ext.data(),language.data());</highlight></codeline>
<codeline lineno="10353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10355"><highlight class="normal"><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>extMaps.next();</highlight></codeline>
<codeline lineno="10356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10357"><highlight class="normal"></highlight></codeline>
<codeline lineno="10358"><highlight class="normal"></highlight></codeline>
<codeline lineno="10359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>predefined<sp/>macro<sp/>name<sp/>to<sp/>a<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10360"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;expandAsDefinedList<sp/>=Config_getList(</highlight><highlight class="stringliteral">&quot;EXPAND_AS_DEFINED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10361"><highlight class="normal"><sp/><sp/>s=expandAsDefinedList.first();</highlight></codeline>
<codeline lineno="10362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10363"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::expandAsDefinedDict[s]==0)</highlight></codeline>
<codeline lineno="10365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::expandAsDefinedDict.insert(s,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)666);</highlight></codeline>
<codeline lineno="10367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10368"><highlight class="normal"><sp/><sp/><sp/><sp/>s=expandAsDefinedList.next();</highlight></codeline>
<codeline lineno="10369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10370"><highlight class="normal"></highlight></codeline>
<codeline lineno="10371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>aliases<sp/>and<sp/>store<sp/>them<sp/>in<sp/>a<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10372"><highlight class="normal"><sp/><sp/>readAliases();</highlight></codeline>
<codeline lineno="10373"><highlight class="normal"></highlight></codeline>
<codeline lineno="10374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>number<sp/>of<sp/>spaces<sp/>in<sp/>a<sp/>tab<sp/>into<sp/>Doxygen::spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;tabSize<sp/>=<sp/>Config_getInt(</highlight><highlight class="stringliteral">&quot;TAB_SIZE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10376"><highlight class="normal"><sp/><sp/>Doxygen::spaces.resize(tabSize+1);</highlight></codeline>
<codeline lineno="10377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sp;</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sp=0;sp&lt;tabSize;sp++)<sp/>Doxygen::spaces.at(sp)=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10378"><highlight class="normal"><sp/><sp/>Doxygen::spaces.at(tabSize)=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10380"><highlight class="normal"></highlight></codeline>
<codeline lineno="10381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAS_SIGNALS</highlight></codeline>
<codeline lineno="10382"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stopDoxygen(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10384"><highlight class="normal"><sp/><sp/>QDir<sp/>thisDir;</highlight></codeline>
<codeline lineno="10385"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Cleaning<sp/>up...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Doxygen::entryDBFileName.isEmpty())</highlight></codeline>
<codeline lineno="10387"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10388"><highlight class="normal"><sp/><sp/><sp/><sp/>thisDir.remove(Doxygen::entryDBFileName);</highlight></codeline>
<codeline lineno="10389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Doxygen::objDBFileName.isEmpty())</highlight></codeline>
<codeline lineno="10391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10392"><highlight class="normal"><sp/><sp/><sp/><sp/>thisDir.remove(Doxygen::objDBFileName);</highlight></codeline>
<codeline lineno="10393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10394"><highlight class="normal"><sp/><sp/>killpg(0,SIGINT);</highlight></codeline>
<codeline lineno="10395"><highlight class="normal"><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="10398"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10399"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exitDoxygen()</highlight></codeline>
<codeline lineno="10400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_successfulRun)<sp/><sp/></highlight><highlight class="comment">//<sp/>premature<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10403"><highlight class="normal"><sp/><sp/><sp/><sp/>QDir<sp/>thisDir;</highlight></codeline>
<codeline lineno="10404"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Exiting...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Doxygen::entryDBFileName.isEmpty())</highlight></codeline>
<codeline lineno="10406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thisDir.remove(Doxygen::entryDBFileName);</highlight></codeline>
<codeline lineno="10408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Doxygen::objDBFileName.isEmpty())</highlight></codeline>
<codeline lineno="10410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thisDir.remove(Doxygen::objDBFileName);</highlight></codeline>
<codeline lineno="10412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10415"><highlight class="normal"></highlight></codeline>
<codeline lineno="10416"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>createOutputDirectory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;baseDirName,</highlight></codeline>
<codeline lineno="10417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*formatDirOption,</highlight></codeline>
<codeline lineno="10418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*defaultDirName)</highlight></codeline>
<codeline lineno="10419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>the<sp/>&amp;<sp/>on<sp/>the<sp/>next<sp/>line,<sp/>we<sp/>modify<sp/>the<sp/>formatDirOption!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10421"><highlight class="normal"><sp/><sp/>QCString<sp/>&amp;formatDirName<sp/>=<sp/>Config_getString(formatDirOption);</highlight></codeline>
<codeline lineno="10422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formatDirName.isEmpty())</highlight></codeline>
<codeline lineno="10423"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10424"><highlight class="normal"><sp/><sp/><sp/><sp/>formatDirName<sp/>=<sp/>baseDirName<sp/>+<sp/>defaultDirName;</highlight></codeline>
<codeline lineno="10425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formatDirName[0]!=</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(formatDirName.length()==1<sp/>||<sp/>formatDirName[1]!=</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="10427"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10428"><highlight class="normal"><sp/><sp/><sp/><sp/>formatDirName.prepend(baseDirName+</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10430"><highlight class="normal"><sp/><sp/>QDir<sp/>formatDir(formatDirName);</highlight></codeline>
<codeline lineno="10431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!formatDir.exists()<sp/>&amp;&amp;<sp/>!formatDir.mkdir(formatDirName))</highlight></codeline>
<codeline lineno="10432"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10433"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>output<sp/>directory<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>formatDirName.data());</highlight></codeline>
<codeline lineno="10434"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10435"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>formatDirName;</highlight></codeline>
<codeline lineno="10438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10439"><highlight class="normal"></highlight></codeline>
<codeline lineno="10440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QCString<sp/>getQchFileName()</highlight></codeline>
<codeline lineno="10441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10442"><highlight class="normal"><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>qchFile<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;QCH_FILE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!qchFile.isEmpty())</highlight></codeline>
<codeline lineno="10444"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qchFile;</highlight></codeline>
<codeline lineno="10446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10447"><highlight class="normal"></highlight></codeline>
<codeline lineno="10448"><highlight class="normal"><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>projectName<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;PROJECT_NAME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10449"><highlight class="normal"><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>versionText<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;PROJECT_NUMBER&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10450"><highlight class="normal"></highlight></codeline>
<codeline lineno="10451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QCString(</highlight><highlight class="stringliteral">&quot;../qch/&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(projectName.isEmpty()<sp/>?<sp/>QCString(</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">)<sp/>:<sp/>projectName)</highlight></codeline>
<codeline lineno="10453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(versionText.isEmpty()<sp/>?<sp/>QCString(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>:<sp/>QCString(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">)<sp/>+<sp/>versionText)</highlight></codeline>
<codeline lineno="10454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>QCString(</highlight><highlight class="stringliteral">&quot;.qch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10456"><highlight class="normal"></highlight></codeline>
<codeline lineno="10457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>searchInputFiles()</highlight></codeline>
<codeline lineno="10458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10459"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;exclPatterns<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;EXCLUDE_PATTERNS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alwaysRecursive<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;RECURSIVE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10461"><highlight class="normal"><sp/><sp/><ref refid="db/d27/class_string_dict" kindref="compound">StringDict</ref><sp/>excludeNameDict(1009);</highlight></codeline>
<codeline lineno="10462"><highlight class="normal"><sp/><sp/>excludeNameDict.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="10463"><highlight class="normal"></highlight></codeline>
<codeline lineno="10464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>names<sp/>of<sp/>all<sp/>files<sp/>in<sp/>the<sp/>include<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10465"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>include<sp/>files...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10466"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;includePathList<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;INCLUDE_PATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=includePathList.first();</highlight></codeline>
<codeline lineno="10468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10469"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10470"><highlight class="normal"><sp/><sp/><sp/><sp/>QStrList<sp/>&amp;pl<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;INCLUDE_FILE_PATTERNS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pl.count()==0)<sp/></highlight></codeline>
<codeline lineno="10472"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pl<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;FILE_PATTERNS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10475"><highlight class="normal"><sp/><sp/><sp/><sp/>readFileOrDirectory(s,0,Doxygen::includeNameDict,0,&amp;pl,</highlight></codeline>
<codeline lineno="10476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;exclPatterns,0,0,</highlight></codeline>
<codeline lineno="10477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysRecursive);</highlight></codeline>
<codeline lineno="10478"><highlight class="normal"><sp/><sp/><sp/><sp/>s=includePathList.next();<sp/></highlight></codeline>
<codeline lineno="10479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10480"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10481"><highlight class="normal"></highlight></codeline>
<codeline lineno="10482"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>example<sp/>files...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10483"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;examplePathList<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;EXAMPLE_PATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10484"><highlight class="normal"><sp/><sp/>s=examplePathList.first();</highlight></codeline>
<codeline lineno="10485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10486"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10487"><highlight class="normal"><sp/><sp/><sp/><sp/>readFileOrDirectory(s,0,Doxygen::exampleNameDict,0,</highlight></codeline>
<codeline lineno="10488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Config_getList(</highlight><highlight class="stringliteral">&quot;EXAMPLE_PATTERNS&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="10489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,</highlight></codeline>
<codeline lineno="10490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(alwaysRecursive<sp/>||<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXAMPLE_RECURSIVE&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="10491"><highlight class="normal"><sp/><sp/><sp/><sp/>s=examplePathList.next();<sp/></highlight></codeline>
<codeline lineno="10492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10493"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10494"><highlight class="normal"></highlight></codeline>
<codeline lineno="10495"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>images...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10496"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;imagePathList=Config_getList(</highlight><highlight class="stringliteral">&quot;IMAGE_PATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10497"><highlight class="normal"><sp/><sp/>s=imagePathList.first();</highlight></codeline>
<codeline lineno="10498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10499"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10500"><highlight class="normal"><sp/><sp/><sp/><sp/>readFileOrDirectory(s,0,Doxygen::imageNameDict,0,0,</highlight></codeline>
<codeline lineno="10501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,</highlight></codeline>
<codeline lineno="10502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysRecursive);</highlight></codeline>
<codeline lineno="10503"><highlight class="normal"><sp/><sp/><sp/><sp/>s=imagePathList.next();<sp/></highlight></codeline>
<codeline lineno="10504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10505"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10506"><highlight class="normal"></highlight></codeline>
<codeline lineno="10507"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>dot<sp/>files...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10508"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;dotFileList=Config_getList(</highlight><highlight class="stringliteral">&quot;DOTFILE_DIRS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10509"><highlight class="normal"><sp/><sp/>s=dotFileList.first();</highlight></codeline>
<codeline lineno="10510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10511"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10512"><highlight class="normal"><sp/><sp/><sp/><sp/>readFileOrDirectory(s,0,Doxygen::dotFileNameDict,0,0,</highlight></codeline>
<codeline lineno="10513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,</highlight></codeline>
<codeline lineno="10514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysRecursive);</highlight></codeline>
<codeline lineno="10515"><highlight class="normal"><sp/><sp/><sp/><sp/>s=dotFileList.next();<sp/></highlight></codeline>
<codeline lineno="10516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10517"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10518"><highlight class="normal"></highlight></codeline>
<codeline lineno="10519"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>msc<sp/>files...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10520"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;mscFileList=Config_getList(</highlight><highlight class="stringliteral">&quot;MSCFILE_DIRS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10521"><highlight class="normal"><sp/><sp/>s=mscFileList.first();</highlight></codeline>
<codeline lineno="10522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10523"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10524"><highlight class="normal"><sp/><sp/><sp/><sp/>readFileOrDirectory(s,0,Doxygen::mscFileNameDict,0,0,</highlight></codeline>
<codeline lineno="10525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,</highlight></codeline>
<codeline lineno="10526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysRecursive);</highlight></codeline>
<codeline lineno="10527"><highlight class="normal"><sp/><sp/><sp/><sp/>s=mscFileList.next();<sp/></highlight></codeline>
<codeline lineno="10528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10529"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10530"><highlight class="normal"></highlight></codeline>
<codeline lineno="10531"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>files<sp/>to<sp/>exclude\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10532"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;excludeList<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;EXCLUDE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10533"><highlight class="normal"><sp/><sp/>s=excludeList.first();</highlight></codeline>
<codeline lineno="10534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10535"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10536"><highlight class="normal"><sp/><sp/><sp/><sp/>readFileOrDirectory(s,0,0,0,&amp;Config_getList(</highlight><highlight class="stringliteral">&quot;FILE_PATTERNS&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="10537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,&amp;excludeNameDict,</highlight></codeline>
<codeline lineno="10538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysRecursive,</highlight></codeline>
<codeline lineno="10539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FALSE);</highlight></codeline>
<codeline lineno="10540"><highlight class="normal"><sp/><sp/><sp/><sp/>s=excludeList.next();</highlight></codeline>
<codeline lineno="10541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10542"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10543"><highlight class="normal"></highlight></codeline>
<codeline lineno="10544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10545"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Determine<sp/>Input<sp/>Files<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10546"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10547"><highlight class="normal"></highlight></codeline>
<codeline lineno="10548"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>files<sp/>to<sp/>process...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10549"><highlight class="normal"><sp/><sp/>QDict&lt;void&gt;<sp/>*killDict<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QDict&lt;void&gt;(10007);</highlight></codeline>
<codeline lineno="10550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inputSize=0;</highlight></codeline>
<codeline lineno="10551"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;inputList=Config_getList(</highlight><highlight class="stringliteral">&quot;INPUT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10552"><highlight class="normal"><sp/><sp/>g_inputFiles.setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="10553"><highlight class="normal"><sp/><sp/>s=inputList.first();</highlight></codeline>
<codeline lineno="10554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10555"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10556"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>path=s;</highlight></codeline>
<codeline lineno="10557"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>l<sp/>=<sp/>path.length();</highlight></codeline>
<codeline lineno="10558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l&gt;0)</highlight></codeline>
<codeline lineno="10559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strip<sp/>trailing<sp/>slashes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.at(l-1)==</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>||<sp/>path.at(l-1)==</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>path=path.left(l-1);</highlight></codeline>
<codeline lineno="10562"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputSize+=readFileOrDirectory(</highlight></codeline>
<codeline lineno="10564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path,</highlight></codeline>
<codeline lineno="10565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::inputNameList,</highlight></codeline>
<codeline lineno="10566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::inputNameDict,</highlight></codeline>
<codeline lineno="10567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;excludeNameDict,</highlight></codeline>
<codeline lineno="10568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Config_getList(</highlight><highlight class="stringliteral">&quot;FILE_PATTERNS&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="10569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;exclPatterns,</highlight></codeline>
<codeline lineno="10570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;g_inputFiles,0,</highlight></codeline>
<codeline lineno="10571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysRecursive,</highlight></codeline>
<codeline lineno="10572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRUE,</highlight></codeline>
<codeline lineno="10573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>killDict,</highlight></codeline>
<codeline lineno="10574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Doxygen::inputPaths);</highlight></codeline>
<codeline lineno="10575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10576"><highlight class="normal"><sp/><sp/><sp/><sp/>s=inputList.next();</highlight></codeline>
<codeline lineno="10577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>killDict;</highlight></codeline>
<codeline lineno="10579"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10581"><highlight class="normal"></highlight></codeline>
<codeline lineno="10582"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseInput()</highlight></codeline>
<codeline lineno="10584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10585"><highlight class="normal"><sp/><sp/>atexit(exitDoxygen);</highlight></codeline>
<codeline lineno="10586"><highlight class="normal"></highlight></codeline>
<codeline lineno="10587"><highlight class="normal"></highlight></codeline>
<codeline lineno="10588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10589"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Make<sp/>sure<sp/>the<sp/>output<sp/>directory<sp/>exists</highlight></codeline>
<codeline lineno="10590"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10591"><highlight class="normal"><sp/><sp/>QCString<sp/>&amp;outputDirectory<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;OUTPUT_DIRECTORY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outputDirectory.isEmpty())<sp/></highlight></codeline>
<codeline lineno="10593"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10594"><highlight class="normal"><sp/><sp/><sp/><sp/>outputDirectory=QDir::currentDirPath().utf8();</highlight></codeline>
<codeline lineno="10595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10598"><highlight class="normal"><sp/><sp/><sp/><sp/>QDir<sp/>dir(outputDirectory);</highlight></codeline>
<codeline lineno="10599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dir.exists())</highlight></codeline>
<codeline lineno="10600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dir.setPath(QDir::currentDirPath());</highlight></codeline>
<codeline lineno="10602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dir.mkdir(outputDirectory))</highlight></codeline>
<codeline lineno="10603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;tag<sp/>OUTPUT_DIRECTORY:<sp/>Output<sp/>directory<sp/>`%s&apos;<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exist<sp/>and<sp/>cannot<sp/>be<sp/>created\n&quot;</highlight><highlight class="normal">,outputDirectory.data());</highlight></codeline>
<codeline lineno="10606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="10607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Notice:<sp/>Output<sp/>directory<sp/>`%s&apos;<sp/>does<sp/>not<sp/>exist.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;I<sp/>have<sp/>created<sp/>it<sp/>for<sp/>you.\n&quot;</highlight><highlight class="normal">,<sp/>outputDirectory.data());</highlight></codeline>
<codeline lineno="10613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dir.cd(outputDirectory);</highlight></codeline>
<codeline lineno="10615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10616"><highlight class="normal"><sp/><sp/><sp/><sp/>outputDirectory=dir.absPath().utf8();</highlight></codeline>
<codeline lineno="10617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10618"><highlight class="normal"></highlight></codeline>
<codeline lineno="10619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10620"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialize<sp/>global<sp/>lists<sp/>and<sp/>dictionaries</highlight></codeline>
<codeline lineno="10621"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10622"><highlight class="normal"></highlight></codeline>
<codeline lineno="10623"><highlight class="normal"><sp/><sp/>Doxygen::symbolStorage<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d9d/class_store" kindref="compound" tooltip="The Store is a file based memory manager.">Store</ref>;</highlight></codeline>
<codeline lineno="10624"><highlight class="normal"></highlight></codeline>
<codeline lineno="10625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>scale<sp/>lookup<sp/>cache<sp/>with<sp/>SYMBOL_CACHE_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheSize<sp/>=<sp/>Config_getInt(</highlight><highlight class="stringliteral">&quot;LOOKUP_CACHE_SIZE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheSize&lt;0)<sp/>cacheSize=0;</highlight></codeline>
<codeline lineno="10628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheSize&gt;9)<sp/>cacheSize=9;</highlight></codeline>
<codeline lineno="10629"><highlight class="normal"><sp/><sp/>uint<sp/>lookupSize<sp/>=<sp/>65536<sp/>&lt;&lt;<sp/>cacheSize;</highlight></codeline>
<codeline lineno="10630"><highlight class="normal"><sp/><sp/>Doxygen::lookupCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QCache&lt;LookupInfo&gt;(lookupSize,lookupSize);</highlight></codeline>
<codeline lineno="10631"><highlight class="normal"><sp/><sp/>Doxygen::lookupCache-&gt;setAutoDelete(TRUE);</highlight></codeline>
<codeline lineno="10632"><highlight class="normal"></highlight></codeline>
<codeline lineno="10633"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAS_SIGNALS</highlight></codeline>
<codeline lineno="10634"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>signal(SIGINT,<sp/>stopDoxygen);</highlight></codeline>
<codeline lineno="10635"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="10636"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10637"><highlight class="normal"><sp/><sp/>uint<sp/>pid<sp/>=<sp/>portable_pid();</highlight></codeline>
<codeline lineno="10638"><highlight class="normal"><sp/><sp/>Doxygen::objDBFileName.sprintf(</highlight><highlight class="stringliteral">&quot;doxygen_objdb_%d.tmp&quot;</highlight><highlight class="normal">,pid);</highlight></codeline>
<codeline lineno="10639"><highlight class="normal"><sp/><sp/>Doxygen::objDBFileName.prepend(outputDirectory+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10640"><highlight class="normal"><sp/><sp/>Doxygen::entryDBFileName.sprintf(</highlight><highlight class="stringliteral">&quot;doxygen_entrydb_%d.tmp&quot;</highlight><highlight class="normal">,pid);</highlight></codeline>
<codeline lineno="10641"><highlight class="normal"><sp/><sp/>Doxygen::entryDBFileName.prepend(outputDirectory+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10642"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::symbolStorage-&gt;open(Doxygen::objDBFileName)==-1)</highlight></codeline>
<codeline lineno="10644"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10645"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>temporary<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,Doxygen::objDBFileName.data());</highlight></codeline>
<codeline lineno="10646"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10648"><highlight class="normal"></highlight></codeline>
<codeline lineno="10649"><highlight class="normal"></highlight></codeline>
<codeline lineno="10650"><highlight class="normal"></highlight></codeline>
<codeline lineno="10651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10652"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Check/create<sp/>output<sp/>directorties<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10653"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10654"><highlight class="normal"></highlight></codeline>
<codeline lineno="10655"><highlight class="normal"><sp/><sp/>QCString<sp/>htmlOutput;</highlight></codeline>
<codeline lineno="10656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;generateHtml<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_HTML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtml)</highlight></codeline>
<codeline lineno="10658"><highlight class="normal"><sp/><sp/><sp/><sp/>htmlOutput<sp/>=<sp/>createOutputDirectory(outputDirectory,</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;/html&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10659"><highlight class="normal"></highlight></codeline>
<codeline lineno="10660"><highlight class="normal"><sp/><sp/>QCString<sp/>docbookOutput;</highlight></codeline>
<codeline lineno="10661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;generateDocbook<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_DOCBOOK&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateDocbook)</highlight></codeline>
<codeline lineno="10663"><highlight class="normal"><sp/><sp/><sp/><sp/>docbookOutput<sp/>=<sp/>createOutputDirectory(outputDirectory,</highlight><highlight class="stringliteral">&quot;DOCBOOK_OUTPUT&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;/docbook&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10664"><highlight class="normal"></highlight></codeline>
<codeline lineno="10665"><highlight class="normal"><sp/><sp/>QCString<sp/>xmlOutput;</highlight></codeline>
<codeline lineno="10666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;generateXml<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_XML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateXml)</highlight></codeline>
<codeline lineno="10668"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlOutput<sp/>=<sp/>createOutputDirectory(outputDirectory,</highlight><highlight class="stringliteral">&quot;XML_OUTPUT&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;/xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="10670"><highlight class="normal"><sp/><sp/>QCString<sp/>latexOutput;</highlight></codeline>
<codeline lineno="10671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;generateLatex<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_LATEX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateLatex)</highlight></codeline>
<codeline lineno="10673"><highlight class="normal"><sp/><sp/><sp/><sp/>latexOutput<sp/>=<sp/>createOutputDirectory(outputDirectory,</highlight><highlight class="stringliteral">&quot;LATEX_OUTPUT&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;/latex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10674"><highlight class="normal"></highlight></codeline>
<codeline lineno="10675"><highlight class="normal"><sp/><sp/>QCString<sp/>rtfOutput;</highlight></codeline>
<codeline lineno="10676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;generateRtf<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_RTF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateRtf)</highlight></codeline>
<codeline lineno="10678"><highlight class="normal"><sp/><sp/><sp/><sp/>rtfOutput<sp/>=<sp/>createOutputDirectory(outputDirectory,</highlight><highlight class="stringliteral">&quot;RTF_OUTPUT&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;/rtf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10679"><highlight class="normal"></highlight></codeline>
<codeline lineno="10680"><highlight class="normal"><sp/><sp/>QCString<sp/>manOutput;</highlight></codeline>
<codeline lineno="10681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;generateMan<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_MAN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateMan)</highlight></codeline>
<codeline lineno="10683"><highlight class="normal"><sp/><sp/><sp/><sp/>manOutput<sp/>=<sp/>createOutputDirectory(outputDirectory,</highlight><highlight class="stringliteral">&quot;MAN_OUTPUT&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;/man&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10684"><highlight class="normal"></highlight></codeline>
<codeline lineno="10685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//QCString<sp/>sqlOutput;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>&amp;generateSql<sp/>=<sp/>Config_getBool(&quot;GENERATE_SQLITE3&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(generateSql)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>sqlOutput<sp/>=<sp/>createOutputDirectory(outputDirectory,&quot;SQLITE3_OUTPUT&quot;,&quot;/sqlite3&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10689"><highlight class="normal"></highlight></codeline>
<codeline lineno="10690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;HAVE_DOT&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="10691"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10692"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>curFontPath<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;DOT_FONTPATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curFontPath.isEmpty())</highlight></codeline>
<codeline lineno="10694"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>portable_getenv(</highlight><highlight class="stringliteral">&quot;DOTFONTPATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>newFontPath<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!curFontPath.isEmpty())</highlight></codeline>
<codeline lineno="10698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newFontPath+=portable_pathListSeparator();</highlight></codeline>
<codeline lineno="10700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newFontPath+=curFontPath;</highlight></codeline>
<codeline lineno="10701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>portable_setenv(</highlight><highlight class="stringliteral">&quot;DOTFONTPATH&quot;</highlight><highlight class="normal">,newFontPath);</highlight></codeline>
<codeline lineno="10703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10705"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>portable_setenv(</highlight><highlight class="stringliteral">&quot;DOTFONTPATH&quot;</highlight><highlight class="normal">,curFontPath);</highlight></codeline>
<codeline lineno="10707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10709"><highlight class="normal"></highlight></codeline>
<codeline lineno="10710"><highlight class="normal"></highlight></codeline>
<codeline lineno="10711"><highlight class="normal"></highlight></codeline>
<codeline lineno="10712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10713"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handle<sp/>layout<sp/>file<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10714"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10715"><highlight class="normal"></highlight></codeline>
<codeline lineno="10716"><highlight class="normal"><sp/><sp/><ref refid="dc/d1d/class_layout_doc_manager_1a87bc2288833b8769bd03e47c58fbba6a" kindref="member" tooltip="Returns a reference to this singleton.">LayoutDocManager::instance</ref>().init();</highlight></codeline>
<codeline lineno="10717"><highlight class="normal"><sp/><sp/>QCString<sp/>&amp;layoutFileName<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;LAYOUT_FILE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defaultLayoutUsed<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="10719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutFileName.isEmpty())</highlight></codeline>
<codeline lineno="10720"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10721"><highlight class="normal"><sp/><sp/><sp/><sp/>layoutFileName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DoxygenLayout.xml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10722"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultLayoutUsed<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="10723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10724"><highlight class="normal"></highlight></codeline>
<codeline lineno="10725"><highlight class="normal"><sp/><sp/>QFile<sp/>layoutFile(layoutFileName);</highlight></codeline>
<codeline lineno="10726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutFile.open(IO_ReadOnly))</highlight></codeline>
<codeline lineno="10727"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10728"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Parsing<sp/>layout<sp/>file<sp/>%s...\n&quot;</highlight><highlight class="normal">,layoutFileName.data());</highlight></codeline>
<codeline lineno="10729"><highlight class="normal"><sp/><sp/><sp/><sp/>QTextStream<sp/>t(&amp;layoutFile);<sp/></highlight></codeline>
<codeline lineno="10730"><highlight class="normal"><sp/><sp/><sp/><sp/>t.setEncoding(QTextStream::Latin1);</highlight></codeline>
<codeline lineno="10731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d1d/class_layout_doc_manager_1a87bc2288833b8769bd03e47c58fbba6a" kindref="member" tooltip="Returns a reference to this singleton.">LayoutDocManager::instance</ref>().<ref refid="dc/d1d/class_layout_doc_manager_1ade92fd2ccfa31a7bd8b152848d224053" kindref="member" tooltip="Parses a user provided layout.">parse</ref>(t,layoutFileName);</highlight></codeline>
<codeline lineno="10732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defaultLayoutUsed)</highlight></codeline>
<codeline lineno="10734"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10735"><highlight class="normal"><sp/><sp/><sp/><sp/>warn_uncond(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>layout<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>reading!\n&quot;</highlight><highlight class="normal">,layoutFileName.data());</highlight></codeline>
<codeline lineno="10736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10737"><highlight class="normal"></highlight></codeline>
<codeline lineno="10738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10739"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>and<sp/>preprocess<sp/>input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10740"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10741"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="10742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>search<sp/>in<sp/>the<sp/>output<sp/>directories</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10743"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;exclPatterns<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;EXCLUDE_PATTERNS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtml)<sp/><sp/><sp/><sp/>exclPatterns.append(htmlOutput);</highlight></codeline>
<codeline lineno="10745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateDocbook)<sp/>exclPatterns.append(docbookOutput);</highlight></codeline>
<codeline lineno="10746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateXml)<sp/><sp/><sp/><sp/><sp/>exclPatterns.append(xmlOutput);</highlight></codeline>
<codeline lineno="10747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateLatex)<sp/><sp/><sp/>exclPatterns.append(latexOutput);</highlight></codeline>
<codeline lineno="10748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateRtf)<sp/><sp/><sp/><sp/><sp/>exclPatterns.append(rtfOutput);</highlight></codeline>
<codeline lineno="10749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateMan)<sp/><sp/><sp/><sp/><sp/>exclPatterns.append(manOutput);</highlight></codeline>
<codeline lineno="10750"><highlight class="normal"></highlight></codeline>
<codeline lineno="10751"><highlight class="normal"><sp/><sp/>searchInputFiles();</highlight></codeline>
<codeline lineno="10752"><highlight class="normal"></highlight></codeline>
<codeline lineno="10753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notice:<sp/>the<sp/>order<sp/>of<sp/>the<sp/>function<sp/>calls<sp/>below<sp/>is<sp/>very<sp/>important!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10754"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_HTML&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="10756"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10757"><highlight class="normal"><sp/><sp/><sp/><sp/>readFormulaRepository();</highlight></codeline>
<codeline lineno="10758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10759"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10761"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handle<sp/>Tag<sp/>Files<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10762"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10763"><highlight class="normal"></highlight></codeline>
<codeline lineno="10764"><highlight class="normal"><sp/><sp/>g_storage<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d94/class_file_storage" kindref="compound" tooltip="Store implementation based on a file.">FileStorage</ref>;</highlight></codeline>
<codeline lineno="10765"><highlight class="normal"><sp/><sp/>g_storage-&gt;setName(Doxygen::entryDBFileName);</highlight></codeline>
<codeline lineno="10766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_storage-&gt;open(IO_WriteOnly))</highlight></codeline>
<codeline lineno="10767"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10768"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>temporary<sp/>storage<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="10769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::entryDBFileName.data());</highlight></codeline>
<codeline lineno="10770"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10772"><highlight class="normal"><sp/><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref><sp/>*root=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/dd7/class_entry" kindref="compound" tooltip="Represents an unstructured piece of information, about an entity found in the sources.">Entry</ref>;</highlight></codeline>
<codeline lineno="10773"><highlight class="normal"><sp/><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref><sp/>*rootNav<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/dc6/class_entry_nav" kindref="compound" tooltip="Wrapper for a node in the Entry tree.">EntryNav</ref>(0,root);</highlight></codeline>
<codeline lineno="10774"><highlight class="normal"><sp/><sp/>rootNav-&gt;setEntry(root);</highlight></codeline>
<codeline lineno="10775"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Reading<sp/>and<sp/>parsing<sp/>tag<sp/>files\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10776"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10777"><highlight class="normal"><sp/><sp/>QStrList<sp/>&amp;tagFileList<sp/>=<sp/>Config_getList(</highlight><highlight class="stringliteral">&quot;TAGFILES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s=tagFileList.first();</highlight></codeline>
<codeline lineno="10779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="10780"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10781"><highlight class="normal"><sp/><sp/><sp/><sp/>readTagFile(root,s);</highlight></codeline>
<codeline lineno="10782"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;createNavigationIndex(rootNav,g_storage,0);</highlight></codeline>
<codeline lineno="10783"><highlight class="normal"><sp/><sp/><sp/><sp/>s=tagFileList.next();</highlight></codeline>
<codeline lineno="10784"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10785"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="10786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10787"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parse<sp/>source<sp/>files<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="10788"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10789"><highlight class="normal"></highlight></codeline>
<codeline lineno="10790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;BUILTIN_STL_SUPPORT&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="10791"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10792"><highlight class="normal"><sp/><sp/><sp/><sp/>addSTLClasses(rootNav);</highlight></codeline>
<codeline lineno="10793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10794"><highlight class="normal"></highlight></codeline>
<codeline lineno="10795"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Parsing<sp/>files\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10796"><highlight class="normal"><sp/><sp/>parseFiles(root,rootNav);</highlight></codeline>
<codeline lineno="10797"><highlight class="normal"><sp/><sp/>g_storage-&gt;close();</highlight></codeline>
<codeline lineno="10798"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10799"><highlight class="normal"></highlight></codeline>
<codeline lineno="10800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>done<sp/>with<sp/>input<sp/>scanning<sp/>now,<sp/>so<sp/>free<sp/>up<sp/>the<sp/>buffers<sp/>used<sp/>by<sp/>flex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(can<sp/>be<sp/>around<sp/>4MB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10802"><highlight class="normal"><sp/><sp/>preFreeScanner();</highlight></codeline>
<codeline lineno="10803"><highlight class="normal"><sp/><sp/>scanFreeScanner();</highlight></codeline>
<codeline lineno="10804"><highlight class="normal"><sp/><sp/>pyscanFreeScanner();</highlight></codeline>
<codeline lineno="10805"><highlight class="normal"></highlight></codeline>
<codeline lineno="10806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_storage-&gt;open(IO_ReadOnly))</highlight></codeline>
<codeline lineno="10807"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10808"><highlight class="normal"><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>temporary<sp/>storage<sp/>file<sp/>%s<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="10809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::entryDBFileName.data());</highlight></codeline>
<codeline lineno="10810"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="10811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10812"><highlight class="normal"></highlight></codeline>
<codeline lineno="10813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="10814"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gather<sp/>information<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="10815"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10816"><highlight class="normal"></highlight></codeline>
<codeline lineno="10817"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>group<sp/>list...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10818"><highlight class="normal"><sp/><sp/>buildGroupList(rootNav);</highlight></codeline>
<codeline lineno="10819"><highlight class="normal"><sp/><sp/>organizeSubGroups(rootNav);</highlight></codeline>
<codeline lineno="10820"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10821"><highlight class="normal"></highlight></codeline>
<codeline lineno="10822"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>directory<sp/>list...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10823"><highlight class="normal"><sp/><sp/>buildDirectories();</highlight></codeline>
<codeline lineno="10824"><highlight class="normal"><sp/><sp/>findDirDocumentation(rootNav);</highlight></codeline>
<codeline lineno="10825"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10826"><highlight class="normal"></highlight></codeline>
<codeline lineno="10827"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>namespace<sp/>list...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10828"><highlight class="normal"><sp/><sp/>buildNamespaceList(rootNav);</highlight></codeline>
<codeline lineno="10829"><highlight class="normal"><sp/><sp/>findUsingDirectives(rootNav);</highlight></codeline>
<codeline lineno="10830"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10831"><highlight class="normal"></highlight></codeline>
<codeline lineno="10832"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>file<sp/>list...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10833"><highlight class="normal"><sp/><sp/>buildFileList(rootNav);</highlight></codeline>
<codeline lineno="10834"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//generateFileTree();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10836"><highlight class="normal"></highlight></codeline>
<codeline lineno="10837"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>class<sp/>list...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10838"><highlight class="normal"><sp/><sp/>buildClassList(rootNav);</highlight></codeline>
<codeline lineno="10839"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10840"><highlight class="normal"></highlight></codeline>
<codeline lineno="10841"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Associating<sp/>documentation<sp/>with<sp/>classes...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10842"><highlight class="normal"><sp/><sp/>buildClassDocList(rootNav);</highlight></codeline>
<codeline lineno="10843"><highlight class="normal"></highlight></codeline>
<codeline lineno="10844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>list<sp/>of<sp/>using<sp/>declarations<sp/>here<sp/>(global<sp/>list)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10845"><highlight class="normal"><sp/><sp/>buildListOfUsingDecls(rootNav);</highlight></codeline>
<codeline lineno="10846"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10847"><highlight class="normal"></highlight></codeline>
<codeline lineno="10848"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Computing<sp/>nesting<sp/>relations<sp/>for<sp/>classes...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10849"><highlight class="normal"><sp/><sp/>resolveClassNestingRelations();</highlight></codeline>
<codeline lineno="10850"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.8.2-20121111:<sp/>no<sp/>longer<sp/>add<sp/>nested<sp/>classes<sp/>to<sp/>the<sp/>group<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//distributeClassGroupRelations();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10853"><highlight class="normal"></highlight></codeline>
<codeline lineno="10854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calling<sp/>buildClassList<sp/>may<sp/>result<sp/>in<sp/>cached<sp/>relations<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>become<sp/>invalid<sp/>after<sp/>resolveClassNestingRelations(),<sp/>that&apos;s<sp/>why</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>clear<sp/>the<sp/>cache<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10857"><highlight class="normal"><sp/><sp/>Doxygen::lookupCache-&gt;clear();</highlight></codeline>
<codeline lineno="10858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>need<sp/>the<sp/>list<sp/>of<sp/>using<sp/>declaration<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10859"><highlight class="normal"><sp/><sp/>g_usingDeclarations.clear();</highlight></codeline>
<codeline lineno="10860"><highlight class="normal"></highlight></codeline>
<codeline lineno="10861"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>example<sp/>list...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10862"><highlight class="normal"><sp/><sp/>buildExampleList(rootNav);</highlight></codeline>
<codeline lineno="10863"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10864"><highlight class="normal"></highlight></codeline>
<codeline lineno="10865"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>enumerations...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10866"><highlight class="normal"><sp/><sp/>findEnums(rootNav);</highlight></codeline>
<codeline lineno="10867"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10868"><highlight class="normal"></highlight></codeline>
<codeline lineno="10869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>buildVarList<sp/>calls<sp/>isVarWithConstructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>this<sp/>calls<sp/>getResolvedClass<sp/>we<sp/>need<sp/>to<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedefs<sp/>first<sp/>so<sp/>the<sp/>relations<sp/>between<sp/>classes<sp/>via<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>properly<sp/>resolved.<sp/>See<sp/>bug<sp/>536385<sp/>for<sp/>an<sp/>example.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10873"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>documented<sp/>typedefs...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10874"><highlight class="normal"><sp/><sp/>buildTypedefList(rootNav);</highlight></codeline>
<codeline lineno="10875"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10876"><highlight class="normal"></highlight></codeline>
<codeline lineno="10877"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>members<sp/>imported<sp/>via<sp/>using<sp/>declarations...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10878"><highlight class="normal"><sp/><sp/>findUsingDeclImports(rootNav);</highlight></codeline>
<codeline lineno="10879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>be<sp/>after<sp/>buildTypedefList<sp/>in<sp/>order<sp/>to<sp/>properly<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10880"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10881"><highlight class="normal"><sp/><sp/>findUsingDeclarations(rootNav);</highlight></codeline>
<codeline lineno="10882"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10883"><highlight class="normal"></highlight></codeline>
<codeline lineno="10884"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>included<sp/>using<sp/>directives...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10885"><highlight class="normal"><sp/><sp/>findIncludedUsingDirectives();</highlight></codeline>
<codeline lineno="10886"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10887"><highlight class="normal"></highlight></codeline>
<codeline lineno="10888"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>documented<sp/>variables...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10889"><highlight class="normal"><sp/><sp/>buildVarList(rootNav);</highlight></codeline>
<codeline lineno="10890"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10891"><highlight class="normal"></highlight></codeline>
<codeline lineno="10892"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>interface<sp/>member<sp/>list...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10893"><highlight class="normal"><sp/><sp/>buildInterfaceAndServiceList(rootNav);<sp/></highlight><highlight class="comment">//<sp/>UNO<sp/>IDL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10894"><highlight class="normal"></highlight></codeline>
<codeline lineno="10895"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>member<sp/>list...\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>using<sp/>class<sp/>info<sp/>only<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10896"><highlight class="normal"><sp/><sp/>buildFunctionList(rootNav);</highlight></codeline>
<codeline lineno="10897"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10898"><highlight class="normal"></highlight></codeline>
<codeline lineno="10899"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>friends...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10900"><highlight class="normal"><sp/><sp/>findFriends();</highlight></codeline>
<codeline lineno="10901"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10902"><highlight class="normal"></highlight></codeline>
<codeline lineno="10903"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>documented<sp/>defines...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10904"><highlight class="normal"><sp/><sp/>findDefineDocumentation(rootNav);</highlight></codeline>
<codeline lineno="10905"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10906"><highlight class="normal"></highlight></codeline>
<codeline lineno="10907"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Computing<sp/>class<sp/>inheritance<sp/>relations...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10908"><highlight class="normal"><sp/><sp/>findClassEntries(rootNav);</highlight></codeline>
<codeline lineno="10909"><highlight class="normal"><sp/><sp/>findInheritedTemplateInstances();</highlight></codeline>
<codeline lineno="10910"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10911"><highlight class="normal"></highlight></codeline>
<codeline lineno="10912"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Computing<sp/>class<sp/>usage<sp/>relations...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10913"><highlight class="normal"><sp/><sp/>findUsedTemplateInstances();</highlight></codeline>
<codeline lineno="10914"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10915"><highlight class="normal"></highlight></codeline>
<codeline lineno="10916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;INLINE_SIMPLE_STRUCTS&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="10917"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10918"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>tag<sp/>less<sp/>structs...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10919"><highlight class="normal"><sp/><sp/><sp/><sp/>findTagLessClasses();</highlight></codeline>
<codeline lineno="10920"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10921"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10922"><highlight class="normal"></highlight></codeline>
<codeline lineno="10923"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Flushing<sp/>cached<sp/>template<sp/>relations<sp/>that<sp/>have<sp/>become<sp/>invalid...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10924"><highlight class="normal"><sp/><sp/>flushCachedTemplateRelations();</highlight></codeline>
<codeline lineno="10925"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10926"><highlight class="normal"></highlight></codeline>
<codeline lineno="10927"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Creating<sp/>members<sp/>for<sp/>template<sp/>instances...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10928"><highlight class="normal"><sp/><sp/>createTemplateInstanceMembers();</highlight></codeline>
<codeline lineno="10929"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10930"><highlight class="normal"></highlight></codeline>
<codeline lineno="10931"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Computing<sp/>class<sp/>relations...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10932"><highlight class="normal"><sp/><sp/>computeTemplateClassRelations();</highlight></codeline>
<codeline lineno="10933"><highlight class="normal"><sp/><sp/>flushUnresolvedRelations();</highlight></codeline>
<codeline lineno="10934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;OPTIMIZE_OUTPUT_VHDL&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="10935"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="10936"><highlight class="normal"><sp/><sp/><sp/><sp/>VhdlDocGen::computeVhdlComponentRelations();<sp/></highlight></codeline>
<codeline lineno="10937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10938"><highlight class="normal"><sp/><sp/>computeClassRelations();</highlight></codeline>
<codeline lineno="10939"><highlight class="normal"><sp/><sp/>g_classEntries.clear();</highlight></codeline>
<codeline lineno="10940"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10941"><highlight class="normal"></highlight></codeline>
<codeline lineno="10942"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Add<sp/>enum<sp/>values<sp/>to<sp/>enums...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10943"><highlight class="normal"><sp/><sp/>addEnumValuesToEnums(rootNav);</highlight></codeline>
<codeline lineno="10944"><highlight class="normal"><sp/><sp/>findEnumDocumentation(rootNav);</highlight></codeline>
<codeline lineno="10945"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10946"><highlight class="normal"></highlight></codeline>
<codeline lineno="10947"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Searching<sp/>for<sp/>member<sp/>function<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10948"><highlight class="normal"><sp/><sp/>findObjCMethodDefinitions(rootNav);</highlight></codeline>
<codeline lineno="10949"><highlight class="normal"><sp/><sp/>findMemberDocumentation(rootNav);<sp/></highlight><highlight class="comment">//<sp/>may<sp/>introduce<sp/>new<sp/>members<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10950"><highlight class="normal"></highlight></codeline>
<codeline lineno="10951"><highlight class="normal"><sp/><sp/>transferRelatedFunctionDocumentation();</highlight></codeline>
<codeline lineno="10952"><highlight class="normal"><sp/><sp/>transferFunctionDocumentation();</highlight></codeline>
<codeline lineno="10953"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10954"><highlight class="normal"></highlight></codeline>
<codeline lineno="10955"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>page<sp/>list...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10956"><highlight class="normal"><sp/><sp/>buildPageList(rootNav);</highlight></codeline>
<codeline lineno="10957"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10958"><highlight class="normal"></highlight></codeline>
<codeline lineno="10959"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Search<sp/>for<sp/>main<sp/>page...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10960"><highlight class="normal"><sp/><sp/>findMainPage(rootNav);</highlight></codeline>
<codeline lineno="10961"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10962"><highlight class="normal"></highlight></codeline>
<codeline lineno="10963"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Computing<sp/>page<sp/>relations...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10964"><highlight class="normal"><sp/><sp/>computePageRelations(rootNav);</highlight></codeline>
<codeline lineno="10965"><highlight class="normal"><sp/><sp/>checkPageRelations();</highlight></codeline>
<codeline lineno="10966"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10967"><highlight class="normal"></highlight></codeline>
<codeline lineno="10968"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Determining<sp/>the<sp/>scope<sp/>of<sp/>groups...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10969"><highlight class="normal"><sp/><sp/>findGroupScope(rootNav);</highlight></codeline>
<codeline lineno="10970"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10971"><highlight class="normal"></highlight></codeline>
<codeline lineno="10972"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Sorting<sp/>lists...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10973"><highlight class="normal"><sp/><sp/>Doxygen::memberNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1ab6da88a61ee284dfbd07830fcd63aed3" kindref="member">sort</ref>();</highlight></codeline>
<codeline lineno="10974"><highlight class="normal"><sp/><sp/>Doxygen::functionNameSDict-&gt;<ref refid="d1/d50/class_s_dict_1ab6da88a61ee284dfbd07830fcd63aed3" kindref="member">sort</ref>();</highlight></codeline>
<codeline lineno="10975"><highlight class="normal"><sp/><sp/>Doxygen::hiddenClasses-&gt;<ref refid="d1/d50/class_s_dict_1ab6da88a61ee284dfbd07830fcd63aed3" kindref="member">sort</ref>();</highlight></codeline>
<codeline lineno="10976"><highlight class="normal"><sp/><sp/>Doxygen::classSDict-&gt;<ref refid="d1/d50/class_s_dict_1ab6da88a61ee284dfbd07830fcd63aed3" kindref="member">sort</ref>();</highlight></codeline>
<codeline lineno="10977"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10978"><highlight class="normal"></highlight></codeline>
<codeline lineno="10979"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Freeing<sp/>entry<sp/>tree\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>rootNav;</highlight></codeline>
<codeline lineno="10981"><highlight class="normal"><sp/><sp/>g_storage-&gt;close();</highlight></codeline>
<codeline lineno="10982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>g_storage;</highlight></codeline>
<codeline lineno="10983"><highlight class="normal"><sp/><sp/>g_storage=0;</highlight></codeline>
<codeline lineno="10984"><highlight class="normal"></highlight></codeline>
<codeline lineno="10985"><highlight class="normal"><sp/><sp/>QDir<sp/>thisDir;</highlight></codeline>
<codeline lineno="10986"><highlight class="normal"><sp/><sp/>thisDir.remove(Doxygen::entryDBFileName);</highlight></codeline>
<codeline lineno="10987"><highlight class="normal"></highlight></codeline>
<codeline lineno="10988"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Determining<sp/>which<sp/>enums<sp/>are<sp/>documented\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10989"><highlight class="normal"><sp/><sp/>findDocumentedEnumValues();</highlight></codeline>
<codeline lineno="10990"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10991"><highlight class="normal"></highlight></codeline>
<codeline lineno="10992"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Computing<sp/>member<sp/>relations...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10993"><highlight class="normal"><sp/><sp/>mergeCategories();</highlight></codeline>
<codeline lineno="10994"><highlight class="normal"><sp/><sp/>computeMemberRelations();</highlight></codeline>
<codeline lineno="10995"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="10996"><highlight class="normal"></highlight></codeline>
<codeline lineno="10997"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Building<sp/>full<sp/>member<sp/>lists<sp/>recursively...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10998"><highlight class="normal"><sp/><sp/>buildCompleteMemberLists();</highlight></codeline>
<codeline lineno="10999"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11000"><highlight class="normal"></highlight></codeline>
<codeline lineno="11001"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Adding<sp/>members<sp/>to<sp/>member<sp/>groups.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11002"><highlight class="normal"><sp/><sp/>addMembersToMemberGroup();</highlight></codeline>
<codeline lineno="11003"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11004"><highlight class="normal"></highlight></codeline>
<codeline lineno="11005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;DISTRIBUTE_GROUP_DOC&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11006"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11007"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Distributing<sp/>member<sp/>group<sp/>documentation.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11008"><highlight class="normal"><sp/><sp/><sp/><sp/>distributeMemberGroupDocumentation();</highlight></codeline>
<codeline lineno="11009"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11011"><highlight class="normal"></highlight></codeline>
<codeline lineno="11012"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Computing<sp/>member<sp/>references...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11013"><highlight class="normal"><sp/><sp/>computeMemberReferences();</highlight></codeline>
<codeline lineno="11014"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11015"><highlight class="normal"></highlight></codeline>
<codeline lineno="11016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;INHERIT_DOCS&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11017"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11018"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Inheriting<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11019"><highlight class="normal"><sp/><sp/><sp/><sp/>inheritDocumentation();</highlight></codeline>
<codeline lineno="11020"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11021"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11022"><highlight class="normal"></highlight></codeline>
<codeline lineno="11023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>shortest<sp/>possible<sp/>names<sp/>of<sp/>all<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>losing<sp/>the<sp/>uniqueness<sp/>of<sp/>the<sp/>file<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11025"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>disk<sp/>names...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11026"><highlight class="normal"><sp/><sp/>Doxygen::inputNameList-&gt;generateDiskNames();</highlight></codeline>
<codeline lineno="11027"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11028"><highlight class="normal"></highlight></codeline>
<codeline lineno="11029"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Adding<sp/>source<sp/>references...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11030"><highlight class="normal"><sp/><sp/>addSourceReferences();</highlight></codeline>
<codeline lineno="11031"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11032"><highlight class="normal"></highlight></codeline>
<codeline lineno="11033"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Adding<sp/>xrefitems...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11034"><highlight class="normal"><sp/><sp/>addListReferences();</highlight></codeline>
<codeline lineno="11035"><highlight class="normal"><sp/><sp/>generateXRefPages();</highlight></codeline>
<codeline lineno="11036"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11037"><highlight class="normal"></highlight></codeline>
<codeline lineno="11038"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Sorting<sp/>member<sp/>lists...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11039"><highlight class="normal"><sp/><sp/>sortMemberLists();</highlight></codeline>
<codeline lineno="11040"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11041"><highlight class="normal"></highlight></codeline>
<codeline lineno="11042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;DIRECTORY_GRAPH&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11043"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11044"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Computing<sp/>dependencies<sp/>between<sp/>directories...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11045"><highlight class="normal"><sp/><sp/><sp/><sp/>computeDirDependencies();</highlight></codeline>
<codeline lineno="11046"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11047"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11048"><highlight class="normal"></highlight></codeline>
<codeline lineno="11049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//g_s.begin(&quot;Resolving<sp/>citations...\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Doxygen::citeDict-&gt;resolve();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11051"><highlight class="normal"></highlight></codeline>
<codeline lineno="11052"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>citations<sp/>page...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11053"><highlight class="normal"><sp/><sp/>Doxygen::citeDict-&gt;<ref refid="de/dd4/class_cite_dict_1a91ef397962cb60584010cd486d2acc9f" kindref="member" tooltip="Generate the citations page.">generatePage</ref>();</highlight></codeline>
<codeline lineno="11054"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11055"><highlight class="normal"></highlight></codeline>
<codeline lineno="11056"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Counting<sp/>data<sp/>structures...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11057"><highlight class="normal"><sp/><sp/>countDataStructures();</highlight></codeline>
<codeline lineno="11058"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11059"><highlight class="normal"></highlight></codeline>
<codeline lineno="11060"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Resolving<sp/>user<sp/>defined<sp/>references...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11061"><highlight class="normal"><sp/><sp/>resolveUserReferences();</highlight></codeline>
<codeline lineno="11062"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11063"><highlight class="normal"></highlight></codeline>
<codeline lineno="11064"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Finding<sp/>anchors<sp/>and<sp/>sections<sp/>in<sp/>the<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11065"><highlight class="normal"><sp/><sp/>findSectionsInDocumentation();</highlight></codeline>
<codeline lineno="11066"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11067"><highlight class="normal"></highlight></codeline>
<codeline lineno="11068"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Transferring<sp/>function<sp/>references...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11069"><highlight class="normal"><sp/><sp/>transferFunctionReferences();</highlight></codeline>
<codeline lineno="11070"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11071"><highlight class="normal"></highlight></codeline>
<codeline lineno="11072"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Combining<sp/>using<sp/>relations...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11073"><highlight class="normal"><sp/><sp/>combineUsingRelations();</highlight></codeline>
<codeline lineno="11074"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11075"><highlight class="normal"></highlight></codeline>
<codeline lineno="11076"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Adding<sp/>members<sp/>to<sp/>index<sp/>pages...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11077"><highlight class="normal"><sp/><sp/>addMembersToIndex();</highlight></codeline>
<codeline lineno="11078"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11079"><highlight class="normal"></highlight></codeline>
<codeline lineno="11080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;OPTIMIZE_OUTPUT_VHDL&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="11081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HAVE_DOT&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Config_getEnum(</highlight><highlight class="stringliteral">&quot;DOT_IMAGE_FORMAT&quot;</highlight><highlight class="normal">)==</highlight><highlight class="stringliteral">&quot;svg&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11083"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11084"><highlight class="normal"><sp/><sp/><sp/><sp/>VhdlDocGen::writeOverview();</highlight></codeline>
<codeline lineno="11085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11087"><highlight class="normal"></highlight></codeline>
<codeline lineno="11088"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateOutput()</highlight></codeline>
<codeline lineno="11089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11090"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="11091"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialize<sp/>output<sp/>generators<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11092"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11093"><highlight class="normal"></highlight></codeline>
<codeline lineno="11095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_dumpSymbolMap)</highlight></codeline>
<codeline lineno="11096"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11097"><highlight class="normal"><sp/><sp/><sp/><sp/>dumpSymbolMap();</highlight></codeline>
<codeline lineno="11098"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="11099"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11100"><highlight class="normal"></highlight></codeline>
<codeline lineno="11101"><highlight class="normal"><sp/><sp/>initSearchIndexer();</highlight></codeline>
<codeline lineno="11102"><highlight class="normal"></highlight></codeline>
<codeline lineno="11103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateHtml<sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_HTML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateLatex<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_LATEX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateMan<sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_MAN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateRtf<sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_RTF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11107"><highlight class="normal"></highlight></codeline>
<codeline lineno="11108"><highlight class="normal"></highlight></codeline>
<codeline lineno="11109"><highlight class="normal"><sp/><sp/>g_outputList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref>(TRUE);</highlight></codeline>
<codeline lineno="11110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtml)<sp/><sp/></highlight></codeline>
<codeline lineno="11111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11112"><highlight class="normal"><sp/><sp/><sp/><sp/>g_outputList-&gt;add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d41/class_html_generator" kindref="compound" tooltip="Generator for HTML output.">HtmlGenerator</ref>);</highlight></codeline>
<codeline lineno="11113"><highlight class="normal"><sp/><sp/><sp/><sp/>HtmlGenerator::init();</highlight></codeline>
<codeline lineno="11114"><highlight class="normal"></highlight></codeline>
<codeline lineno="11115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>HTML<sp/>indexers<sp/>that<sp/>are<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateHtmlHelp<sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_HTMLHELP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateEclipseHelp<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_ECLIPSEHELP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateQhp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_QHP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateTreeView<sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_TREEVIEW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>generateDocSet<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_DOCSET&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateEclipseHelp)<sp/>Doxygen::indexList-&gt;<ref refid="d9/d57/class_index_list_1a8120913e328f96fec6e5b2070902f4e7" kindref="member" tooltip="Add an index generator to the list.">addIndex</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/dd3/class_eclipse_help" kindref="compound" tooltip="Generator for Eclipse help files.">EclipseHelp</ref>);</highlight></codeline>
<codeline lineno="11122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtmlHelp)<sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;<ref refid="d9/d57/class_index_list_1a8120913e328f96fec6e5b2070902f4e7" kindref="member" tooltip="Add an index generator to the list.">addIndex</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/db3/class_html_help" kindref="compound" tooltip="A class that generated the HTML Help specific files.">HtmlHelp</ref>);</highlight></codeline>
<codeline lineno="11123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateQhp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;<ref refid="d9/d57/class_index_list_1a8120913e328f96fec6e5b2070902f4e7" kindref="member" tooltip="Add an index generator to the list.">addIndex</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d4f/class_qhp" kindref="compound">Qhp</ref>);</highlight></codeline>
<codeline lineno="11124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateTreeView)<sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;<ref refid="d9/d57/class_index_list_1a8120913e328f96fec6e5b2070902f4e7" kindref="member" tooltip="Add an index generator to the list.">addIndex</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/d14/class_f_t_v_help" kindref="compound" tooltip="A class that generates a dynamic tree view side panel.">FTVHelp</ref>(TRUE));</highlight></codeline>
<codeline lineno="11125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateDocSet)<sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;<ref refid="d9/d57/class_index_list_1a8120913e328f96fec6e5b2070902f4e7" kindref="member" tooltip="Add an index generator to the list.">addIndex</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d32/class_doc_sets" kindref="compound" tooltip="A class that generates docset files.">DocSets</ref>);</highlight></codeline>
<codeline lineno="11126"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::indexList-&gt;initialize();</highlight></codeline>
<codeline lineno="11127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d41/class_html_generator_1a7306ef9abbceafd6074b4d883a59f033" kindref="member" tooltip="Additional initialization after indices have been created.">HtmlGenerator::writeTabData</ref>();</highlight></codeline>
<codeline lineno="11128"><highlight class="normal"></highlight></codeline>
<codeline lineno="11129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>static<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11130"><highlight class="normal"><sp/><sp/><sp/><sp/>copyStyleSheet();</highlight></codeline>
<codeline lineno="11131"><highlight class="normal"><sp/><sp/><sp/><sp/>copyLogo();</highlight></codeline>
<codeline lineno="11132"><highlight class="normal"><sp/><sp/><sp/><sp/>copyExtraFiles(</highlight><highlight class="stringliteral">&quot;HTML_EXTRA_FILES&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11133"><highlight class="normal"><sp/><sp/><sp/><sp/>FTVHelp::generateTreeViewImages();</highlight></codeline>
<codeline lineno="11134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateLatex)<sp/></highlight></codeline>
<codeline lineno="11136"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11137"><highlight class="normal"><sp/><sp/><sp/><sp/>g_outputList-&gt;add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d77/class_latex_generator" kindref="compound" tooltip="Generator for LaTeX output.">LatexGenerator</ref>);</highlight></codeline>
<codeline lineno="11138"><highlight class="normal"><sp/><sp/><sp/><sp/>LatexGenerator::init();</highlight></codeline>
<codeline lineno="11139"><highlight class="normal"></highlight></codeline>
<codeline lineno="11140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>static<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11141"><highlight class="normal"><sp/><sp/><sp/><sp/>copyExtraFiles(</highlight><highlight class="stringliteral">&quot;LATEX_EXTRA_FILES&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;LATEX_OUTPUT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateMan)</highlight></codeline>
<codeline lineno="11144"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11145"><highlight class="normal"><sp/><sp/><sp/><sp/>g_outputList-&gt;add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/da5/class_man_generator" kindref="compound" tooltip="Generator for Man page output.">ManGenerator</ref>);</highlight></codeline>
<codeline lineno="11146"><highlight class="normal"><sp/><sp/><sp/><sp/>ManGenerator::init();</highlight></codeline>
<codeline lineno="11147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateRtf)</highlight></codeline>
<codeline lineno="11149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11150"><highlight class="normal"><sp/><sp/><sp/><sp/>g_outputList-&gt;add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/da4/class_r_t_f_generator" kindref="compound" tooltip="Generator for RTF output.">RTFGenerator</ref>);</highlight></codeline>
<codeline lineno="11151"><highlight class="normal"><sp/><sp/><sp/><sp/>RTFGenerator::init();</highlight></codeline>
<codeline lineno="11152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;USE_HTAGS&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11154"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11155"><highlight class="normal"><sp/><sp/><sp/><sp/>Htags::useHtags<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="11156"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>htmldir<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d4/db0/struct_htags_1a459ba4c5a4e6d3308cee25b93448f0cf" kindref="member">Htags::execute</ref>(htmldir))</highlight></codeline>
<codeline lineno="11158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;USE_HTAGS<sp/>is<sp/>YES<sp/>but<sp/>htags(1)<sp/>failed.<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d4/db0/struct_htags_1a91a5a1322fbff8f8ad136a3372964512" kindref="member">Htags::loadFilemap</ref>(htmldir))</highlight></codeline>
<codeline lineno="11160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;htags(1)<sp/>ended<sp/>normally<sp/>but<sp/>failed<sp/>to<sp/>load<sp/>the<sp/>filemap.<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11162"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="11163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="11164"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Generate<sp/>documentation<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11165"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11166"><highlight class="normal"></highlight></codeline>
<codeline lineno="11167"><highlight class="normal"><sp/><sp/>QFile<sp/>*tag=0;</highlight></codeline>
<codeline lineno="11168"><highlight class="normal"><sp/><sp/>QCString<sp/>&amp;generateTagFile<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;GENERATE_TAGFILE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!generateTagFile.isEmpty())</highlight></codeline>
<codeline lineno="11170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11171"><highlight class="normal"><sp/><sp/><sp/><sp/>tag=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QFile(generateTagFile);</highlight></codeline>
<codeline lineno="11172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tag-&gt;open(IO_WriteOnly))</highlight></codeline>
<codeline lineno="11173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>tag<sp/>file<sp/>%s<sp/>for<sp/>writing\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="11175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generateTagFile.data()</highlight></codeline>
<codeline lineno="11176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="11177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="11178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="11179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11180"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile.setDevice(tag);</highlight></codeline>
<codeline lineno="11181"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;?xml<sp/>version=&apos;1.0&apos;<sp/>encoding=&apos;UTF-8&apos;<sp/>standalone=&apos;yes&apos;<sp/>?&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="11182"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;tagfile&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="11183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11184"><highlight class="normal"></highlight></codeline>
<codeline lineno="11185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtml)<sp/><sp/>writeDoxFont(Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateLatex)<sp/>writeDoxFont(Config_getString(</highlight><highlight class="stringliteral">&quot;LATEX_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateRtf)<sp/><sp/><sp/>writeDoxFont(Config_getString(</highlight><highlight class="stringliteral">&quot;RTF_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11188"><highlight class="normal"></highlight></codeline>
<codeline lineno="11189"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>style<sp/>sheet...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;writing<sp/>style<sp/>info\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11191"><highlight class="normal"><sp/><sp/>g_outputList-&gt;writeStyleInfo(0);<sp/></highlight><highlight class="comment">//<sp/>write<sp/>first<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11192"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11193"><highlight class="normal"></highlight></codeline>
<codeline lineno="11194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>searchEngine<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;SEARCHENGINE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>serverBasedSearch<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;SERVER_BASED_SEARCH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11196"><highlight class="normal"></highlight></codeline>
<codeline lineno="11197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>search<sp/>indices<sp/>(need<sp/>to<sp/>do<sp/>this<sp/>before<sp/>writing<sp/>other<sp/>HTML</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pages<sp/>as<sp/>these<sp/>contain<sp/>a<sp/>drop<sp/>down<sp/>menu<sp/>with<sp/>options<sp/>depending<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>what<sp/>categories<sp/>we<sp/>find<sp/>in<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtml<sp/>&amp;&amp;<sp/>searchEngine)</highlight></codeline>
<codeline lineno="11201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11202"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>search<sp/>indices...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11203"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/>searchDirName<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">)+</highlight><highlight class="stringliteral">&quot;/search&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11204"><highlight class="normal"><sp/><sp/><sp/><sp/>QDir<sp/>searchDir(searchDirName);</highlight></codeline>
<codeline lineno="11205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!searchDir.exists()<sp/>&amp;&amp;<sp/>!searchDir.mkdir(searchDirName))</highlight></codeline>
<codeline lineno="11206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>search<sp/>results<sp/>directory<sp/>&apos;%s&apos;<sp/>$PWD=&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="11208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchDirName.data(),QDir::currentDirPath().data());</highlight></codeline>
<codeline lineno="11209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="11210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11211"><highlight class="normal"><sp/><sp/><sp/><sp/>HtmlGenerator::writeSearchData(searchDirName);</highlight></codeline>
<codeline lineno="11212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!serverBasedSearch)<sp/></highlight><highlight class="comment">//<sp/>client<sp/>side<sp/>search<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writeJavascriptSearchIndex();</highlight></codeline>
<codeline lineno="11215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11216"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11218"><highlight class="normal"></highlight></codeline>
<codeline lineno="11219"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>example<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11220"><highlight class="normal"><sp/><sp/>generateExampleDocs();</highlight></codeline>
<codeline lineno="11221"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11222"><highlight class="normal"></highlight></codeline>
<codeline lineno="11223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Htags::useHtags)</highlight></codeline>
<codeline lineno="11224"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11225"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>file<sp/>sources...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11226"><highlight class="normal"><sp/><sp/><sp/><sp/>generateFileSources();</highlight></codeline>
<codeline lineno="11227"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11229"><highlight class="normal"></highlight></codeline>
<codeline lineno="11230"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>file<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11231"><highlight class="normal"><sp/><sp/>generateFileDocs();</highlight></codeline>
<codeline lineno="11232"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11233"><highlight class="normal"></highlight></codeline>
<codeline lineno="11234"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>page<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11235"><highlight class="normal"><sp/><sp/>generatePageDocs();</highlight></codeline>
<codeline lineno="11236"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11237"><highlight class="normal"></highlight></codeline>
<codeline lineno="11238"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>group<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11239"><highlight class="normal"><sp/><sp/>generateGroupDocs();</highlight></codeline>
<codeline lineno="11240"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11241"><highlight class="normal"></highlight></codeline>
<codeline lineno="11242"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>class<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11243"><highlight class="normal"><sp/><sp/>generateClassDocs();</highlight></codeline>
<codeline lineno="11244"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11245"><highlight class="normal"></highlight></codeline>
<codeline lineno="11246"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>namespace<sp/>index...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11247"><highlight class="normal"><sp/><sp/>generateNamespaceDocs();</highlight></codeline>
<codeline lineno="11248"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11249"><highlight class="normal"></highlight></codeline>
<codeline lineno="11250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_LEGEND&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11252"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>graph<sp/>info<sp/>page...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11253"><highlight class="normal"><sp/><sp/><sp/><sp/>writeGraphInfo(*g_outputList);</highlight></codeline>
<codeline lineno="11254"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11256"><highlight class="normal"></highlight></codeline>
<codeline lineno="11257"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>directory<sp/>documentation...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11258"><highlight class="normal"><sp/><sp/>generateDirDocs(*g_outputList);</highlight></codeline>
<codeline lineno="11259"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11260"><highlight class="normal"></highlight></codeline>
<codeline lineno="11261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::formulaList-&gt;count()&gt;0<sp/>&amp;&amp;<sp/>generateHtml</highlight></codeline>
<codeline lineno="11262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!Config_getBool(</highlight><highlight class="stringliteral">&quot;USE_MATHJAX&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11263"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11264"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>bitmaps<sp/>for<sp/>formulas<sp/>in<sp/>HTML...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11265"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::formulaList-&gt;generateBitmaps(Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11266"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11268"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="11269"><highlight class="normal"><sp/><sp/>writeMainPageTagFileData();</highlight></codeline>
<codeline lineno="11270"><highlight class="normal"></highlight></codeline>
<codeline lineno="11271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_outputList-&gt;count()&gt;0)</highlight></codeline>
<codeline lineno="11272"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11273"><highlight class="normal"><sp/><sp/><sp/><sp/>writeIndexHierarchy(*g_outputList);</highlight></codeline>
<codeline lineno="11274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11275"><highlight class="normal"></highlight></codeline>
<codeline lineno="11276"><highlight class="normal"><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;finalizing<sp/>index<sp/>lists...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11277"><highlight class="normal"><sp/><sp/>Doxygen::indexList-&gt;finalize();</highlight></codeline>
<codeline lineno="11278"><highlight class="normal"><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11279"><highlight class="normal"></highlight></codeline>
<codeline lineno="11280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!generateTagFile.isEmpty())</highlight></codeline>
<codeline lineno="11281"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11282"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::tagFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/tagfile&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="11283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tag;</highlight></codeline>
<codeline lineno="11284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11285"><highlight class="normal"></highlight></codeline>
<codeline lineno="11286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;DOT_CLEANUP&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11287"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtml)</highlight></codeline>
<codeline lineno="11289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removeDoxFont(Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateRtf)<sp/><sp/></highlight></codeline>
<codeline lineno="11291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removeDoxFont(Config_getString(</highlight><highlight class="stringliteral">&quot;RTF_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateLatex)<sp/><sp/></highlight></codeline>
<codeline lineno="11293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removeDoxFont(Config_getString(</highlight><highlight class="stringliteral">&quot;LATEX_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11295"><highlight class="normal"></highlight></codeline>
<codeline lineno="11296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_XML&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11297"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11298"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>XML<sp/>output...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11299"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::generatingXmlOutput=TRUE;</highlight></codeline>
<codeline lineno="11300"><highlight class="normal"><sp/><sp/><sp/><sp/>generateXML();</highlight></codeline>
<codeline lineno="11301"><highlight class="normal"><sp/><sp/><sp/><sp/>Doxygen::generatingXmlOutput=FALSE;</highlight></codeline>
<codeline lineno="11302"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_SQLITE3)</highlight></codeline>
<codeline lineno="11305"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11306"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>SQLITE3<sp/>output...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11307"><highlight class="normal"><sp/><sp/><sp/><sp/>generateSqlite3();</highlight></codeline>
<codeline lineno="11308"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11310"><highlight class="normal"></highlight></codeline>
<codeline lineno="11311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_DOCBOOK&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11312"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11313"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>Docbook<sp/>output...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11314"><highlight class="normal"><sp/><sp/><sp/><sp/>generateDocbook();</highlight></codeline>
<codeline lineno="11315"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11317"><highlight class="normal"></highlight></codeline>
<codeline lineno="11318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_AUTOGEN_DEF&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11320"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>AutoGen<sp/>DEF<sp/>output...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11321"><highlight class="normal"><sp/><sp/><sp/><sp/>generateDEF();</highlight></codeline>
<codeline lineno="11322"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_PERLMOD&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11325"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11326"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>Perl<sp/>module<sp/>output...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11327"><highlight class="normal"><sp/><sp/><sp/><sp/>generatePerlMod();</highlight></codeline>
<codeline lineno="11328"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtml<sp/>&amp;&amp;<sp/>searchEngine<sp/>&amp;&amp;<sp/>serverBasedSearch)</highlight></codeline>
<codeline lineno="11331"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11332"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Generating<sp/>search<sp/>index\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Doxygen::searchIndex-&gt;kind()==SearchIndexIntf::Internal)<sp/></highlight><highlight class="comment">//<sp/>write<sp/>own<sp/>search<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HtmlGenerator::writeSearchPage();</highlight></codeline>
<codeline lineno="11336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;write(Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">)+</highlight><highlight class="stringliteral">&quot;/search/search.idx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>write<sp/>data<sp/>for<sp/>external<sp/>search<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11339"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HtmlGenerator::writeExternalSearchPage();</highlight></codeline>
<codeline lineno="11341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QCString<sp/>searchDataFile<sp/>=<sp/>Config_getString(</highlight><highlight class="stringliteral">&quot;SEARCHDATA_FILE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(searchDataFile.isEmpty())</highlight></codeline>
<codeline lineno="11343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchDataFile=</highlight><highlight class="stringliteral">&quot;searchdata.xml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!portable_isAbsolutePath(searchDataFile))</highlight></codeline>
<codeline lineno="11347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchDataFile.prepend(Config_getString(</highlight><highlight class="stringliteral">&quot;OUTPUT_DIRECTORY&quot;</highlight><highlight class="normal">)+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::searchIndex-&gt;write(searchDataFile);</highlight></codeline>
<codeline lineno="11351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11352"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11354"><highlight class="normal"></highlight></codeline>
<codeline lineno="11355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateRtf)</highlight></codeline>
<codeline lineno="11356"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11357"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Combining<sp/>RTF<sp/>output...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d0/da4/class_r_t_f_generator_1a62498deb4b617b2cfb75381f6508a4ed" kindref="member" tooltip="This is an API to a VERY brittle RTF preprocessor that combines nested RTF files.">RTFGenerator::preProcessFileInplace</ref>(Config_getString(</highlight><highlight class="stringliteral">&quot;RTF_OUTPUT&quot;</highlight><highlight class="normal">),</highlight><highlight class="stringliteral">&quot;refman.rtf&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;An<sp/>error<sp/>occurred<sp/>during<sp/>post-processing<sp/>the<sp/>RTF<sp/>files!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11362"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11364"><highlight class="normal"></highlight></codeline>
<codeline lineno="11365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Config_getBool(</highlight><highlight class="stringliteral">&quot;HAVE_DOT&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11366"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11367"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Running<sp/>dot...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11368"><highlight class="normal"><sp/><sp/><sp/><sp/>DotManager::instance()-&gt;run();</highlight></codeline>
<codeline lineno="11369"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11371"><highlight class="normal"></highlight></codeline>
<codeline lineno="11372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generateHtml<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_HTMLHELP&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="11374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!Config_getString(</highlight><highlight class="stringliteral">&quot;HHC_LOCATION&quot;</highlight><highlight class="normal">).isEmpty())</highlight></codeline>
<codeline lineno="11375"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11376"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Running<sp/>html<sp/>help<sp/>compiler...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11377"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>oldDir<sp/>=<sp/>QDir::currentDirPath();</highlight></codeline>
<codeline lineno="11378"><highlight class="normal"><sp/><sp/><sp/><sp/>QDir::setCurrent(Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11379"><highlight class="normal"><sp/><sp/><sp/><sp/>portable_sysTimerStart();</highlight></codeline>
<codeline lineno="11380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(portable_system(Config_getString(</highlight><highlight class="stringliteral">&quot;HHC_LOCATION&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;index.hhp&quot;</highlight><highlight class="normal">,<sp/>FALSE))</highlight></codeline>
<codeline lineno="11381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>run<sp/>html<sp/>help<sp/>compiler<sp/>on<sp/>index.hhp\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11384"><highlight class="normal"><sp/><sp/><sp/><sp/>portable_sysTimerStop();</highlight></codeline>
<codeline lineno="11385"><highlight class="normal"><sp/><sp/><sp/><sp/>QDir::setCurrent(oldDir);</highlight></codeline>
<codeline lineno="11386"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>generateHtml<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;GENERATE_QHP&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="11390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!Config_getString(</highlight><highlight class="stringliteral">&quot;QHG_LOCATION&quot;</highlight><highlight class="normal">).isEmpty())</highlight></codeline>
<codeline lineno="11391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11392"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.begin(</highlight><highlight class="stringliteral">&quot;Running<sp/>qhelpgenerator...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11393"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qhpFileName<sp/>=<sp/>Qhp::getQhpFileName();</highlight></codeline>
<codeline lineno="11394"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>qchFileName<sp/>=<sp/>getQchFileName();</highlight></codeline>
<codeline lineno="11395"><highlight class="normal"></highlight></codeline>
<codeline lineno="11396"><highlight class="normal"><sp/><sp/><sp/><sp/>QCString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>args<sp/>=<sp/>QCString().sprintf(</highlight><highlight class="stringliteral">&quot;%s<sp/>-o<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,<sp/>qhpFileName.data(),<sp/>qchFileName.data());</highlight></codeline>
<codeline lineno="11397"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>oldDir<sp/>=<sp/>QDir::currentDirPath();</highlight></codeline>
<codeline lineno="11398"><highlight class="normal"><sp/><sp/><sp/><sp/>QDir::setCurrent(Config_getString(</highlight><highlight class="stringliteral">&quot;HTML_OUTPUT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11399"><highlight class="normal"><sp/><sp/><sp/><sp/>portable_sysTimerStart();</highlight></codeline>
<codeline lineno="11400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(portable_system(Config_getString(</highlight><highlight class="stringliteral">&quot;QHG_LOCATION&quot;</highlight><highlight class="normal">),<sp/>args.data(),<sp/>FALSE))</highlight></codeline>
<codeline lineno="11401"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>run<sp/>qhelpgenerator<sp/>on<sp/>index.qhp\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11404"><highlight class="normal"><sp/><sp/><sp/><sp/>portable_sysTimerStop();</highlight></codeline>
<codeline lineno="11405"><highlight class="normal"><sp/><sp/><sp/><sp/>QDir::setCurrent(oldDir);</highlight></codeline>
<codeline lineno="11406"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.end();</highlight></codeline>
<codeline lineno="11407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11408"><highlight class="normal"></highlight></codeline>
<codeline lineno="11409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheParam;</highlight></codeline>
<codeline lineno="11410"><highlight class="normal"><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;lookup<sp/>cache<sp/>used<sp/>%d/%d<sp/>hits=%d<sp/>misses=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="11411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::lookupCache-&gt;count(),</highlight></codeline>
<codeline lineno="11412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::lookupCache-&gt;size(),</highlight></codeline>
<codeline lineno="11413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::lookupCache-&gt;hits(),</highlight></codeline>
<codeline lineno="11414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Doxygen::lookupCache-&gt;misses());</highlight></codeline>
<codeline lineno="11415"><highlight class="normal"><sp/><sp/>cacheParam<sp/>=<sp/>computeIdealCacheParam(Doxygen::lookupCache-&gt;misses()*2/3);<sp/></highlight><highlight class="comment">//<sp/>part<sp/>of<sp/>the<sp/>cache<sp/>is<sp/>flushed,<sp/>hence<sp/>the<sp/>2/3<sp/>correction<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheParam&gt;Config_getInt(</highlight><highlight class="stringliteral">&quot;LOOKUP_CACHE_SIZE&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="11417"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11418"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Note:<sp/>based<sp/>on<sp/>cache<sp/>misses<sp/>the<sp/>ideal<sp/>setting<sp/>for<sp/>LOOKUP_CACHE_SIZE<sp/>is<sp/>%d<sp/>at<sp/>the<sp/>cost<sp/>of<sp/>higher<sp/>memory<sp/>usage.\n&quot;</highlight><highlight class="normal">,cacheParam);</highlight></codeline>
<codeline lineno="11419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11420"><highlight class="normal"></highlight></codeline>
<codeline lineno="11421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Debug::isFlagSet(Debug::Time))</highlight></codeline>
<codeline lineno="11422"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11423"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;Total<sp/>elapsed<sp/>time:<sp/>%.3f<sp/>seconds\n(of<sp/>which<sp/>%.3f<sp/>seconds<sp/>waiting<sp/>for<sp/>external<sp/>tools<sp/>to<sp/>finish)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="11424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Doxygen::runningTime.elapsed())/1000.0,</highlight></codeline>
<codeline lineno="11425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portable_getSysElapsedTime()</highlight></codeline>
<codeline lineno="11426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="11427"><highlight class="normal"><sp/><sp/><sp/><sp/>g_s.print();</highlight></codeline>
<codeline lineno="11428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11430"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="11431"><highlight class="normal"><sp/><sp/><sp/><sp/>msg(</highlight><highlight class="stringliteral">&quot;finished...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11433"><highlight class="normal"></highlight></codeline>
<codeline lineno="11434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="11435"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>cleaning<sp/>up<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11436"><highlight class="comment"><sp/><sp/><sp/>**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11437"><highlight class="normal"></highlight></codeline>
<codeline lineno="11438"><highlight class="normal"><sp/><sp/>cleanUpDoxygen();</highlight></codeline>
<codeline lineno="11439"><highlight class="normal"></highlight></codeline>
<codeline lineno="11440"><highlight class="normal"><sp/><sp/>finializeSearchIndexer();</highlight></codeline>
<codeline lineno="11441"><highlight class="normal"><sp/><sp/>Doxygen::symbolStorage-&gt;<ref refid="db/d9d/class_store_1a1a3dd916ae5c4c2e6ca4d13f418344a9" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="11442"><highlight class="normal"><sp/><sp/>QDir<sp/>thisDir;</highlight></codeline>
<codeline lineno="11443"><highlight class="normal"><sp/><sp/>thisDir.remove(Doxygen::objDBFileName);</highlight></codeline>
<codeline lineno="11444"><highlight class="normal"><sp/><sp/><ref refid="dd/d34/class_config_1a9ac848ef56b0923434a50bf658ed147a" kindref="member">Config::deleteInstance</ref>();</highlight></codeline>
<codeline lineno="11445"><highlight class="normal"><sp/><sp/>QTextCodec::deleteAllCodecs();</highlight></codeline>
<codeline lineno="11446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::symbolMap;</highlight></codeline>
<codeline lineno="11447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::clangUsrMap;</highlight></codeline>
<codeline lineno="11448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>Doxygen::symbolStorage;</highlight></codeline>
<codeline lineno="11449"><highlight class="normal"><sp/><sp/>g_successfulRun=TRUE;</highlight></codeline>
<codeline lineno="11450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11451"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/doxygen.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="d6/d10/classlist_8cpp" kind="file">
    <compoundname>classlist.cpp</compoundname>
    <includes refid="d2/df8/classlist_8h" local="yes">classlist.h</includes>
    <includes refid="db/d16/config_8h" local="yes">config.h</includes>
    <includes refid="d8/d3c/util_8h" local="yes">util.h</includes>
    <includes refid="d2/db9/outputlist_8h" local="yes">outputlist.h</includes>
    <includes refid="d8/dce/language_8h" local="yes">language.h</includes>
    <includes refid="d1/da1/doxygen_8h" local="yes">doxygen.h</includes>
    <includes refid="dd/dec/vhdldocgen_8h" local="yes">vhdldocgen.h</includes>
    <includes refid="d8/d65/defargs_8h" local="yes">defargs.h</includes>
    <includes refid="df/d9b/arguments_8h" local="yes">arguments.h</includes>
    <incdepgraph>
      <node id="542">
        <label>qcstring.h</label>
      </node>
      <node id="551">
        <label>qgstring.h</label>
      </node>
      <node id="556">
        <label>outputgen.h</label>
        <link refid="df/d06/outputgen_8h_source"/>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
      </node>
      <node id="557">
        <label>qstack.h</label>
      </node>
      <node id="562">
        <label>qdatetime.h</label>
      </node>
      <node id="546">
        <label>qstrlist.h</label>
      </node>
      <node id="535">
        <label>classlist.h</label>
        <link refid="d2/df8/classlist_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
      </node>
      <node id="550">
        <label>qstring.h</label>
      </node>
      <node id="554">
        <label>outputlist.h</label>
        <link refid="d2/db9/outputlist_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
      </node>
      <node id="534">
        <label>src/classlist.cpp</label>
        <link refid="classlist.cpp"/>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="545" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="554" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
        <childnode refid="569" relation="include">
        </childnode>
        <childnode refid="573" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
      </node>
      <node id="564">
        <label>membergroup.h</label>
        <link refid="d9/d11/membergroup_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="543">
        <label>sortdict.h</label>
        <link refid="d9/d21/sortdict_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
      </node>
      <node id="566">
        <label>memberlist.h</label>
        <link refid="dd/d78/memberlist_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="539">
        <label>qptrdict.h</label>
      </node>
      <node id="559">
        <label>language.h</label>
        <link refid="d8/dce/language_8h_source"/>
        <childnode refid="560" relation="include">
        </childnode>
      </node>
      <node id="572">
        <label>entry.h</label>
        <link refid="d1/dc6/entry_8h_source"/>
        <childnode refid="541" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="551" relation="include">
        </childnode>
      </node>
      <node id="563">
        <label>qcache.h</label>
      </node>
      <node id="538">
        <label>classdef.h</label>
        <link refid="d1/da6/classdef_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="552">
        <label>util.h</label>
        <link refid="d8/d3c/util_8h"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="544">
        <label>qintdict.h</label>
      </node>
      <node id="549">
        <label>qiodevice.h</label>
      </node>
      <node id="545">
        <label>config.h</label>
        <link refid="db/d16/config_8h_source"/>
        <childnode refid="546" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
      </node>
      <node id="568">
        <label>sys/types.h</label>
      </node>
      <node id="541">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="542" relation="include">
        </childnode>
      </node>
      <node id="536">
        <label>qlist.h</label>
      </node>
      <node id="547">
        <label>ftextstream.h</label>
        <link refid="df/d83/ftextstream_8h_source"/>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="550" relation="include">
        </childnode>
        <childnode refid="551" relation="include">
        </childnode>
      </node>
      <node id="561">
        <label>doxygen.h</label>
        <link refid="d1/da1/doxygen_8h_source"/>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="546" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
        <childnode refid="566" relation="include">
        </childnode>
      </node>
      <node id="567">
        <label>memberdef.h</label>
        <link refid="d4/d46/memberdef_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="568" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="573">
        <label>defargs.h</label>
        <link refid="d8/d65/defargs_8h_source"/>
      </node>
      <node id="553">
        <label>ctype.h</label>
      </node>
      <node id="558">
        <label>section.h</label>
        <link refid="d1/d2a/section_8h_source"/>
        <childnode refid="543" relation="include">
        </childnode>
      </node>
      <node id="540">
        <label>definition.h</label>
        <link refid="df/da1/definition_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="555">
        <label>index.h</label>
        <link refid="d1/db5/index_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
      </node>
      <node id="565">
        <label>dirdef.h</label>
        <link refid="d6/d15/dirdef_8h_source"/>
        <childnode refid="543" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
      </node>
      <node id="537">
        <label>qdict.h</label>
      </node>
      <node id="548">
        <label>stdio.h</label>
      </node>
      <node id="569">
        <label>vhdldocgen.h</label>
        <link refid="dd/dec/vhdldocgen_8h_source"/>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
        <childnode refid="570" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
        <childnode refid="572" relation="include">
        </childnode>
      </node>
      <node id="570">
        <label>layout.h</label>
        <link refid="db/d51/layout_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="560">
        <label>translator.h</label>
        <link refid="d9/df1/translator_8h_source"/>
        <childnode refid="538" relation="include">
        </childnode>
      </node>
      <node id="571">
        <label>arguments.h</label>
        <link refid="df/d9b/arguments_8h_source"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d6/d10/classlist_8cpp_1a95a7d0a3607704369971b46dbbadd29f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int compItems</definition>
        <argsstring>(void *item1, void *item2)</argsstring>
        <name>compItems</name>
        <param>
          <type>void *</type>
          <declname>item1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>item2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/classlist.cpp" line="37" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/classlist.cpp" bodystart="36" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>classlist.cpp,v<sp/>1.14<sp/>2001/03/19<sp/>19:27:39<sp/>root<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1997-2013<sp/>by<sp/>Dimitri<sp/>van<sp/>Heesch.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and<sp/>distribute<sp/>this<sp/>software<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>documentation<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>is<sp/>hereby<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>granted.<sp/>No<sp/>representations<sp/>are<sp/>made<sp/>about<sp/>the<sp/>suitability<sp/>of<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>for<sp/>any<sp/>purpose.<sp/>It<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;<sp/>without<sp/>express<sp/>or<sp/>implied<sp/>warranty.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Documents<sp/>produced<sp/>by<sp/>Doxygen<sp/>are<sp/>derivative<sp/>works<sp/>derived<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>input<sp/>used<sp/>in<sp/>their<sp/>production;<sp/>they<sp/>are<sp/>not<sp/>affected<sp/>by<sp/>this<sp/>license.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;classlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d3c/util_8h" kindref="compound" tooltip="A bunch of utility functions.">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;outputlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;language.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doxygen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vhdldocgen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;defargs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arguments.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">ClassList::ClassList()<sp/>:<sp/><ref refid="db/daa/class_q_list" kindref="compound">QList</ref>&lt;<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>&gt;()</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">ClassList::~ClassList()</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compItems(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item1,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item2)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*c1=(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*)item1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*c2=(<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*)item2;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;SORT_BY_SCOPE_NAME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printf(&quot;compItems:<sp/>%d<sp/>%s&lt;-&gt;%s\n&quot;,b,c1-&gt;name().data(),c2-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b)<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qstricmp(c1-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>(),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qstricmp(c1-&gt;<ref refid="d1/dcf/class_class_def_1ac2305dda1a69fa632d9b95fb9aa4c57a" kindref="member" tooltip="Returns the name of the class including outer classes, but not including namespaces.">className</ref>(),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2-&gt;<ref refid="d1/dcf/class_class_def_1ac2305dda1a69fa632d9b95fb9aa4c57a" kindref="member" tooltip="Returns the name of the class including outer classes, but not including namespaces.">className</ref>());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ClassList::compareItems(QCollection::Item<sp/>item1,<sp/>QCollection::Item<sp/>item2)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compItems(item1,item2);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="d9/d3d/class_class_s_dict_1a365a341bbe740dc585c0d8e9519166af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d3d/class_class_s_dict_1a365a341bbe740dc585c0d8e9519166af" kindref="member">ClassSDict::compareItems</ref>(QCollection::Item<sp/>item1,<sp/>QCollection::Item<sp/>item2)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compItems(item1,item2);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">ClassListIterator::ClassListIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/da3/class_class_list" kindref="compound" tooltip="A list of ClassDef objects.">ClassList</ref><sp/>&amp;cllist)<sp/>:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>QListIterator&lt;<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref>&gt;(cllist)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ClassSDict::declVisible(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def_1ae70cf86d35fe954a94c566fbcfc87939" kindref="member" tooltip="The various compound types.">ClassDef::CompoundType</ref><sp/>*filter)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="70"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hideUndocClasses<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;HIDE_UNDOC_CLASSES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractLocalClasses<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_LOCAL_CLASSES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>()&gt;0)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>ClassSDict::Iterator<sp/>sdi(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sdi.toFirst();(cd=sdi.current());++sdi)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(filter==0<sp/>||<sp/>*filter==cd-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>())</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLink<sp/>=<sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a1ea1c676588739bbabf189cf2b343c56" kindref="member" tooltip="return TRUE iff a link to this class is possible (either within this project, or as a cross-reference...">isLinkable</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLink<sp/>||<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!hideUndocClasses<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!cd-&gt;<ref refid="d1/dcf/class_class_def_1a04917b608c561877c3cb65c57cbecbfc" kindref="member" tooltip="Returns TRUE if this is a local class definition, see EXTRACT_LOCAL_CLASSES.">isLocal</ref>()<sp/>||<sp/>extractLocalClasses)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClassSDict::writeDeclaration(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/dcf/class_class_def_1ae70cf86d35fe954a94c566fbcfc87939" kindref="member" tooltip="The various compound types.">ClassDef::CompoundType</ref><sp/>*filter,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*header,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>localNames)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extractPrivate<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;EXTRACT_PRIVATE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>()&gt;0)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>ClassSDict::Iterator<sp/>sdi(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sdi.toFirst();(cd=sdi.current());++sdi)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;<sp/><sp/>ClassSDict::writeDeclaration<sp/>for<sp/>%s\n&quot;,cd-&gt;name().data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!cd-&gt;<ref refid="d1/dcf/class_class_def_1afea156268747f0ed4cd135ed2d5ee8f1" kindref="member" tooltip="Returns TRUE if this class represents an Objective-C 2.0 extension (nameless category)">isExtension</ref>()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cd-&gt;<ref refid="d1/dcf/class_class_def_1afb5695813ec0a4ea9decdc236f0e03d7" kindref="member" tooltip="Return the protection level (Public,Protected,Private) in which this compound was found...">protection</ref>()!=Private<sp/>||<sp/>extractPrivate)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(filter==0<sp/>||<sp/>*filter==cd-&gt;<ref refid="d1/dcf/class_class_def_1a8f62fc9906e829a1afdba79beddeb4b2" kindref="member" tooltip="Returns the type of compound this is, i.e.">compoundType</ref>())</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;writeDeclarationLink(ol,found,header,localNames);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>ol.endMemberList();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClassSDict::writeDocumentation(<ref refid="df/dc8/class_output_list" kindref="compound" tooltip="Class representing a list of output generators that are written to in parallel.">OutputList</ref><sp/>&amp;ol,<ref refid="d5/dcc/class_definition" kindref="compound" tooltip="The common base class of all entity definitions found in the sources.">Definition</ref><sp/>*<sp/>container)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fortranOpt<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;OPTIMIZE_FOR_FORTRAN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inlineGroupedClasses<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;INLINE_GROUPED_CLASSES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inlineSimpleClasses<sp/>=<sp/>Config_getBool(</highlight><highlight class="stringliteral">&quot;INLINE_SIMPLE_STRUCTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inlineGroupedClasses<sp/>&amp;&amp;<sp/>!inlineSimpleClasses)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d1/d50/class_s_dict_1a9e95eebac3e87938cc5bc1f79d078c8a" kindref="member">count</ref>()&gt;0)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found=FALSE;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>ClassSDict::Iterator<sp/>sdi(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd=0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sdi.toFirst();(cd=sdi.current());++sdi)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s:writeDocumentation()<sp/>%p<sp/>embedded=%d<sp/>container=%p\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cd-&gt;name().data(),cd-&gt;getOuterScope(),cd-&gt;isEmbeddedInOuterScope(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>container);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cd-&gt;<ref refid="d5/dcc/class_definition_1a99481361779e85f0c1556709de7d9e5b" kindref="member">name</ref>().find(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)==-1<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1acb4255cf08ddb71608af6467b6850783" kindref="member" tooltip="returns TRUE iff a link is possible to this item within this project.">isLinkableInProject</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;isEmbeddedInOuterScope()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(container==0<sp/>||<sp/>cd-&gt;partOfGroups()==0)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>container==0<sp/>-&gt;<sp/>show<sp/>as<sp/>part<sp/>of<sp/>the<sp/>group<sp/>docs,<sp/>otherwise<sp/>only<sp/>show<sp/>if<sp/>not<sp/>part<sp/>of<sp/>a<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(container==0<sp/>||<sp/>//<sp/>no<sp/>container<sp/>-&gt;<sp/>used<sp/>for<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cd-&gt;getOuterScope()==container<sp/>||<sp/>//<sp/>correct<sp/>container<sp/>-&gt;<sp/>used<sp/>for<sp/>namespaces<sp/>and<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(container-&gt;definitionType()==Definition::TypeFile<sp/>&amp;&amp;<sp/>cd-&gt;getOuterScope()==Doxygen::globalScope<sp/>&amp;&amp;<sp/>cd-&gt;partOfGroups()==0)<sp/>//<sp/>non<sp/>grouped<sp/>class<sp/>with<sp/>file<sp/>scope<sp/>-&gt;<sp/>used<sp/>for<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.<ref refid="df/dc8/class_output_list_1a2203589f0bc276cb3ba01f529b9536a9" kindref="member">writeRuler</ref>();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.startGroupHeader();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.parseText(fortranOpt?theTranslator-&gt;trTypeDocumentation():</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theTranslator-&gt;trClassDocumentation());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol.endGroupHeader();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=TRUE;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd-&gt;<ref refid="d1/dcf/class_class_def_1a5c0ec6a3c4ebf12f8c703dbdfdc36e97" kindref="member" tooltip="Write class documentation inside another container (i.e.">writeInlineDocumentation</ref>(ol);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GenericsSDict::insert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;key,<ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*cd)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=key.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>argList;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>stringToArgumentList(key.mid(i),&amp;argList);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>argList.count();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="d4/de4/class_generics_collection" kindref="compound">GenericsCollection</ref><sp/>*collection<sp/>=<sp/>m_dict.<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(key.left(i));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collection==0)<sp/></highlight><highlight class="comment">//<sp/>new<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>collection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d4/de4/class_generics_collection" kindref="compound">GenericsCollection</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dict.<ref refid="d1/d50/class_s_dict_1a121842d9858421076b81ed663034d62c" kindref="member">append</ref>(key.left(i),collection);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collection-&gt;find(c)==0)<sp/></highlight><highlight class="comment">//<sp/>should<sp/>always<sp/>be<sp/>0!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>collection-&gt;insert(c,cd);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="d1/dcf/class_class_def" kindref="compound" tooltip="A class representing of a compound symbol.">ClassDef</ref><sp/>*GenericsSDict::find(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QCString<sp/>&amp;key)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=key.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==-1)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/de4/class_generics_collection" kindref="compound">GenericsCollection</ref><sp/>*collection<sp/>=<sp/>m_dict.<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(key);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collection<sp/>&amp;&amp;<sp/>collection-&gt;count()==1)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>QIntDictIterator&lt;ClassDef&gt;<sp/>it(*collection);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it.current();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/de4/class_generics_collection" kindref="compound">GenericsCollection</ref><sp/>*collection<sp/>=<sp/>m_dict.<ref refid="d1/d50/class_s_dict_1aec67482d780157680d46f48a7ed5e7bd" kindref="member">find</ref>(key.left(i));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collection)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/class_argument_list" kindref="compound" tooltip="This class represents an function or template argument list.">ArgumentList</ref><sp/>argList;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stringToArgumentList(key.mid(i),&amp;argList);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>argList.count();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>collection-&gt;find(c);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/classlist.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="d2/ddf/lodepng_8h" kind="file">
    <compoundname>lodepng.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includedby refid="db/d11/image_8cpp" local="yes">src/image.cpp</includedby>
    <incdepgraph>
      <node id="3119">
        <label>stdlib.h</label>
      </node>
      <node id="3120">
        <label>string.h</label>
      </node>
      <node id="3117">
        <label>src/lodepng.h</label>
        <link refid="lodepng.h"/>
        <childnode refid="3118" relation="include">
        </childnode>
        <childnode refid="3119" relation="include">
        </childnode>
        <childnode refid="3120" relation="include">
        </childnode>
      </node>
      <node id="3118">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3122">
        <label>src/image.cpp</label>
        <link refid="db/d11/image_8cpp_source"/>
      </node>
      <node id="3121">
        <label>src/lodepng.h</label>
        <link refid="lodepng.h"/>
        <childnode refid="3122" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="dc/dc3/struct_lode_zlib___deflate_settings" prot="public">LodeZlib_DeflateSettings</innerclass>
    <innerclass refid="d5/d0f/struct_lode_p_n_g___info_color" prot="public">LodePNG_InfoColor</innerclass>
    <innerclass refid="d7/d1e/struct_lode_p_n_g___info_png" prot="public">LodePNG_InfoPng</innerclass>
    <innerclass refid="d3/d36/struct_lode_p_n_g___info_raw" prot="public">LodePNG_InfoRaw</innerclass>
    <innerclass refid="da/da3/struct_lode_p_n_g___encode_settings" prot="public">LodePNG_EncodeSettings</innerclass>
    <innerclass refid="d6/d0e/struct_lode_p_n_g___encoder" prot="public">LodePNG_Encoder</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="d2/ddf/lodepng_8h_1a66c036f5e0213ff2cc380bab4486738d" prot="public" static="no">
        <name>LODEPNG_COMPILE_ZLIB</name>
        <initializer>/*deflate&amp;zlib encoder and deflate&amp;zlib decoder*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="39" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/ddf/lodepng_8h_1af557b37dd9fcaed5be60c0b143e54b38" prot="public" static="no">
        <name>LODEPNG_COMPILE_PNG</name>
        <initializer>/*png encoder and png decoder*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="40" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/ddf/lodepng_8h_1a2285c1e239bc24607901ad98e8ebb7eb" prot="public" static="no">
        <name>LODEPNG_COMPILE_ENCODER</name>
        <initializer>/*deflate&amp;zlib encoder and png encoder*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="42" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/ddf/lodepng_8h_1af8e782a2a5642d12dba9aa38a7a00133" prot="public" static="no">
        <name>LODEPNG_COMPILE_DISK</name>
        <initializer>/*the optional built in harddisk file loading and saving functions*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="43" bodyfile="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d2/ddf/lodepng_8h_1a8debe7f5da0bf1ac56b999581c5ff373" prot="public" static="no">
        <type>struct <ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref></type>
        <definition>typedef struct LodeZlib_DeflateSettings  LodeZlib_DeflateSettings</definition>
        <argsstring></argsstring>
        <name>LodeZlib_DeflateSettings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="68"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/ddf/lodepng_8h_1a5b6d0855e597df1f8771133ac8519c68" prot="public" static="no">
        <type>struct <ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref></type>
        <definition>typedef struct LodePNG_InfoColor  LodePNG_InfoColor</definition>
        <argsstring></argsstring>
        <name>LodePNG_InfoColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="139"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/ddf/lodepng_8h_1ad7aa263b5f38fa369d3407cecce2d4a6" prot="public" static="no">
        <type>struct <ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref></type>
        <definition>typedef struct LodePNG_InfoPng  LodePNG_InfoPng</definition>
        <argsstring></argsstring>
        <name>LodePNG_InfoPng</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="258"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/ddf/lodepng_8h_1ad47762640307d9ad1a0438cc361c7393" prot="public" static="no">
        <type>struct <ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref></type>
        <definition>typedef struct LodePNG_InfoRaw  LodePNG_InfoRaw</definition>
        <argsstring></argsstring>
        <name>LodePNG_InfoRaw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="267"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/ddf/lodepng_8h_1ae9cbe4fb955219e09f32b03e1e17e61a" prot="public" static="no">
        <type>struct <ref refid="da/da3/struct_lode_p_n_g___encode_settings" kindref="compound">LodePNG_EncodeSettings</ref></type>
        <definition>typedef struct LodePNG_EncodeSettings  LodePNG_EncodeSettings</definition>
        <argsstring></argsstring>
        <name>LodePNG_EncodeSettings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="334"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/ddf/lodepng_8h_1a9b0692bac09f10ddfc1923147661ed42" prot="public" static="no">
        <type>struct <ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref></type>
        <definition>typedef struct LodePNG_Encoder  LodePNG_Encoder</definition>
        <argsstring></argsstring>
        <name>LodePNG_Encoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="344"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d2/ddf/lodepng_8h_1a12bc0ceafd3730e97d84555369fde896" prot="public" static="no" mutable="no">
        <type>const <ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref></type>
        <definition>const LodeZlib_DeflateSettings LodeZlib_defaultDeflateSettings</definition>
        <argsstring></argsstring>
        <name>LodeZlib_defaultDeflateSettings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1aa3c00d6565b6bf50aa7e68516941da40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodeZlib_DeflateSettings_init</definition>
        <argsstring>(LodeZlib_DeflateSettings *settings)</argsstring>
        <name>LodeZlib_DeflateSettings_init</name>
        <param>
          <type><ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref> *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="71"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1afa4868843f0e8ef801f1510c29de9edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodeZlib_compress</definition>
        <argsstring>(unsigned char **out, size_t *outsize, const unsigned char *in, size_t insize, const LodeZlib_DeflateSettings *settings)</argsstring>
        <name>LodeZlib_compress</name>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outsize</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>insize</declname>
        </param>
        <param>
          <type>const <ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref> *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="88"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a4e9b1ed7e3242b335ddd8b4a0aba161f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_chunk_length</definition>
        <argsstring>(const unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_length</name>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="100"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1af3cff22c00facc19aa15202f1001e863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_chunk_type</definition>
        <argsstring>(char type[5], const unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_type</name>
        <param>
          <type>char</type>
          <declname>type</declname>
          <array>[5]</array>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="102"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a1e3ab3e373966fd2c323bd5a698ccfb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char LodePNG_chunk_type_equals</definition>
        <argsstring>(const unsigned char *chunk, const char *type)</argsstring>
        <name>LodePNG_chunk_type_equals</name>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="103"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1abaf9330852c93cddc2e633f975e56193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char LodePNG_chunk_critical</definition>
        <argsstring>(const unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_critical</name>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="106"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a08a6b93d30eb7ee67b9c0788436b3bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char LodePNG_chunk_private</definition>
        <argsstring>(const unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_private</name>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="107"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1af89aa48b710fa002d71884069726bf8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char LodePNG_chunk_safetocopy</definition>
        <argsstring>(const unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_safetocopy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a5f9dec8a5637a646a41821af36faa152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char* LodePNG_chunk_data</definition>
        <argsstring>(unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_data</name>
        <param>
          <type>unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="110"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1ab2b9a3341171c2cd4a31bdff0211f007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>const unsigned char* LodePNG_chunk_data_const</definition>
        <argsstring>(const unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_data_const</name>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="111"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a1d08e922a7f80b5afcde010489db6579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_chunk_check_crc</definition>
        <argsstring>(const unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_check_crc</name>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="113"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a35e023707c907e36ad1435754cfbb4da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_chunk_generate_crc</definition>
        <argsstring>(unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_generate_crc</name>
        <param>
          <type>unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="114"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1ab1a96344114c67ce549c848c44a9597b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char* LodePNG_chunk_next</definition>
        <argsstring>(unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_next</name>
        <param>
          <type>unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a16e9565fa7d5805df2256db07ed49177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>const unsigned char* LodePNG_chunk_next_const</definition>
        <argsstring>(const unsigned char *chunk)</argsstring>
        <name>LodePNG_chunk_next_const</name>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="118"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a8047414db7062af3671e20c90a4a4ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_append_chunk</definition>
        <argsstring>(unsigned char **out, size_t *outlength, const unsigned char *chunk)</argsstring>
        <name>LodePNG_append_chunk</name>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outlength</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="121"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a75457d20497de64abea3a34daefc4f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_create_chunk</definition>
        <argsstring>(unsigned char **out, size_t *outlength, unsigned length, const char *type, const unsigned char *data)</argsstring>
        <name>LodePNG_create_chunk</name>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outlength</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1abaea3ca539b3d5f1624ac8286f47b34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_InfoColor_init</definition>
        <argsstring>(LodePNG_InfoColor *info)</argsstring>
        <name>LodePNG_InfoColor_init</name>
        <param>
          <type><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="141"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a2f5ecf25393f688611987c61f698f1ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_InfoColor_cleanup</definition>
        <argsstring>(LodePNG_InfoColor *info)</argsstring>
        <name>LodePNG_InfoColor_cleanup</name>
        <param>
          <type><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="142"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1ad7beb96e92dd01a605c669af79a54a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_InfoColor_copy</definition>
        <argsstring>(LodePNG_InfoColor *dest, const LodePNG_InfoColor *source)</argsstring>
        <name>LodePNG_InfoColor_copy</name>
        <param>
          <type><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="143"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1ac78fd072f3dcc91ee6e3a250cfa64ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_InfoColor_clearPalette</definition>
        <argsstring>(LodePNG_InfoColor *info)</argsstring>
        <name>LodePNG_InfoColor_clearPalette</name>
        <param>
          <type><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="146"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1af062c1db1f9e18f47aa2d9a86651dea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_InfoColor_addPalette</definition>
        <argsstring>(LodePNG_InfoColor *info, unsigned char r, unsigned char g, unsigned char b, unsigned char a)</argsstring>
        <name>LodePNG_InfoColor_addPalette</name>
        <param>
          <type><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>r</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>g</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>b</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="147"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a81151c0087467b4ac2a815b3234fdb5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_InfoColor_getBpp</definition>
        <argsstring>(const LodePNG_InfoColor *info)</argsstring>
        <name>LodePNG_InfoColor_getBpp</name>
        <param>
          <type>const <ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="150"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a62159dfd6cf8a67b55d5bbc70fee589b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_InfoColor_getChannels</definition>
        <argsstring>(const LodePNG_InfoColor *info)</argsstring>
        <name>LodePNG_InfoColor_getChannels</name>
        <param>
          <type>const <ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="151"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1ac0564ed5cbac6fcfda3b28b3078cde65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_InfoColor_isGreyscaleType</definition>
        <argsstring>(const LodePNG_InfoColor *info)</argsstring>
        <name>LodePNG_InfoColor_isGreyscaleType</name>
        <param>
          <type>const <ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="152"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1af139bc36c2a9b88d21dc3652520a3f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_InfoColor_isAlphaType</definition>
        <argsstring>(const LodePNG_InfoColor *info)</argsstring>
        <name>LodePNG_InfoColor_isAlphaType</name>
        <param>
          <type>const <ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="153"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a66ddccc82c59e05d746086f56997b4cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_InfoPng_init</definition>
        <argsstring>(LodePNG_InfoPng *info)</argsstring>
        <name>LodePNG_InfoPng_init</name>
        <param>
          <type><ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="260"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a7884592df167f7136fc928cacf1efd36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_InfoPng_cleanup</definition>
        <argsstring>(LodePNG_InfoPng *info)</argsstring>
        <name>LodePNG_InfoPng_cleanup</name>
        <param>
          <type><ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="261"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a0e188efe0b87e1b7d11a01ff85881368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_InfoPng_copy</definition>
        <argsstring>(LodePNG_InfoPng *dest, const LodePNG_InfoPng *source)</argsstring>
        <name>LodePNG_InfoPng_copy</name>
        <param>
          <type><ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="262"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a279c66151f5c87b2225ebe866ce98f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_InfoRaw_init</definition>
        <argsstring>(LodePNG_InfoRaw *info)</argsstring>
        <name>LodePNG_InfoRaw_init</name>
        <param>
          <type><ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="269"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1ae8ee35b701bba217323f27723d2690f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_InfoRaw_cleanup</definition>
        <argsstring>(LodePNG_InfoRaw *info)</argsstring>
        <name>LodePNG_InfoRaw_cleanup</name>
        <param>
          <type><ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="270"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a745b94bf14f6c3497b6280863e71e5a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_InfoRaw_copy</definition>
        <argsstring>(LodePNG_InfoRaw *dest, const LodePNG_InfoRaw *source)</argsstring>
        <name>LodePNG_InfoRaw_copy</name>
        <param>
          <type><ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="271"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a9e7ce5d1928b44ba6a7c30465b996c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_convert</definition>
        <argsstring>(unsigned char *out, const unsigned char *in, LodePNG_InfoColor *infoOut, LodePNG_InfoColor *infoIn, unsigned w, unsigned h)</argsstring>
        <name>LodePNG_convert</name>
        <param>
          <type>unsigned char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>infoOut</declname>
        </param>
        <param>
          <type><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref> *</type>
          <declname>infoIn</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>w</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="277"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a3cd7cc1583795fd14b7fe1179e005ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_EncodeSettings_init</definition>
        <argsstring>(LodePNG_EncodeSettings *settings)</argsstring>
        <name>LodePNG_EncodeSettings_init</name>
        <param>
          <type><ref refid="da/da3/struct_lode_p_n_g___encode_settings" kindref="compound">LodePNG_EncodeSettings</ref> *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="336"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a187956c5e5784f77f5b17181310be304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_Encoder_init</definition>
        <argsstring>(LodePNG_Encoder *encoder)</argsstring>
        <name>LodePNG_Encoder_init</name>
        <param>
          <type><ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref> *</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="346"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a7269f380122edb94715d5e2e87eab835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_Encoder_cleanup</definition>
        <argsstring>(LodePNG_Encoder *encoder)</argsstring>
        <name>LodePNG_Encoder_cleanup</name>
        <param>
          <type><ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref> *</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="347"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a0c0160b2f998d5966324922a153ee557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_Encoder_copy</definition>
        <argsstring>(LodePNG_Encoder *dest, const LodePNG_Encoder *source)</argsstring>
        <name>LodePNG_Encoder_copy</name>
        <param>
          <type><ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="348"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1aeb8588ff6ad7dae8c5322b1520aa5687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LodePNG_encode</definition>
        <argsstring>(LodePNG_Encoder *encoder, unsigned char **out, size_t *outsize, const unsigned char *image, unsigned w, unsigned h)</argsstring>
        <name>LodePNG_encode</name>
        <param>
          <type><ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outsize</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>w</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="351"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a75be5c73ab8b78aa8e583976007a363f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_encode32</definition>
        <argsstring>(unsigned char **out, size_t *outsize, const unsigned char *image, unsigned w, unsigned h)</argsstring>
        <name>LodePNG_encode32</name>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outsize</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>w</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="352"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1aac29eed979899d7823ee53bbf073118c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_encode32f</definition>
        <argsstring>(const char *filename, const unsigned char *image, unsigned w, unsigned h)</argsstring>
        <name>LodePNG_encode32f</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>w</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="354"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1aca6d9a07dd0805433de47feb04e0fc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_loadFile</definition>
        <argsstring>(unsigned char **out, size_t *outsize, const char *filename)</argsstring>
        <name>LodePNG_loadFile</name>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>outsize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="362"/>
      </memberdef>
      <memberdef kind="function" id="d2/ddf/lodepng_8h_1a35604ddb7255afb1526979ca40815987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned LodePNG_saveFile</definition>
        <argsstring>(const unsigned char *buffer, size_t buffersize, const char *filename)</argsstring>
        <name>LodePNG_saveFile</name>
        <param>
          <type>const unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffersize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h" line="363"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">LodePNG<sp/>version<sp/>20080927</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2008<sp/>Lode<sp/>Vandevenne</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="7"><highlight class="comment">warranty.<sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="8"><highlight class="comment">arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="12"><highlight class="comment">freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LODEPNG_H</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LODEPNG_H</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Code<sp/>Sections<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*The<sp/>following<sp/>defines<sp/>can<sp/>be<sp/>commented<sp/>disable<sp/>code<sp/>sections.<sp/>Gives<sp/>potential<sp/>faster<sp/>compile<sp/>and<sp/>smaller<sp/>binary.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LODEPNG_COMPILE_ZLIB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*deflate&amp;zlib<sp/>encoder<sp/>and<sp/>deflate&amp;zlib<sp/>decoder*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LODEPNG_COMPILE_PNG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*png<sp/>encoder<sp/>and<sp/>png<sp/>decoder*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="comment">//#define<sp/>LODEPNG_COMPILE_DECODER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*deflate&amp;zlib<sp/>decoder<sp/>and<sp/>png<sp/>decoder*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LODEPNG_COMPILE_ENCODER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*deflate&amp;zlib<sp/>encoder<sp/>and<sp/>png<sp/>encoder*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LODEPNG_COMPILE_DISK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*the<sp/>optional<sp/>built<sp/>in<sp/>harddisk<sp/>file<sp/>loading<sp/>and<sp/>saving<sp/>functions*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="comment">//#define<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS<sp/>/*any<sp/>code<sp/>or<sp/>struct<sp/>datamember<sp/>related<sp/>to<sp/>chunks<sp/>other<sp/>than<sp/>IHDR,<sp/>IDAT,<sp/>PLTE,<sp/>tRNS,<sp/>IEND*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>LODEPNG_COMPILE_UNKNOWN_CHUNKS<sp/><sp/><sp/>/*handling<sp/>of<sp/>unknown<sp/>chunks*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>LodeFlate<sp/>&amp;<sp/>LodeZlib<sp/>Setting<sp/>structs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LodeZlib_DecompressSettings</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ignoreAdler32;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/>LodeZlib_DecompressSettings;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodeZlib_DecompressSettings<sp/>LodeZlib_defaultDecompressSettings;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodeZlib_DecompressSettings_init(LodeZlib_DecompressSettings*<sp/>settings);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight></codeline>
<codeline lineno="62" refid="dc/dc3/struct_lode_zlib___deflate_settings" refkind="compound"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref><sp/></highlight><highlight class="comment">/*deflate<sp/>=<sp/>compress*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*LZ77<sp/>related<sp/>settings*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>btype;<sp/></highlight><highlight class="comment">/*the<sp/>block<sp/>type<sp/>for<sp/>LZ*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>useLZ77;<sp/></highlight><highlight class="comment">/*whether<sp/>or<sp/>not<sp/>to<sp/>use<sp/>LZ77*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>windowSize;<sp/></highlight><highlight class="comment">/*the<sp/>maximum<sp/>is<sp/>32768*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/><ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref><sp/>LodeZlib_defaultDeflateSettings;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodeZlib_DeflateSettings_init(<ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref>*<sp/>settings);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ZLIB</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>LodeFlate<sp/>&amp;<sp/>LodeZlib<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="comment">/*This<sp/>function<sp/>reallocates<sp/>the<sp/>out<sp/>buffer<sp/>and<sp/>appends<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="81"><highlight class="comment">Either,<sp/>*out<sp/>must<sp/>be<sp/>NULL<sp/>and<sp/>*outsize<sp/>must<sp/>be<sp/>0,<sp/>or,<sp/>*out<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>buffer<sp/>and<sp/>*outsize<sp/>its<sp/>size<sp/>in<sp/>bytes.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodeZlib_decompress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodeZlib_DecompressSettings*<sp/>settings);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="comment">/*This<sp/>function<sp/>reallocates<sp/>the<sp/>out<sp/>buffer<sp/>and<sp/>appends<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="87"><highlight class="comment">Either,<sp/>*out<sp/>must<sp/>be<sp/>NULL<sp/>and<sp/>*outsize<sp/>must<sp/>be<sp/>0,<sp/>or,<sp/>*out<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>buffer<sp/>and<sp/>*outsize<sp/>its<sp/>size<sp/>in<sp/>bytes.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodeZlib_compress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref>*<sp/>settings);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ZLIB*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_PNG</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>LodePNG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*LodePNG_chunk<sp/>functions:<sp/>These<sp/>functions<sp/>need<sp/>as<sp/>input<sp/>a<sp/>large<sp/>enough<sp/>amount<sp/>of<sp/>allocated<sp/>memory.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_chunk_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*get<sp/>the<sp/>length<sp/>of<sp/>the<sp/>data<sp/>of<sp/>the<sp/>chunk.<sp/>Total<sp/>chunk<sp/>length<sp/>has<sp/>12<sp/>bytes<sp/>more.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_chunk_type(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type[5],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*puts<sp/>the<sp/>4-byte<sp/>type<sp/>in<sp/>null<sp/>terminated<sp/>string*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>LodePNG_chunk_type_equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type);<sp/></highlight><highlight class="comment">/*check<sp/>if<sp/>the<sp/>type<sp/>is<sp/>the<sp/>given<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*properties<sp/>of<sp/>PNG<sp/>chunks<sp/>gotten<sp/>from<sp/>capitalization<sp/>of<sp/>chunk<sp/>type<sp/>name,<sp/>as<sp/>defined<sp/>by<sp/>the<sp/>standard*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>LodePNG_chunk_critical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*0:<sp/>ancillary<sp/>chunk,<sp/>1:<sp/>it&apos;s<sp/>one<sp/>of<sp/>the<sp/>critical<sp/>chunk<sp/>types*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>LodePNG_chunk_private(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*0:<sp/>public,<sp/>1:<sp/>private*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>LodePNG_chunk_safetocopy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*0:<sp/>the<sp/>chunk<sp/>is<sp/>unsafe<sp/>to<sp/>copy,<sp/>1:<sp/>the<sp/>chunk<sp/>is<sp/>safe<sp/>to<sp/>copy*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>LodePNG_chunk_data(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*get<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>of<sp/>the<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>LodePNG_chunk_data_const(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*get<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>of<sp/>the<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_chunk_check_crc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*returns<sp/>0<sp/>if<sp/>the<sp/>crc<sp/>is<sp/>correct,<sp/>1<sp/>if<sp/>it&apos;s<sp/>incorrect*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_chunk_generate_crc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*generates<sp/>the<sp/>correct<sp/>CRC<sp/>from<sp/>the<sp/>data<sp/>and<sp/>puts<sp/>it<sp/>in<sp/>the<sp/>last<sp/>4<sp/>bytes<sp/>of<sp/>the<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*iterate<sp/>to<sp/>next<sp/>chunks.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>LodePNG_chunk_next(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>LodePNG_chunk_next_const(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">/*add<sp/>chunks<sp/>to<sp/>out<sp/>buffer.<sp/>It<sp/>reallocs<sp/>the<sp/>buffer<sp/>to<sp/>append<sp/>the<sp/>data.<sp/>returns<sp/>error<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_append_chunk(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outlength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk);<sp/></highlight><highlight class="comment">/*appends<sp/>chunk<sp/>that<sp/>was<sp/>already<sp/>created,<sp/>to<sp/>the<sp/>data.<sp/>Returns<sp/>pointer<sp/>to<sp/>start<sp/>of<sp/>appended<sp/>chunk,<sp/>or<sp/>NULL<sp/>if<sp/>error<sp/>happened*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_create_chunk(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outlength,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data);<sp/></highlight><highlight class="comment">/*appends<sp/>new<sp/>chunk<sp/>to<sp/>out.<sp/>Returns<sp/>pointer<sp/>to<sp/>start<sp/>of<sp/>appended<sp/>chunk,<sp/>or<sp/>NULL<sp/>if<sp/>error<sp/>happened;<sp/>may<sp/>change<sp/>memory<sp/>address<sp/>of<sp/>out<sp/>buffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="d5/d0f/struct_lode_p_n_g___info_color" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref><sp/></highlight><highlight class="comment">/*info<sp/>about<sp/>the<sp/>color<sp/>type<sp/>of<sp/>an<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*header<sp/>(IHDR)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>colorType;<sp/></highlight><highlight class="comment">/*color<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitDepth;<sp/><sp/></highlight><highlight class="comment">/*bits<sp/>per<sp/>sample*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*palette<sp/>(PLTE)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>palette;<sp/></highlight><highlight class="comment">/*palette<sp/>in<sp/>RGBARGBA...<sp/>order*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>palettesize;<sp/></highlight><highlight class="comment">/*palette<sp/>size<sp/>in<sp/>number<sp/>of<sp/>colors<sp/>(amount<sp/>of<sp/>bytes<sp/>is<sp/>4<sp/>*<sp/>palettesize)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*transparent<sp/>color<sp/>key<sp/>(tRNS)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>key_defined;<sp/></highlight><highlight class="comment">/*is<sp/>a<sp/>transparent<sp/>color<sp/>key<sp/>given?*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>key_r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*red<sp/>component<sp/>of<sp/>color<sp/>key*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>key_g;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*green<sp/>component<sp/>of<sp/>color<sp/>key*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>key_b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*blue<sp/>component<sp/>of<sp/>color<sp/>key*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}<sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_init(<ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_cleanup(<ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_copy(<ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>source);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*Use<sp/>these<sp/>functions<sp/>instead<sp/>of<sp/>allocating<sp/>palette<sp/>manually*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_clearPalette(<ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_addPalette(<ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>info,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a);<sp/></highlight><highlight class="comment">/*add<sp/>1<sp/>color<sp/>to<sp/>the<sp/>palette*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*additional<sp/>color<sp/>info*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_getBpp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>info);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*bits<sp/>per<sp/>pixel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_getChannels(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>info);<sp/></highlight><highlight class="comment">/*amount<sp/>of<sp/>channels*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_isGreyscaleType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>info);<sp/></highlight><highlight class="comment">/*is<sp/>it<sp/>a<sp/>greyscale<sp/>type?<sp/>(colorType<sp/>0<sp/>or<sp/>4)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_InfoColor_isAlphaType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>info);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*has<sp/>it<sp/>an<sp/>alpha<sp/>channel?<sp/>(colorType<sp/>2<sp/>or<sp/>6)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LodePNG_Time<sp/></highlight><highlight class="comment">/*LodePNG&apos;s<sp/>encoder<sp/>does<sp/>not<sp/>generate<sp/>the<sp/>current<sp/>time.<sp/>To<sp/>make<sp/>it<sp/>add<sp/>a<sp/>time<sp/>chunk<sp/>the<sp/>correct<sp/>time<sp/>has<sp/>to<sp/>be<sp/>provided*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>year;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*2<sp/>bytes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>month;<sp/><sp/><sp/></highlight><highlight class="comment">/*1-12*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>day;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*1-31*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hour;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*0-23*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>minute;<sp/><sp/></highlight><highlight class="comment">/*0-59*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>second;<sp/><sp/></highlight><highlight class="comment">/*0-60<sp/>(to<sp/>allow<sp/>for<sp/>leap<sp/>seconds)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">}<sp/>LodePNG_Time;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LodePNG_Text<sp/></highlight><highlight class="comment">/*non-international<sp/>text*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>keys;<sp/></highlight><highlight class="comment">/*the<sp/>keyword<sp/>of<sp/>a<sp/>text<sp/>chunk<sp/>(e.g.<sp/>&quot;Comment&quot;)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>strings;<sp/></highlight><highlight class="comment">/*the<sp/>actual<sp/>text*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/>LodePNG_Text;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Text_init(LodePNG_Text*<sp/>text);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Text_cleanup(LodePNG_Text*<sp/>text);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_Text_copy(LodePNG_Text*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNG_Text*<sp/>source);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*Use<sp/>these<sp/>functions<sp/>instead<sp/>of<sp/>allocating<sp/>the<sp/>char**s<sp/>manually*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Text_clear(LodePNG_Text*<sp/>text);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_Text_add(LodePNG_Text*<sp/>text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);<sp/></highlight><highlight class="comment">/*push<sp/>back<sp/>both<sp/>texts<sp/>at<sp/>once*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LodePNG_IText<sp/></highlight><highlight class="comment">/*international<sp/>text*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>keys;<sp/></highlight><highlight class="comment">/*the<sp/>English<sp/>keyword<sp/>of<sp/>the<sp/>text<sp/>chunk<sp/>(e.g.<sp/>&quot;Comment&quot;)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>langtags;<sp/></highlight><highlight class="comment">/*the<sp/>language<sp/>tag<sp/>for<sp/>this<sp/>text&apos;s<sp/>international<sp/>language,<sp/>ISO/IEC<sp/>646<sp/>string,<sp/>e.g.<sp/>ISO<sp/>639<sp/>language<sp/>tag*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>transkeys;<sp/></highlight><highlight class="comment">/*keyword<sp/>translated<sp/>to<sp/>the<sp/>international<sp/>language<sp/>-<sp/>UTF-8<sp/>string*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>strings;<sp/></highlight><highlight class="comment">/*the<sp/>actual<sp/>international<sp/>text<sp/>-<sp/>UTF-8<sp/>string*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">}<sp/>LodePNG_IText;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_IText_init(LodePNG_IText*<sp/>text);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_IText_cleanup(LodePNG_IText*<sp/>text);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_IText_copy(LodePNG_IText*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNG_IText*<sp/>source);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">/*Use<sp/>these<sp/>functions<sp/>instead<sp/>of<sp/>allocating<sp/>the<sp/>char**s<sp/>manually*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_IText_clear(LodePNG_IText*<sp/>text);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_IText_add(LodePNG_IText*<sp/>text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>langtag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>transkey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);<sp/></highlight><highlight class="comment">/*push<sp/>back<sp/>the<sp/>4<sp/>texts<sp/>of<sp/>1<sp/>chunk<sp/>at<sp/>once*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_UNKNOWN_CHUNKS</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LodePNG_UnknownChunks<sp/></highlight><highlight class="comment">/*unknown<sp/>chunks<sp/>read<sp/>from<sp/>the<sp/>PNG,<sp/>or<sp/>extra<sp/>chunks<sp/>the<sp/>user<sp/>wants<sp/>to<sp/>have<sp/>added<sp/>in<sp/>the<sp/>encoded<sp/>PNG*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*There<sp/>are<sp/>3<sp/>buffers,<sp/>one<sp/>for<sp/>each<sp/>position<sp/>in<sp/>the<sp/>PNG<sp/>where<sp/>unknown<sp/>chunks<sp/>can<sp/>appear</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>each<sp/>buffer<sp/>contains<sp/>all<sp/>unknown<sp/>chunks<sp/>for<sp/>that<sp/>position<sp/>consecutively</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>3<sp/>buffers<sp/>are<sp/>the<sp/>unknown<sp/>chunks<sp/>between<sp/>certain<sp/>critical<sp/>chunks:</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/>0:<sp/>IHDR-PLTE,<sp/>1:<sp/>PLTE-IDAT,<sp/>2:<sp/>IDAT-IEND*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data[3];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize[3];<sp/></highlight><highlight class="comment">/*size<sp/>in<sp/>bytes<sp/>of<sp/>the<sp/>unknown<sp/>chunks,<sp/>given<sp/>for<sp/>protection*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}<sp/>LodePNG_UnknownChunks;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_UnknownChunks_init(LodePNG_UnknownChunks*<sp/>chunks);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_UnknownChunks_cleanup(LodePNG_UnknownChunks*<sp/>chunks);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_UnknownChunks_copy(LodePNG_UnknownChunks*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNG_UnknownChunks*<sp/>src);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_UNKNOWN_CHUNKS*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="d7/d1e/struct_lode_p_n_g___info_png" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref><sp/></highlight><highlight class="comment">/*information<sp/>about<sp/>the<sp/>PNG<sp/>image,<sp/>except<sp/>pixels<sp/>and<sp/>sometimes<sp/>except<sp/>width<sp/>and<sp/>height*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*header<sp/>(IHDR),<sp/>palette<sp/>(PLTE)<sp/>and<sp/>transparency<sp/>(tRNS)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*width<sp/>of<sp/>the<sp/>image<sp/>in<sp/>pixels<sp/>(ignored<sp/>by<sp/>encoder,<sp/>but<sp/>filled<sp/>in<sp/>by<sp/>decoder)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>height;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*height<sp/>of<sp/>the<sp/>image<sp/>in<sp/>pixels<sp/>(ignored<sp/>by<sp/>encoder,<sp/>but<sp/>filled<sp/>in<sp/>by<sp/>decoder)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>compressionMethod;<sp/></highlight><highlight class="comment">/*compression<sp/>method<sp/>of<sp/>the<sp/>original<sp/>file*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>filterMethod;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*filter<sp/>method<sp/>of<sp/>the<sp/>original<sp/>file*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>interlaceMethod;<sp/><sp/><sp/></highlight><highlight class="comment">/*interlace<sp/>method<sp/>of<sp/>the<sp/>original<sp/>file*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref><sp/>color;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*color<sp/>type<sp/>and<sp/>bits,<sp/>palette,<sp/>transparency*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*suggested<sp/>background<sp/>color<sp/>(bKGD)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>background_defined;<sp/></highlight><highlight class="comment">/*is<sp/>a<sp/>suggested<sp/>background<sp/>color<sp/>given?*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>background_r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*red<sp/>component<sp/>of<sp/>suggested<sp/>background<sp/>color*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>background_g;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*green<sp/>component<sp/>of<sp/>suggested<sp/>background<sp/>color*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>background_b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*blue<sp/>component<sp/>of<sp/>suggested<sp/>background<sp/>color*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*non-international<sp/>text<sp/>chunks<sp/>(tEXt<sp/>and<sp/>zTXt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>LodePNG_Text<sp/>text;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*international<sp/>text<sp/>chunks<sp/>(iTXt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>LodePNG_IText<sp/>itext;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*time<sp/>chunk<sp/>(tIME)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>time_defined;<sp/></highlight><highlight class="comment">/*if<sp/>0,<sp/>no<sp/>tIME<sp/>chunk<sp/>was<sp/>or<sp/>will<sp/>be<sp/>generated<sp/>in<sp/>the<sp/>PNG<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>LodePNG_Time<sp/>time;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*phys<sp/>chunk<sp/>(pHYs)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phys_defined;<sp/></highlight><highlight class="comment">/*is<sp/>pHYs<sp/>chunk<sp/>defined?*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phys_x;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phys_y;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>phys_unit;<sp/></highlight><highlight class="comment">/*may<sp/>be<sp/>0<sp/>(unknown<sp/>unit)<sp/>or<sp/>1<sp/>(metre)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_UNKNOWN_CHUNKS</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*unknown<sp/>chunks*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>LodePNG_UnknownChunks<sp/>unknown_chunks;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_UNKNOWN_CHUNKS*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}<sp/><ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_InfoPng_init(<ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_InfoPng_cleanup(<ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_InfoPng_copy(<ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref>*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref>*<sp/>source);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="d3/d36/struct_lode_p_n_g___info_raw" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref><sp/></highlight><highlight class="comment">/*contains<sp/>user-chosen<sp/>information<sp/>about<sp/>the<sp/>raw<sp/>image<sp/>data,<sp/>which<sp/>is<sp/>independent<sp/>of<sp/>the<sp/>PNG<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}<sp/><ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_InfoRaw_init(<ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_InfoRaw_cleanup(<ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_InfoRaw_copy(<ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref>*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref>*<sp/>source);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="274"><highlight class="comment">LodePNG_convert:<sp/>Converts<sp/>from<sp/>any<sp/>color<sp/>type<sp/>to<sp/>24-bit<sp/>or<sp/>32-bit<sp/>(later<sp/>maybe<sp/>more<sp/>supported).<sp/>return<sp/>value<sp/>=<sp/>LodePNG<sp/>error<sp/>code</highlight></codeline>
<codeline lineno="275"><highlight class="comment">The<sp/>out<sp/>buffer<sp/>must<sp/>have<sp/>(w<sp/>*<sp/>h<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8,<sp/>where<sp/>bpp<sp/>is<sp/>the<sp/>bits<sp/>per<sp/>pixel<sp/>of<sp/>the<sp/>output<sp/>color<sp/>type<sp/>(LodePNG_InfoColor_getBpp)</highlight></codeline>
<codeline lineno="276"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>infoOut,<sp/><ref refid="d5/d0f/struct_lode_p_n_g___info_color" kindref="compound">LodePNG_InfoColor</ref>*<sp/>infoIn,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LodePNG_DecodeSettings</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>LodeZlib_DecompressSettings<sp/>zlibsettings;<sp/></highlight><highlight class="comment">/*in<sp/>here<sp/>is<sp/>the<sp/>setting<sp/>to<sp/>ignore<sp/>Adler32<sp/>checksums*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ignoreCrc;<sp/></highlight><highlight class="comment">/*ignore<sp/>CRC<sp/>checksums*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>color_convert;<sp/></highlight><highlight class="comment">/*whether<sp/>to<sp/>convert<sp/>the<sp/>PNG<sp/>to<sp/>the<sp/>color<sp/>type<sp/>you<sp/>want.<sp/>Default:<sp/>yes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readTextChunks;<sp/></highlight><highlight class="comment">/*if<sp/>false<sp/>but<sp/>rememberUnknownChunks<sp/>is<sp/>true,<sp/>they&apos;re<sp/>stored<sp/>in<sp/>the<sp/>unknown<sp/>chunks*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_UNKNOWN_CHUNKS</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rememberUnknownChunks;<sp/></highlight><highlight class="comment">/*store<sp/>all<sp/>bytes<sp/>from<sp/>unknown<sp/>chunks<sp/>in<sp/>the<sp/>InfoPng<sp/>(off<sp/>by<sp/>default,<sp/>useful<sp/>for<sp/>a<sp/>png<sp/>editor)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_UNKNOWN_CHUNKS*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/>LodePNG_DecodeSettings;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_DecodeSettings_init(LodePNG_DecodeSettings*<sp/>settings);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LodePNG_Decoder</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>LodePNG_DecodeSettings<sp/>settings;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref><sp/>infoRaw;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref><sp/>infoPng;<sp/></highlight><highlight class="comment">/*info<sp/>of<sp/>the<sp/>PNG<sp/>image<sp/>obtained<sp/>after<sp/>decoding*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}<sp/>LodePNG_Decoder;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Decoder_init(LodePNG_Decoder*<sp/>decoder);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Decoder_cleanup(LodePNG_Decoder*<sp/>decoder);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Decoder_copy(LodePNG_Decoder*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNG_Decoder*<sp/>source);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">/*decoding<sp/>functions*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">/*This<sp/>function<sp/>allocates<sp/>the<sp/>out<sp/>buffer<sp/>and<sp/>stores<sp/>the<sp/>size<sp/>in<sp/>*outsize.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_decode(LodePNG_Decoder*<sp/>decoder,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_decode32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize);<sp/></highlight><highlight class="comment">/*return<sp/>value<sp/>is<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_decode32f(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DISK*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_inspect(LodePNG_Decoder*<sp/>decoder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);<sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>png<sp/>header*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="da/da3/struct_lode_p_n_g___encode_settings" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="da/da3/struct_lode_p_n_g___encode_settings" kindref="compound">LodePNG_EncodeSettings</ref></highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="dc/dc3/struct_lode_zlib___deflate_settings" kindref="compound">LodeZlib_DeflateSettings</ref><sp/>zlibsettings;<sp/></highlight><highlight class="comment">/*settings<sp/>for<sp/>the<sp/>zlib<sp/>encoder,<sp/>such<sp/>as<sp/>window<sp/>size,<sp/>...*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>autoLeaveOutAlphaChannel;<sp/></highlight><highlight class="comment">/*automatically<sp/>use<sp/>color<sp/>type<sp/>without<sp/>alpha<sp/>instead<sp/>of<sp/>given<sp/>one,<sp/>if<sp/>given<sp/>image<sp/>is<sp/>opaque*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>force_palette;<sp/></highlight><highlight class="comment">/*force<sp/>creating<sp/>a<sp/>PLTE<sp/>chunk<sp/>if<sp/>colortype<sp/>is<sp/>2<sp/>or<sp/>6<sp/>(=<sp/>a<sp/>suggested<sp/>palette).<sp/>If<sp/>colortype<sp/>is<sp/>3,<sp/>PLTE<sp/>is<sp/>_always_<sp/>created.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>add_id;<sp/></highlight><highlight class="comment">/*add<sp/>LodePNG<sp/>version<sp/>as<sp/>text<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>text_compression;<sp/></highlight><highlight class="comment">/*encode<sp/>text<sp/>chunks<sp/>as<sp/>zTXt<sp/>chunks<sp/>instead<sp/>of<sp/>tEXt<sp/>chunks,<sp/>and<sp/>use<sp/>compression<sp/>in<sp/>iTXt<sp/>chunks*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/><ref refid="da/da3/struct_lode_p_n_g___encode_settings" kindref="compound">LodePNG_EncodeSettings</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_EncodeSettings_init(<ref refid="da/da3/struct_lode_p_n_g___encode_settings" kindref="compound">LodePNG_EncodeSettings</ref>*<sp/>settings);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="d6/d0e/struct_lode_p_n_g___encoder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref></highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><ref refid="da/da3/struct_lode_p_n_g___encode_settings" kindref="compound">LodePNG_EncodeSettings</ref><sp/>settings;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><ref refid="d7/d1e/struct_lode_p_n_g___info_png" kindref="compound">LodePNG_InfoPng</ref><sp/>infoPng;<sp/></highlight><highlight class="comment">/*the<sp/>info<sp/>specified<sp/>by<sp/>the<sp/>user<sp/>may<sp/>not<sp/>be<sp/>changed<sp/>by<sp/>the<sp/>encoder.<sp/>The<sp/>encoder<sp/>will<sp/>try<sp/>to<sp/>generate<sp/>a<sp/>PNG<sp/>close<sp/>to<sp/>the<sp/>given<sp/>info.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><ref refid="d3/d36/struct_lode_p_n_g___info_raw" kindref="compound">LodePNG_InfoRaw</ref><sp/>infoRaw;<sp/></highlight><highlight class="comment">/*put<sp/>the<sp/>properties<sp/>of<sp/>the<sp/>input<sp/>raw<sp/>image<sp/>in<sp/>here*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}<sp/><ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Encoder_init(<ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref>*<sp/>encoder);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Encoder_cleanup(<ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref>*<sp/>encoder);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_Encoder_copy(<ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref>*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref>*<sp/>source);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">/*This<sp/>function<sp/>allocates<sp/>the<sp/>out<sp/>buffer<sp/>and<sp/>stores<sp/>the<sp/>size<sp/>in<sp/>*outsize.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNG_encode(<ref refid="d6/d0e/struct_lode_p_n_g___encoder" kindref="compound">LodePNG_Encoder</ref>*<sp/>encoder,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_encode32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h);<sp/></highlight><highlight class="comment">/*return<sp/>value<sp/>is<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_encode32f(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DISK*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_PNG*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"></highlight><highlight class="comment">/*free<sp/>functions<sp/>allowing<sp/>to<sp/>load<sp/>and<sp/>save<sp/>a<sp/>file<sp/>from/to<sp/>harddisk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*This<sp/>function<sp/>allocates<sp/>the<sp/>out<sp/>buffer<sp/>and<sp/>stores<sp/>the<sp/>size<sp/>in<sp/>*outsize.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_loadFile(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNG_saveFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DISK*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="368"><highlight class="comment">TODO:</highlight></codeline>
<codeline lineno="369"><highlight class="comment">[<sp/>]<sp/>test<sp/>if<sp/>there<sp/>are<sp/>no<sp/>memory<sp/>leaks<sp/>or<sp/>security<sp/>exploits<sp/>-<sp/>done<sp/>a<sp/>lot<sp/>but<sp/>needs<sp/>to<sp/>be<sp/>checked<sp/>often</highlight></codeline>
<codeline lineno="370"><highlight class="comment">[<sp/>]<sp/>LZ77<sp/>encoder<sp/>more<sp/>like<sp/>the<sp/>one<sp/>described<sp/>in<sp/>zlib<sp/>-<sp/>to<sp/>make<sp/>sure<sp/>it&apos;s<sp/>patentfree</highlight></codeline>
<codeline lineno="371"><highlight class="comment">[<sp/>]<sp/>converting<sp/>color<sp/>to<sp/>16-bit<sp/>types</highlight></codeline>
<codeline lineno="372"><highlight class="comment">[<sp/>]<sp/>read<sp/>all<sp/>public<sp/>PNG<sp/>chunk<sp/>types<sp/>(but<sp/>never<sp/>let<sp/>the<sp/>color<sp/>profile<sp/>and<sp/>gamma<sp/>ones<sp/>ever<sp/>touch<sp/>RGB<sp/>values,<sp/>that<sp/>is<sp/>very<sp/>annoying<sp/>for<sp/>textures<sp/>as<sp/>well<sp/>as<sp/>images<sp/>in<sp/>a<sp/>browser)</highlight></codeline>
<codeline lineno="373"><highlight class="comment">[<sp/>]<sp/>make<sp/>sure<sp/>encoder<sp/>generates<sp/>no<sp/>chunks<sp/>with<sp/>size<sp/>&gt;<sp/>(2^31)-1</highlight></codeline>
<codeline lineno="374"><highlight class="comment">[<sp/>]<sp/>partial<sp/>decoding<sp/>(stream<sp/>processing)</highlight></codeline>
<codeline lineno="375"><highlight class="comment">[<sp/>]<sp/>let<sp/>the<sp/>&quot;isFullyOpaque&quot;<sp/>function<sp/>check<sp/>color<sp/>keys<sp/>and<sp/>transparent<sp/>palettes<sp/>too</highlight></codeline>
<codeline lineno="376"><highlight class="comment">[<sp/>]<sp/>better<sp/>name<sp/>for<sp/>the<sp/>variables<sp/>&quot;codes&quot;,<sp/>&quot;codesD&quot;,<sp/>&quot;codelengthcodes&quot;,<sp/>&quot;clcl&quot;<sp/>and<sp/>&quot;lldl&quot;</highlight></codeline>
<codeline lineno="377"><highlight class="comment">[<sp/>]<sp/>check<sp/>compatibility<sp/>with<sp/>vareous<sp/>compilers<sp/><sp/>-<sp/>done<sp/>but<sp/>needs<sp/>to<sp/>be<sp/>redone<sp/>for<sp/>every<sp/>newer<sp/>version</highlight></codeline>
<codeline lineno="378"><highlight class="comment">[<sp/>]<sp/>don&apos;t<sp/>stop<sp/>decoding<sp/>on<sp/>errors<sp/>like<sp/>69,<sp/>57,<sp/>58<sp/>(make<sp/>warnings<sp/>that<sp/>the<sp/>decoder<sp/>stores<sp/>in<sp/>the<sp/>error<sp/>at<sp/>the<sp/>very<sp/>end?<sp/>and<sp/>make<sp/>some<sp/>errors<sp/>just<sp/>let<sp/>it<sp/>stop<sp/>with<sp/>this<sp/>one<sp/>chunk<sp/>but<sp/>still<sp/>do<sp/>the<sp/>next<sp/>ones)</highlight></codeline>
<codeline lineno="379"><highlight class="comment">[<sp/>]<sp/>make<sp/>option<sp/>to<sp/>choose<sp/>if<sp/>the<sp/>raw<sp/>image<sp/>with<sp/>non<sp/>multiple<sp/>of<sp/>8<sp/>bits<sp/>per<sp/>scanline<sp/>should<sp/>have<sp/>padding<sp/>bits<sp/>or<sp/>not,<sp/>if<sp/>people<sp/>like<sp/>storing<sp/>raw<sp/>images<sp/>that<sp/>way</highlight></codeline>
<codeline lineno="380"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="385"><highlight class="comment">LodePNG<sp/>Documentation</highlight></codeline>
<codeline lineno="386"><highlight class="comment">---------------------</highlight></codeline>
<codeline lineno="387"><highlight class="comment"></highlight></codeline>
<codeline lineno="388"><highlight class="comment">0.<sp/>table<sp/>of<sp/>contents</highlight></codeline>
<codeline lineno="389"><highlight class="comment">--------------------</highlight></codeline>
<codeline lineno="390"><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/>1.<sp/>about</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/>1.1.<sp/>supported<sp/>features</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/>1.2.<sp/>features<sp/>not<sp/>supported</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/>2.<sp/>C<sp/>and<sp/>C++<sp/>version</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/>3.<sp/>A<sp/>note<sp/>about<sp/>security!</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/>4.<sp/>simple<sp/>functions</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/>4.1<sp/>C<sp/>Simple<sp/>Functions</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/>4.2<sp/>C++<sp/>Simple<sp/>Functions</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/>5.<sp/>decoder</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/>6.<sp/>encoder</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/>7.<sp/>color<sp/>conversions</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/>8.<sp/>info<sp/>values</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/>9.<sp/>error<sp/>values</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/>10.<sp/>file<sp/>IO</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/>11.<sp/>chunks<sp/>and<sp/>PNG<sp/>editing</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/>12.<sp/>compiler<sp/>support</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/>13.<sp/>examples</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/>13.1.<sp/>decoder<sp/>example</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/>13.2.<sp/>encoder<sp/>example</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/>14.<sp/>LodeZlib</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/>15.<sp/>changes</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>16.<sp/>contact<sp/>information</highlight></codeline>
<codeline lineno="413"><highlight class="comment"></highlight></codeline>
<codeline lineno="414"><highlight class="comment"></highlight></codeline>
<codeline lineno="415"><highlight class="comment">1.<sp/>about</highlight></codeline>
<codeline lineno="416"><highlight class="comment">--------</highlight></codeline>
<codeline lineno="417"><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment">PNG<sp/>is<sp/>a<sp/>file<sp/>format<sp/>to<sp/>store<sp/>raster<sp/>images<sp/>losslessly<sp/>with<sp/>good<sp/>compression,</highlight></codeline>
<codeline lineno="419"><highlight class="comment">supporting<sp/>different<sp/>color<sp/>types.<sp/>It<sp/>can<sp/>be<sp/>implemented<sp/>in<sp/>a<sp/>patent-free<sp/>way.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"></highlight></codeline>
<codeline lineno="421"><highlight class="comment">LodePNG<sp/>is<sp/>a<sp/>PNG<sp/>codec<sp/>according<sp/>to<sp/>the<sp/>Portable<sp/>Network<sp/>Graphics<sp/>(PNG)</highlight></codeline>
<codeline lineno="422"><highlight class="comment">Specification<sp/>(Second<sp/>Edition)<sp/>-<sp/>W3C<sp/>Recommendation<sp/>10<sp/>November<sp/>2003.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"></highlight></codeline>
<codeline lineno="424"><highlight class="comment">The<sp/>specifications<sp/>used<sp/>are:</highlight></codeline>
<codeline lineno="425"><highlight class="comment"></highlight></codeline>
<codeline lineno="426"><highlight class="comment">*)<sp/>Portable<sp/>Network<sp/>Graphics<sp/>(PNG)<sp/>Specification<sp/>(Second<sp/>Edition):</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>http://www.w3.org/TR/2003/REC-PNG-20031110</highlight></codeline>
<codeline lineno="428"><highlight class="comment">*)<sp/>RFC<sp/>1950<sp/>ZLIB<sp/>Compressed<sp/>Data<sp/>Format<sp/>version<sp/>3.3:</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>http://www.gzip.org/zlib/rfc-zlib.html</highlight></codeline>
<codeline lineno="430"><highlight class="comment">*)<sp/>RFC<sp/>1951<sp/>DEFLATE<sp/>Compressed<sp/>Data<sp/>Format<sp/>Specification<sp/>ver<sp/>1.3:</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>http://www.gzip.org/zlib/rfc-deflate.html</highlight></codeline>
<codeline lineno="432"><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment">The<sp/>most<sp/>recent<sp/>version<sp/>of<sp/>LodePNG<sp/>can<sp/>currently<sp/>be<sp/>found<sp/>at</highlight></codeline>
<codeline lineno="434"><highlight class="comment">http://members.gamedev.net/lode/projects/LodePNG/</highlight></codeline>
<codeline lineno="435"><highlight class="comment"></highlight></codeline>
<codeline lineno="436"><highlight class="comment">LodePNG<sp/>works<sp/>both<sp/>in<sp/>C<sp/>(ISO<sp/>C90)<sp/>and<sp/>C++,<sp/>with<sp/>a<sp/>C++<sp/>wrapper<sp/>that<sp/>adds</highlight></codeline>
<codeline lineno="437"><highlight class="comment">extra<sp/>functionality.</highlight></codeline>
<codeline lineno="438"><highlight class="comment"></highlight></codeline>
<codeline lineno="439"><highlight class="comment">LodePNG<sp/>exists<sp/>out<sp/>of<sp/>two<sp/>files:</highlight></codeline>
<codeline lineno="440"><highlight class="comment">-lodepng.h:<sp/>the<sp/>header<sp/>file<sp/>for<sp/>both<sp/>C<sp/>and<sp/>C++</highlight></codeline>
<codeline lineno="441"><highlight class="comment">-lodepng.c(pp):<sp/>give<sp/>it<sp/>the<sp/>name<sp/>lodepng.c<sp/>or<sp/>lodepng.cpp<sp/>depending<sp/>on<sp/>your<sp/>usage</highlight></codeline>
<codeline lineno="442"><highlight class="comment"></highlight></codeline>
<codeline lineno="443"><highlight class="comment">If<sp/>you<sp/>want<sp/>to<sp/>start<sp/>using<sp/>LodePNG<sp/>right<sp/>away<sp/>without<sp/>reading<sp/>this<sp/>doc,<sp/>get<sp/>the</highlight></codeline>
<codeline lineno="444"><highlight class="comment">files<sp/>lodepng_examples.c<sp/>or<sp/>lodepng_examples.cpp<sp/>to<sp/>see<sp/>how<sp/>to<sp/>use<sp/>it<sp/>in<sp/>code,</highlight></codeline>
<codeline lineno="445"><highlight class="comment">or<sp/>check<sp/>the<sp/>(smaller)<sp/>examples<sp/>in<sp/>chapter<sp/>13<sp/>here.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"></highlight></codeline>
<codeline lineno="447"><highlight class="comment">LodePNG<sp/>is<sp/>simple<sp/>but<sp/>only<sp/>supports<sp/>the<sp/>basic<sp/>requirements.<sp/>To<sp/>achieve</highlight></codeline>
<codeline lineno="448"><highlight class="comment">simplicity,<sp/>the<sp/>following<sp/>design<sp/>choices<sp/>were<sp/>made:<sp/>There<sp/>are<sp/>no<sp/>dependencies</highlight></codeline>
<codeline lineno="449"><highlight class="comment">on<sp/>any<sp/>external<sp/>library.<sp/>To<sp/>decode<sp/>PNGs,<sp/>there&apos;s<sp/>a<sp/>Decoder<sp/>struct<sp/>or<sp/>class<sp/>that</highlight></codeline>
<codeline lineno="450"><highlight class="comment">can<sp/>convert<sp/>any<sp/>PNG<sp/>file<sp/>data<sp/>into<sp/>an<sp/>RGBA<sp/>image<sp/>buffer<sp/>with<sp/>a<sp/>single<sp/>function</highlight></codeline>
<codeline lineno="451"><highlight class="comment">call.<sp/>To<sp/>encode<sp/>PNGs,<sp/>there&apos;s<sp/>an<sp/>Encoder<sp/>struct<sp/>or<sp/>class<sp/>that<sp/>can<sp/>convert<sp/>image</highlight></codeline>
<codeline lineno="452"><highlight class="comment">data<sp/>into<sp/>PNG<sp/>file<sp/>data<sp/>with<sp/>a<sp/>single<sp/>function<sp/>call.<sp/>To<sp/>read<sp/>and<sp/>write<sp/>files,</highlight></codeline>
<codeline lineno="453"><highlight class="comment">there<sp/>are<sp/>simple<sp/>functions<sp/>to<sp/>convert<sp/>the<sp/>files<sp/>to/from<sp/>buffers<sp/>in<sp/>memory.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment">This<sp/>all<sp/>makes<sp/>LodePNG<sp/>suitable<sp/>for<sp/>loading<sp/>textures<sp/>in<sp/>games,<sp/>demoscene</highlight></codeline>
<codeline lineno="456"><highlight class="comment">productions,<sp/>saving<sp/>a<sp/>screenshot,<sp/>images<sp/>in<sp/>programs<sp/>that<sp/>require<sp/>them<sp/>for<sp/>simple</highlight></codeline>
<codeline lineno="457"><highlight class="comment">usage,<sp/>...<sp/>It&apos;s<sp/>less<sp/>suitable<sp/>for<sp/>full<sp/>fledged<sp/>image<sp/>editors,<sp/>loading<sp/>PNGs</highlight></codeline>
<codeline lineno="458"><highlight class="comment">over<sp/>network<sp/>(it<sp/>requires<sp/>all<sp/>the<sp/>image<sp/>data<sp/>to<sp/>be<sp/>available<sp/>before<sp/>decoding<sp/>can</highlight></codeline>
<codeline lineno="459"><highlight class="comment">begin),<sp/>life-critical<sp/>systems,<sp/>...</highlight></codeline>
<codeline lineno="460"><highlight class="comment">LodePNG<sp/>has<sp/>a<sp/>standards<sp/>conformant<sp/>decoder<sp/>and<sp/>encoder,<sp/>and<sp/>supports<sp/>the<sp/>ability</highlight></codeline>
<codeline lineno="461"><highlight class="comment">to<sp/>make<sp/>a<sp/>somewhat<sp/>conformant<sp/>editor.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"></highlight></codeline>
<codeline lineno="463"><highlight class="comment">1.1.<sp/>supported<sp/>features</highlight></codeline>
<codeline lineno="464"><highlight class="comment">-----------------------</highlight></codeline>
<codeline lineno="465"><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment">The<sp/>following<sp/>features<sp/>are<sp/>supported<sp/>by<sp/>the<sp/>decoder:</highlight></codeline>
<codeline lineno="467"><highlight class="comment"></highlight></codeline>
<codeline lineno="468"><highlight class="comment">*)<sp/>decoding<sp/>of<sp/>PNGs<sp/>with<sp/>any<sp/>color<sp/>type,<sp/>bit<sp/>depth<sp/>and<sp/>interlace<sp/>mode,<sp/>to<sp/>a<sp/>24-<sp/>or<sp/>32-bit<sp/>color<sp/>raw<sp/>image,<sp/>or<sp/>the<sp/>same<sp/>color<sp/>type<sp/>as<sp/>the<sp/>PNG</highlight></codeline>
<codeline lineno="469"><highlight class="comment">*)<sp/>encoding<sp/>of<sp/>PNGs,<sp/>from<sp/>any<sp/>raw<sp/>image<sp/>to<sp/>24-<sp/>or<sp/>32-bit<sp/>color,<sp/>or<sp/>the<sp/>same<sp/>color<sp/>type<sp/>as<sp/>the<sp/>raw<sp/>image</highlight></codeline>
<codeline lineno="470"><highlight class="comment">*)<sp/>Adam7<sp/>interlace<sp/>and<sp/>deinterlace<sp/>for<sp/>any<sp/>color<sp/>type</highlight></codeline>
<codeline lineno="471"><highlight class="comment">*)<sp/>loading<sp/>the<sp/>image<sp/>from<sp/>harddisk<sp/>or<sp/>decoding<sp/>it<sp/>from<sp/>a<sp/>buffer<sp/>from<sp/>other<sp/>sources<sp/>than<sp/>harddisk</highlight></codeline>
<codeline lineno="472"><highlight class="comment">*)<sp/>support<sp/>for<sp/>alpha<sp/>channels,<sp/>including<sp/>RGBA<sp/>color<sp/>model,<sp/>translucent<sp/>palettes<sp/>and<sp/>color<sp/>keying</highlight></codeline>
<codeline lineno="473"><highlight class="comment">*)<sp/>zlib<sp/>decompression<sp/>(inflate)</highlight></codeline>
<codeline lineno="474"><highlight class="comment">*)<sp/>zlib<sp/>compression<sp/>(deflate)</highlight></codeline>
<codeline lineno="475"><highlight class="comment">*)<sp/>CRC32<sp/>and<sp/>ADLER32<sp/>checksums</highlight></codeline>
<codeline lineno="476"><highlight class="comment">*)<sp/>handling<sp/>of<sp/>unknown<sp/>chunks,<sp/>allowing<sp/>making<sp/>a<sp/>PNG<sp/>editor<sp/>that<sp/>stores<sp/>custom<sp/>and<sp/>unknown<sp/>chunks.</highlight></codeline>
<codeline lineno="477"><highlight class="comment">*)<sp/>the<sp/>following<sp/>chunks<sp/>are<sp/>supported<sp/>(generated/interpreted)<sp/>by<sp/>both<sp/>encoder<sp/>and<sp/>decoder:</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/>IHDR:<sp/>header<sp/>information</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/>PLTE:<sp/>color<sp/>palette</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/>IDAT:<sp/>pixel<sp/>data</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/><sp/>IEND:<sp/>the<sp/>final<sp/>chunk</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/>tRNS:<sp/>transparency<sp/>for<sp/>palettized<sp/>images</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/>tEXt:<sp/>textual<sp/>information</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/>zTXt:<sp/>compressed<sp/>textual<sp/>information</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/><sp/>iTXt:<sp/>international<sp/>textual<sp/>information</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/>bKGD:<sp/>suggested<sp/>background<sp/>color</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/>pHYs:<sp/>physical<sp/>dimensions</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/><sp/><sp/>tIME:<sp/>modification<sp/>time</highlight></codeline>
<codeline lineno="489"><highlight class="comment"></highlight></codeline>
<codeline lineno="490"><highlight class="comment">1.2.<sp/>features<sp/>not<sp/>supported</highlight></codeline>
<codeline lineno="491"><highlight class="comment">---------------------------</highlight></codeline>
<codeline lineno="492"><highlight class="comment"></highlight></codeline>
<codeline lineno="493"><highlight class="comment">The<sp/>following<sp/>features<sp/>are<sp/>_not_<sp/>supported:</highlight></codeline>
<codeline lineno="494"><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment">*)<sp/>some<sp/>features<sp/>needed<sp/>to<sp/>make<sp/>a<sp/>conformant<sp/>PNG-Editor<sp/>might<sp/>be<sp/>still<sp/>missing.</highlight></codeline>
<codeline lineno="496"><highlight class="comment">*)<sp/>partial<sp/>loading/stream<sp/>processing.<sp/>All<sp/>data<sp/>must<sp/>be<sp/>available<sp/>and<sp/>is<sp/>processed<sp/>in<sp/>one<sp/>call.</highlight></codeline>
<codeline lineno="497"><highlight class="comment">*)<sp/>The<sp/>following<sp/>public<sp/>chunks<sp/>are<sp/>not<sp/>supported<sp/>but<sp/>treated<sp/>as<sp/>unknown<sp/>chunks<sp/>by<sp/>LodePNG</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/><sp/>cHRM,<sp/>gAMA,<sp/>iCCP,<sp/>sRGB,<sp/>sBIT,<sp/>hIST,<sp/>sPLT</highlight></codeline>
<codeline lineno="499"><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment"></highlight></codeline>
<codeline lineno="501"><highlight class="comment">2.<sp/>C<sp/>and<sp/>C++<sp/>version</highlight></codeline>
<codeline lineno="502"><highlight class="comment">--------------------</highlight></codeline>
<codeline lineno="503"><highlight class="comment"></highlight></codeline>
<codeline lineno="504"><highlight class="comment">The<sp/>C<sp/>version<sp/>uses<sp/>buffers<sp/>allocated<sp/>with<sp/>alloc<sp/>instead<sp/>that<sp/>you<sp/>need<sp/>to<sp/>free()</highlight></codeline>
<codeline lineno="505"><highlight class="comment">yourself.<sp/>On<sp/>top<sp/>of<sp/>that,<sp/>you<sp/>need<sp/>to<sp/>use<sp/>init<sp/>and<sp/>cleanup<sp/>functions<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="506"><highlight class="comment">struct<sp/>whenever<sp/>using<sp/>a<sp/>struct<sp/>from<sp/>the<sp/>C<sp/>version<sp/>to<sp/>avoid<sp/>exploits<sp/>and<sp/>memory<sp/>leaks.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment">The<sp/>C++<sp/>version<sp/>has<sp/>constructors<sp/>and<sp/>destructors<sp/>that<sp/>take<sp/>care<sp/>of<sp/>these<sp/>things,</highlight></codeline>
<codeline lineno="509"><highlight class="comment">and<sp/>uses<sp/>std::vectors<sp/>in<sp/>the<sp/>interface<sp/>for<sp/>storing<sp/>data.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"></highlight></codeline>
<codeline lineno="511"><highlight class="comment">Both<sp/>the<sp/>C<sp/>and<sp/>the<sp/>C++<sp/>version<sp/>are<sp/>contained<sp/>in<sp/>this<sp/>file!<sp/>The<sp/>C++<sp/>code<sp/>depends<sp/>on</highlight></codeline>
<codeline lineno="512"><highlight class="comment">the<sp/>C<sp/>code,<sp/>the<sp/>C<sp/>code<sp/>works<sp/>on<sp/>its<sp/>own.</highlight></codeline>
<codeline lineno="513"><highlight class="comment"></highlight></codeline>
<codeline lineno="514"><highlight class="comment">These<sp/>files<sp/>work<sp/>without<sp/>modification<sp/>for<sp/>both<sp/>C<sp/>and<sp/>C++<sp/>compilers<sp/>because<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="515"><highlight class="comment">additional<sp/>C++<sp/>code<sp/>is<sp/>in<sp/>&quot;#ifdef<sp/>__cplusplus&quot;<sp/>blocks<sp/>that<sp/>make<sp/>C-compilers<sp/>ignore</highlight></codeline>
<codeline lineno="516"><highlight class="comment">it,<sp/>and<sp/>the<sp/>C<sp/>code<sp/>is<sp/>made<sp/>to<sp/>compile<sp/>both<sp/>with<sp/>strict<sp/>ISO<sp/>C90<sp/>and<sp/>C++.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment">To<sp/>use<sp/>the<sp/>C++<sp/>version,<sp/>you<sp/>need<sp/>to<sp/>rename<sp/>the<sp/>source<sp/>file<sp/>to<sp/>lodepng.cpp<sp/>(instead</highlight></codeline>
<codeline lineno="519"><highlight class="comment">of<sp/>lodepng.c),<sp/>and<sp/>compile<sp/>it<sp/>with<sp/>a<sp/>C++<sp/>compiler.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"></highlight></codeline>
<codeline lineno="521"><highlight class="comment">To<sp/>use<sp/>the<sp/>C<sp/>version,<sp/>you<sp/>need<sp/>to<sp/>rename<sp/>the<sp/>source<sp/>file<sp/>to<sp/>lodepng.c<sp/>(instead</highlight></codeline>
<codeline lineno="522"><highlight class="comment">of<sp/>lodepng.cpp),<sp/>and<sp/>compile<sp/>it<sp/>with<sp/>a<sp/>C<sp/>compiler.</highlight></codeline>
<codeline lineno="523"><highlight class="comment"></highlight></codeline>
<codeline lineno="524"><highlight class="comment"></highlight></codeline>
<codeline lineno="525"><highlight class="comment">3.<sp/>A<sp/>note<sp/>about<sp/>security!</highlight></codeline>
<codeline lineno="526"><highlight class="comment">-------------------------</highlight></codeline>
<codeline lineno="527"><highlight class="comment"></highlight></codeline>
<codeline lineno="528"><highlight class="comment">Despite<sp/>being<sp/>used<sp/>already<sp/>and<sp/>having<sp/>received<sp/>bug<sp/>fixes<sp/>whenever<sp/>bugs<sp/>were<sp/>reported,</highlight></codeline>
<codeline lineno="529"><highlight class="comment">LodePNG<sp/>may<sp/>still<sp/>contain<sp/>possible<sp/>exploits.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"></highlight></codeline>
<codeline lineno="531"><highlight class="comment">If<sp/>you<sp/>discover<sp/>a<sp/>possible<sp/>exploit,<sp/>please<sp/>let<sp/>me<sp/>know,<sp/>and<sp/>it<sp/>will<sp/>be<sp/>eliminated.</highlight></codeline>
<codeline lineno="532"><highlight class="comment"></highlight></codeline>
<codeline lineno="533"><highlight class="comment">When<sp/>using<sp/>LodePNG,<sp/>care<sp/>has<sp/>to<sp/>be<sp/>taken<sp/>with<sp/>the<sp/>C<sp/>version<sp/>of<sp/>LodePNG,<sp/>as<sp/>well<sp/>as<sp/>the<sp/>C-style</highlight></codeline>
<codeline lineno="534"><highlight class="comment">structs<sp/>when<sp/>working<sp/>with<sp/>C++.<sp/>The<sp/>following<sp/>conventions<sp/>are<sp/>used<sp/>for<sp/>all<sp/>C-style<sp/>structs:</highlight></codeline>
<codeline lineno="535"><highlight class="comment"></highlight></codeline>
<codeline lineno="536"><highlight class="comment">-if<sp/>a<sp/>struct<sp/>has<sp/>a<sp/>corresponding<sp/>init<sp/>function,<sp/>always<sp/>call<sp/>the<sp/>init<sp/>function<sp/>when<sp/>making<sp/>a<sp/>new<sp/>one,<sp/>to<sp/>avoid<sp/>exploits</highlight></codeline>
<codeline lineno="537"><highlight class="comment">-if<sp/>a<sp/>struct<sp/>has<sp/>a<sp/>corresponding<sp/>cleanup<sp/>function,<sp/>call<sp/>it<sp/>before<sp/>the<sp/>struct<sp/>disappears<sp/>to<sp/>avoid<sp/>memory<sp/>leaks</highlight></codeline>
<codeline lineno="538"><highlight class="comment">-if<sp/>a<sp/>struct<sp/>has<sp/>a<sp/>corresponding<sp/>copy<sp/>function,<sp/>use<sp/>the<sp/>copy<sp/>function<sp/>instead<sp/>of<sp/>&quot;=&quot;.<sp/>The<sp/>destination<sp/>must<sp/>be<sp/>inited<sp/>already!</highlight></codeline>
<codeline lineno="539"><highlight class="comment"></highlight></codeline>
<codeline lineno="540"><highlight class="comment"></highlight></codeline>
<codeline lineno="541"><highlight class="comment">4.<sp/>&quot;Simple&quot;<sp/>Functions</highlight></codeline>
<codeline lineno="542"><highlight class="comment">---------------------</highlight></codeline>
<codeline lineno="543"><highlight class="comment"></highlight></codeline>
<codeline lineno="544"><highlight class="comment">For<sp/>the<sp/>most<sp/>simple<sp/>usage<sp/>cases<sp/>of<sp/>loading<sp/>and<sp/>saving<sp/>a<sp/>PNG<sp/>image,<sp/>there</highlight></codeline>
<codeline lineno="545"><highlight class="comment">are<sp/>some<sp/>simple<sp/>functions<sp/>that<sp/>do<sp/>everything<sp/>in<sp/>1<sp/>call<sp/>(instead<sp/>of<sp/>you</highlight></codeline>
<codeline lineno="546"><highlight class="comment">having<sp/>to<sp/>instantiate<sp/>a<sp/>struct<sp/>or<sp/>class).</highlight></codeline>
<codeline lineno="547"><highlight class="comment"></highlight></codeline>
<codeline lineno="548"><highlight class="comment">The<sp/>simple<sp/>versions<sp/>always<sp/>use<sp/>32-bit<sp/>RGBA<sp/>color<sp/>for<sp/>the<sp/>raw<sp/>image,<sp/>but</highlight></codeline>
<codeline lineno="549"><highlight class="comment">still<sp/>support<sp/>loading<sp/>arbitrary-colortype<sp/>PNG<sp/>images.</highlight></codeline>
<codeline lineno="550"><highlight class="comment"></highlight></codeline>
<codeline lineno="551"><highlight class="comment">The<sp/>later<sp/>sections<sp/>of<sp/>this<sp/>manual<sp/>are<sp/>devoted<sp/>to<sp/>the<sp/>complex<sp/>versions,<sp/>where</highlight></codeline>
<codeline lineno="552"><highlight class="comment">you<sp/>can<sp/>use<sp/>other<sp/>color<sp/>types<sp/>and<sp/>conversions.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"></highlight></codeline>
<codeline lineno="554"><highlight class="comment">4.1<sp/>C<sp/>Simple<sp/>Functions</highlight></codeline>
<codeline lineno="555"><highlight class="comment">----------------------</highlight></codeline>
<codeline lineno="556"><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment">The<sp/>C<sp/>simple<sp/>functions<sp/>have<sp/>a<sp/>&quot;32&quot;<sp/>or<sp/>&quot;32f&quot;<sp/>in<sp/>their<sp/>name,<sp/>and<sp/>don&apos;t<sp/>take<sp/>a<sp/>struct<sp/>as</highlight></codeline>
<codeline lineno="558"><highlight class="comment">parameter,<sp/>unlike<sp/>the<sp/>non-simple<sp/>ones<sp/>(see<sp/>more<sp/>down<sp/>in<sp/>the<sp/>documentation).</highlight></codeline>
<codeline lineno="559"><highlight class="comment"></highlight></codeline>
<codeline lineno="560"><highlight class="comment">unsigned<sp/>LodePNG_decode32(unsigned<sp/>char**<sp/>out,<sp/>unsigned*<sp/>w,<sp/>unsigned*<sp/>h,<sp/>const<sp/>unsigned<sp/>char*<sp/>in,<sp/>size_t<sp/>insize);</highlight></codeline>
<codeline lineno="561"><highlight class="comment"></highlight></codeline>
<codeline lineno="562"><highlight class="comment">Load<sp/>PNG<sp/>from<sp/>given<sp/>buffer.</highlight></codeline>
<codeline lineno="563"><highlight class="comment">As<sp/>input,<sp/>give<sp/>an<sp/>unsigned<sp/>char*<sp/>buffer<sp/>gotten<sp/>by<sp/>loading<sp/>the<sp/>.png<sp/>file<sp/>and<sp/>its<sp/>size.</highlight></codeline>
<codeline lineno="564"><highlight class="comment">As<sp/>output,<sp/>you<sp/>get<sp/>a<sp/>dynamically<sp/>allocated<sp/>buffer<sp/>of<sp/>large<sp/>enough<sp/>size,<sp/>and<sp/>the<sp/>width<sp/>and<sp/>height<sp/>of<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="565"><highlight class="comment">The<sp/>buffer&apos;s<sp/>size<sp/>is<sp/>w<sp/>*<sp/>h<sp/>*<sp/>4.<sp/>The<sp/>image<sp/>is<sp/>in<sp/>RGBA<sp/>format.</highlight></codeline>
<codeline lineno="566"><highlight class="comment">The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>error<sp/>(0<sp/>if<sp/>ok).</highlight></codeline>
<codeline lineno="567"><highlight class="comment">You<sp/>need<sp/>to<sp/>do<sp/>free(out)<sp/>after<sp/>usage<sp/>to<sp/>clean<sp/>up<sp/>the<sp/>memory.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"></highlight></codeline>
<codeline lineno="569"><highlight class="comment">unsigned<sp/>LodePNG_decode32f(unsigned<sp/>char**<sp/>out,<sp/>unsigned*<sp/>w,<sp/>unsigned*<sp/>h,<sp/>const<sp/>char*<sp/>filename);</highlight></codeline>
<codeline lineno="570"><highlight class="comment"></highlight></codeline>
<codeline lineno="571"><highlight class="comment">Load<sp/>PNG<sp/>from<sp/>disk,<sp/>from<sp/>file<sp/>with<sp/>given<sp/>name.</highlight></codeline>
<codeline lineno="572"><highlight class="comment">Same<sp/>as<sp/>decode32,<sp/>except<sp/>you<sp/>give<sp/>a<sp/>filename<sp/>instead<sp/>of<sp/>an<sp/>input<sp/>buffer.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"></highlight></codeline>
<codeline lineno="574"><highlight class="comment">unsigned<sp/>LodePNG_encode32(unsigned<sp/>char**<sp/>out,<sp/>size_t*<sp/>outsize,<sp/>const<sp/>unsigned<sp/>char*<sp/>image,<sp/>unsigned<sp/>w,<sp/>unsigned<sp/>h);</highlight></codeline>
<codeline lineno="575"><highlight class="comment"></highlight></codeline>
<codeline lineno="576"><highlight class="comment">Encode<sp/>PNG<sp/>into<sp/>buffer.</highlight></codeline>
<codeline lineno="577"><highlight class="comment">As<sp/>input,<sp/>give<sp/>a<sp/>image<sp/>buffer<sp/>of<sp/>size<sp/>w<sp/>*<sp/>h<sp/>*<sp/>4,<sp/>in<sp/>RGBA<sp/>format.</highlight></codeline>
<codeline lineno="578"><highlight class="comment">As<sp/>output,<sp/>you<sp/>get<sp/>a<sp/>dynamically<sp/>allocated<sp/>buffer<sp/>and<sp/>its<sp/>size,<sp/>which<sp/>is<sp/>a<sp/>PNG<sp/>file<sp/>that<sp/>can</highlight></codeline>
<codeline lineno="579"><highlight class="comment">directly<sp/>be<sp/>saved<sp/>in<sp/>this<sp/>form<sp/>to<sp/>the<sp/>harddisk.</highlight></codeline>
<codeline lineno="580"><highlight class="comment">The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>error<sp/>(0<sp/>if<sp/>ok).</highlight></codeline>
<codeline lineno="581"><highlight class="comment">You<sp/>need<sp/>to<sp/>do<sp/>free(out)<sp/>after<sp/>usage<sp/>to<sp/>clean<sp/>up<sp/>the<sp/>memory.</highlight></codeline>
<codeline lineno="582"><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment">unsigned<sp/>LodePNG_encode32f(const<sp/>char*<sp/>filename,<sp/>const<sp/>unsigned<sp/>char*<sp/>image,<sp/>unsigned<sp/>w,<sp/>unsigned<sp/>h);</highlight></codeline>
<codeline lineno="584"><highlight class="comment"></highlight></codeline>
<codeline lineno="585"><highlight class="comment">Encode<sp/>PNG<sp/>into<sp/>file<sp/>on<sp/>disk<sp/>with<sp/>given<sp/>name.</highlight></codeline>
<codeline lineno="586"><highlight class="comment">If<sp/>the<sp/>file<sp/>exists,<sp/>it&apos;s<sp/>overwritten<sp/>without<sp/>warning!</highlight></codeline>
<codeline lineno="587"><highlight class="comment">Same<sp/>parameters<sp/>as<sp/>encode2,<sp/>except<sp/>the<sp/>result<sp/>is<sp/>stored<sp/>in<sp/>a<sp/>file<sp/>instead<sp/>of<sp/>a<sp/>dynamic<sp/>buffer.</highlight></codeline>
<codeline lineno="588"><highlight class="comment"></highlight></codeline>
<codeline lineno="589"><highlight class="comment">4.2<sp/>C++<sp/>Simple<sp/>Functions</highlight></codeline>
<codeline lineno="590"><highlight class="comment">------------------------</highlight></codeline>
<codeline lineno="591"><highlight class="comment"></highlight></codeline>
<codeline lineno="592"><highlight class="comment">For<sp/>decoding<sp/>a<sp/>PNG<sp/>there<sp/>are:</highlight></codeline>
<codeline lineno="593"><highlight class="comment"></highlight></codeline>
<codeline lineno="594"><highlight class="comment">unsigned<sp/>LodePNG::decode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/>unsigned&amp;<sp/>w,<sp/>unsigned&amp;<sp/>h,<sp/>const<sp/>unsigned<sp/>char*<sp/>in,<sp/>unsigned<sp/>size);</highlight></codeline>
<codeline lineno="595"><highlight class="comment">unsigned<sp/>LodePNG::decode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/>unsigned&amp;<sp/>w,<sp/>unsigned&amp;<sp/>h,<sp/>const<sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in);</highlight></codeline>
<codeline lineno="596"><highlight class="comment">unsigned<sp/>LodePNG::decode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/>unsigned&amp;<sp/>w,<sp/>unsigned&amp;<sp/>h,<sp/>const<sp/>std::string&amp;<sp/>filename);</highlight></codeline>
<codeline lineno="597"><highlight class="comment"></highlight></codeline>
<codeline lineno="598"><highlight class="comment">These<sp/>store<sp/>the<sp/>pixel<sp/>data<sp/>as<sp/>32-bit<sp/>RGBA<sp/>color<sp/>in<sp/>the<sp/>out<sp/>vector,<sp/>and<sp/>the<sp/>width</highlight></codeline>
<codeline lineno="599"><highlight class="comment">and<sp/>height<sp/>of<sp/>the<sp/>image<sp/>in<sp/>w<sp/>and<sp/>h.</highlight></codeline>
<codeline lineno="600"><highlight class="comment">The<sp/>3<sp/>functions<sp/>each<sp/>have<sp/>a<sp/>different<sp/>input<sp/>type:<sp/>The<sp/>first<sp/>as<sp/>unsigned<sp/>char</highlight></codeline>
<codeline lineno="601"><highlight class="comment">buffer,<sp/>the<sp/>second<sp/>as<sp/>std::vector<sp/>buffer,<sp/>and<sp/>the<sp/>third<sp/>allows<sp/>you<sp/>to<sp/>give<sp/>the</highlight></codeline>
<codeline lineno="602"><highlight class="comment">filename<sp/>in<sp/>case<sp/>you<sp/>want<sp/>to<sp/>load<sp/>the<sp/>PNG<sp/>from<sp/>disk<sp/>instead<sp/>of<sp/>from<sp/>a<sp/>buffer.</highlight></codeline>
<codeline lineno="603"><highlight class="comment">The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>error<sp/>(0<sp/>if<sp/>ok).</highlight></codeline>
<codeline lineno="604"><highlight class="comment"></highlight></codeline>
<codeline lineno="605"><highlight class="comment">For<sp/>encoding<sp/>a<sp/>PNG<sp/>there<sp/>are:</highlight></codeline>
<codeline lineno="606"><highlight class="comment"></highlight></codeline>
<codeline lineno="607"><highlight class="comment">unsigned<sp/>LodePNG::encode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/>const<sp/>unsigned<sp/>char*<sp/>in,<sp/>unsigned<sp/>w,<sp/>unsigned<sp/>h);</highlight></codeline>
<codeline lineno="608"><highlight class="comment">unsigned<sp/>LodePNG::encode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/>const<sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in,<sp/>unsigned<sp/>w,<sp/>unsigned<sp/>h);</highlight></codeline>
<codeline lineno="609"><highlight class="comment">unsigned<sp/>LodePNG::encode(const<sp/>std::string&amp;<sp/>filename,<sp/>const<sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in,<sp/>unsigned<sp/>w,<sp/>unsigned<sp/>h);</highlight></codeline>
<codeline lineno="610"><highlight class="comment">unsigned<sp/>LodePNG::encode(const<sp/>std::string&amp;<sp/>filename,<sp/>const<sp/>unsigned<sp/>char*<sp/>in,<sp/>unsigned<sp/>w,<sp/>unsigned<sp/>h);</highlight></codeline>
<codeline lineno="611"><highlight class="comment"></highlight></codeline>
<codeline lineno="612"><highlight class="comment">Specify<sp/>the<sp/>width<sp/>and<sp/>height<sp/>of<sp/>the<sp/>input<sp/>image<sp/>with<sp/>w<sp/>and<sp/>h.</highlight></codeline>
<codeline lineno="613"><highlight class="comment">You<sp/>can<sp/>choose<sp/>to<sp/>get<sp/>the<sp/>output<sp/>in<sp/>an<sp/>std::vector<sp/>or<sp/>stored<sp/>in<sp/>a<sp/>file,<sp/>and</highlight></codeline>
<codeline lineno="614"><highlight class="comment">the<sp/>input<sp/>can<sp/>come<sp/>from<sp/>an<sp/>std::vector<sp/>or<sp/>an<sp/>unsigned<sp/>char*<sp/>buffer.<sp/>The<sp/>input</highlight></codeline>
<codeline lineno="615"><highlight class="comment">buffer<sp/>must<sp/>be<sp/>in<sp/>RGBA<sp/>format<sp/>and<sp/>the<sp/>size<sp/>must<sp/>be<sp/>w<sp/>*<sp/>h<sp/>*<sp/>4<sp/>bytes.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"></highlight></codeline>
<codeline lineno="617"><highlight class="comment">The<sp/>first<sp/>two<sp/>functions<sp/>append<sp/>to<sp/>the<sp/>out<sp/>buffer,<sp/>they<sp/>don&apos;t<sp/>clear<sp/>it,<sp/>clear<sp/>it</highlight></codeline>
<codeline lineno="618"><highlight class="comment">first<sp/>before<sp/>encoding<sp/>into<sp/>a<sp/>buffer<sp/>that<sp/>you<sp/>expect<sp/>to<sp/>only<sp/>contain<sp/>this<sp/>result.</highlight></codeline>
<codeline lineno="619"><highlight class="comment"></highlight></codeline>
<codeline lineno="620"><highlight class="comment">On<sp/>the<sp/>other<sp/>hand,<sp/>the<sp/>functions<sp/>that<sp/>encode<sp/>to<sp/>a<sp/>file<sp/>will<sp/>completely<sp/>overwrite</highlight></codeline>
<codeline lineno="621"><highlight class="comment">the<sp/>original<sp/>file<sp/>without<sp/>warning<sp/>if<sp/>it<sp/>exists.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"></highlight></codeline>
<codeline lineno="623"><highlight class="comment">The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>error<sp/>(0<sp/>if<sp/>ok).</highlight></codeline>
<codeline lineno="624"><highlight class="comment"></highlight></codeline>
<codeline lineno="625"><highlight class="comment">5.<sp/>Decoder</highlight></codeline>
<codeline lineno="626"><highlight class="comment">----------</highlight></codeline>
<codeline lineno="627"><highlight class="comment"></highlight></codeline>
<codeline lineno="628"><highlight class="comment">This<sp/>is<sp/>about<sp/>the<sp/>LodePNG_Decoder<sp/>struct<sp/>in<sp/>the<sp/>C<sp/>version,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="629"><highlight class="comment">LodePNG::Decoder<sp/>class<sp/>in<sp/>the<sp/>C++<sp/>version.<sp/>The<sp/>C++<sp/>version<sp/>inherits</highlight></codeline>
<codeline lineno="630"><highlight class="comment">from<sp/>the<sp/>C<sp/>struct<sp/>and<sp/>adds<sp/>functions<sp/>in<sp/>the<sp/>interface.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"></highlight></codeline>
<codeline lineno="632"><highlight class="comment">The<sp/>Decoder<sp/>class<sp/>can<sp/>be<sp/>used<sp/>to<sp/>convert<sp/>a<sp/>PNG<sp/>image<sp/>to<sp/>a<sp/>raw<sp/>image.</highlight></codeline>
<codeline lineno="633"><highlight class="comment"></highlight></codeline>
<codeline lineno="634"><highlight class="comment">Usage:</highlight></codeline>
<codeline lineno="635"><highlight class="comment"></highlight></codeline>
<codeline lineno="636"><highlight class="comment">-in<sp/>C++:</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/>declare<sp/>a<sp/>LodePNG::Decoder</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/>call<sp/>its<sp/>decode<sp/>member<sp/>function<sp/>with<sp/>the<sp/>parameters<sp/>described<sp/>below</highlight></codeline>
<codeline lineno="639"><highlight class="comment"></highlight></codeline>
<codeline lineno="640"><highlight class="comment">-in<sp/>C<sp/>more<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>due<sp/>to<sp/>the<sp/>lack<sp/>of<sp/>constructors<sp/>and<sp/>destructors:</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/>declare<sp/>a<sp/>LodePNG_Decoder<sp/>struct</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/>call<sp/>LodePNG_Decoder_init<sp/>with<sp/>the<sp/>struct<sp/>as<sp/>parameter</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/>call<sp/>LodePNG_Decode<sp/>with<sp/>the<sp/>parameters<sp/>described<sp/>below</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/>after<sp/>usage,<sp/>call<sp/>LodePNG_Decoder_cleanup<sp/>with<sp/>the<sp/>struct<sp/>as<sp/>parameter</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/>after<sp/>usage,<sp/>free()<sp/>the<sp/>out<sp/>buffer<sp/>with<sp/>image<sp/>data<sp/>that<sp/>was<sp/>created<sp/>by<sp/>the<sp/>decode<sp/>function</highlight></codeline>
<codeline lineno="646"><highlight class="comment"></highlight></codeline>
<codeline lineno="647"><highlight class="comment">The<sp/>other<sp/>parameters<sp/>of<sp/>the<sp/>decode<sp/>function<sp/>are:</highlight></codeline>
<codeline lineno="648"><highlight class="comment">*)<sp/>out:<sp/>this<sp/>buffer<sp/>will<sp/>be<sp/>filled<sp/>with<sp/>the<sp/>raw<sp/>image<sp/>pixels</highlight></codeline>
<codeline lineno="649"><highlight class="comment">*)<sp/>in:<sp/>pointer<sp/>to<sp/>the<sp/>PNG<sp/>image<sp/>data<sp/>or<sp/>std::vector<sp/>with<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="650"><highlight class="comment">*)<sp/>size:<sp/>the<sp/>size<sp/>of<sp/>the<sp/>PNG<sp/>image<sp/>data<sp/>(not<sp/>needed<sp/>for<sp/>std::vector<sp/>version)</highlight></codeline>
<codeline lineno="651"><highlight class="comment"></highlight></codeline>
<codeline lineno="652"><highlight class="comment">After<sp/>decoding<sp/>you<sp/>need<sp/>to<sp/>read<sp/>the<sp/>width<sp/>and<sp/>height<sp/>of<sp/>the<sp/>image<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="653"><highlight class="comment">decoder,<sp/>see<sp/>further<sp/>down<sp/>in<sp/>this<sp/>manual<sp/>to<sp/>see<sp/>how.</highlight></codeline>
<codeline lineno="654"><highlight class="comment"></highlight></codeline>
<codeline lineno="655"><highlight class="comment">There&apos;s<sp/>also<sp/>an<sp/>optional<sp/>function<sp/>&quot;inspect&quot;.<sp/>It<sp/>has<sp/>the<sp/>same<sp/>parameters<sp/>as<sp/>decode<sp/>except</highlight></codeline>
<codeline lineno="656"><highlight class="comment">the<sp/>&quot;out&quot;<sp/>parameter.<sp/>This<sp/>function<sp/>will<sp/>read<sp/>only<sp/>the<sp/>header<sp/>chunk<sp/>of<sp/>the<sp/>PNG</highlight></codeline>
<codeline lineno="657"><highlight class="comment">image,<sp/>and<sp/>store<sp/>the<sp/>information<sp/>from<sp/>it<sp/>in<sp/>the<sp/>LodePNG_InfoPng<sp/>(see<sp/>below).</highlight></codeline>
<codeline lineno="658"><highlight class="comment">This<sp/>allows<sp/>knowing<sp/>information<sp/>about<sp/>the<sp/>image<sp/>without<sp/>decoding<sp/>it.<sp/>Only<sp/>the</highlight></codeline>
<codeline lineno="659"><highlight class="comment">header<sp/>(IHDR)<sp/>information<sp/>is<sp/>read<sp/>by<sp/>this,<sp/>not<sp/>text<sp/>chunks,<sp/>not<sp/>the<sp/>palette,<sp/>...</highlight></codeline>
<codeline lineno="660"><highlight class="comment"></highlight></codeline>
<codeline lineno="661"><highlight class="comment">During<sp/>the<sp/>decoding<sp/>it&apos;s<sp/>possible<sp/>that<sp/>an<sp/>error<sp/>can<sp/>happen,<sp/>for<sp/>example<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="662"><highlight class="comment">PNG<sp/>image<sp/>was<sp/>corrupted.<sp/>To<sp/>check<sp/>if<sp/>an<sp/>error<sp/>happened<sp/>during<sp/>the<sp/>last<sp/>decoding,</highlight></codeline>
<codeline lineno="663"><highlight class="comment">check<sp/>the<sp/>value<sp/>error,<sp/>which<sp/>is<sp/>a<sp/>member<sp/>of<sp/>the<sp/>decoder<sp/>struct.</highlight></codeline>
<codeline lineno="664"><highlight class="comment">In<sp/>the<sp/>C++<sp/>version,<sp/>use<sp/>hasError()<sp/>and<sp/>getError()<sp/>of<sp/>the<sp/>Decoder.</highlight></codeline>
<codeline lineno="665"><highlight class="comment">The<sp/>error<sp/>codes<sp/>are<sp/>explained<sp/>in<sp/>another<sp/>section.</highlight></codeline>
<codeline lineno="666"><highlight class="comment"></highlight></codeline>
<codeline lineno="667"><highlight class="comment">Now<sp/>about<sp/>colors<sp/>and<sp/>settings...</highlight></codeline>
<codeline lineno="668"><highlight class="comment"></highlight></codeline>
<codeline lineno="669"><highlight class="comment">The<sp/>Decoder<sp/>contains<sp/>3<sp/>components:</highlight></codeline>
<codeline lineno="670"><highlight class="comment">*)<sp/>LodePNG_InfoPng:<sp/>it<sp/>stores<sp/>information<sp/>about<sp/>the<sp/>PNG<sp/>(the<sp/>input)<sp/>in<sp/>an<sp/>LodePNG_InfoPng<sp/>struct,<sp/>don&apos;t<sp/>modify<sp/>this<sp/>one<sp/>yourself</highlight></codeline>
<codeline lineno="671"><highlight class="comment">*)<sp/>Settings:<sp/>you<sp/>can<sp/>specify<sp/>a<sp/>few<sp/>other<sp/>settings<sp/>for<sp/>the<sp/>decoder<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="672"><highlight class="comment">*)<sp/>LodePNG_InfoRaw:<sp/>here<sp/>you<sp/>can<sp/>say<sp/>what<sp/>type<sp/>of<sp/>raw<sp/>image<sp/>(the<sp/>output)<sp/>you<sp/>want<sp/>to<sp/>get</highlight></codeline>
<codeline lineno="673"><highlight class="comment"></highlight></codeline>
<codeline lineno="674"><highlight class="comment">Some<sp/>of<sp/>the<sp/>parameters<sp/>described<sp/>below<sp/>may<sp/>be<sp/>inside<sp/>the<sp/>sub-struct<sp/>&quot;LodePNG_InfoColor<sp/>color&quot;.</highlight></codeline>
<codeline lineno="675"><highlight class="comment">In<sp/>the<sp/>C<sp/>and<sp/>C++<sp/>version,<sp/>when<sp/>using<sp/>Info<sp/>structs<sp/>outside<sp/>of<sp/>the<sp/>decoder<sp/>or<sp/>encoder,<sp/>you<sp/>need<sp/>to<sp/>use<sp/>their</highlight></codeline>
<codeline lineno="676"><highlight class="comment">init<sp/>and<sp/>cleanup<sp/>functions,<sp/>but<sp/>normally<sp/>you<sp/>use<sp/>the<sp/>ones<sp/>in<sp/>the<sp/>decoder<sp/>that<sp/>are<sp/>already<sp/>handled</highlight></codeline>
<codeline lineno="677"><highlight class="comment">in<sp/>the<sp/>init<sp/>and<sp/>cleanup<sp/>functions<sp/>of<sp/>the<sp/>decoder<sp/>itself.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"></highlight></codeline>
<codeline lineno="679"><highlight class="comment">=LodePNG_InfoPng=</highlight></codeline>
<codeline lineno="680"><highlight class="comment"></highlight></codeline>
<codeline lineno="681"><highlight class="comment">This<sp/>contains<sp/>information<sp/>such<sp/>as<sp/>the<sp/>original<sp/>color<sp/>type<sp/>of<sp/>the<sp/>PNG<sp/>image,<sp/>text</highlight></codeline>
<codeline lineno="682"><highlight class="comment">comments,<sp/>suggested<sp/>background<sp/>color,<sp/>etc...<sp/>More<sp/>details<sp/>about<sp/>the<sp/>LodePNG_InfoPng<sp/>struct</highlight></codeline>
<codeline lineno="683"><highlight class="comment">are<sp/>in<sp/>another<sp/>section.</highlight></codeline>
<codeline lineno="684"><highlight class="comment"></highlight></codeline>
<codeline lineno="685"><highlight class="comment">Because<sp/>the<sp/>dimensions<sp/>of<sp/>the<sp/>image<sp/>are<sp/>important,<sp/>there<sp/>are<sp/>shortcuts<sp/>to<sp/>get<sp/>them<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="686"><highlight class="comment">C++<sp/>version:<sp/>use<sp/>decoder.getWidth()<sp/>and<sp/>decoder.getHeight().</highlight></codeline>
<codeline lineno="687"><highlight class="comment">In<sp/>the<sp/>C<sp/>version,<sp/>use<sp/>decoder.infoPng.width<sp/>and<sp/>decoder.infoPng.height.</highlight></codeline>
<codeline lineno="688"><highlight class="comment"></highlight></codeline>
<codeline lineno="689"><highlight class="comment">=LodePNG_InfoRaw=</highlight></codeline>
<codeline lineno="690"><highlight class="comment"></highlight></codeline>
<codeline lineno="691"><highlight class="comment">In<sp/>the<sp/>LodePNG_InfoRaw<sp/>struct<sp/>of<sp/>the<sp/>Decoder,<sp/>you<sp/>can<sp/>specify<sp/>which<sp/>color<sp/>type<sp/>you<sp/>want</highlight></codeline>
<codeline lineno="692"><highlight class="comment">the<sp/>resulting<sp/>raw<sp/>image<sp/>to<sp/>be.<sp/>If<sp/>this<sp/>is<sp/>different<sp/>from<sp/>the<sp/>colorType<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="693"><highlight class="comment">PNG,<sp/>then<sp/>the<sp/>decoder<sp/>will<sp/>automatically<sp/>convert<sp/>the<sp/>result<sp/>to<sp/>your<sp/>LodePNG_InfoRaw</highlight></codeline>
<codeline lineno="694"><highlight class="comment">settings.<sp/>Currently<sp/>the<sp/>following<sp/>options<sp/>are<sp/>supported<sp/>to<sp/>convert<sp/>to:</highlight></codeline>
<codeline lineno="695"><highlight class="comment">-colorType<sp/>6,<sp/>bitDepth<sp/>8:<sp/>32-bit<sp/>RGBA</highlight></codeline>
<codeline lineno="696"><highlight class="comment">-colorType<sp/>2,<sp/>bitDepth<sp/>8:<sp/>24-bit<sp/>RGB</highlight></codeline>
<codeline lineno="697"><highlight class="comment">-other<sp/>color<sp/>types<sp/>if<sp/>it&apos;s<sp/>exactly<sp/>the<sp/>same<sp/>as<sp/>that<sp/>in<sp/>the<sp/>PNG<sp/>image</highlight></codeline>
<codeline lineno="698"><highlight class="comment"></highlight></codeline>
<codeline lineno="699"><highlight class="comment">Palette<sp/>of<sp/>LodePNG_InfoRaw<sp/>isn&apos;t<sp/>used<sp/>by<sp/>the<sp/>Decoder,<sp/>when<sp/>converting<sp/>from<sp/>palette<sp/>color</highlight></codeline>
<codeline lineno="700"><highlight class="comment">to<sp/>palette<sp/>color,<sp/>the<sp/>values<sp/>of<sp/>the<sp/>pixels<sp/>are<sp/>left<sp/>untouched<sp/>so<sp/>that<sp/>the<sp/>colors</highlight></codeline>
<codeline lineno="701"><highlight class="comment">will<sp/>change<sp/>if<sp/>the<sp/>palette<sp/>is<sp/>different.<sp/>Color<sp/>key<sp/>of<sp/>LodePNG_InfoRaw<sp/>is<sp/>not<sp/>used<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="702"><highlight class="comment">Decoder.<sp/>If<sp/>setting<sp/>color_convert<sp/>is<sp/>false<sp/>then<sp/>LodePNG_InfoRaw<sp/>is<sp/>completely<sp/>ignored,</highlight></codeline>
<codeline lineno="703"><highlight class="comment">but<sp/>it<sp/>will<sp/>be<sp/>modified<sp/>to<sp/>match<sp/>the<sp/>color<sp/>type<sp/>of<sp/>the<sp/>PNG<sp/>so<sp/>will<sp/>be<sp/>overwritten.</highlight></codeline>
<codeline lineno="704"><highlight class="comment"></highlight></codeline>
<codeline lineno="705"><highlight class="comment">By<sp/>default,<sp/>32-bit<sp/>color<sp/>is<sp/>used<sp/>for<sp/>the<sp/>result.</highlight></codeline>
<codeline lineno="706"><highlight class="comment"></highlight></codeline>
<codeline lineno="707"><highlight class="comment">=Settings=</highlight></codeline>
<codeline lineno="708"><highlight class="comment"></highlight></codeline>
<codeline lineno="709"><highlight class="comment">The<sp/>Settings<sp/>can<sp/>be<sp/>used<sp/>to<sp/>ignore<sp/>the<sp/>errors<sp/>created<sp/>by<sp/>invalid<sp/>CRC<sp/>and<sp/>Adler32</highlight></codeline>
<codeline lineno="710"><highlight class="comment">chunks,<sp/>and<sp/>to<sp/>disable<sp/>the<sp/>decoding<sp/>of<sp/>tEXt<sp/>chunks.</highlight></codeline>
<codeline lineno="711"><highlight class="comment"></highlight></codeline>
<codeline lineno="712"><highlight class="comment">There&apos;s<sp/>also<sp/>a<sp/>setting<sp/>color_convert,<sp/>true<sp/>by<sp/>default.<sp/>If<sp/>false,<sp/>no<sp/>conversion</highlight></codeline>
<codeline lineno="713"><highlight class="comment">is<sp/>done,<sp/>the<sp/>resulting<sp/>data<sp/>will<sp/>be<sp/>as<sp/>it<sp/>was<sp/>in<sp/>the<sp/>PNG<sp/>(after<sp/>decompression)</highlight></codeline>
<codeline lineno="714"><highlight class="comment">and<sp/>you&apos;ll<sp/>have<sp/>to<sp/>puzzle<sp/>the<sp/>colors<sp/>of<sp/>the<sp/>pixels<sp/>together<sp/>yourself<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="715"><highlight class="comment">color<sp/>type<sp/>information<sp/>in<sp/>the<sp/>LodePNG_InfoPng.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"></highlight></codeline>
<codeline lineno="717"><highlight class="comment"></highlight></codeline>
<codeline lineno="718"><highlight class="comment">6.<sp/>Encoder</highlight></codeline>
<codeline lineno="719"><highlight class="comment">----------</highlight></codeline>
<codeline lineno="720"><highlight class="comment"></highlight></codeline>
<codeline lineno="721"><highlight class="comment">This<sp/>is<sp/>about<sp/>the<sp/>LodePNG_Encoder<sp/>struct<sp/>in<sp/>the<sp/>C<sp/>version,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="722"><highlight class="comment">LodePNG::Encoder<sp/>class<sp/>in<sp/>the<sp/>C++<sp/>version.</highlight></codeline>
<codeline lineno="723"><highlight class="comment"></highlight></codeline>
<codeline lineno="724"><highlight class="comment">The<sp/>Encoder<sp/>class<sp/>can<sp/>be<sp/>used<sp/>to<sp/>convert<sp/>raw<sp/>image<sp/>data<sp/>into<sp/>a<sp/>PNG<sp/>image.</highlight></codeline>
<codeline lineno="725"><highlight class="comment"></highlight></codeline>
<codeline lineno="726"><highlight class="comment">The<sp/>PNG<sp/>part<sp/>of<sp/>the<sp/>encoder<sp/>is<sp/>working<sp/>good,<sp/>the<sp/>zlib<sp/>compression<sp/>part<sp/>is</highlight></codeline>
<codeline lineno="727"><highlight class="comment">becoming<sp/>quite<sp/>fine<sp/>but<sp/>not<sp/>as<sp/>good<sp/>as<sp/>the<sp/>official<sp/>zlib<sp/>yet,<sp/>because<sp/>it&apos;s<sp/>not</highlight></codeline>
<codeline lineno="728"><highlight class="comment">as<sp/>fast<sp/>and<sp/>doesn&apos;t<sp/>provide<sp/>an<sp/>as<sp/>high<sp/>compression<sp/>ratio.</highlight></codeline>
<codeline lineno="729"><highlight class="comment"></highlight></codeline>
<codeline lineno="730"><highlight class="comment">Usage:</highlight></codeline>
<codeline lineno="731"><highlight class="comment"></highlight></codeline>
<codeline lineno="732"><highlight class="comment">-in<sp/>C++:</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/>declare<sp/>a<sp/>LodePNG::Encoder</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/>call<sp/>its<sp/>encode<sp/>member<sp/>function<sp/>with<sp/>the<sp/>parameters<sp/>described<sp/>below</highlight></codeline>
<codeline lineno="735"><highlight class="comment"></highlight></codeline>
<codeline lineno="736"><highlight class="comment">-in<sp/>C<sp/>more<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>due<sp/>to<sp/>the<sp/>lack<sp/>of<sp/>constructors<sp/>and<sp/>destructors:</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/>declare<sp/>a<sp/>LodePNG_Encoder<sp/>struct</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/>call<sp/>LodePNG_Encoder_init<sp/>with<sp/>the<sp/>struct<sp/>as<sp/>parameter</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/>call<sp/>LodePNG_Encode<sp/>with<sp/>the<sp/>parameters<sp/>described<sp/>below</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/>after<sp/>usage,<sp/>call<sp/>LodePNG_Encoder_cleanup<sp/>with<sp/>the<sp/>struct<sp/>as<sp/>parameter</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/>after<sp/>usage,<sp/>free()<sp/>the<sp/>out<sp/>buffer<sp/>with<sp/>PNG<sp/>data<sp/>that<sp/>was<sp/>created<sp/>by<sp/>the<sp/>encode<sp/>function</highlight></codeline>
<codeline lineno="742"><highlight class="comment"></highlight></codeline>
<codeline lineno="743"><highlight class="comment">The<sp/>raw<sp/>image<sp/>given<sp/>to<sp/>the<sp/>encoder<sp/>is<sp/>an<sp/>unsigned<sp/>char*<sp/>buffer.<sp/>You<sp/>also<sp/>have<sp/>to</highlight></codeline>
<codeline lineno="744"><highlight class="comment">specify<sp/>the<sp/>width<sp/>and<sp/>height<sp/>of<sp/>the<sp/>raw<sp/>image.<sp/>The<sp/>result<sp/>is<sp/>stored<sp/>in<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="745"><highlight class="comment">buffer.<sp/>These<sp/>buffers<sp/>can<sp/>be<sp/>unsigned<sp/>char*<sp/>pointers,<sp/>std::vectors<sp/>or<sp/>dynamically</highlight></codeline>
<codeline lineno="746"><highlight class="comment">allocated<sp/>unsigned<sp/>char*<sp/>buffers<sp/>that<sp/>you<sp/>have<sp/>to<sp/>free()<sp/>yourself,<sp/>depending<sp/>on</highlight></codeline>
<codeline lineno="747"><highlight class="comment">which<sp/>you<sp/>use.</highlight></codeline>
<codeline lineno="748"><highlight class="comment"></highlight></codeline>
<codeline lineno="749"><highlight class="comment">The<sp/>parameters<sp/>of<sp/>the<sp/>encode<sp/>function<sp/>are:</highlight></codeline>
<codeline lineno="750"><highlight class="comment">*)<sp/>out:<sp/>in<sp/>this<sp/>buffer<sp/>the<sp/>PNG<sp/>file<sp/>data<sp/>will<sp/>be<sp/>stored<sp/>(it<sp/>will<sp/>be<sp/>appended)</highlight></codeline>
<codeline lineno="751"><highlight class="comment">*)<sp/>in:<sp/>vector<sp/>of<sp/>or<sp/>pointer<sp/>to<sp/>a<sp/>buffer<sp/>containing<sp/>the<sp/>raw<sp/>image</highlight></codeline>
<codeline lineno="752"><highlight class="comment">*)<sp/>w<sp/>and<sp/>h:<sp/>the<sp/>width<sp/>and<sp/>height<sp/>of<sp/>the<sp/>raw<sp/>image<sp/>in<sp/>pixels</highlight></codeline>
<codeline lineno="753"><highlight class="comment"></highlight></codeline>
<codeline lineno="754"><highlight class="comment">Make<sp/>sure<sp/>that<sp/>the<sp/>in<sp/>buffer<sp/>you<sp/>provide,<sp/>is<sp/>big<sp/>enough<sp/>to<sp/>contain<sp/>w<sp/>*<sp/>h<sp/>pixels</highlight></codeline>
<codeline lineno="755"><highlight class="comment">of<sp/>the<sp/>color<sp/>type<sp/>specified<sp/>by<sp/>the<sp/>LodePNG_InfoRaw.</highlight></codeline>
<codeline lineno="756"><highlight class="comment"></highlight></codeline>
<codeline lineno="757"><highlight class="comment">In<sp/>the<sp/>C<sp/>version,<sp/>you<sp/>need<sp/>to<sp/>free()<sp/>the<sp/>out<sp/>buffer<sp/>after<sp/>usage<sp/>to<sp/>avoid<sp/>memory<sp/>leaks.</highlight></codeline>
<codeline lineno="758"><highlight class="comment">In<sp/>the<sp/>C<sp/>version,<sp/>you<sp/>need<sp/>to<sp/>use<sp/>the<sp/>LodePNG_Encoder_init<sp/>function<sp/>before<sp/>using<sp/>the<sp/>decoder,</highlight></codeline>
<codeline lineno="759"><highlight class="comment">and<sp/>the<sp/>LodePNG_Encoder_cleanup<sp/>function<sp/>after<sp/>using<sp/>it.</highlight></codeline>
<codeline lineno="760"><highlight class="comment">In<sp/>the<sp/>C++<sp/>version,<sp/>you<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>this<sp/>since<sp/>RAII<sp/>takes<sp/>care<sp/>of<sp/>it.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"></highlight></codeline>
<codeline lineno="762"><highlight class="comment">The<sp/>encoder<sp/>generates<sp/>some<sp/>errors<sp/>but<sp/>not<sp/>for<sp/>everything,<sp/>because,<sp/>unlike<sp/>when</highlight></codeline>
<codeline lineno="763"><highlight class="comment">decoding<sp/>a<sp/>PNG,<sp/>when<sp/>encoding<sp/>one<sp/>there<sp/>aren&apos;t<sp/>so<sp/>much<sp/>parameters<sp/>of<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="764"><highlight class="comment">that<sp/>can<sp/>be<sp/>corrupted.<sp/>It&apos;s<sp/>the<sp/>responsibility<sp/>of<sp/>the<sp/>user<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>all</highlight></codeline>
<codeline lineno="765"><highlight class="comment">preconditions<sp/>are<sp/>satesfied,<sp/>such<sp/>as<sp/>giving<sp/>a<sp/>correct<sp/>window<sp/>size,<sp/>giving<sp/>an</highlight></codeline>
<codeline lineno="766"><highlight class="comment">existing<sp/>btype,<sp/>making<sp/>sure<sp/>the<sp/>given<sp/>buffer<sp/>is<sp/>large<sp/>enough<sp/>to<sp/>contain<sp/>an<sp/>image</highlight></codeline>
<codeline lineno="767"><highlight class="comment">with<sp/>the<sp/>given<sp/>width<sp/>and<sp/>height<sp/>and<sp/>colortype,<sp/>...<sp/>The<sp/>encoder<sp/>can<sp/>generate</highlight></codeline>
<codeline lineno="768"><highlight class="comment">some<sp/>errors,<sp/>see<sp/>the<sp/>section<sp/>with<sp/>the<sp/>explanations<sp/>of<sp/>errors<sp/>for<sp/>those.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"></highlight></codeline>
<codeline lineno="770"><highlight class="comment">Like<sp/>the<sp/>Decoder,<sp/>the<sp/>Encoder<sp/>has<sp/>3<sp/>components:</highlight></codeline>
<codeline lineno="771"><highlight class="comment">*)<sp/>LodePNG_InfoRaw:<sp/>here<sp/>you<sp/>say<sp/>what<sp/>color<sp/>type<sp/>of<sp/>the<sp/>raw<sp/>image<sp/>(the<sp/>input)<sp/>has</highlight></codeline>
<codeline lineno="772"><highlight class="comment">*)<sp/>Settings:<sp/>you<sp/>can<sp/>specify<sp/>a<sp/>few<sp/>settings<sp/>for<sp/>the<sp/>encoder<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="773"><highlight class="comment">*)<sp/>LodePNG_InfoPng:<sp/>the<sp/>same<sp/>LodePNG_InfoPng<sp/>struct<sp/>as<sp/>created<sp/>by<sp/>the<sp/>Decoder.<sp/>For<sp/>the<sp/>encoder,</highlight></codeline>
<codeline lineno="774"><highlight class="comment">with<sp/>this<sp/>you<sp/>specify<sp/>how<sp/>you<sp/>want<sp/>the<sp/>PNG<sp/>(the<sp/>output)<sp/>to<sp/>be.</highlight></codeline>
<codeline lineno="775"><highlight class="comment"></highlight></codeline>
<codeline lineno="776"><highlight class="comment">Some<sp/>of<sp/>the<sp/>parameters<sp/>described<sp/>below<sp/>may<sp/>be<sp/>inside<sp/>the<sp/>sub-struct<sp/>&quot;LodePNG_InfoColor<sp/>color&quot;.</highlight></codeline>
<codeline lineno="777"><highlight class="comment">In<sp/>the<sp/>C<sp/>and<sp/>C++<sp/>version,<sp/>when<sp/>using<sp/>Info<sp/>structs<sp/>outside<sp/>of<sp/>the<sp/>decoder<sp/>or<sp/>encoder,<sp/>you<sp/>need<sp/>to<sp/>use<sp/>their</highlight></codeline>
<codeline lineno="778"><highlight class="comment">init<sp/>and<sp/>cleanup<sp/>functions,<sp/>but<sp/>normally<sp/>you<sp/>use<sp/>the<sp/>ones<sp/>in<sp/>the<sp/>encoder<sp/>that<sp/>are<sp/>already<sp/>handled</highlight></codeline>
<codeline lineno="779"><highlight class="comment">in<sp/>the<sp/>init<sp/>and<sp/>cleanup<sp/>functions<sp/>of<sp/>the<sp/>decoder<sp/>itself.</highlight></codeline>
<codeline lineno="780"><highlight class="comment"></highlight></codeline>
<codeline lineno="781"><highlight class="comment">=LodePNG_InfoPng=</highlight></codeline>
<codeline lineno="782"><highlight class="comment"></highlight></codeline>
<codeline lineno="783"><highlight class="comment">The<sp/>Decoder<sp/>class<sp/>stores<sp/>information<sp/>about<sp/>the<sp/>PNG<sp/>image<sp/>in<sp/>an<sp/>LodePNG_InfoPng<sp/>object.<sp/>With</highlight></codeline>
<codeline lineno="784"><highlight class="comment">the<sp/>Encoder<sp/>you<sp/>can<sp/>do<sp/>the<sp/>opposite:<sp/>you<sp/>give<sp/>it<sp/>an<sp/>LodePNG_InfoPng<sp/>object,<sp/>and<sp/>it&apos;ll<sp/>try</highlight></codeline>
<codeline lineno="785"><highlight class="comment">to<sp/>match<sp/>the<sp/>LodePNG_InfoPng<sp/>you<sp/>give<sp/>as<sp/>close<sp/>as<sp/>possible<sp/>in<sp/>the<sp/>PNG<sp/>it<sp/>encodes.<sp/>For</highlight></codeline>
<codeline lineno="786"><highlight class="comment">example<sp/>in<sp/>the<sp/>LodePNG_InfoPng<sp/>you<sp/>can<sp/>specify<sp/>the<sp/>color<sp/>type<sp/>you<sp/>want<sp/>to<sp/>use,<sp/>possible</highlight></codeline>
<codeline lineno="787"><highlight class="comment">tEXt<sp/>chunks<sp/>you<sp/>want<sp/>the<sp/>PNG<sp/>to<sp/>contain,<sp/>etc...<sp/>For<sp/>an<sp/>explanation<sp/>of<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="788"><highlight class="comment">values<sp/>in<sp/>LodePNG_InfoPng<sp/>see<sp/>a<sp/>further<sp/>section.<sp/>Not<sp/>all<sp/>PNG<sp/>color<sp/>types<sp/>are<sp/>supported</highlight></codeline>
<codeline lineno="789"><highlight class="comment">by<sp/>the<sp/>Encoder.</highlight></codeline>
<codeline lineno="790"><highlight class="comment"></highlight></codeline>
<codeline lineno="791"><highlight class="comment">Note<sp/>that<sp/>the<sp/>encoder<sp/>will<sp/>only<sp/>TRY<sp/>to<sp/>match<sp/>the<sp/>LodePNG_InfoPng<sp/>struct<sp/>you<sp/>give.</highlight></codeline>
<codeline lineno="792"><highlight class="comment">Some<sp/>things<sp/>are<sp/>ignored<sp/>by<sp/>the<sp/>encoder.<sp/>The<sp/>width<sp/>and<sp/>height<sp/>of<sp/>LodePNG_InfoPng<sp/>are</highlight></codeline>
<codeline lineno="793"><highlight class="comment">ignored<sp/>as<sp/>well,<sp/>because<sp/>instead<sp/>the<sp/>width<sp/>and<sp/>height<sp/>of<sp/>the<sp/>raw<sp/>image<sp/>you<sp/>give</highlight></codeline>
<codeline lineno="794"><highlight class="comment">in<sp/>the<sp/>input<sp/>are<sp/>used.<sp/>In<sp/>fact<sp/>the<sp/>encoder<sp/>currently<sp/>uses<sp/>only<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="795"><highlight class="comment">settings<sp/>from<sp/>it:</highlight></codeline>
<codeline lineno="796"><highlight class="comment">-colorType:<sp/>the<sp/>ones<sp/>it<sp/>supports</highlight></codeline>
<codeline lineno="797"><highlight class="comment">-text<sp/>chunks,<sp/>that<sp/>you<sp/>can<sp/>add<sp/>to<sp/>the<sp/>LodePNG_InfoPng<sp/>with<sp/>&quot;addText&quot;</highlight></codeline>
<codeline lineno="798"><highlight class="comment">-the<sp/>color<sp/>key,<sp/>if<sp/>applicable<sp/>for<sp/>the<sp/>given<sp/>color<sp/>type</highlight></codeline>
<codeline lineno="799"><highlight class="comment">-the<sp/>palette,<sp/>if<sp/>you<sp/>encode<sp/>to<sp/>a<sp/>PNG<sp/>with<sp/>colorType<sp/>3</highlight></codeline>
<codeline lineno="800"><highlight class="comment">-the<sp/>background<sp/>color:<sp/>it&apos;ll<sp/>add<sp/>a<sp/>bKGD<sp/>chunk<sp/>to<sp/>the<sp/>PNG<sp/>if<sp/>one<sp/>is<sp/>given</highlight></codeline>
<codeline lineno="801"><highlight class="comment">-the<sp/>interlaceMethod:<sp/>None<sp/>(0)<sp/>or<sp/>Adam7<sp/>(1)</highlight></codeline>
<codeline lineno="802"><highlight class="comment"></highlight></codeline>
<codeline lineno="803"><highlight class="comment">When<sp/>encoding<sp/>to<sp/>a<sp/>PNG<sp/>with<sp/>colorType<sp/>3,<sp/>the<sp/>encoder<sp/>will<sp/>generate<sp/>a<sp/>PLTE<sp/>chunk.</highlight></codeline>
<codeline lineno="804"><highlight class="comment">If<sp/>the<sp/>palette<sp/>contains<sp/>any<sp/>colors<sp/>for<sp/>which<sp/>the<sp/>alpha<sp/>channel<sp/>is<sp/>not<sp/>255<sp/>(so</highlight></codeline>
<codeline lineno="805"><highlight class="comment">there<sp/>are<sp/>translucent<sp/>colors<sp/>in<sp/>the<sp/>palette),<sp/>it&apos;ll<sp/>add<sp/>a<sp/>tRNS<sp/>chunk.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"></highlight></codeline>
<codeline lineno="807"><highlight class="comment">=LodePNG_InfoRaw=</highlight></codeline>
<codeline lineno="808"><highlight class="comment"></highlight></codeline>
<codeline lineno="809"><highlight class="comment">You<sp/>specify<sp/>the<sp/>color<sp/>type<sp/>of<sp/>the<sp/>raw<sp/>image<sp/>that<sp/>you<sp/>give<sp/>to<sp/>the<sp/>input<sp/>here,</highlight></codeline>
<codeline lineno="810"><highlight class="comment">including<sp/>a<sp/>possible<sp/>transparent<sp/>color<sp/>key<sp/>and<sp/>palette<sp/>you<sp/>happen<sp/>to<sp/>be<sp/>using<sp/>in</highlight></codeline>
<codeline lineno="811"><highlight class="comment">your<sp/>raw<sp/>image<sp/>data.</highlight></codeline>
<codeline lineno="812"><highlight class="comment"></highlight></codeline>
<codeline lineno="813"><highlight class="comment">By<sp/>default,<sp/>32-bit<sp/>color<sp/>is<sp/>assumed,<sp/>meaning<sp/>your<sp/>input<sp/>has<sp/>to<sp/>be<sp/>in<sp/>RGBA</highlight></codeline>
<codeline lineno="814"><highlight class="comment">format<sp/>with<sp/>4<sp/>bytes<sp/>(unsigned<sp/>chars)<sp/>per<sp/>pixel.</highlight></codeline>
<codeline lineno="815"><highlight class="comment"></highlight></codeline>
<codeline lineno="816"><highlight class="comment">=Settings=</highlight></codeline>
<codeline lineno="817"><highlight class="comment"></highlight></codeline>
<codeline lineno="818"><highlight class="comment">The<sp/>following<sp/>settings<sp/>are<sp/>supported<sp/>(some<sp/>are<sp/>in<sp/>sub-structs):</highlight></codeline>
<codeline lineno="819"><highlight class="comment">*)<sp/>autoLeaveOutAlphaChannel:<sp/>when<sp/>this<sp/>option<sp/>is<sp/>enabled,<sp/>when<sp/>you<sp/>specify<sp/>a<sp/>PNG</highlight></codeline>
<codeline lineno="820"><highlight class="comment">color<sp/>type<sp/>with<sp/>alpha<sp/>channel<sp/>(not<sp/>to<sp/>be<sp/>confused<sp/>with<sp/>the<sp/>color<sp/>type<sp/>of<sp/>the<sp/>raw</highlight></codeline>
<codeline lineno="821"><highlight class="comment">image<sp/>you<sp/>specify!!),<sp/>but<sp/>the<sp/>encoder<sp/>detects<sp/>that<sp/>all<sp/>pixels<sp/>of<sp/>the<sp/>given<sp/>image</highlight></codeline>
<codeline lineno="822"><highlight class="comment">are<sp/>opaque,<sp/>then<sp/>it&apos;ll<sp/>automatically<sp/>use<sp/>the<sp/>corresponding<sp/>type<sp/>without<sp/>alpha</highlight></codeline>
<codeline lineno="823"><highlight class="comment">channel,<sp/>resulting<sp/>in<sp/>a<sp/>smaller<sp/>PNG<sp/>image.</highlight></codeline>
<codeline lineno="824"><highlight class="comment">*)<sp/>btype:<sp/>the<sp/>block<sp/>type<sp/>for<sp/>LZ77.<sp/>0<sp/>=<sp/>uncompressed,<sp/>1<sp/>=<sp/>fixed<sp/>huffman<sp/>tree,<sp/>2<sp/>=<sp/>dynamic<sp/>huffman<sp/>tree<sp/>(best<sp/>compression)</highlight></codeline>
<codeline lineno="825"><highlight class="comment">*)<sp/>useLZ77:<sp/>whether<sp/>or<sp/>not<sp/>to<sp/>use<sp/>LZ77<sp/>for<sp/>compressed<sp/>block<sp/>types</highlight></codeline>
<codeline lineno="826"><highlight class="comment">*)<sp/>windowSize:<sp/>the<sp/>window<sp/>size<sp/>used<sp/>by<sp/>the<sp/>LZ77<sp/>encoder<sp/>(1<sp/>-<sp/>32768)</highlight></codeline>
<codeline lineno="827"><highlight class="comment">*)<sp/>force_palette:<sp/>if<sp/>colorType<sp/>is<sp/>2<sp/>or<sp/>6,<sp/>you<sp/>can<sp/>make<sp/>the<sp/>encoder<sp/>write<sp/>a<sp/>PLTE</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/>chunk<sp/>if<sp/>force_palette<sp/>is<sp/>true.<sp/>This<sp/>can<sp/>used<sp/>as<sp/>suggested<sp/>palette<sp/>to<sp/>convert</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/>to<sp/>by<sp/>viewers<sp/>that<sp/>don&apos;t<sp/>support<sp/>more<sp/>than<sp/>256<sp/>colors<sp/>(if<sp/>those<sp/>still<sp/>exist)</highlight></codeline>
<codeline lineno="830"><highlight class="comment">*)<sp/>add_id:<sp/>add<sp/>text<sp/>chunk<sp/>&quot;Encoder:<sp/>LodePNG<sp/>&lt;version&gt;&quot;<sp/>to<sp/>the<sp/>image.</highlight></codeline>
<codeline lineno="831"><highlight class="comment">*)<sp/>text_compression:<sp/>default<sp/>0.<sp/>If<sp/>1,<sp/>it&apos;ll<sp/>store<sp/>texts<sp/>as<sp/>zTXt<sp/>instead<sp/>of<sp/>tEXt<sp/>chunks.</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/>zTXt<sp/>chunks<sp/>use<sp/>zlib<sp/>compression<sp/>on<sp/>the<sp/>text.<sp/>This<sp/>gives<sp/>a<sp/>smaller<sp/>result<sp/>on</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/>large<sp/>texts<sp/>but<sp/>a<sp/>larger<sp/>result<sp/>on<sp/>small<sp/>texts<sp/>(such<sp/>as<sp/>a<sp/>single<sp/>program<sp/>name).</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/>It&apos;s<sp/>all<sp/>tEXt<sp/>or<sp/>all<sp/>zTXt<sp/>though,<sp/>there&apos;s<sp/>no<sp/>separate<sp/>setting<sp/>per<sp/>text<sp/>yet.</highlight></codeline>
<codeline lineno="835"><highlight class="comment"></highlight></codeline>
<codeline lineno="836"><highlight class="comment"></highlight></codeline>
<codeline lineno="837"><highlight class="comment">7.<sp/>color<sp/>conversions</highlight></codeline>
<codeline lineno="838"><highlight class="comment">--------------------</highlight></codeline>
<codeline lineno="839"><highlight class="comment"></highlight></codeline>
<codeline lineno="840"><highlight class="comment">For<sp/>trickier<sp/>usage<sp/>of<sp/>LodePNG,<sp/>you<sp/>need<sp/>to<sp/>understand<sp/>about<sp/>PNG<sp/>color<sp/>types<sp/>and</highlight></codeline>
<codeline lineno="841"><highlight class="comment">about<sp/>how<sp/>and<sp/>when<sp/>LodePNG<sp/>uses<sp/>the<sp/>settings<sp/>in<sp/>LodePNG_InfoPng,<sp/>LodePNG_InfoRaw<sp/>and<sp/>Settings.</highlight></codeline>
<codeline lineno="842"><highlight class="comment"></highlight></codeline>
<codeline lineno="843"><highlight class="comment">=PNG<sp/>color<sp/>types=</highlight></codeline>
<codeline lineno="844"><highlight class="comment"></highlight></codeline>
<codeline lineno="845"><highlight class="comment">A<sp/>PNG<sp/>image<sp/>can<sp/>have<sp/>many<sp/>color<sp/>types,<sp/>ranging<sp/>from<sp/>1-bit<sp/>color<sp/>to<sp/>64-bit<sp/>color,</highlight></codeline>
<codeline lineno="846"><highlight class="comment">as<sp/>well<sp/>as<sp/>palettized<sp/>color<sp/>modes.<sp/>After<sp/>the<sp/>zlib<sp/>decompression<sp/>and<sp/>unfiltering</highlight></codeline>
<codeline lineno="847"><highlight class="comment">in<sp/>the<sp/>PNG<sp/>image<sp/>is<sp/>done,<sp/>the<sp/>raw<sp/>pixel<sp/>data<sp/>will<sp/>have<sp/>that<sp/>color<sp/>type<sp/>and<sp/>thus</highlight></codeline>
<codeline lineno="848"><highlight class="comment">a<sp/>certain<sp/>amount<sp/>of<sp/>bits<sp/>per<sp/>pixel.<sp/>If<sp/>you<sp/>want<sp/>the<sp/>output<sp/>raw<sp/>image<sp/>after</highlight></codeline>
<codeline lineno="849"><highlight class="comment">decoding<sp/>to<sp/>have<sp/>another<sp/>color<sp/>type,<sp/>a<sp/>conversion<sp/>is<sp/>done<sp/>by<sp/>LodePNG.</highlight></codeline>
<codeline lineno="850"><highlight class="comment"></highlight></codeline>
<codeline lineno="851"><highlight class="comment">The<sp/>PNG<sp/>specification<sp/>mentions<sp/>the<sp/>following<sp/>color<sp/>types:</highlight></codeline>
<codeline lineno="852"><highlight class="comment"></highlight></codeline>
<codeline lineno="853"><highlight class="comment">0:<sp/>greyscale,<sp/>bit<sp/>depths<sp/>1,<sp/>2,<sp/>4,<sp/>8,<sp/>16</highlight></codeline>
<codeline lineno="854"><highlight class="comment">2:<sp/>RGB,<sp/>bit<sp/>depths<sp/>8<sp/>and<sp/>16</highlight></codeline>
<codeline lineno="855"><highlight class="comment">3:<sp/>palette,<sp/>bit<sp/>depths<sp/>1,<sp/>2,<sp/>4<sp/>and<sp/>8</highlight></codeline>
<codeline lineno="856"><highlight class="comment">4:<sp/>greyscale<sp/>with<sp/>alpha,<sp/>bit<sp/>depths<sp/>8<sp/>and<sp/>16</highlight></codeline>
<codeline lineno="857"><highlight class="comment">6:<sp/>RGBA,<sp/>bit<sp/>depths<sp/>8<sp/>and<sp/>16</highlight></codeline>
<codeline lineno="858"><highlight class="comment"></highlight></codeline>
<codeline lineno="859"><highlight class="comment">Bit<sp/>depth<sp/>is<sp/>the<sp/>amount<sp/>of<sp/>bits<sp/>per<sp/>color<sp/>channel.</highlight></codeline>
<codeline lineno="860"><highlight class="comment"></highlight></codeline>
<codeline lineno="861"><highlight class="comment">=Default<sp/>Behaviour<sp/>of<sp/>LodePNG=</highlight></codeline>
<codeline lineno="862"><highlight class="comment"></highlight></codeline>
<codeline lineno="863"><highlight class="comment">By<sp/>default,<sp/>the<sp/>Decoder<sp/>will<sp/>convert<sp/>the<sp/>data<sp/>from<sp/>the<sp/>PNG<sp/>to<sp/>32-bit<sp/>RGBA<sp/>color,</highlight></codeline>
<codeline lineno="864"><highlight class="comment">no<sp/>matter<sp/>what<sp/>color<sp/>type<sp/>the<sp/>PNG<sp/>has,<sp/>so<sp/>that<sp/>the<sp/>result<sp/>can<sp/>be<sp/>used<sp/>directly</highlight></codeline>
<codeline lineno="865"><highlight class="comment">as<sp/>a<sp/>texture<sp/>in<sp/>OpenGL<sp/>etc...<sp/>without<sp/>worries<sp/>about<sp/>what<sp/>color<sp/>type<sp/>the<sp/>original</highlight></codeline>
<codeline lineno="866"><highlight class="comment">image<sp/>has.</highlight></codeline>
<codeline lineno="867"><highlight class="comment"></highlight></codeline>
<codeline lineno="868"><highlight class="comment">The<sp/>Encoder<sp/>assumes<sp/>by<sp/>default<sp/>that<sp/>the<sp/>raw<sp/>input<sp/>you<sp/>give<sp/>it<sp/>is<sp/>a<sp/>32-bit<sp/>RGBA</highlight></codeline>
<codeline lineno="869"><highlight class="comment">buffer<sp/>and<sp/>will<sp/>store<sp/>the<sp/>PNG<sp/>as<sp/>either<sp/>32<sp/>bit<sp/>or<sp/>24<sp/>bit<sp/>depending<sp/>on<sp/>whether</highlight></codeline>
<codeline lineno="870"><highlight class="comment">or<sp/>not<sp/>any<sp/>translucent<sp/>pixels<sp/>were<sp/>detected<sp/>in<sp/>it.</highlight></codeline>
<codeline lineno="871"><highlight class="comment"></highlight></codeline>
<codeline lineno="872"><highlight class="comment">To<sp/>get<sp/>the<sp/>default<sp/>behaviour,<sp/>don&apos;t<sp/>change<sp/>the<sp/>values<sp/>of<sp/>LodePNG_InfoRaw<sp/>and<sp/>LodePNG_InfoPng<sp/>of</highlight></codeline>
<codeline lineno="873"><highlight class="comment">the<sp/>encoder,<sp/>and<sp/>don&apos;t<sp/>change<sp/>the<sp/>values<sp/>of<sp/>LodePNG_InfoRaw<sp/>of<sp/>the<sp/>decoder.</highlight></codeline>
<codeline lineno="874"><highlight class="comment"></highlight></codeline>
<codeline lineno="875"><highlight class="comment">=Color<sp/>Conversions=</highlight></codeline>
<codeline lineno="876"><highlight class="comment"></highlight></codeline>
<codeline lineno="877"><highlight class="comment">As<sp/>explained<sp/>in<sp/>the<sp/>sections<sp/>about<sp/>the<sp/>Encoder<sp/>and<sp/>Decoder,<sp/>you<sp/>can<sp/>specify</highlight></codeline>
<codeline lineno="878"><highlight class="comment">color<sp/>types<sp/>and<sp/>bit<sp/>depths<sp/>in<sp/>LodePNG_InfoPng<sp/>and<sp/>LodePNG_InfoRaw,<sp/>to<sp/>change<sp/>the<sp/>default<sp/>behaviour</highlight></codeline>
<codeline lineno="879"><highlight class="comment">explained<sp/>above.<sp/>(for<sp/>the<sp/>Decoder<sp/>you<sp/>can<sp/>only<sp/>specify<sp/>the<sp/>LodePNG_InfoRaw,<sp/>because<sp/>the</highlight></codeline>
<codeline lineno="880"><highlight class="comment">LodePNG_InfoPng<sp/>contains<sp/>what<sp/>the<sp/>PNG<sp/>file<sp/>has).</highlight></codeline>
<codeline lineno="881"><highlight class="comment"></highlight></codeline>
<codeline lineno="882"><highlight class="comment">To<sp/>avoid<sp/>some<sp/>confusion:</highlight></codeline>
<codeline lineno="883"><highlight class="comment">-the<sp/>Decoder<sp/>converts<sp/>from<sp/>PNG<sp/>to<sp/>raw<sp/>image</highlight></codeline>
<codeline lineno="884"><highlight class="comment">-the<sp/>Encoder<sp/>converts<sp/>from<sp/>raw<sp/>image<sp/>to<sp/>PNG</highlight></codeline>
<codeline lineno="885"><highlight class="comment">-the<sp/>color<sp/>type<sp/>and<sp/>bit<sp/>depth<sp/>in<sp/>LodePNG_InfoRaw,<sp/>are<sp/>those<sp/>of<sp/>the<sp/>raw<sp/>image</highlight></codeline>
<codeline lineno="886"><highlight class="comment">-the<sp/>color<sp/>type<sp/>and<sp/>bit<sp/>depth<sp/>in<sp/>LodePNG_InfoPng,<sp/>are<sp/>those<sp/>of<sp/>the<sp/>PNG</highlight></codeline>
<codeline lineno="887"><highlight class="comment">-if<sp/>the<sp/>color<sp/>type<sp/>of<sp/>the<sp/>LodePNG_InfoRaw<sp/>and<sp/>PNG<sp/>image<sp/>aren&apos;t<sp/>the<sp/>same,<sp/>a<sp/>conversion</highlight></codeline>
<codeline lineno="888"><highlight class="comment">between<sp/>the<sp/>color<sp/>types<sp/>is<sp/>done<sp/>if<sp/>the<sp/>color<sp/>types<sp/>are<sp/>supported</highlight></codeline>
<codeline lineno="889"><highlight class="comment"></highlight></codeline>
<codeline lineno="890"><highlight class="comment">Supported<sp/>color<sp/>types:</highlight></codeline>
<codeline lineno="891"><highlight class="comment">-It&apos;s<sp/>possible<sp/>to<sp/>load<sp/>PNGs<sp/>from<sp/>any<sp/>colortype<sp/>and<sp/>to<sp/>save<sp/>PNGs<sp/>of<sp/>any<sp/>colorType.</highlight></codeline>
<codeline lineno="892"><highlight class="comment">-Both<sp/>encoder<sp/>and<sp/>decoder<sp/>use<sp/>the<sp/>same<sp/>converter.<sp/>So<sp/>both<sp/>encoder<sp/>and<sp/>decoder</highlight></codeline>
<codeline lineno="893"><highlight class="comment">suport<sp/>the<sp/>same<sp/>color<sp/>types<sp/>at<sp/>the<sp/>input<sp/>and<sp/>the<sp/>output.<sp/>So<sp/>the<sp/>decoder<sp/>supports</highlight></codeline>
<codeline lineno="894"><highlight class="comment">any<sp/>type<sp/>of<sp/>PNG<sp/>image<sp/>and<sp/>can<sp/>convert<sp/>it<sp/>to<sp/>certain<sp/>types<sp/>of<sp/>raw<sp/>image,<sp/>while<sp/>the</highlight></codeline>
<codeline lineno="895"><highlight class="comment">encoder<sp/>supports<sp/>any<sp/>type<sp/>of<sp/>raw<sp/>data<sp/>but<sp/>only<sp/>certain<sp/>color<sp/>types<sp/>for<sp/>the<sp/>output<sp/>PNG.</highlight></codeline>
<codeline lineno="896"><highlight class="comment">-The<sp/>converter<sp/>can<sp/>convert<sp/>from<sp/>_any_<sp/>input<sp/>color<sp/>type,<sp/>to<sp/>24-bit<sp/>RGB<sp/>or<sp/>32-bit<sp/>RGBA</highlight></codeline>
<codeline lineno="897"><highlight class="comment">-The<sp/>converter<sp/>can<sp/>convert<sp/>from<sp/>greyscale<sp/>input<sp/>color<sp/>type,<sp/>to<sp/>8-bit<sp/>greyscale<sp/>or<sp/>greyscale<sp/>with<sp/>alpha</highlight></codeline>
<codeline lineno="898"><highlight class="comment">-If<sp/>both<sp/>color<sp/>types<sp/>are<sp/>the<sp/>same,<sp/>conversion<sp/>from<sp/>anything<sp/>to<sp/>anything<sp/>is<sp/>possible</highlight></codeline>
<codeline lineno="899"><highlight class="comment">-Color<sp/>types<sp/>that<sp/>are<sp/>invalid<sp/>according<sp/>to<sp/>the<sp/>PNG<sp/>specification<sp/>are<sp/>not<sp/>allowed</highlight></codeline>
<codeline lineno="900"><highlight class="comment">-When<sp/>converting<sp/>from<sp/>a<sp/>type<sp/>with<sp/>alpha<sp/>channel<sp/>to<sp/>one<sp/>without,<sp/>the<sp/>alpha<sp/>channel<sp/>information<sp/>is<sp/>discarded</highlight></codeline>
<codeline lineno="901"><highlight class="comment">-When<sp/>converting<sp/>from<sp/>a<sp/>type<sp/>without<sp/>alpha<sp/>channel<sp/>to<sp/>one<sp/>with,<sp/>the<sp/>result<sp/>will<sp/>be<sp/>opaque<sp/>except<sp/>pixels<sp/>that<sp/>have<sp/>the<sp/>same<sp/>color<sp/>as<sp/>the<sp/>color<sp/>key<sp/>of<sp/>the<sp/>input<sp/>if<sp/>one<sp/>was<sp/>given</highlight></codeline>
<codeline lineno="902"><highlight class="comment">-When<sp/>converting<sp/>from<sp/>16-bit<sp/>bitDepth<sp/>to<sp/>8-bit<sp/>bitDepth,<sp/>the<sp/>16-bit<sp/>precision<sp/>information<sp/>is<sp/>lost,<sp/>only<sp/>the<sp/>most<sp/>significant<sp/>byte<sp/>is<sp/>kept</highlight></codeline>
<codeline lineno="903"><highlight class="comment">-Converting<sp/>from<sp/>color<sp/>to<sp/>greyscale<sp/>is<sp/>not<sp/>supported<sp/>on<sp/>purpose:<sp/>choosing<sp/>what<sp/>kind<sp/>of<sp/>color<sp/>to<sp/>greyscale<sp/>conversion<sp/>to<sp/>do<sp/>is<sp/>not<sp/>a<sp/>decision<sp/>a<sp/>PNG<sp/>codec<sp/>should<sp/>make</highlight></codeline>
<codeline lineno="904"><highlight class="comment">-Converting<sp/>from/to<sp/>a<sp/>palette<sp/>type,<sp/>only<sp/>keeps<sp/>the<sp/>indices,<sp/>it<sp/>ignores<sp/>the<sp/>colors<sp/>defined<sp/>in<sp/>the<sp/>palette</highlight></codeline>
<codeline lineno="905"><highlight class="comment"></highlight></codeline>
<codeline lineno="906"><highlight class="comment">No<sp/>conversion<sp/>needed...:</highlight></codeline>
<codeline lineno="907"><highlight class="comment">-If<sp/>the<sp/>color<sp/>type<sp/>of<sp/>the<sp/>PNG<sp/>image<sp/>and<sp/>raw<sp/>image<sp/>are<sp/>the<sp/>same,<sp/>then<sp/>no</highlight></codeline>
<codeline lineno="908"><highlight class="comment">conversion<sp/>is<sp/>done,<sp/>and<sp/>all<sp/>color<sp/>types<sp/>are<sp/>supported.</highlight></codeline>
<codeline lineno="909"><highlight class="comment">-In<sp/>the<sp/>encoder,<sp/>you<sp/>can<sp/>make<sp/>it<sp/>save<sp/>a<sp/>PNG<sp/>with<sp/>any<sp/>color<sp/>by<sp/>giving<sp/>the</highlight></codeline>
<codeline lineno="910"><highlight class="comment">LodePNG_InfoRaw<sp/>and<sp/>LodePNG_InfoPng<sp/>the<sp/>same<sp/>color<sp/>type.</highlight></codeline>
<codeline lineno="911"><highlight class="comment">-In<sp/>the<sp/>decoder,<sp/>you<sp/>can<sp/>make<sp/>it<sp/>store<sp/>the<sp/>pixel<sp/>data<sp/>in<sp/>the<sp/>same<sp/>color<sp/>type</highlight></codeline>
<codeline lineno="912"><highlight class="comment">as<sp/>the<sp/>PNG<sp/>has,<sp/>by<sp/>setting<sp/>the<sp/>color_convert<sp/>setting<sp/>to<sp/>false.<sp/>Settings<sp/>in</highlight></codeline>
<codeline lineno="913"><highlight class="comment">infoRaw<sp/>are<sp/>then<sp/>ignored.</highlight></codeline>
<codeline lineno="914"><highlight class="comment"></highlight></codeline>
<codeline lineno="915"><highlight class="comment">The<sp/>function<sp/>LodePNG_convert<sp/>does<sp/>this,<sp/>which<sp/>is<sp/>available<sp/>in<sp/>the<sp/>interface<sp/>but</highlight></codeline>
<codeline lineno="916"><highlight class="comment">normally<sp/>isn&apos;t<sp/>needed<sp/>since<sp/>the<sp/>encoder<sp/>and<sp/>decoder<sp/>already<sp/>call<sp/>it.</highlight></codeline>
<codeline lineno="917"><highlight class="comment"></highlight></codeline>
<codeline lineno="918"><highlight class="comment">=More<sp/>Notes=</highlight></codeline>
<codeline lineno="919"><highlight class="comment"></highlight></codeline>
<codeline lineno="920"><highlight class="comment">In<sp/>the<sp/>PNG<sp/>file<sp/>format,<sp/>if<sp/>a<sp/>less<sp/>than<sp/>8-bit<sp/>per<sp/>pixel<sp/>color<sp/>type<sp/>is<sp/>used<sp/>and<sp/>the<sp/>scanlines</highlight></codeline>
<codeline lineno="921"><highlight class="comment">have<sp/>a<sp/>bit<sp/>amount<sp/>that<sp/>isn&apos;t<sp/>a<sp/>multiple<sp/>of<sp/>8,<sp/>then<sp/>padding<sp/>bits<sp/>are<sp/>used<sp/>so<sp/>that<sp/>each</highlight></codeline>
<codeline lineno="922"><highlight class="comment">scanline<sp/>starts<sp/>at<sp/>a<sp/>fresh<sp/>byte.</highlight></codeline>
<codeline lineno="923"><highlight class="comment">However:<sp/>The<sp/>input<sp/>image<sp/>you<sp/>give<sp/>to<sp/>the<sp/>encoder,<sp/>and<sp/>the<sp/>output<sp/>image<sp/>you<sp/>get<sp/>from<sp/>the<sp/>decoder</highlight></codeline>
<codeline lineno="924"><highlight class="comment">will<sp/>NOT<sp/>have<sp/>these<sp/>padding<sp/>bits<sp/>in<sp/>that<sp/>case,<sp/>e.g.<sp/>in<sp/>the<sp/>case<sp/>of<sp/>a<sp/>1-bit<sp/>image<sp/>with<sp/>a<sp/>width</highlight></codeline>
<codeline lineno="925"><highlight class="comment">of<sp/>7<sp/>pixels,<sp/>the<sp/>first<sp/>pixel<sp/>of<sp/>the<sp/>second<sp/>scanline<sp/>will<sp/>the<sp/>the<sp/>8th<sp/>bit<sp/>of<sp/>the<sp/>first<sp/>byte,</highlight></codeline>
<codeline lineno="926"><highlight class="comment">not<sp/>the<sp/>first<sp/>bit<sp/>of<sp/>a<sp/>new<sp/>byte.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"></highlight></codeline>
<codeline lineno="928"><highlight class="comment">8.<sp/>info<sp/>values</highlight></codeline>
<codeline lineno="929"><highlight class="comment">--------------</highlight></codeline>
<codeline lineno="930"><highlight class="comment"></highlight></codeline>
<codeline lineno="931"><highlight class="comment">Both<sp/>the<sp/>encoder<sp/>and<sp/>decoder<sp/>use<sp/>a<sp/>variable<sp/>of<sp/>type<sp/>LodePNG_InfoPng<sp/>and<sp/>LodePNG_InfoRaw,<sp/>which</highlight></codeline>
<codeline lineno="932"><highlight class="comment">both<sp/>also<sp/>contain<sp/>a<sp/>LodePNG_InfoColor.<sp/>Here&apos;s<sp/>a<sp/>list<sp/>of<sp/>each<sp/>of<sp/>the<sp/>values<sp/>stored<sp/>in<sp/>them:</highlight></codeline>
<codeline lineno="933"><highlight class="comment"></highlight></codeline>
<codeline lineno="934"><highlight class="comment">*)<sp/>info<sp/>from<sp/>the<sp/>PNG<sp/>header<sp/>(IHDR<sp/>chunk):</highlight></codeline>
<codeline lineno="935"><highlight class="comment"></highlight></codeline>
<codeline lineno="936"><highlight class="comment">width:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>of<sp/>the<sp/>image<sp/>in<sp/>pixels</highlight></codeline>
<codeline lineno="937"><highlight class="comment">height:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>of<sp/>the<sp/>image<sp/>in<sp/>pixels</highlight></codeline>
<codeline lineno="938"><highlight class="comment">colorType:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>type<sp/>of<sp/>the<sp/>original<sp/>PNG<sp/>file</highlight></codeline>
<codeline lineno="939"><highlight class="comment">bitDepth:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>per<sp/>sample</highlight></codeline>
<codeline lineno="940"><highlight class="comment">compressionMethod:<sp/>compression<sp/>method<sp/>of<sp/>the<sp/>original<sp/>file.<sp/>Always<sp/>0.</highlight></codeline>
<codeline lineno="941"><highlight class="comment">filterMethod:<sp/><sp/><sp/><sp/><sp/><sp/>filter<sp/>method<sp/>of<sp/>the<sp/>original<sp/>file.<sp/>Always<sp/>0.</highlight></codeline>
<codeline lineno="942"><highlight class="comment">interlaceMethod:<sp/><sp/><sp/>interlace<sp/>method<sp/>of<sp/>the<sp/>original<sp/>file.<sp/>0<sp/>is<sp/>no<sp/>interlace,<sp/>1<sp/>is<sp/>adam7<sp/>interlace.</highlight></codeline>
<codeline lineno="943"><highlight class="comment"></highlight></codeline>
<codeline lineno="944"><highlight class="comment">Note:<sp/>width<sp/>and<sp/>height<sp/>are<sp/>only<sp/>used<sp/>as<sp/>information<sp/>of<sp/>a<sp/>decoded<sp/>PNG<sp/>image.<sp/>When<sp/>encoding<sp/>one,<sp/>you<sp/>don&apos;t<sp/>have</highlight></codeline>
<codeline lineno="945"><highlight class="comment">to<sp/>specify<sp/>width<sp/>and<sp/>height<sp/>in<sp/>an<sp/>LodePNG_Info<sp/>struct,<sp/>but<sp/>you<sp/>give<sp/>them<sp/>as<sp/>parameters<sp/>of<sp/>the<sp/>encode<sp/>function.</highlight></codeline>
<codeline lineno="946"><highlight class="comment">The<sp/>rest<sp/>of<sp/>the<sp/>LodePNG_Info<sp/>struct<sp/>IS<sp/>used<sp/>by<sp/>the<sp/>encoder<sp/>though!</highlight></codeline>
<codeline lineno="947"><highlight class="comment"></highlight></codeline>
<codeline lineno="948"><highlight class="comment">*)<sp/>palette:</highlight></codeline>
<codeline lineno="949"><highlight class="comment"></highlight></codeline>
<codeline lineno="950"><highlight class="comment">This<sp/>is<sp/>a<sp/>dynamically<sp/>allocated<sp/>unsigned<sp/>char<sp/>array<sp/>with<sp/>the<sp/>colors<sp/>of<sp/>the<sp/>palette.<sp/>The<sp/>value<sp/>palettesize</highlight></codeline>
<codeline lineno="951"><highlight class="comment">indicates<sp/>the<sp/>amount<sp/>of<sp/>colors<sp/>in<sp/>the<sp/>palette.<sp/>The<sp/>allocated<sp/>size<sp/>of<sp/>the<sp/>buffer<sp/>is<sp/>4<sp/>*<sp/>palettesize<sp/>bytes,</highlight></codeline>
<codeline lineno="952"><highlight class="comment">because<sp/>there<sp/>are<sp/>4<sp/>values<sp/>per<sp/>color:<sp/>R,<sp/>G,<sp/>B<sp/>and<sp/>A.<sp/>Even<sp/>if<sp/>less<sp/>color<sp/>channels<sp/>are<sp/>used,<sp/>the<sp/>palette</highlight></codeline>
<codeline lineno="953"><highlight class="comment">is<sp/>always<sp/>in<sp/>RGBA<sp/>format,<sp/>in<sp/>the<sp/>order<sp/>RGBARGBARGBA.....</highlight></codeline>
<codeline lineno="954"><highlight class="comment"></highlight></codeline>
<codeline lineno="955"><highlight class="comment">When<sp/>encoding<sp/>a<sp/>PNG,<sp/>to<sp/>store<sp/>your<sp/>colors<sp/>in<sp/>the<sp/>palette<sp/>of<sp/>the<sp/>LodePNG_InfoRaw,<sp/>first<sp/>use</highlight></codeline>
<codeline lineno="956"><highlight class="comment">LodePNG_InfoColor_clearPalette,<sp/>then<sp/>for<sp/>each<sp/>color<sp/>use<sp/>LodePNG_InfoColor_addPalette.</highlight></codeline>
<codeline lineno="957"><highlight class="comment">In<sp/>the<sp/>C++<sp/>version<sp/>the<sp/>Encoder<sp/>class<sp/>also<sp/>has<sp/>the<sp/>above<sp/>functions<sp/>available<sp/>directly<sp/>in<sp/>its<sp/>interface.</highlight></codeline>
<codeline lineno="958"><highlight class="comment"></highlight></codeline>
<codeline lineno="959"><highlight class="comment">Note<sp/>that<sp/>the<sp/>palette<sp/>information<sp/>from<sp/>the<sp/>tRNS<sp/>chunk<sp/>is<sp/>also<sp/>already<sp/>included<sp/>in<sp/>this<sp/>palette<sp/>vector.</highlight></codeline>
<codeline lineno="960"><highlight class="comment"></highlight></codeline>
<codeline lineno="961"><highlight class="comment">If<sp/>you<sp/>encode<sp/>an<sp/>image<sp/>with<sp/>palette,<sp/>don&apos;t<sp/>forget<sp/>that<sp/>you<sp/>have<sp/>to<sp/>set<sp/>the<sp/>alpha<sp/>channels<sp/>(A)<sp/>of<sp/>the<sp/>palette</highlight></codeline>
<codeline lineno="962"><highlight class="comment">too,<sp/>set<sp/>them<sp/>to<sp/>255<sp/>for<sp/>an<sp/>opaque<sp/>palette.<sp/>If<sp/>you<sp/>leave<sp/>them<sp/>at<sp/>zero,<sp/>the<sp/>image<sp/>will<sp/>be<sp/>encoded<sp/>as</highlight></codeline>
<codeline lineno="963"><highlight class="comment">fully<sp/>invisible.<sp/>This<sp/>both<sp/>for<sp/>the<sp/>palette<sp/>in<sp/>the<sp/>infoRaw<sp/>and<sp/>the<sp/>infoPng<sp/>if<sp/>the<sp/>png<sp/>is<sp/>to<sp/>have<sp/>a<sp/>palette.</highlight></codeline>
<codeline lineno="964"><highlight class="comment"></highlight></codeline>
<codeline lineno="965"><highlight class="comment">*)<sp/>transparent<sp/>color<sp/>key</highlight></codeline>
<codeline lineno="966"><highlight class="comment"></highlight></codeline>
<codeline lineno="967"><highlight class="comment">key_defined:<sp/>is<sp/>a<sp/>transparent<sp/>color<sp/>key<sp/>given?</highlight></codeline>
<codeline lineno="968"><highlight class="comment">key_r:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>red/greyscale<sp/>component<sp/>of<sp/>color<sp/>key</highlight></codeline>
<codeline lineno="969"><highlight class="comment">key_g:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>green<sp/>component<sp/>of<sp/>color<sp/>key</highlight></codeline>
<codeline lineno="970"><highlight class="comment">key_b:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue<sp/>component<sp/>of<sp/>color<sp/>key</highlight></codeline>
<codeline lineno="971"><highlight class="comment"></highlight></codeline>
<codeline lineno="972"><highlight class="comment">For<sp/>greyscale<sp/>PNGs,<sp/>r,<sp/>g<sp/>and<sp/>b<sp/>will<sp/>all<sp/>3<sp/>be<sp/>set<sp/>to<sp/>the<sp/>same.</highlight></codeline>
<codeline lineno="973"><highlight class="comment"></highlight></codeline>
<codeline lineno="974"><highlight class="comment">This<sp/>color<sp/>is<sp/>8-bit<sp/>for<sp/>8-bit<sp/>PNGs,<sp/>16-bit<sp/>for<sp/>16-bit<sp/>per<sp/>channel<sp/>PNGs.</highlight></codeline>
<codeline lineno="975"><highlight class="comment"></highlight></codeline>
<codeline lineno="976"><highlight class="comment">*)<sp/>suggested<sp/>background<sp/>color</highlight></codeline>
<codeline lineno="977"><highlight class="comment"></highlight></codeline>
<codeline lineno="978"><highlight class="comment">background_defined:<sp/>is<sp/>a<sp/>suggested<sp/>background<sp/>color<sp/>given?</highlight></codeline>
<codeline lineno="979"><highlight class="comment">background_r:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>red<sp/>component<sp/>of<sp/>sugg.<sp/>background<sp/>color</highlight></codeline>
<codeline lineno="980"><highlight class="comment">background_g:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>green<sp/>component<sp/>of<sp/>sugg.<sp/>background<sp/>color</highlight></codeline>
<codeline lineno="981"><highlight class="comment">background_b:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue<sp/>component<sp/>of<sp/>sugg.<sp/>background<sp/>color</highlight></codeline>
<codeline lineno="982"><highlight class="comment"></highlight></codeline>
<codeline lineno="983"><highlight class="comment">This<sp/>color<sp/>is<sp/>8-bit<sp/>for<sp/>8-bit<sp/>PNGs,<sp/>16-bit<sp/>for<sp/>16-bit<sp/>PNGs</highlight></codeline>
<codeline lineno="984"><highlight class="comment"></highlight></codeline>
<codeline lineno="985"><highlight class="comment">For<sp/>greyscale<sp/>PNGs,<sp/>r,<sp/>g<sp/>and<sp/>b<sp/>will<sp/>all<sp/>3<sp/>be<sp/>set<sp/>to<sp/>the<sp/>same.<sp/>When<sp/>encoding</highlight></codeline>
<codeline lineno="986"><highlight class="comment">the<sp/>encoder<sp/>writes<sp/>the<sp/>red<sp/>one<sp/>away.</highlight></codeline>
<codeline lineno="987"><highlight class="comment">For<sp/>palette<sp/>PNGs:<sp/>When<sp/>decoding,<sp/>the<sp/>RGB<sp/>value<sp/>will<sp/>be<sp/>stored,<sp/>no<sp/>a<sp/>palette</highlight></codeline>
<codeline lineno="988"><highlight class="comment">index.<sp/>But<sp/>when<sp/>encoding,<sp/>specify<sp/>the<sp/>index<sp/>of<sp/>the<sp/>palette<sp/>in<sp/>background_r,</highlight></codeline>
<codeline lineno="989"><highlight class="comment">the<sp/>other<sp/>two<sp/>are<sp/>then<sp/>ignored.</highlight></codeline>
<codeline lineno="990"><highlight class="comment"></highlight></codeline>
<codeline lineno="991"><highlight class="comment">The<sp/>decoder<sp/>pretty<sp/>much<sp/>ignores<sp/>this<sp/>background<sp/>color,<sp/>after<sp/>all<sp/>if<sp/>you<sp/>make<sp/>a</highlight></codeline>
<codeline lineno="992"><highlight class="comment">PNG<sp/>translucent<sp/>normally<sp/>you<sp/>intend<sp/>it<sp/>to<sp/>be<sp/>used<sp/>against<sp/>any<sp/>background,<sp/>on</highlight></codeline>
<codeline lineno="993"><highlight class="comment">websites,<sp/>as<sp/>translucent<sp/>textures<sp/>in<sp/>games,<sp/>...<sp/>But<sp/>you<sp/>can<sp/>get<sp/>the<sp/>color<sp/>this</highlight></codeline>
<codeline lineno="994"><highlight class="comment">way<sp/>if<sp/>needed.</highlight></codeline>
<codeline lineno="995"><highlight class="comment"></highlight></codeline>
<codeline lineno="996"><highlight class="comment">*)<sp/>text<sp/>and<sp/>itext</highlight></codeline>
<codeline lineno="997"><highlight class="comment"></highlight></codeline>
<codeline lineno="998"><highlight class="comment">Non-international<sp/>text:</highlight></codeline>
<codeline lineno="999"><highlight class="comment"></highlight></codeline>
<codeline lineno="1000"><highlight class="comment">-text.keys:<sp/><sp/><sp/><sp/>a<sp/>char**<sp/>buffer<sp/>containing<sp/>the<sp/>keywords<sp/>(see<sp/>below)</highlight></codeline>
<codeline lineno="1001"><highlight class="comment">-text.strings:<sp/>a<sp/>char**<sp/>buffer<sp/>containing<sp/>the<sp/>texts<sp/>(see<sp/>below)</highlight></codeline>
<codeline lineno="1002"><highlight class="comment">-text.num:<sp/>the<sp/>amount<sp/>of<sp/>texts<sp/>in<sp/>the<sp/>above<sp/>char**<sp/>buffers<sp/>(there<sp/>may<sp/>be<sp/>more<sp/>texts<sp/>in<sp/>itext)</highlight></codeline>
<codeline lineno="1003"><highlight class="comment">-LodePNG_InfoText_clearText:<sp/>use<sp/>this<sp/>to<sp/>clear<sp/>the<sp/>texts<sp/>again<sp/>after<sp/>you<sp/>filled<sp/>them<sp/>in</highlight></codeline>
<codeline lineno="1004"><highlight class="comment">-LodePNG_InfoText_addText:<sp/>this<sp/>function<sp/>is<sp/>used<sp/>to<sp/>push<sp/>back<sp/>a<sp/>keyword<sp/>and<sp/>text</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"></highlight></codeline>
<codeline lineno="1006"><highlight class="comment">International<sp/>text:<sp/>This<sp/>is<sp/>stored<sp/>in<sp/>separate<sp/>arrays!<sp/>The<sp/>sum<sp/>text.num<sp/>and<sp/>itext.num<sp/>is<sp/>the<sp/>real<sp/>amount<sp/>of<sp/>texts.</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"></highlight></codeline>
<codeline lineno="1008"><highlight class="comment">-itext.keys:<sp/>keyword<sp/>in<sp/>English</highlight></codeline>
<codeline lineno="1009"><highlight class="comment">-itext.langtags:<sp/>ISO<sp/>639<sp/>letter<sp/>code<sp/>for<sp/>the<sp/>language</highlight></codeline>
<codeline lineno="1010"><highlight class="comment">-itext.transkeys:<sp/>keyword<sp/>in<sp/>this<sp/>language</highlight></codeline>
<codeline lineno="1011"><highlight class="comment">-itext.strings:<sp/>the<sp/>text<sp/>in<sp/>this<sp/>language,<sp/>in<sp/>UTF-8</highlight></codeline>
<codeline lineno="1012"><highlight class="comment">-itext.num:<sp/>the<sp/>amount<sp/>of<sp/>international<sp/>texts<sp/>in<sp/>this<sp/>PNG</highlight></codeline>
<codeline lineno="1013"><highlight class="comment">-LodePNG_InfoIText_clearText:<sp/>use<sp/>this<sp/>to<sp/>clear<sp/>the<sp/>itexts<sp/>again<sp/>after<sp/>you<sp/>filled<sp/>them<sp/>in</highlight></codeline>
<codeline lineno="1014"><highlight class="comment">-LodePNG_InfoIText_addText:<sp/>this<sp/>function<sp/>is<sp/>used<sp/>to<sp/>push<sp/>back<sp/>all<sp/>4<sp/>parts<sp/>of<sp/>an<sp/>itext</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"></highlight></codeline>
<codeline lineno="1016"><highlight class="comment">Don&apos;t<sp/>allocate<sp/>these<sp/>text<sp/>buffers<sp/>yourself.<sp/>Use<sp/>the<sp/>init/cleanup<sp/>functions</highlight></codeline>
<codeline lineno="1017"><highlight class="comment">correctly<sp/>and<sp/>use<sp/>addText<sp/>and<sp/>clearText.</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"></highlight></codeline>
<codeline lineno="1019"><highlight class="comment">In<sp/>the<sp/>C++<sp/>version<sp/>the<sp/>Encoder<sp/>class<sp/>also<sp/>has<sp/>the<sp/>above<sp/>functions<sp/>available<sp/>directly<sp/>in<sp/>its<sp/>interface.</highlight></codeline>
<codeline lineno="1020"><highlight class="comment">The<sp/>char**<sp/>buffers<sp/>are<sp/>used<sp/>like<sp/>the<sp/>argv<sp/>parameter<sp/>of<sp/>a<sp/>main()<sp/>function,<sp/>and<sp/>(i)text.num<sp/>takes<sp/>the<sp/>role</highlight></codeline>
<codeline lineno="1021"><highlight class="comment">of<sp/>argc.</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"></highlight></codeline>
<codeline lineno="1023"><highlight class="comment">In<sp/>a<sp/>text,<sp/>there<sp/>must<sp/>be<sp/>as<sp/>much<sp/>keys<sp/>as<sp/>strings<sp/>because<sp/>they<sp/>always<sp/>form<sp/>pairs.<sp/>In<sp/>an<sp/>itext,</highlight></codeline>
<codeline lineno="1024"><highlight class="comment">there<sp/>must<sp/>always<sp/>be<sp/>as<sp/>much<sp/>keys,<sp/>langtags,<sp/>transkeys<sp/>and<sp/>strings.</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"></highlight></codeline>
<codeline lineno="1026"><highlight class="comment">They<sp/>keyword<sp/>of<sp/>text<sp/>chunks<sp/>gives<sp/>a<sp/>short<sp/>description<sp/>what<sp/>the<sp/>actual<sp/>text</highlight></codeline>
<codeline lineno="1027"><highlight class="comment">represents.<sp/>There<sp/>are<sp/>a<sp/>few<sp/>standard<sp/>standard<sp/>keywords<sp/>recognised</highlight></codeline>
<codeline lineno="1028"><highlight class="comment">by<sp/>many<sp/>programs:<sp/>Title,<sp/>Author,<sp/>Description,<sp/>Copyright,<sp/>Creation<sp/>Time,</highlight></codeline>
<codeline lineno="1029"><highlight class="comment">Software,<sp/>Disclaimer,<sp/>Warning,<sp/>Source,<sp/>Comment.<sp/>It&apos;s<sp/>allowed<sp/>to<sp/>use<sp/>other<sp/>keys.</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"></highlight></codeline>
<codeline lineno="1031"><highlight class="comment">The<sp/>keyword<sp/>is<sp/>minimum<sp/>1<sp/>character<sp/>and<sp/>maximum<sp/>79<sp/>characters<sp/>long.<sp/>It&apos;s</highlight></codeline>
<codeline lineno="1032"><highlight class="comment">discouraged<sp/>to<sp/>use<sp/>a<sp/>single<sp/>line<sp/>length<sp/>longer<sp/>than<sp/>79<sp/>characters<sp/>for<sp/>texts.</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"></highlight></codeline>
<codeline lineno="1034"><highlight class="comment">*)<sp/>additional<sp/>color<sp/>info</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"></highlight></codeline>
<codeline lineno="1036"><highlight class="comment">These<sp/>functions<sp/>are<sp/>available<sp/>with<sp/>longer<sp/>names<sp/>in<sp/>the<sp/>C<sp/>version,<sp/>and<sp/>directly</highlight></codeline>
<codeline lineno="1037"><highlight class="comment">in<sp/>the<sp/>Decoder&apos;s<sp/>interface<sp/>in<sp/>the<sp/>C++<sp/>version.</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"></highlight></codeline>
<codeline lineno="1039"><highlight class="comment">getBpp():<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>per<sp/>pixel<sp/>of<sp/>the<sp/>PNG<sp/>image</highlight></codeline>
<codeline lineno="1040"><highlight class="comment">getChannels():<sp/><sp/><sp/><sp/><sp/>amount<sp/>of<sp/>color<sp/>channels<sp/>of<sp/>the<sp/>PNG<sp/>image</highlight></codeline>
<codeline lineno="1041"><highlight class="comment">isGreyscaleType():<sp/>its<sp/>color<sp/>type<sp/>0<sp/>or<sp/>4</highlight></codeline>
<codeline lineno="1042"><highlight class="comment">isAlphaType():<sp/><sp/><sp/><sp/><sp/>its<sp/>color<sp/>type<sp/>2<sp/>or<sp/>6</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"></highlight></codeline>
<codeline lineno="1044"><highlight class="comment">These<sp/>values<sp/>are<sp/>calculated<sp/>out<sp/>of<sp/>color<sp/>type<sp/>and<sp/>bit<sp/>depth<sp/>of<sp/>InfoColor.</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"></highlight></codeline>
<codeline lineno="1046"><highlight class="comment">The<sp/>difference<sp/>between<sp/>bits<sp/>per<sp/>pixel<sp/>and<sp/>bit<sp/>depth<sp/>is<sp/>that<sp/>bit<sp/>depth<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="1047"><highlight class="comment">number<sp/>of<sp/>bits<sp/>per<sp/>color<sp/>channel,<sp/>while<sp/>a<sp/>pixel<sp/>can<sp/>have<sp/>multiple<sp/>channels.</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"></highlight></codeline>
<codeline lineno="1049"><highlight class="comment">*)<sp/>pHYs<sp/>chunk<sp/>(image<sp/>dimensions)</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"></highlight></codeline>
<codeline lineno="1051"><highlight class="comment">phys_defined:<sp/>if<sp/>0,<sp/>there<sp/>is<sp/>no<sp/>pHYs<sp/>chunk<sp/>and<sp/>the<sp/>values<sp/>are<sp/>undefined,<sp/>if<sp/>1<sp/>else<sp/>there<sp/>is<sp/>one</highlight></codeline>
<codeline lineno="1052"><highlight class="comment">phys_x:<sp/>pixels<sp/>per<sp/>unit<sp/>in<sp/>x<sp/>direction</highlight></codeline>
<codeline lineno="1053"><highlight class="comment">phys_y:<sp/>pixels<sp/>per<sp/>unit<sp/>in<sp/>y<sp/>direction</highlight></codeline>
<codeline lineno="1054"><highlight class="comment">phys_unit:<sp/>the<sp/>unit,<sp/>0<sp/>is<sp/>no<sp/>unit<sp/>(x<sp/>and<sp/>y<sp/>only<sp/>give<sp/>the<sp/>ratio),<sp/>1<sp/>is<sp/>metre</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"></highlight></codeline>
<codeline lineno="1056"><highlight class="comment">*)<sp/>tIME<sp/>chunk<sp/>(modification<sp/>time)</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"></highlight></codeline>
<codeline lineno="1058"><highlight class="comment">time_defined:<sp/>if<sp/>0,<sp/>there<sp/>is<sp/>no<sp/>tIME<sp/>chunk<sp/>and<sp/>the<sp/>values<sp/>are<sp/>undefined,<sp/>if<sp/>1<sp/>there<sp/>is<sp/>one</highlight></codeline>
<codeline lineno="1059"><highlight class="comment">time:<sp/>this<sp/>struct<sp/>contains<sp/>year<sp/>as<sp/>a<sp/>2-byte<sp/>number<sp/>(0-65535),<sp/>month,<sp/>day,<sp/>hour,<sp/>minute,</highlight></codeline>
<codeline lineno="1060"><highlight class="comment">second<sp/>as<sp/>1-byte<sp/>numbers<sp/>that<sp/>must<sp/>be<sp/>in<sp/>the<sp/>correct<sp/>range</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"></highlight></codeline>
<codeline lineno="1062"><highlight class="comment">Note:<sp/>to<sp/>make<sp/>the<sp/>encoder<sp/>add<sp/>a<sp/>time<sp/>chunk,<sp/>set<sp/>time_defined<sp/>to<sp/>1<sp/>and<sp/>fill<sp/>in</highlight></codeline>
<codeline lineno="1063"><highlight class="comment">the<sp/>correct<sp/>values<sp/>in<sp/>all<sp/>the<sp/>time<sp/>parameters,<sp/>LodePNG<sp/>will<sp/>not<sp/>fill<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="1064"><highlight class="comment">time<sp/>in<sp/>these<sp/>values<sp/>itself,<sp/>all<sp/>it<sp/>does<sp/>is<sp/>copy<sp/>them<sp/>over<sp/>into<sp/>the<sp/>chunk<sp/>bytes.</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"></highlight></codeline>
<codeline lineno="1066"><highlight class="comment"></highlight></codeline>
<codeline lineno="1067"><highlight class="comment">9.<sp/>error<sp/>values</highlight></codeline>
<codeline lineno="1068"><highlight class="comment">---------------</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"></highlight></codeline>
<codeline lineno="1070"><highlight class="comment">The<sp/>meanings<sp/>of<sp/>the<sp/>LodePNG<sp/>error<sp/>values:</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"></highlight></codeline>
<codeline lineno="1072"><highlight class="comment">*)<sp/>0:<sp/>no<sp/>error,<sp/>everything<sp/>went<sp/>ok</highlight></codeline>
<codeline lineno="1073"><highlight class="comment">*)<sp/>1:<sp/>the<sp/>Encoder/Decoder<sp/>has<sp/>done<sp/>nothing<sp/>yet,<sp/>so<sp/>error<sp/>checking<sp/>makes<sp/>no<sp/>sense<sp/>yet</highlight></codeline>
<codeline lineno="1074"><highlight class="comment">*)<sp/>10:<sp/>while<sp/>huffman<sp/>decoding:<sp/>end<sp/>of<sp/>input<sp/>memory<sp/>reached<sp/>without<sp/>endcode</highlight></codeline>
<codeline lineno="1075"><highlight class="comment">*)<sp/>11:<sp/>while<sp/>huffman<sp/>decoding:<sp/>error<sp/>in<sp/>code<sp/>tree<sp/>made<sp/>it<sp/>jump<sp/>outside<sp/>of<sp/>tree</highlight></codeline>
<codeline lineno="1076"><highlight class="comment">*)<sp/>13:<sp/>problem<sp/>while<sp/>processing<sp/>dynamic<sp/>deflate<sp/>block</highlight></codeline>
<codeline lineno="1077"><highlight class="comment">*)<sp/>14:<sp/>problem<sp/>while<sp/>processing<sp/>dynamic<sp/>deflate<sp/>block</highlight></codeline>
<codeline lineno="1078"><highlight class="comment">*)<sp/>15:<sp/>problem<sp/>while<sp/>processing<sp/>dynamic<sp/>deflate<sp/>block</highlight></codeline>
<codeline lineno="1079"><highlight class="comment">*)<sp/>16:<sp/>unexisting<sp/>code<sp/>while<sp/>processing<sp/>dynamic<sp/>deflate<sp/>block</highlight></codeline>
<codeline lineno="1080"><highlight class="comment">*)<sp/>17:<sp/>while<sp/>inflating:<sp/>end<sp/>of<sp/>out<sp/>buffer<sp/>memory<sp/>reached</highlight></codeline>
<codeline lineno="1081"><highlight class="comment">*)<sp/>18:<sp/>while<sp/>inflating:<sp/>invalid<sp/>distance<sp/>code</highlight></codeline>
<codeline lineno="1082"><highlight class="comment">*)<sp/>19:<sp/>while<sp/>inflating:<sp/>end<sp/>of<sp/>out<sp/>buffer<sp/>memory<sp/>reached</highlight></codeline>
<codeline lineno="1083"><highlight class="comment">*)<sp/>20:<sp/>invalid<sp/>deflate<sp/>block<sp/>BTYPE<sp/>encountered<sp/>while<sp/>decoding</highlight></codeline>
<codeline lineno="1084"><highlight class="comment">*)<sp/>21:<sp/>NLEN<sp/>is<sp/>not<sp/>ones<sp/>complement<sp/>of<sp/>LEN<sp/>in<sp/>a<sp/>deflate<sp/>block</highlight></codeline>
<codeline lineno="1085"><highlight class="comment">*)<sp/>22:<sp/>while<sp/>inflating:<sp/>end<sp/>of<sp/>out<sp/>buffer<sp/>memory<sp/>reached.</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>if<sp/>the<sp/>inflated<sp/>deflate<sp/>data<sp/>is<sp/>longer<sp/>than<sp/>the<sp/>amount<sp/>of<sp/>bytes<sp/>required<sp/>to<sp/>fill<sp/>up</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/><sp/>all<sp/>the<sp/>pixels<sp/>of<sp/>the<sp/>image,<sp/>given<sp/>the<sp/>color<sp/>depth<sp/>and<sp/>image<sp/>dimensions.<sp/>Something<sp/>that<sp/>doesn&apos;t</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/><sp/><sp/>happen<sp/>in<sp/>a<sp/>normal,<sp/>well<sp/>encoded,<sp/>PNG<sp/>image.</highlight></codeline>
<codeline lineno="1089"><highlight class="comment">*)<sp/>23:<sp/>while<sp/>inflating:<sp/>end<sp/>of<sp/>in<sp/>buffer<sp/>memory<sp/>reached</highlight></codeline>
<codeline lineno="1090"><highlight class="comment">*)<sp/>24:<sp/>invalid<sp/>FCHECK<sp/>in<sp/>zlib<sp/>header</highlight></codeline>
<codeline lineno="1091"><highlight class="comment">*)<sp/>25:<sp/>invalid<sp/>compression<sp/>method<sp/>in<sp/>zlib<sp/>header</highlight></codeline>
<codeline lineno="1092"><highlight class="comment">*)<sp/>26:<sp/>FDICT<sp/>encountered<sp/>in<sp/>zlib<sp/>header<sp/>while<sp/>it&apos;s<sp/>not<sp/>used<sp/>for<sp/>PNG</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">*)<sp/>27:<sp/>PNG<sp/>file<sp/>is<sp/>smaller<sp/>than<sp/>a<sp/>PNG<sp/>header</highlight></codeline>
<codeline lineno="1094"><highlight class="comment">*)<sp/>28:<sp/>incorrect<sp/>PNG<sp/>signature<sp/>(the<sp/>first<sp/>8<sp/>bytes<sp/>of<sp/>the<sp/>PNG<sp/>file)</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/>Maybe<sp/>it&apos;s<sp/>not<sp/>a<sp/>PNG,<sp/>or<sp/>a<sp/>PNG<sp/>file<sp/>that<sp/>got<sp/>corrupted<sp/>so<sp/>that<sp/>the<sp/>header<sp/>indicates<sp/>the<sp/>corruption.</highlight></codeline>
<codeline lineno="1096"><highlight class="comment">*)<sp/>29:<sp/>first<sp/>chunk<sp/>is<sp/>not<sp/>the<sp/>header<sp/>chunk</highlight></codeline>
<codeline lineno="1097"><highlight class="comment">*)<sp/>30:<sp/>chunk<sp/>length<sp/>too<sp/>large,<sp/>chunk<sp/>broken<sp/>off<sp/>at<sp/>end<sp/>of<sp/>file</highlight></codeline>
<codeline lineno="1098"><highlight class="comment">*)<sp/>31:<sp/>illegal<sp/>PNG<sp/>color<sp/>type<sp/>or<sp/>bpp</highlight></codeline>
<codeline lineno="1099"><highlight class="comment">*)<sp/>32:<sp/>illegal<sp/>PNG<sp/>compression<sp/>method</highlight></codeline>
<codeline lineno="1100"><highlight class="comment">*)<sp/>33:<sp/>illegal<sp/>PNG<sp/>filter<sp/>method</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">*)<sp/>34:<sp/>illegal<sp/>PNG<sp/>interlace<sp/>method</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">*)<sp/>35:<sp/>chunk<sp/>length<sp/>of<sp/>a<sp/>chunk<sp/>is<sp/>too<sp/>large<sp/>or<sp/>the<sp/>chunk<sp/>too<sp/>small</highlight></codeline>
<codeline lineno="1103"><highlight class="comment">*)<sp/>36:<sp/>illegal<sp/>PNG<sp/>filter<sp/>type<sp/>encountered</highlight></codeline>
<codeline lineno="1104"><highlight class="comment">*)<sp/>37:<sp/>illegal<sp/>bit<sp/>depth<sp/>for<sp/>this<sp/>color<sp/>type<sp/>given</highlight></codeline>
<codeline lineno="1105"><highlight class="comment">*)<sp/>38:<sp/>the<sp/>palette<sp/>is<sp/>too<sp/>big<sp/>(more<sp/>than<sp/>256<sp/>colors)</highlight></codeline>
<codeline lineno="1106"><highlight class="comment">*)<sp/>39:<sp/>more<sp/>palette<sp/>alpha<sp/>values<sp/>given<sp/>in<sp/>tRNS,<sp/>than<sp/>there<sp/>are<sp/>colors<sp/>in<sp/>the<sp/>palette</highlight></codeline>
<codeline lineno="1107"><highlight class="comment">*)<sp/>40:<sp/>tRNS<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>greyscale<sp/>image</highlight></codeline>
<codeline lineno="1108"><highlight class="comment">*)<sp/>41:<sp/>tRNS<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>RGB<sp/>image</highlight></codeline>
<codeline lineno="1109"><highlight class="comment">*)<sp/>42:<sp/>tRNS<sp/>chunk<sp/>appeared<sp/>while<sp/>it<sp/>was<sp/>not<sp/>allowed<sp/>for<sp/>this<sp/>color<sp/>type</highlight></codeline>
<codeline lineno="1110"><highlight class="comment">*)<sp/>43:<sp/>bKGD<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>palette<sp/>image</highlight></codeline>
<codeline lineno="1111"><highlight class="comment">*)<sp/>44:<sp/>bKGD<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>greyscale<sp/>image</highlight></codeline>
<codeline lineno="1112"><highlight class="comment">*)<sp/>45:<sp/>bKGD<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>RGB<sp/>image</highlight></codeline>
<codeline lineno="1113"><highlight class="comment">*)<sp/>46:<sp/>value<sp/>encountered<sp/>in<sp/>indexed<sp/>image<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>palette<sp/>size<sp/>(bitdepth<sp/>==<sp/>8).<sp/>Is<sp/>the<sp/>palette<sp/>too<sp/>small?</highlight></codeline>
<codeline lineno="1114"><highlight class="comment">*)<sp/>47:<sp/>value<sp/>encountered<sp/>in<sp/>indexed<sp/>image<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>palette<sp/>size<sp/>(bitdepth<sp/>&lt;<sp/>8).<sp/>Is<sp/>the<sp/>palette<sp/>too<sp/>small?</highlight></codeline>
<codeline lineno="1115"><highlight class="comment">*)<sp/>48:<sp/>the<sp/>input<sp/>data<sp/>is<sp/>empty.<sp/>Maybe<sp/>a<sp/>PNG<sp/>file<sp/>you<sp/>tried<sp/>to<sp/>load<sp/>doesn&apos;t<sp/>exist<sp/>or<sp/>is<sp/>in<sp/>the<sp/>wrong<sp/>path.</highlight></codeline>
<codeline lineno="1116"><highlight class="comment">*)<sp/>49:<sp/>jumped<sp/>past<sp/>memory<sp/>while<sp/>generating<sp/>dynamic<sp/>huffman<sp/>tree</highlight></codeline>
<codeline lineno="1117"><highlight class="comment">*)<sp/>50:<sp/>jumped<sp/>past<sp/>memory<sp/>while<sp/>generating<sp/>dynamic<sp/>huffman<sp/>tree</highlight></codeline>
<codeline lineno="1118"><highlight class="comment">*)<sp/>51:<sp/>jumped<sp/>past<sp/>memory<sp/>while<sp/>inflating<sp/>huffman<sp/>block</highlight></codeline>
<codeline lineno="1119"><highlight class="comment">*)<sp/>52:<sp/>jumped<sp/>past<sp/>memory<sp/>while<sp/>inflating</highlight></codeline>
<codeline lineno="1120"><highlight class="comment">*)<sp/>53:<sp/>size<sp/>of<sp/>zlib<sp/>data<sp/>too<sp/>small</highlight></codeline>
<codeline lineno="1121"><highlight class="comment">*)<sp/>55:<sp/>jumped<sp/>past<sp/>tree<sp/>while<sp/>generating<sp/>huffman<sp/>tree,<sp/>this<sp/>could<sp/>be<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>will<sp/>have<sp/>more<sp/>leaves<sp/>than<sp/>symbols<sp/>after<sp/>generating<sp/>it<sp/>out<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>given<sp/>lengths.<sp/>They<sp/>call<sp/>this<sp/>an<sp/>oversubscribed<sp/>dynamic<sp/>bit<sp/>lengths<sp/>tree<sp/>in<sp/>zlib.</highlight></codeline>
<codeline lineno="1124"><highlight class="comment">*)<sp/>56:<sp/>given<sp/>output<sp/>image<sp/>colorType<sp/>or<sp/>bitDepth<sp/>not<sp/>supported<sp/>for<sp/>color<sp/>conversion</highlight></codeline>
<codeline lineno="1125"><highlight class="comment">*)<sp/>57:<sp/>invalid<sp/>CRC<sp/>encountered<sp/>(checking<sp/>CRC<sp/>can<sp/>be<sp/>disabled)</highlight></codeline>
<codeline lineno="1126"><highlight class="comment">*)<sp/>58:<sp/>invalid<sp/>ADLER32<sp/>encountered<sp/>(checking<sp/>ADLER32<sp/>can<sp/>be<sp/>disabled)</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">*)<sp/>59:<sp/>conversion<sp/>to<sp/>unexisting<sp/>or<sp/>unsupported<sp/>color<sp/>type<sp/>or<sp/>bit<sp/>depth<sp/>requested<sp/>by<sp/>encoder<sp/>or<sp/>decoder</highlight></codeline>
<codeline lineno="1128"><highlight class="comment">*)<sp/>60:<sp/>invalid<sp/>window<sp/>size<sp/>given<sp/>in<sp/>the<sp/>settings<sp/>of<sp/>the<sp/>encoder<sp/>(must<sp/>be<sp/>0-32768)</highlight></codeline>
<codeline lineno="1129"><highlight class="comment">*)<sp/>61:<sp/>invalid<sp/>BTYPE<sp/>given<sp/>in<sp/>the<sp/>settings<sp/>of<sp/>the<sp/>encoder<sp/>(only<sp/>0,<sp/>1<sp/>and<sp/>2<sp/>are<sp/>allowed)</highlight></codeline>
<codeline lineno="1130"><highlight class="comment">*)<sp/>62:<sp/>conversion<sp/>from<sp/>non-greyscale<sp/>color<sp/>to<sp/>greyscale<sp/>color<sp/>requested<sp/>by<sp/>encoder<sp/>or<sp/>decoder.<sp/>LodePNG</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leaves<sp/>the<sp/>choice<sp/>of<sp/>RGB<sp/>to<sp/>greyscale<sp/>conversion<sp/>formula<sp/>to<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="1132"><highlight class="comment">*)<sp/>63:<sp/>length<sp/>of<sp/>a<sp/>chunk<sp/>too<sp/>long,<sp/>max<sp/>allowed<sp/>for<sp/>PNG<sp/>is<sp/>2147483647<sp/>bytes<sp/>per<sp/>chunk<sp/>(2^31-1)</highlight></codeline>
<codeline lineno="1133"><highlight class="comment">*)<sp/>64:<sp/>the<sp/>length<sp/>of<sp/>the<sp/>&quot;end&quot;<sp/>symbol<sp/>256<sp/>in<sp/>the<sp/>Huffman<sp/>tree<sp/>is<sp/>0,<sp/>resulting<sp/>in<sp/>the<sp/>inability<sp/>of<sp/>a<sp/>deflated</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>to<sp/>ever<sp/>contain<sp/>an<sp/>end<sp/>code.<sp/>It<sp/>must<sp/>be<sp/>at<sp/>least<sp/>1.</highlight></codeline>
<codeline lineno="1135"><highlight class="comment">*)<sp/>66:<sp/>the<sp/>length<sp/>of<sp/>a<sp/>text<sp/>chunk<sp/>keyword<sp/>given<sp/>to<sp/>the<sp/>encoder<sp/>is<sp/>longer<sp/>than<sp/>the<sp/>maximum<sp/>79<sp/>bytes.</highlight></codeline>
<codeline lineno="1136"><highlight class="comment">*)<sp/>67:<sp/>the<sp/>length<sp/>of<sp/>a<sp/>text<sp/>chunk<sp/>keyword<sp/>given<sp/>to<sp/>the<sp/>encoder<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>minimum<sp/>1<sp/>byte.</highlight></codeline>
<codeline lineno="1137"><highlight class="comment">*)<sp/>68:<sp/>tried<sp/>to<sp/>encode<sp/>a<sp/>PLTE<sp/>chunk<sp/>with<sp/>a<sp/>palette<sp/>that<sp/>has<sp/>less<sp/>than<sp/>1<sp/>or<sp/>more<sp/>than<sp/>256<sp/>colors</highlight></codeline>
<codeline lineno="1138"><highlight class="comment">*)<sp/>69:<sp/>unknown<sp/>chunk<sp/>type<sp/>with<sp/>&quot;critical&quot;<sp/>flag<sp/>encountered<sp/>by<sp/>the<sp/>decoder</highlight></codeline>
<codeline lineno="1139"><highlight class="comment">*)<sp/>71:<sp/>unexisting<sp/>interlace<sp/>mode<sp/>given<sp/>to<sp/>encoder<sp/>(must<sp/>be<sp/>0<sp/>or<sp/>1)</highlight></codeline>
<codeline lineno="1140"><highlight class="comment">*)<sp/>72:<sp/>while<sp/>decoding,<sp/>unexisting<sp/>compression<sp/>method<sp/>encountering<sp/>in<sp/>zTXt<sp/>or<sp/>iTXt<sp/>chunk<sp/>(it<sp/>must<sp/>be<sp/>0)</highlight></codeline>
<codeline lineno="1141"><highlight class="comment">*)<sp/>73:<sp/>invalid<sp/>tIME<sp/>chunk<sp/>size</highlight></codeline>
<codeline lineno="1142"><highlight class="comment">*)<sp/>74:<sp/>invalid<sp/>pHYs<sp/>chunk<sp/>size</highlight></codeline>
<codeline lineno="1143"><highlight class="comment">*)<sp/>75:<sp/>no<sp/>null<sp/>termination<sp/>char<sp/>found<sp/>while<sp/>decoding<sp/>any<sp/>kind<sp/>of<sp/>text<sp/>chunk,<sp/>or<sp/>wrong<sp/>length</highlight></codeline>
<codeline lineno="1144"><highlight class="comment">*)<sp/>76:<sp/>iTXt<sp/>chunk<sp/>too<sp/>short<sp/>to<sp/>contain<sp/>required<sp/>bytes</highlight></codeline>
<codeline lineno="1145"><highlight class="comment">*)<sp/>77:<sp/>integer<sp/>overflow<sp/>in<sp/>buffer<sp/>size<sp/>happened<sp/>somewhere</highlight></codeline>
<codeline lineno="1146"><highlight class="comment">*)<sp/>78:<sp/>file<sp/>doesn&apos;t<sp/>exist<sp/>or<sp/>couldn&apos;t<sp/>be<sp/>opened<sp/>for<sp/>reading</highlight></codeline>
<codeline lineno="1147"><highlight class="comment">*)<sp/>79:<sp/>file<sp/>couldn&apos;t<sp/>be<sp/>opened<sp/>for<sp/>writing</highlight></codeline>
<codeline lineno="1148"><highlight class="comment">*)<sp/>80:<sp/>tried<sp/>creating<sp/>a<sp/>tree<sp/>for<sp/>0<sp/>symbols</highlight></codeline>
<codeline lineno="1149"><highlight class="comment">*)<sp/>9900-9999:<sp/>out<sp/>of<sp/>memory<sp/>while<sp/>allocating<sp/>chunk<sp/>of<sp/>memory<sp/>somewhere</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"></highlight></codeline>
<codeline lineno="1151"><highlight class="comment"></highlight></codeline>
<codeline lineno="1152"><highlight class="comment">10.<sp/>file<sp/>IO</highlight></codeline>
<codeline lineno="1153"><highlight class="comment">-----------</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"></highlight></codeline>
<codeline lineno="1155"><highlight class="comment">For<sp/>cases<sp/>where<sp/>you<sp/>want<sp/>to<sp/>load<sp/>the<sp/>PNG<sp/>image<sp/>from<sp/>a<sp/>file,<sp/>you<sp/>can<sp/>use<sp/>your<sp/>own</highlight></codeline>
<codeline lineno="1156"><highlight class="comment">file<sp/>loading<sp/>code,<sp/>or<sp/>the<sp/>file<sp/>loading<sp/>and<sp/>saving<sp/>functions<sp/>provided<sp/>with</highlight></codeline>
<codeline lineno="1157"><highlight class="comment">LodePNG.<sp/>These<sp/>use<sp/>the<sp/>same<sp/>unsigned<sp/>char<sp/>format<sp/>used<sp/>by<sp/>the<sp/>Decoder<sp/>and<sp/>Encoder.</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"></highlight></codeline>
<codeline lineno="1159"><highlight class="comment">The<sp/>loadFile<sp/>function<sp/>fills<sp/>the<sp/>given<sp/>buffer<sp/>up<sp/>with<sp/>the<sp/>file<sp/>from<sp/>harddisk</highlight></codeline>
<codeline lineno="1160"><highlight class="comment">with<sp/>the<sp/>given<sp/>name.</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"></highlight></codeline>
<codeline lineno="1162"><highlight class="comment">The<sp/>saveFile<sp/>function<sp/>saves<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>given<sp/>buffer<sp/>to<sp/>the<sp/>file</highlight></codeline>
<codeline lineno="1163"><highlight class="comment">with<sp/>given<sp/>name.<sp/>Warning:<sp/>this<sp/>overwrites<sp/>the<sp/>contents<sp/>that<sp/>were<sp/>previously<sp/>in</highlight></codeline>
<codeline lineno="1164"><highlight class="comment">the<sp/>file<sp/>if<sp/>it<sp/>already<sp/>existed,<sp/>without<sp/>warning.</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"></highlight></codeline>
<codeline lineno="1166"><highlight class="comment">Note<sp/>that<sp/>you<sp/>don&apos;t<sp/>have<sp/>to<sp/>decode<sp/>a<sp/>PNG<sp/>image<sp/>from<sp/>a<sp/>file,<sp/>you<sp/>can<sp/>as<sp/>well</highlight></codeline>
<codeline lineno="1167"><highlight class="comment">retrieve<sp/>the<sp/>buffer<sp/>another<sp/>way<sp/>in<sp/>your<sp/>code,<sp/>because<sp/>the<sp/>decode<sp/>function<sp/>takes</highlight></codeline>
<codeline lineno="1168"><highlight class="comment">a<sp/>buffer<sp/>as<sp/>parameter,<sp/>not<sp/>a<sp/>filename.</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"></highlight></codeline>
<codeline lineno="1170"><highlight class="comment">Both<sp/>C<sp/>and<sp/>C++<sp/>versions<sp/>of<sp/>the<sp/>loadFile<sp/>and<sp/>saveFile<sp/>functions<sp/>are<sp/>available.</highlight></codeline>
<codeline lineno="1171"><highlight class="comment">For<sp/>the<sp/>C<sp/>version<sp/>of<sp/>loadFile,<sp/>you<sp/>need<sp/>to<sp/>free()<sp/>the<sp/>buffer<sp/>after<sp/>use.<sp/>The</highlight></codeline>
<codeline lineno="1172"><highlight class="comment">C++<sp/>versions<sp/>use<sp/>std::vectors<sp/>so<sp/>they<sp/>clean<sp/>themselves<sp/>automatically.</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"></highlight></codeline>
<codeline lineno="1174"><highlight class="comment"></highlight></codeline>
<codeline lineno="1175"><highlight class="comment">11.<sp/>chunks<sp/>and<sp/>PNG<sp/>editing</highlight></codeline>
<codeline lineno="1176"><highlight class="comment">--------------------------</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"></highlight></codeline>
<codeline lineno="1178"><highlight class="comment">If<sp/>you<sp/>want<sp/>to<sp/>add<sp/>extra<sp/>chunks<sp/>to<sp/>a<sp/>PNG<sp/>you<sp/>encode,<sp/>or<sp/>use<sp/>LodePNG<sp/>for<sp/>a<sp/>PNG</highlight></codeline>
<codeline lineno="1179"><highlight class="comment">editor<sp/>that<sp/>should<sp/>follow<sp/>the<sp/>rules<sp/>about<sp/>handling<sp/>of<sp/>unknown<sp/>chunks,<sp/>or<sp/>if<sp/>you</highlight></codeline>
<codeline lineno="1180"><highlight class="comment">program<sp/>is<sp/>able<sp/>to<sp/>read<sp/>other<sp/>types<sp/>of<sp/>chunks<sp/>than<sp/>the<sp/>ones<sp/>handled<sp/>by<sp/>LodePNG,</highlight></codeline>
<codeline lineno="1181"><highlight class="comment">then<sp/>that&apos;s<sp/>possible<sp/>with<sp/>the<sp/>chunk<sp/>functions<sp/>of<sp/>LodePNG.</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"></highlight></codeline>
<codeline lineno="1183"><highlight class="comment">A<sp/>PNG<sp/>chunk<sp/>has<sp/>the<sp/>following<sp/>layout:</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"></highlight></codeline>
<codeline lineno="1185"><highlight class="comment">4<sp/>bytes<sp/>length</highlight></codeline>
<codeline lineno="1186"><highlight class="comment">4<sp/>bytes<sp/>type<sp/>name</highlight></codeline>
<codeline lineno="1187"><highlight class="comment">length<sp/>bytes<sp/>data</highlight></codeline>
<codeline lineno="1188"><highlight class="comment">4<sp/>bytes<sp/>CRC</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"></highlight></codeline>
<codeline lineno="1190"><highlight class="comment"></highlight></codeline>
<codeline lineno="1191"><highlight class="comment">11.1<sp/>iterating<sp/>through<sp/>chunks</highlight></codeline>
<codeline lineno="1192"><highlight class="comment">-----------------------------</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"></highlight></codeline>
<codeline lineno="1194"><highlight class="comment">If<sp/>you<sp/>have<sp/>a<sp/>buffer<sp/>containing<sp/>the<sp/>PNG<sp/>image<sp/>data,<sp/>then<sp/>the<sp/>first<sp/>chunk<sp/>(the</highlight></codeline>
<codeline lineno="1195"><highlight class="comment">IHDR<sp/>chunk)<sp/>starts<sp/>at<sp/>byte<sp/>number<sp/>8<sp/>of<sp/>that<sp/>buffer.<sp/>The<sp/>first<sp/>8<sp/>bytes<sp/>are<sp/>the</highlight></codeline>
<codeline lineno="1196"><highlight class="comment">signature<sp/>of<sp/>the<sp/>PNG<sp/>and<sp/>are<sp/>not<sp/>part<sp/>of<sp/>a<sp/>chunk.<sp/>But<sp/>if<sp/>you<sp/>start<sp/>at<sp/>byte<sp/>8</highlight></codeline>
<codeline lineno="1197"><highlight class="comment">then<sp/>you<sp/>have<sp/>a<sp/>chunk,<sp/>and<sp/>can<sp/>check<sp/>the<sp/>following<sp/>things<sp/>of<sp/>it.</highlight></codeline>
<codeline lineno="1198"><highlight class="comment"></highlight></codeline>
<codeline lineno="1199"><highlight class="comment">NOTE:<sp/>none<sp/>of<sp/>these<sp/>functions<sp/>check<sp/>for<sp/>memory<sp/>buffer<sp/>boundaries.<sp/>To<sp/>avoid</highlight></codeline>
<codeline lineno="1200"><highlight class="comment">exploits,<sp/>always<sp/>make<sp/>sure<sp/>the<sp/>buffer<sp/>contains<sp/>all<sp/>the<sp/>data<sp/>of<sp/>the<sp/>chunks.</highlight></codeline>
<codeline lineno="1201"><highlight class="comment">When<sp/>using<sp/>LodePNG_chunk_next,<sp/>make<sp/>sure<sp/>the<sp/>returned<sp/>value<sp/>is<sp/>within<sp/>the</highlight></codeline>
<codeline lineno="1202"><highlight class="comment">allocated<sp/>memory.</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"></highlight></codeline>
<codeline lineno="1204"><highlight class="comment">unsigned<sp/>LodePNG_chunk_length(const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"></highlight></codeline>
<codeline lineno="1206"><highlight class="comment">Get<sp/>the<sp/>length<sp/>of<sp/>the<sp/>chunk&apos;s<sp/>data.<sp/>The<sp/>total<sp/>chunk<sp/>length<sp/>is<sp/>this<sp/>length<sp/>+<sp/>12.</highlight></codeline>
<codeline lineno="1207"><highlight class="comment"></highlight></codeline>
<codeline lineno="1208"><highlight class="comment">void<sp/>LodePNG_chunk_type(char<sp/>type[5],<sp/>const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1209"><highlight class="comment">unsigned<sp/>char<sp/>LodePNG_chunk_type_equals(const<sp/>unsigned<sp/>char*<sp/>chunk,<sp/>const<sp/>char*<sp/>type):</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"></highlight></codeline>
<codeline lineno="1211"><highlight class="comment">Get<sp/>the<sp/>type<sp/>of<sp/>the<sp/>chunk<sp/>or<sp/>compare<sp/>if<sp/>it&apos;s<sp/>a<sp/>certain<sp/>type</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"></highlight></codeline>
<codeline lineno="1213"><highlight class="comment">unsigned<sp/>char<sp/>LodePNG_chunk_critical(const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1214"><highlight class="comment">unsigned<sp/>char<sp/>LodePNG_chunk_private(const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1215"><highlight class="comment">unsigned<sp/>char<sp/>LodePNG_chunk_safetocopy(const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"></highlight></codeline>
<codeline lineno="1217"><highlight class="comment">Check<sp/>if<sp/>the<sp/>chunk<sp/>is<sp/>critical<sp/>in<sp/>the<sp/>PNG<sp/>standard<sp/>(only<sp/>IHDR,<sp/>PLTE,<sp/>IDAT<sp/>and<sp/>IEND<sp/>are).</highlight></codeline>
<codeline lineno="1218"><highlight class="comment">Check<sp/>if<sp/>the<sp/>chunk<sp/>is<sp/>private<sp/>(public<sp/>chunks<sp/>are<sp/>part<sp/>of<sp/>the<sp/>standard,<sp/>private<sp/>ones<sp/>not).</highlight></codeline>
<codeline lineno="1219"><highlight class="comment">Check<sp/>if<sp/>the<sp/>chunk<sp/>is<sp/>safe<sp/>to<sp/>copy.<sp/>If<sp/>it&apos;s<sp/>not,<sp/>then,<sp/>when<sp/>modifying<sp/>data<sp/>in<sp/>a<sp/>critical</highlight></codeline>
<codeline lineno="1220"><highlight class="comment">chunk,<sp/>unsafe<sp/>to<sp/>copy<sp/>chunks<sp/>of<sp/>the<sp/>old<sp/>image<sp/>may<sp/>NOT<sp/>be<sp/>saved<sp/>in<sp/>the<sp/>new<sp/>one<sp/>if<sp/>your</highlight></codeline>
<codeline lineno="1221"><highlight class="comment">program<sp/>doesn&apos;t<sp/>handle<sp/>that<sp/>type<sp/>of<sp/>unknown<sp/>chunk.</highlight></codeline>
<codeline lineno="1222"><highlight class="comment"></highlight></codeline>
<codeline lineno="1223"><highlight class="comment">unsigned<sp/>char*<sp/>LodePNG_chunk_data(unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1224"><highlight class="comment">const<sp/>unsigned<sp/>char*<sp/>LodePNG_chunk_data_const(const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"></highlight></codeline>
<codeline lineno="1226"><highlight class="comment">Get<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>data<sp/>of<sp/>the<sp/>chunk.</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"></highlight></codeline>
<codeline lineno="1228"><highlight class="comment">unsigned<sp/>LodePNG_chunk_check_crc(const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1229"><highlight class="comment">void<sp/>LodePNG_chunk_generate_crc(unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"></highlight></codeline>
<codeline lineno="1231"><highlight class="comment">Check<sp/>if<sp/>the<sp/>crc<sp/>is<sp/>correct<sp/>or<sp/>generate<sp/>a<sp/>correct<sp/>one.</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"></highlight></codeline>
<codeline lineno="1233"><highlight class="comment">unsigned<sp/>char*<sp/>LodePNG_chunk_next(unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1234"><highlight class="comment">const<sp/>unsigned<sp/>char*<sp/>LodePNG_chunk_next_const(const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"></highlight></codeline>
<codeline lineno="1236"><highlight class="comment">Iterate<sp/>to<sp/>the<sp/>next<sp/>chunk.<sp/>This<sp/>works<sp/>if<sp/>you<sp/>have<sp/>a<sp/>buffer<sp/>with<sp/>consecutive<sp/>chunks.<sp/>Note<sp/>that<sp/>these</highlight></codeline>
<codeline lineno="1237"><highlight class="comment">functions<sp/>do<sp/>no<sp/>boundary<sp/>checking<sp/>of<sp/>the<sp/>allocated<sp/>data<sp/>whatsoever,<sp/>so<sp/>make<sp/>sure<sp/>there<sp/>is<sp/>enough</highlight></codeline>
<codeline lineno="1238"><highlight class="comment">data<sp/>available<sp/>in<sp/>the<sp/>buffer<sp/>to<sp/>be<sp/>able<sp/>to<sp/>go<sp/>to<sp/>the<sp/>next<sp/>chunk.</highlight></codeline>
<codeline lineno="1239"><highlight class="comment"></highlight></codeline>
<codeline lineno="1240"><highlight class="comment">unsigned<sp/>LodePNG_append_chunk(unsigned<sp/>char**<sp/>out,<sp/>size_t*<sp/>outlength,<sp/>const<sp/>unsigned<sp/>char*<sp/>chunk):</highlight></codeline>
<codeline lineno="1241"><highlight class="comment">unsigned<sp/>LodePNG_create_chunk(unsigned<sp/>char**<sp/>out,<sp/>size_t*<sp/>outlength,<sp/>unsigned<sp/>length,<sp/>const<sp/>char*<sp/>type,<sp/>const<sp/>unsigned<sp/>char*<sp/>data):</highlight></codeline>
<codeline lineno="1242"><highlight class="comment"></highlight></codeline>
<codeline lineno="1243"><highlight class="comment">These<sp/>functions<sp/>are<sp/>used<sp/>to<sp/>create<sp/>new<sp/>chunks<sp/>that<sp/>are<sp/>appended<sp/>to<sp/>the<sp/>data<sp/>in<sp/>*out<sp/>that<sp/>has</highlight></codeline>
<codeline lineno="1244"><highlight class="comment">length<sp/>*outlength.<sp/>The<sp/>append<sp/>function<sp/>appends<sp/>an<sp/>existing<sp/>chunk<sp/>to<sp/>the<sp/>new<sp/>data.<sp/>The<sp/>create</highlight></codeline>
<codeline lineno="1245"><highlight class="comment">function<sp/>creates<sp/>a<sp/>new<sp/>chunk<sp/>with<sp/>the<sp/>given<sp/>parameters<sp/>and<sp/>appends<sp/>it.<sp/>Type<sp/>is<sp/>the<sp/>4-letter</highlight></codeline>
<codeline lineno="1246"><highlight class="comment">name<sp/>of<sp/>the<sp/>chunk.</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"></highlight></codeline>
<codeline lineno="1248"><highlight class="comment"></highlight></codeline>
<codeline lineno="1249"><highlight class="comment">11.2<sp/>chunks<sp/>in<sp/>infoPng</highlight></codeline>
<codeline lineno="1250"><highlight class="comment">----------------------</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"></highlight></codeline>
<codeline lineno="1252"><highlight class="comment">The<sp/>LodePNG_InfoPng<sp/>struct<sp/>contains<sp/>a<sp/>struct<sp/>LodePNG_UnknownChunks<sp/>in<sp/>it.<sp/>This</highlight></codeline>
<codeline lineno="1253"><highlight class="comment">struct<sp/>has<sp/>3<sp/>buffers<sp/>(each<sp/>with<sp/>size)<sp/>to<sp/>contain<sp/>3<sp/>types<sp/>of<sp/>unknown<sp/>chunks:</highlight></codeline>
<codeline lineno="1254"><highlight class="comment">the<sp/>ones<sp/>that<sp/>come<sp/>before<sp/>the<sp/>PLTE<sp/>chunk,<sp/>the<sp/>ones<sp/>that<sp/>come<sp/>between<sp/>the<sp/>PLTE</highlight></codeline>
<codeline lineno="1255"><highlight class="comment">and<sp/>the<sp/>IDAT<sp/>chunks,<sp/>and<sp/>the<sp/>ones<sp/>that<sp/>come<sp/>after<sp/>the<sp/>IDAT<sp/>chunks.</highlight></codeline>
<codeline lineno="1256"><highlight class="comment">It&apos;s<sp/>necessary<sp/>to<sp/>make<sp/>the<sp/>distionction<sp/>between<sp/>these<sp/>3<sp/>cases<sp/>because<sp/>the<sp/>PNG</highlight></codeline>
<codeline lineno="1257"><highlight class="comment">standard<sp/>forces<sp/>to<sp/>keep<sp/>the<sp/>ordering<sp/>of<sp/>unknown<sp/>chunks<sp/>compared<sp/>to<sp/>the<sp/>critical</highlight></codeline>
<codeline lineno="1258"><highlight class="comment">chunks,<sp/>but<sp/>does<sp/>not<sp/>force<sp/>any<sp/>other<sp/>ordering<sp/>rules.</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"></highlight></codeline>
<codeline lineno="1260"><highlight class="comment">infoPng.unknown_chunks.data[0]<sp/>is<sp/>the<sp/>chunks<sp/>before<sp/>PLTE</highlight></codeline>
<codeline lineno="1261"><highlight class="comment">infoPng.unknown_chunks.data[1]<sp/>is<sp/>the<sp/>chunks<sp/>after<sp/>PLTE,<sp/>before<sp/>IDAT</highlight></codeline>
<codeline lineno="1262"><highlight class="comment">infoPng.unknown_chunks.data[2]<sp/>is<sp/>the<sp/>chunks<sp/>after<sp/>IDAT</highlight></codeline>
<codeline lineno="1263"><highlight class="comment"></highlight></codeline>
<codeline lineno="1264"><highlight class="comment">The<sp/>chunks<sp/>in<sp/>these<sp/>3<sp/>buffers<sp/>can<sp/>be<sp/>iterated<sp/>through<sp/>and<sp/>read<sp/>by<sp/>using<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="1265"><highlight class="comment">way<sp/>described<sp/>in<sp/>the<sp/>previous<sp/>subchapter.</highlight></codeline>
<codeline lineno="1266"><highlight class="comment"></highlight></codeline>
<codeline lineno="1267"><highlight class="comment">When<sp/>using<sp/>the<sp/>decoder<sp/>to<sp/>decode<sp/>a<sp/>PNG,<sp/>you<sp/>can<sp/>make<sp/>it<sp/>store<sp/>all<sp/>unknown<sp/>chunks</highlight></codeline>
<codeline lineno="1268"><highlight class="comment">if<sp/>you<sp/>set<sp/>the<sp/>option<sp/>settings.rememberUnknownChunks<sp/>to<sp/>1.<sp/>By<sp/>default,<sp/>this<sp/>option</highlight></codeline>
<codeline lineno="1269"><highlight class="comment">is<sp/>off<sp/>and<sp/>is<sp/>0.</highlight></codeline>
<codeline lineno="1270"><highlight class="comment"></highlight></codeline>
<codeline lineno="1271"><highlight class="comment">The<sp/>encoder<sp/>will<sp/>always<sp/>encode<sp/>unknown<sp/>chunks<sp/>that<sp/>are<sp/>stored<sp/>in<sp/>the<sp/>infoPng.<sp/>If</highlight></codeline>
<codeline lineno="1272"><highlight class="comment">you<sp/>need<sp/>it<sp/>to<sp/>add<sp/>a<sp/>particular<sp/>chunk<sp/>that<sp/>isn&apos;t<sp/>known<sp/>by<sp/>LodePNG,<sp/>you<sp/>can<sp/>use</highlight></codeline>
<codeline lineno="1273"><highlight class="comment">LodePNG_append_chunk<sp/>or<sp/>LodePNG_create_chunk<sp/>to<sp/>the<sp/>chunk<sp/>data<sp/>in</highlight></codeline>
<codeline lineno="1274"><highlight class="comment">infoPng.unknown_chunks.data[x].</highlight></codeline>
<codeline lineno="1275"><highlight class="comment"></highlight></codeline>
<codeline lineno="1276"><highlight class="comment">Chunks<sp/>that<sp/>are<sp/>known<sp/>by<sp/>LodePNG<sp/>should<sp/>not<sp/>be<sp/>added<sp/>in<sp/>that<sp/>way.<sp/>E.g.<sp/>to<sp/>make</highlight></codeline>
<codeline lineno="1277"><highlight class="comment">LodePNG<sp/>add<sp/>a<sp/>bKGD<sp/>chunk,<sp/>set<sp/>background_defined<sp/>to<sp/>true<sp/>and<sp/>add<sp/>the<sp/>correct</highlight></codeline>
<codeline lineno="1278"><highlight class="comment">parameters<sp/>there<sp/>and<sp/>LodePNG<sp/>will<sp/>generate<sp/>the<sp/>chunk.</highlight></codeline>
<codeline lineno="1279"><highlight class="comment"></highlight></codeline>
<codeline lineno="1280"><highlight class="comment"></highlight></codeline>
<codeline lineno="1281"><highlight class="comment">12.<sp/>compiler<sp/>support</highlight></codeline>
<codeline lineno="1282"><highlight class="comment">--------------------</highlight></codeline>
<codeline lineno="1283"><highlight class="comment"></highlight></codeline>
<codeline lineno="1284"><highlight class="comment">No<sp/>libraries<sp/>other<sp/>than<sp/>the<sp/>current<sp/>standard<sp/>C<sp/>library<sp/>are<sp/>needed<sp/>to<sp/>compile</highlight></codeline>
<codeline lineno="1285"><highlight class="comment">LodePNG.<sp/>For<sp/>the<sp/>C++<sp/>version,<sp/>only<sp/>the<sp/>standard<sp/>C++<sp/>library<sp/>is<sp/>needed<sp/>on<sp/>top.</highlight></codeline>
<codeline lineno="1286"><highlight class="comment">Add<sp/>the<sp/>files<sp/>lodepng.c(pp)<sp/>and<sp/>lodepng.h<sp/>to<sp/>your<sp/>project,<sp/>include</highlight></codeline>
<codeline lineno="1287"><highlight class="comment">lodepng.h<sp/>where<sp/>needed,<sp/>and<sp/>your<sp/>program<sp/>can<sp/>read/write<sp/>PNG<sp/>files.</highlight></codeline>
<codeline lineno="1288"><highlight class="comment"></highlight></codeline>
<codeline lineno="1289"><highlight class="comment">Use<sp/>optimization!<sp/>For<sp/>both<sp/>the<sp/>encoder<sp/>and<sp/>decoder,<sp/>compiling<sp/>with<sp/>the<sp/>best</highlight></codeline>
<codeline lineno="1290"><highlight class="comment">optimizations<sp/>makes<sp/>a<sp/>large<sp/>difference.</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"></highlight></codeline>
<codeline lineno="1292"><highlight class="comment">Make<sp/>sure<sp/>that<sp/>LodePNG<sp/>is<sp/>compiled<sp/>with<sp/>the<sp/>same<sp/>compiler<sp/>of<sp/>the<sp/>same<sp/>version</highlight></codeline>
<codeline lineno="1293"><highlight class="comment">and<sp/>with<sp/>the<sp/>same<sp/>settings<sp/>as<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>program,<sp/>or<sp/>the<sp/>interfaces<sp/>with</highlight></codeline>
<codeline lineno="1294"><highlight class="comment">std::vectors<sp/>and<sp/>std::strings<sp/>in<sp/>C++<sp/>can<sp/>be<sp/>incompatible<sp/>resulting<sp/>in<sp/>bad<sp/>things.</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"></highlight></codeline>
<codeline lineno="1296"><highlight class="comment">CHAR_BITS<sp/>must<sp/>be<sp/>8<sp/>or<sp/>higher,<sp/>because<sp/>LodePNG<sp/>uses<sp/>unsigned<sp/>chars<sp/>for<sp/>octets.</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"></highlight></codeline>
<codeline lineno="1298"><highlight class="comment">*)<sp/>gcc<sp/>and<sp/>g++</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"></highlight></codeline>
<codeline lineno="1300"><highlight class="comment">LodePNG<sp/>is<sp/>developed<sp/>in<sp/>gcc<sp/>so<sp/>this<sp/>compiler<sp/>is<sp/>natively<sp/>supported.<sp/>It<sp/>gives<sp/>no</highlight></codeline>
<codeline lineno="1301"><highlight class="comment">warnings<sp/>with<sp/>compiler<sp/>options<sp/>&quot;-Wall<sp/>-Wextra<sp/>-pedantic<sp/>-ansi&quot;,<sp/>with<sp/>gcc<sp/>and<sp/>g++</highlight></codeline>
<codeline lineno="1302"><highlight class="comment">version<sp/>4.2.2<sp/>on<sp/>Linux.</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"></highlight></codeline>
<codeline lineno="1304"><highlight class="comment">*)<sp/>Mingw<sp/>and<sp/>Bloodshed<sp/>DevC++</highlight></codeline>
<codeline lineno="1305"><highlight class="comment"></highlight></codeline>
<codeline lineno="1306"><highlight class="comment">The<sp/>Mingw<sp/>compiler<sp/>(a<sp/>port<sp/>of<sp/>gcc)<sp/>used<sp/>by<sp/>Bloodshed<sp/>DevC++<sp/>for<sp/>Windows<sp/>is<sp/>fully</highlight></codeline>
<codeline lineno="1307"><highlight class="comment">supported<sp/>by<sp/>LodePNG.</highlight></codeline>
<codeline lineno="1308"><highlight class="comment"></highlight></codeline>
<codeline lineno="1309"><highlight class="comment">*)<sp/>Visual<sp/>Studio<sp/>2005<sp/>and<sp/>Visual<sp/>C++<sp/>2005<sp/>Express<sp/>Edition</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"></highlight></codeline>
<codeline lineno="1311"><highlight class="comment">Versions<sp/>20070604<sp/>up<sp/>to<sp/>20080107<sp/>have<sp/>been<sp/>tested<sp/>on<sp/>VS2005<sp/>and<sp/>work.<sp/>There<sp/>are<sp/>no</highlight></codeline>
<codeline lineno="1312"><highlight class="comment">warnings,<sp/>except<sp/>two<sp/>warnings<sp/>about<sp/>&apos;fopen&apos;<sp/>being<sp/>deprecated.<sp/>&apos;fopen&apos;<sp/>is<sp/>a<sp/>function</highlight></codeline>
<codeline lineno="1313"><highlight class="comment">required<sp/>by<sp/>the<sp/>C<sp/>standard,<sp/>so<sp/>this<sp/>warning<sp/>is<sp/>the<sp/>fault<sp/>of<sp/>VS2005,<sp/>it&apos;s<sp/>nice<sp/>of</highlight></codeline>
<codeline lineno="1314"><highlight class="comment">them<sp/>to<sp/>enforce<sp/>secure<sp/>code,<sp/>however<sp/>the<sp/>multiplatform<sp/>LodePNG<sp/>can&apos;t<sp/>follow<sp/>their</highlight></codeline>
<codeline lineno="1315"><highlight class="comment">non-standard<sp/>extensions.<sp/>LodePNG<sp/>is<sp/>fully<sp/>ISO<sp/>C90<sp/>compliant.</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"></highlight></codeline>
<codeline lineno="1317"><highlight class="comment">If<sp/>you&apos;re<sp/>using<sp/>LodePNG<sp/>in<sp/>VS2005<sp/>and<sp/>don&apos;t<sp/>want<sp/>to<sp/>see<sp/>the<sp/>deprecated<sp/>warnings,</highlight></codeline>
<codeline lineno="1318"><highlight class="comment">put<sp/>this<sp/>on<sp/>top<sp/>of<sp/>lodepng.h<sp/>before<sp/>the<sp/>inclusions:<sp/>#define<sp/>_CRT_SECURE_NO_DEPRECATE</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"></highlight></codeline>
<codeline lineno="1320"><highlight class="comment">*)<sp/>Visual<sp/>Studio<sp/>6.0</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"></highlight></codeline>
<codeline lineno="1322"><highlight class="comment">The<sp/>C++<sp/>version<sp/>of<sp/>LodePNG<sp/>was<sp/>not<sp/>supported<sp/>by<sp/>Visual<sp/>Studio<sp/>6.0<sp/>because<sp/>Visual</highlight></codeline>
<codeline lineno="1323"><highlight class="comment">Studio<sp/>6.0<sp/>doesn&apos;t<sp/>follow<sp/>the<sp/>C++<sp/>standard<sp/>and<sp/>implements<sp/>it<sp/>incorrectly.</highlight></codeline>
<codeline lineno="1324"><highlight class="comment">The<sp/>current<sp/>C<sp/>version<sp/>of<sp/>LodePNG<sp/>has<sp/>not<sp/>been<sp/>tested<sp/>in<sp/>VS6<sp/>but<sp/>may<sp/>work<sp/>now.</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"></highlight></codeline>
<codeline lineno="1326"><highlight class="comment">*)<sp/>Comeau<sp/>C/C++</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"></highlight></codeline>
<codeline lineno="1328"><highlight class="comment">Vesion<sp/>20070107<sp/>compiles<sp/>without<sp/>problems<sp/>on<sp/>the<sp/>Comeau<sp/>C/C++<sp/>Online<sp/>Test<sp/>Drive</highlight></codeline>
<codeline lineno="1329"><highlight class="comment">at<sp/>http://www.comeaucomputing.com/tryitout<sp/>in<sp/>both<sp/>C90<sp/>and<sp/>C++<sp/>mode.</highlight></codeline>
<codeline lineno="1330"><highlight class="comment"></highlight></codeline>
<codeline lineno="1331"><highlight class="comment">*)<sp/>Compilers<sp/>on<sp/>Macintosh</highlight></codeline>
<codeline lineno="1332"><highlight class="comment"></highlight></codeline>
<codeline lineno="1333"><highlight class="comment">I&apos;d<sp/>love<sp/>to<sp/>support<sp/>Macintosh<sp/>but<sp/>don&apos;t<sp/>have<sp/>one<sp/>available<sp/>to<sp/>test<sp/>it<sp/>on.</highlight></codeline>
<codeline lineno="1334"><highlight class="comment">If<sp/>it<sp/>doesn&apos;t<sp/>work<sp/>with<sp/>your<sp/>compiler,<sp/>maybe<sp/>it<sp/>can<sp/>be<sp/>gotten<sp/>to<sp/>work<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1335"><highlight class="comment">gcc<sp/>compiler<sp/>for<sp/>Macintosh.<sp/>Someone<sp/>reported<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>work<sp/>well<sp/>at<sp/>all</highlight></codeline>
<codeline lineno="1336"><highlight class="comment">for<sp/>Macintosh.<sp/>All<sp/>information<sp/>on<sp/>attempts<sp/>to<sp/>get<sp/>it<sp/>to<sp/>work<sp/>on<sp/>Mac<sp/>is<sp/>welcome.</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"></highlight></codeline>
<codeline lineno="1338"><highlight class="comment">*)<sp/>Other<sp/>Compilers</highlight></codeline>
<codeline lineno="1339"><highlight class="comment"></highlight></codeline>
<codeline lineno="1340"><highlight class="comment">If<sp/>you<sp/>encounter<sp/>problems<sp/>on<sp/>other<sp/>compilers,<sp/>I&apos;m<sp/>happy<sp/>to<sp/>help<sp/>out<sp/>make<sp/>LodePNG</highlight></codeline>
<codeline lineno="1341"><highlight class="comment">support<sp/>the<sp/>compiler<sp/>if<sp/>it<sp/>supports<sp/>the<sp/>ISO<sp/>C90<sp/>and<sp/>C++<sp/>standard<sp/>well<sp/>enough.<sp/>If</highlight></codeline>
<codeline lineno="1342"><highlight class="comment">the<sp/>required<sp/>modification<sp/>to<sp/>support<sp/>the<sp/>compiler<sp/>requires<sp/>using<sp/>non<sp/>standard<sp/>or</highlight></codeline>
<codeline lineno="1343"><highlight class="comment">lesser<sp/>C/C++<sp/>code<sp/>or<sp/>headers,<sp/>I<sp/>won&apos;t<sp/>support<sp/>it.</highlight></codeline>
<codeline lineno="1344"><highlight class="comment"></highlight></codeline>
<codeline lineno="1345"><highlight class="comment"></highlight></codeline>
<codeline lineno="1346"><highlight class="comment">13.<sp/>examples</highlight></codeline>
<codeline lineno="1347"><highlight class="comment">------------</highlight></codeline>
<codeline lineno="1348"><highlight class="comment"></highlight></codeline>
<codeline lineno="1349"><highlight class="comment">This<sp/>decoder<sp/>and<sp/>encoder<sp/>example<sp/>show<sp/>the<sp/>most<sp/>basic<sp/>usage<sp/>of<sp/>LodePNG<sp/>(using<sp/>the</highlight></codeline>
<codeline lineno="1350"><highlight class="comment">classes,<sp/>not<sp/>the<sp/>simple<sp/>functions,<sp/>which<sp/>would<sp/>be<sp/>trivial)</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"></highlight></codeline>
<codeline lineno="1352"><highlight class="comment">More<sp/>complex<sp/>examples<sp/>can<sp/>be<sp/>found<sp/>in:</highlight></codeline>
<codeline lineno="1353"><highlight class="comment">-lodepng_examples.c:<sp/>9<sp/>different<sp/>examples<sp/>in<sp/>C,<sp/>such<sp/>as<sp/>showing<sp/>the<sp/>image<sp/>with<sp/>SDL,<sp/>...</highlight></codeline>
<codeline lineno="1354"><highlight class="comment">-lodepng_examples.cpp:<sp/>the<sp/>exact<sp/>same<sp/>examples<sp/>in<sp/>C++<sp/>using<sp/>the<sp/>C++<sp/>wrapper<sp/>of<sp/>LodePNG</highlight></codeline>
<codeline lineno="1355"><highlight class="comment"></highlight></codeline>
<codeline lineno="1356"><highlight class="comment"></highlight></codeline>
<codeline lineno="1357"><highlight class="comment">13.1.<sp/>decoder<sp/>C++<sp/>example</highlight></codeline>
<codeline lineno="1358"><highlight class="comment">-------------------------</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"></highlight></codeline>
<codeline lineno="1361"><highlight class="comment">#include<sp/>&quot;lodepng.h&quot;</highlight></codeline>
<codeline lineno="1362"><highlight class="comment">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline lineno="1363"><highlight class="comment"></highlight></codeline>
<codeline lineno="1364"><highlight class="comment">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])</highlight></codeline>
<codeline lineno="1365"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1366"><highlight class="comment"><sp/><sp/>const<sp/>char*<sp/>filename<sp/>=<sp/>argc<sp/>&gt;<sp/>1<sp/>?<sp/>argv[1]<sp/>:<sp/>&quot;test.png&quot;;</highlight></codeline>
<codeline lineno="1367"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1368"><highlight class="comment"><sp/><sp/>//load<sp/>and<sp/>decode</highlight></codeline>
<codeline lineno="1369"><highlight class="comment"><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>buffer,<sp/>image;</highlight></codeline>
<codeline lineno="1370"><highlight class="comment"><sp/><sp/>LodePNG::loadFile(buffer,<sp/>filename);<sp/>//load<sp/>the<sp/>image<sp/>file<sp/>with<sp/>given<sp/>filename</highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/>LodePNG::Decoder<sp/>decoder;</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/><sp/>decoder.decode(image,<sp/>buffer.size()<sp/>?<sp/>&amp;buffer[0]<sp/>:<sp/>0,<sp/>(unsigned)buffer.size());<sp/>//decode<sp/>the<sp/>png</highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1374"><highlight class="comment"><sp/><sp/>//if<sp/>there&apos;s<sp/>an<sp/>error,<sp/>display<sp/>it</highlight></codeline>
<codeline lineno="1375"><highlight class="comment"><sp/><sp/>if(decoder.hasError())<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;error:<sp/>&quot;<sp/>&lt;&lt;<sp/>decoder.getError()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/><sp/>//the<sp/>pixels<sp/>are<sp/>now<sp/>in<sp/>the<sp/>vector<sp/>&quot;image&quot;,<sp/>use<sp/>it<sp/>as<sp/>texture,<sp/>draw<sp/>it,<sp/>...</highlight></codeline>
<codeline lineno="1378"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"></highlight></codeline>
<codeline lineno="1380"><highlight class="comment">//alternative<sp/>version<sp/>using<sp/>the<sp/>&quot;simple&quot;<sp/>function</highlight></codeline>
<codeline lineno="1381"><highlight class="comment">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])</highlight></codeline>
<codeline lineno="1382"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1383"><highlight class="comment"><sp/><sp/>const<sp/>char*<sp/>filename<sp/>=<sp/>argc<sp/>&gt;<sp/>1<sp/>?<sp/>argv[1]<sp/>:<sp/>&quot;test.png&quot;;</highlight></codeline>
<codeline lineno="1384"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1385"><highlight class="comment"><sp/><sp/>//load<sp/>and<sp/>decode</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>image;</highlight></codeline>
<codeline lineno="1387"><highlight class="comment"><sp/><sp/>unsigned<sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"><sp/><sp/>unsigned<sp/>error<sp/>=<sp/>LodePNG::decode(image,<sp/>w,<sp/>h,<sp/>filename);</highlight></codeline>
<codeline lineno="1389"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1390"><highlight class="comment"><sp/><sp/>//if<sp/>there&apos;s<sp/>an<sp/>error,<sp/>display<sp/>it</highlight></codeline>
<codeline lineno="1391"><highlight class="comment"><sp/><sp/>if(error<sp/>!=<sp/>0)<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;error:<sp/>&quot;<sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/>//the<sp/>pixels<sp/>are<sp/>now<sp/>in<sp/>the<sp/>vector<sp/>&quot;image&quot;,<sp/>use<sp/>it<sp/>as<sp/>texture,<sp/>draw<sp/>it,<sp/>...</highlight></codeline>
<codeline lineno="1394"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1396"><highlight class="comment"></highlight></codeline>
<codeline lineno="1397"><highlight class="comment"></highlight></codeline>
<codeline lineno="1398"><highlight class="comment">13.2<sp/>encoder<sp/>C++<sp/>example</highlight></codeline>
<codeline lineno="1399"><highlight class="comment">------------------------</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"></highlight></codeline>
<codeline lineno="1402"><highlight class="comment">#include<sp/>&quot;lodepng.h&quot;</highlight></codeline>
<codeline lineno="1403"><highlight class="comment">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline lineno="1404"><highlight class="comment"></highlight></codeline>
<codeline lineno="1405"><highlight class="comment">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])</highlight></codeline>
<codeline lineno="1406"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/><sp/>//check<sp/>if<sp/>user<sp/>gave<sp/>a<sp/>filename</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/><sp/>if(argc<sp/>&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="1409"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;please<sp/>provide<sp/>a<sp/>filename<sp/>to<sp/>save<sp/>to\n&quot;;</highlight></codeline>
<codeline lineno="1411"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="1412"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1414"><highlight class="comment"><sp/><sp/>//generate<sp/>some<sp/>image</highlight></codeline>
<codeline lineno="1415"><highlight class="comment"><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>image;</highlight></codeline>
<codeline lineno="1416"><highlight class="comment"><sp/><sp/>image.resize(512<sp/>*<sp/>512<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="1417"><highlight class="comment"><sp/><sp/>for(unsigned<sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>512;<sp/>y++)</highlight></codeline>
<codeline lineno="1418"><highlight class="comment"><sp/><sp/>for(unsigned<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>512;<sp/>x++)</highlight></codeline>
<codeline lineno="1419"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/><sp/><sp/><sp/>image[4<sp/>*<sp/>512<sp/>*<sp/>y<sp/>+<sp/>4<sp/>*<sp/>x<sp/>+<sp/>0]<sp/>=<sp/>255<sp/>*<sp/>!(x<sp/>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/><sp/><sp/>image[4<sp/>*<sp/>512<sp/>*<sp/>y<sp/>+<sp/>4<sp/>*<sp/>x<sp/>+<sp/>1]<sp/>=<sp/>x<sp/>^<sp/>y;</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/><sp/><sp/><sp/>image[4<sp/>*<sp/>512<sp/>*<sp/>y<sp/>+<sp/>4<sp/>*<sp/>x<sp/>+<sp/>2]<sp/>=<sp/>x<sp/>|<sp/>y;</highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/><sp/><sp/><sp/>image[4<sp/>*<sp/>512<sp/>*<sp/>y<sp/>+<sp/>4<sp/>*<sp/>x<sp/>+<sp/>3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1424"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1426"><highlight class="comment"><sp/><sp/>//encode<sp/>and<sp/>save</highlight></codeline>
<codeline lineno="1427"><highlight class="comment"><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/><sp/>LodePNG::Encoder<sp/>encoder;</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/>encoder.encode(buffer,<sp/>image,<sp/>512,<sp/>512);</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/><sp/>LodePNG::saveFile(buffer,<sp/>argv[1]);</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/>//the<sp/>same<sp/>as<sp/>the<sp/>4<sp/>lines<sp/>of<sp/>code<sp/>above,<sp/>but<sp/>in<sp/>1<sp/>call:</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/><sp/>//LodePNG::encode(argv[1],<sp/>image,<sp/>512,<sp/>512);</highlight></codeline>
<codeline lineno="1434"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"></highlight></codeline>
<codeline lineno="1437"><highlight class="comment"></highlight></codeline>
<codeline lineno="1438"><highlight class="comment">13.3<sp/>Decoder<sp/>C<sp/>example</highlight></codeline>
<codeline lineno="1439"><highlight class="comment">----------------------</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"></highlight></codeline>
<codeline lineno="1441"><highlight class="comment">This<sp/>example<sp/>loads<sp/>the<sp/>PNG<sp/>in<sp/>1<sp/>function<sp/>call</highlight></codeline>
<codeline lineno="1442"><highlight class="comment"></highlight></codeline>
<codeline lineno="1443"><highlight class="comment">#include<sp/>&quot;lodepng.h&quot;</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"></highlight></codeline>
<codeline lineno="1445"><highlight class="comment">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])</highlight></codeline>
<codeline lineno="1446"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/><sp/>unsigned<sp/>error;</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/><sp/>unsigned<sp/>char*<sp/>image;</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/><sp/>size_t<sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="1450"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/><sp/>if(argc<sp/>&lt;=<sp/>1)<sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/><sp/>error<sp/>=<sp/>LodePNG_decode3(&amp;image,<sp/>&amp;w,<sp/>&amp;h,<sp/>filename);</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/><sp/>free(image);</highlight></codeline>
<codeline lineno="1456"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1457"><highlight class="comment"></highlight></codeline>
<codeline lineno="1458"><highlight class="comment"></highlight></codeline>
<codeline lineno="1459"><highlight class="comment">14.<sp/>LodeZlib</highlight></codeline>
<codeline lineno="1460"><highlight class="comment">------------</highlight></codeline>
<codeline lineno="1461"><highlight class="comment"></highlight></codeline>
<codeline lineno="1462"><highlight class="comment">Also<sp/>available<sp/>in<sp/>the<sp/>interface<sp/>is<sp/>LodeZlib.<sp/>Both<sp/>C<sp/>and<sp/>C++<sp/>versions<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="1463"><highlight class="comment">functions<sp/>are<sp/>available.<sp/>The<sp/>interface<sp/>is<sp/>similar<sp/>to<sp/>that<sp/>of<sp/>the<sp/>&quot;simple&quot;<sp/>PNG</highlight></codeline>
<codeline lineno="1464"><highlight class="comment">encoding<sp/>and<sp/>decoding<sp/>functions.</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"></highlight></codeline>
<codeline lineno="1466"><highlight class="comment">LodeZlib<sp/>can<sp/>be<sp/>used<sp/>to<sp/>zlib<sp/>compress<sp/>and<sp/>decompress<sp/>a<sp/>buffer.<sp/>It<sp/>cannot<sp/>be</highlight></codeline>
<codeline lineno="1467"><highlight class="comment">used<sp/>to<sp/>create<sp/>gzip<sp/>files<sp/>however.<sp/>Also,<sp/>it<sp/>only<sp/>supports<sp/>the<sp/>part<sp/>of<sp/>zlib</highlight></codeline>
<codeline lineno="1468"><highlight class="comment">that<sp/>is<sp/>required<sp/>for<sp/>PNG,<sp/>it<sp/>does<sp/>not<sp/>support<sp/>compression<sp/>and<sp/>decompression</highlight></codeline>
<codeline lineno="1469"><highlight class="comment">with<sp/>dictionaries.</highlight></codeline>
<codeline lineno="1470"><highlight class="comment"></highlight></codeline>
<codeline lineno="1471"><highlight class="comment"></highlight></codeline>
<codeline lineno="1472"><highlight class="comment">15.<sp/>changes</highlight></codeline>
<codeline lineno="1473"><highlight class="comment">-----------</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"></highlight></codeline>
<codeline lineno="1475"><highlight class="comment">The<sp/>version<sp/>number<sp/>of<sp/>LodePNG<sp/>is<sp/>the<sp/>date<sp/>of<sp/>the<sp/>change<sp/>given<sp/>in<sp/>the<sp/>format</highlight></codeline>
<codeline lineno="1476"><highlight class="comment">yyyymmdd.</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"></highlight></codeline>
<codeline lineno="1478"><highlight class="comment">Some<sp/>changes<sp/>aren&apos;t<sp/>backwards<sp/>compatible.<sp/>Those<sp/>are<sp/>indicated<sp/>with<sp/>a<sp/>(!)</highlight></codeline>
<codeline lineno="1479"><highlight class="comment">symbol.</highlight></codeline>
<codeline lineno="1480"><highlight class="comment"></highlight></codeline>
<codeline lineno="1481"><highlight class="comment">*)<sp/>02<sp/>sep<sp/>2008:<sp/>fixed<sp/>bug<sp/>where<sp/>it<sp/>could<sp/>create<sp/>empty<sp/>tree<sp/>that<sp/>linux<sp/>apps<sp/>could</highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/><sp/><sp/>read<sp/>by<sp/>ignoring<sp/>the<sp/>problem<sp/>but<sp/>windows<sp/>apps<sp/>couldn&apos;t.</highlight></codeline>
<codeline lineno="1483"><highlight class="comment">*)<sp/>06<sp/>jun<sp/>2008:<sp/>added<sp/>more<sp/>error<sp/>checks<sp/>for<sp/>out<sp/>of<sp/>memory<sp/>cases.</highlight></codeline>
<codeline lineno="1484"><highlight class="comment">*)<sp/>26<sp/>apr<sp/>2008:<sp/>added<sp/>a<sp/>few<sp/>more<sp/>checks<sp/>here<sp/>and<sp/>there<sp/>to<sp/>ensure<sp/>more<sp/>safety.</highlight></codeline>
<codeline lineno="1485"><highlight class="comment">*)<sp/>06<sp/>mar<sp/>2008:<sp/>crash<sp/>with<sp/>encoding<sp/>of<sp/>strings<sp/>fixed</highlight></codeline>
<codeline lineno="1486"><highlight class="comment">*)<sp/>02<sp/>feb<sp/>2008:<sp/>support<sp/>for<sp/>international<sp/>text<sp/>chunks<sp/>added<sp/>(iTXt)</highlight></codeline>
<codeline lineno="1487"><highlight class="comment">*)<sp/>23<sp/>jan<sp/>2008:<sp/>small<sp/>cleanups,<sp/>and<sp/>#defines<sp/>to<sp/>divide<sp/>code<sp/>in<sp/>sections</highlight></codeline>
<codeline lineno="1488"><highlight class="comment">*)<sp/>20<sp/>jan<sp/>2008:<sp/>support<sp/>for<sp/>unknown<sp/>chunks<sp/>allowing<sp/>using<sp/>LodePNG<sp/>for<sp/>an<sp/>editor.</highlight></codeline>
<codeline lineno="1489"><highlight class="comment">*)<sp/>18<sp/>jan<sp/>2008:<sp/>support<sp/>for<sp/>tIME<sp/>and<sp/>pHYs<sp/>chunks<sp/>added<sp/>to<sp/>encoder<sp/>and<sp/>decoder.</highlight></codeline>
<codeline lineno="1490"><highlight class="comment">*)<sp/>17<sp/>jan<sp/>2008:<sp/>ability<sp/>to<sp/>encode<sp/>and<sp/>decode<sp/>compressed<sp/>zTXt<sp/>chunks<sp/>added</highlight></codeline>
<codeline lineno="1491"><highlight class="comment"><sp/><sp/><sp/><sp/>Also<sp/>vareous<sp/>fixes,<sp/>such<sp/>as<sp/>in<sp/>the<sp/>deflate<sp/>and<sp/>the<sp/>padding<sp/>bits<sp/>code.</highlight></codeline>
<codeline lineno="1492"><highlight class="comment">*)<sp/>13<sp/>jan<sp/>2008:<sp/>Added<sp/>ability<sp/>to<sp/>encode<sp/>Adam7-interlaced<sp/>images.<sp/>Improved</highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/><sp/><sp/><sp/>filtering<sp/>code<sp/>of<sp/>encoder.</highlight></codeline>
<codeline lineno="1494"><highlight class="comment">*)<sp/>07<sp/>jan<sp/>2008:<sp/>(!)<sp/>changed<sp/>LodePNG<sp/>to<sp/>use<sp/>ISO<sp/>C90<sp/>instead<sp/>of<sp/>C++.<sp/>A</highlight></codeline>
<codeline lineno="1495"><highlight class="comment"><sp/><sp/><sp/><sp/>C++<sp/>wrapper<sp/>around<sp/>this<sp/>provides<sp/>an<sp/>interface<sp/>almost<sp/>identical<sp/>to<sp/>before.</highlight></codeline>
<codeline lineno="1496"><highlight class="comment"><sp/><sp/><sp/><sp/>Having<sp/>LodePNG<sp/>be<sp/>pure<sp/>ISO<sp/>C90<sp/>makes<sp/>it<sp/>more<sp/>portable.<sp/>The<sp/>C<sp/>and<sp/>C++<sp/>code</highlight></codeline>
<codeline lineno="1497"><highlight class="comment"><sp/><sp/><sp/><sp/>are<sp/>together<sp/>in<sp/>these<sp/>files<sp/>but<sp/>it<sp/>works<sp/>both<sp/>for<sp/>C<sp/>and<sp/>C++<sp/>compilers.</highlight></codeline>
<codeline lineno="1498"><highlight class="comment">*)<sp/>29<sp/>dec<sp/>2007:<sp/>(!)<sp/>changed<sp/>most<sp/>integer<sp/>types<sp/>to<sp/>unsigned<sp/>int<sp/>+<sp/>other<sp/>tweaks</highlight></codeline>
<codeline lineno="1499"><highlight class="comment">*)<sp/>30<sp/>aug<sp/>2007:<sp/>bug<sp/>fixed<sp/>which<sp/>makes<sp/>this<sp/>Borland<sp/>C++<sp/>compatible</highlight></codeline>
<codeline lineno="1500"><highlight class="comment">*)<sp/>09<sp/>aug<sp/>2007:<sp/>some<sp/>VS2005<sp/>warnings<sp/>removed<sp/>again</highlight></codeline>
<codeline lineno="1501"><highlight class="comment">*)<sp/>21<sp/>jul<sp/>2007:<sp/>deflate<sp/>code<sp/>placed<sp/>in<sp/>new<sp/>namespace<sp/>separate<sp/>from<sp/>zlib<sp/>code</highlight></codeline>
<codeline lineno="1502"><highlight class="comment">*)<sp/>08<sp/>jun<sp/>2007:<sp/>fixed<sp/>bug<sp/>with<sp/>2-<sp/>and<sp/>4-bit<sp/>color,<sp/>and<sp/>small<sp/>interlaced<sp/>images</highlight></codeline>
<codeline lineno="1503"><highlight class="comment">*)<sp/>04<sp/>jun<sp/>2007:<sp/>improved<sp/>support<sp/>for<sp/>Visual<sp/>Studio<sp/>2005:<sp/>crash<sp/>with<sp/>accessing</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/><sp/><sp/><sp/>invalid<sp/>std::vector<sp/>element<sp/>[0]<sp/>fixed,<sp/>and<sp/>level<sp/>3<sp/>and<sp/>4<sp/>warnings<sp/>removed</highlight></codeline>
<codeline lineno="1505"><highlight class="comment">*)<sp/>02<sp/>jun<sp/>2007:<sp/>made<sp/>the<sp/>encoder<sp/>add<sp/>a<sp/>tag<sp/>with<sp/>version<sp/>by<sp/>default</highlight></codeline>
<codeline lineno="1506"><highlight class="comment">*)<sp/>27<sp/>may<sp/>2007:<sp/>zlib<sp/>and<sp/>png<sp/>code<sp/>separated<sp/>(but<sp/>still<sp/>in<sp/>the<sp/>same<sp/>file),</highlight></codeline>
<codeline lineno="1507"><highlight class="comment"><sp/><sp/><sp/><sp/>simple<sp/>encoder/decoder<sp/>functions<sp/>added<sp/>for<sp/>more<sp/>simple<sp/>usage<sp/>cases</highlight></codeline>
<codeline lineno="1508"><highlight class="comment">*)<sp/>19<sp/>may<sp/>2007:<sp/>minor<sp/>fixes,<sp/>some<sp/>code<sp/>cleaning,<sp/>new<sp/>error<sp/>added<sp/>(error<sp/>69),</highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/><sp/><sp/><sp/>moved<sp/>some<sp/>examples<sp/>from<sp/>here<sp/>to<sp/>lodepng_examples.cpp</highlight></codeline>
<codeline lineno="1510"><highlight class="comment">*)<sp/>12<sp/>may<sp/>2007:<sp/>palette<sp/>decoding<sp/>bug<sp/>fixed</highlight></codeline>
<codeline lineno="1511"><highlight class="comment">*)<sp/>24<sp/>apr<sp/>2007:<sp/>changed<sp/>the<sp/>license<sp/>from<sp/>BSD<sp/>to<sp/>the<sp/>zlib<sp/>license</highlight></codeline>
<codeline lineno="1512"><highlight class="comment">*)<sp/>11<sp/>mar<sp/>2007:<sp/>very<sp/>simple<sp/>addition:<sp/>ability<sp/>to<sp/>encode<sp/>bKGD<sp/>chunks.</highlight></codeline>
<codeline lineno="1513"><highlight class="comment">*)<sp/>04<sp/>mar<sp/>2007:<sp/>(!)<sp/>tEXt<sp/>chunk<sp/>related<sp/>fixes,<sp/>and<sp/>support<sp/>for<sp/>encoding</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/><sp/><sp/><sp/>palettized<sp/>PNG<sp/>images.<sp/>Plus<sp/>little<sp/>interface<sp/>change<sp/>with<sp/>palette<sp/>and<sp/>texts.</highlight></codeline>
<codeline lineno="1515"><highlight class="comment">*)<sp/>03<sp/>mar<sp/>2007:<sp/>Made<sp/>it<sp/>encode<sp/>dynamic<sp/>Huffman<sp/>shorter<sp/><sp/>with<sp/>repeat<sp/>codes.</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/><sp/><sp/>Fixed<sp/>a<sp/>bug<sp/>where<sp/>the<sp/>end<sp/>code<sp/>of<sp/>a<sp/>block<sp/>had<sp/>length<sp/>0<sp/>in<sp/>the<sp/>Huffman<sp/>tree.</highlight></codeline>
<codeline lineno="1517"><highlight class="comment">*)<sp/>26<sp/>feb<sp/>2007:<sp/>Huffman<sp/>compression<sp/>with<sp/>dynamic<sp/>trees<sp/>(BTYPE<sp/>2)<sp/>now<sp/>implemented</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>supported<sp/>by<sp/>the<sp/>encoder,<sp/>resulting<sp/>in<sp/>smaller<sp/>PNGs<sp/>at<sp/>the<sp/>output.</highlight></codeline>
<codeline lineno="1519"><highlight class="comment">*)<sp/>27<sp/>jan<sp/>2007:<sp/>Made<sp/>the<sp/>Adler-32<sp/>test<sp/>faster<sp/>so<sp/>that<sp/>a<sp/>timewaste<sp/>is<sp/>gone.</highlight></codeline>
<codeline lineno="1520"><highlight class="comment">*)<sp/>24<sp/>jan<sp/>2007:<sp/>gave<sp/>encoder<sp/>an<sp/>error<sp/>interface.<sp/>Added<sp/>color<sp/>conversion<sp/>from<sp/>any</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/><sp/><sp/><sp/>greyscale<sp/>type<sp/>to<sp/>8-bit<sp/>greyscale<sp/>with<sp/>or<sp/>without<sp/>alpha.</highlight></codeline>
<codeline lineno="1522"><highlight class="comment">*)<sp/>21<sp/>jan<sp/>2007:<sp/>(!)<sp/>Totally<sp/>changed<sp/>the<sp/>interface.<sp/>It<sp/>allows<sp/>more<sp/>color<sp/>types</highlight></codeline>
<codeline lineno="1523"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>convert<sp/>to<sp/>and<sp/>is<sp/>more<sp/>uniform.<sp/>See<sp/>the<sp/>manual<sp/>for<sp/>how<sp/>it<sp/>works<sp/>now.</highlight></codeline>
<codeline lineno="1524"><highlight class="comment">*)<sp/>07<sp/>jan<sp/>2007:<sp/>Some<sp/>cleanup<sp/>&amp;<sp/>fixes,<sp/>and<sp/>a<sp/>few<sp/>changes<sp/>over<sp/>the<sp/>last<sp/>days:</highlight></codeline>
<codeline lineno="1525"><highlight class="comment"><sp/><sp/><sp/><sp/>encode/decode<sp/>custom<sp/>tEXt<sp/>chunks,<sp/>separate<sp/>classes<sp/>for<sp/>zlib<sp/>&amp;<sp/>deflate,<sp/>and</highlight></codeline>
<codeline lineno="1526"><highlight class="comment"><sp/><sp/><sp/><sp/>at<sp/>last<sp/>made<sp/>the<sp/>decoder<sp/>give<sp/>errors<sp/>for<sp/>incorrect<sp/>Adler32<sp/>or<sp/>Crc.</highlight></codeline>
<codeline lineno="1527"><highlight class="comment">*)<sp/>01<sp/>jan<sp/>2007:<sp/>Fixed<sp/>bug<sp/>with<sp/>encoding<sp/>PNGs<sp/>with<sp/>less<sp/>than<sp/>8<sp/>bits<sp/>per<sp/>channel.</highlight></codeline>
<codeline lineno="1528"><highlight class="comment">*)<sp/>29<sp/>dec<sp/>2006:<sp/>Added<sp/>support<sp/>for<sp/>encoding<sp/>images<sp/>without<sp/>alpha<sp/>channel,<sp/>and</highlight></codeline>
<codeline lineno="1529"><highlight class="comment"><sp/><sp/><sp/><sp/>cleaned<sp/>out<sp/>code<sp/>as<sp/>well<sp/>as<sp/>making<sp/>certain<sp/>parts<sp/>faster.</highlight></codeline>
<codeline lineno="1530"><highlight class="comment">*)<sp/>28<sp/>dec<sp/>2006:<sp/>Added<sp/>&quot;Settings&quot;<sp/>to<sp/>the<sp/>encoder.</highlight></codeline>
<codeline lineno="1531"><highlight class="comment">*)<sp/>26<sp/>dec<sp/>2006:<sp/>The<sp/>encoder<sp/>now<sp/>does<sp/>LZ77<sp/>encoding<sp/>and<sp/>produces<sp/>much<sp/>smaller<sp/>files<sp/>now.</highlight></codeline>
<codeline lineno="1532"><highlight class="comment"><sp/><sp/><sp/><sp/>Removed<sp/>some<sp/>code<sp/>duplication<sp/>in<sp/>the<sp/>decoder.<sp/>Fixed<sp/>little<sp/>bug<sp/>in<sp/>an<sp/>example.</highlight></codeline>
<codeline lineno="1533"><highlight class="comment">*)<sp/>09<sp/>dec<sp/>2006:<sp/>(!)<sp/>Placed<sp/>output<sp/>parameters<sp/>of<sp/>public<sp/>functions<sp/>as<sp/>first<sp/>parameter.</highlight></codeline>
<codeline lineno="1534"><highlight class="comment"><sp/><sp/><sp/><sp/>Fixed<sp/>a<sp/>bug<sp/>of<sp/>the<sp/>decoder<sp/>with<sp/>16-bit<sp/>per<sp/>color.</highlight></codeline>
<codeline lineno="1535"><highlight class="comment">*)<sp/>15<sp/>okt<sp/>2006:<sp/>Changed<sp/>documentation<sp/>structure</highlight></codeline>
<codeline lineno="1536"><highlight class="comment">*)<sp/>09<sp/>okt<sp/>2006:<sp/>Encoder<sp/>class<sp/>added.<sp/>It<sp/>encodes<sp/>a<sp/>valid<sp/>PNG<sp/>image<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="1537"><highlight class="comment"><sp/><sp/><sp/><sp/>given<sp/>image<sp/>buffer,<sp/>however<sp/>for<sp/>now<sp/>it&apos;s<sp/>not<sp/>compressed.</highlight></codeline>
<codeline lineno="1538"><highlight class="comment">*)<sp/>08<sp/>sep<sp/>2006:<sp/>(!)<sp/>Changed<sp/>to<sp/>interface<sp/>with<sp/>a<sp/>Decoder<sp/>class</highlight></codeline>
<codeline lineno="1539"><highlight class="comment">*)<sp/>30<sp/>jul<sp/>2006:<sp/>(!)<sp/>LodePNG_InfoPng<sp/>,<sp/>width<sp/>and<sp/>height<sp/>are<sp/>now<sp/>retrieved<sp/>in<sp/>different</highlight></codeline>
<codeline lineno="1540"><highlight class="comment"><sp/><sp/><sp/><sp/>way.<sp/>Renamed<sp/>decodePNG<sp/>to<sp/>decodePNGGeneric.</highlight></codeline>
<codeline lineno="1541"><highlight class="comment">*)<sp/>29<sp/>jul<sp/>2006:<sp/>(!)<sp/>Changed<sp/>the<sp/>interface:<sp/>image<sp/>info<sp/>is<sp/>now<sp/>returned<sp/>as<sp/>a</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>of<sp/>type<sp/>LodePNG::LodePNG_Info,<sp/>instead<sp/>of<sp/>a<sp/>vector,<sp/>which<sp/>was<sp/>a<sp/>bit<sp/>clumsy.</highlight></codeline>
<codeline lineno="1543"><highlight class="comment">*)<sp/>28<sp/>jul<sp/>2006:<sp/>Cleaned<sp/>the<sp/>code<sp/>and<sp/>added<sp/>new<sp/>error<sp/>checks.</highlight></codeline>
<codeline lineno="1544"><highlight class="comment"><sp/><sp/><sp/><sp/>Corrected<sp/>terminology<sp/>&quot;deflate&quot;<sp/>into<sp/>&quot;inflate&quot;.</highlight></codeline>
<codeline lineno="1545"><highlight class="comment">*)<sp/>23<sp/>jun<sp/>2006:<sp/>Added<sp/>SDL<sp/>example<sp/>in<sp/>the<sp/>documentation<sp/>in<sp/>the<sp/>header,<sp/>this</highlight></codeline>
<codeline lineno="1546"><highlight class="comment"><sp/><sp/><sp/><sp/>example<sp/>allows<sp/>easy<sp/>debugging<sp/>by<sp/>displaying<sp/>the<sp/>PNG<sp/>and<sp/>its<sp/>transparency.</highlight></codeline>
<codeline lineno="1547"><highlight class="comment">*)<sp/>22<sp/>jun<sp/>2006:<sp/>(!)<sp/>Changed<sp/>way<sp/>to<sp/>obtain<sp/>error<sp/>value.<sp/>Added</highlight></codeline>
<codeline lineno="1548"><highlight class="comment"><sp/><sp/><sp/><sp/>loadFile<sp/>function<sp/>for<sp/>convenience.<sp/>Made<sp/>decodePNG32<sp/>faster.</highlight></codeline>
<codeline lineno="1549"><highlight class="comment">*)<sp/>21<sp/>jun<sp/>2006:<sp/>(!)<sp/>Changed<sp/>type<sp/>of<sp/>info<sp/>vector<sp/>to<sp/>unsigned.</highlight></codeline>
<codeline lineno="1550"><highlight class="comment"><sp/><sp/><sp/><sp/>Changed<sp/>position<sp/>of<sp/>palette<sp/>in<sp/>info<sp/>vector.<sp/>Fixed<sp/>an<sp/>important<sp/>bug<sp/>that</highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/><sp/><sp/><sp/>happened<sp/>on<sp/>PNGs<sp/>with<sp/>an<sp/>uncompressed<sp/>block.</highlight></codeline>
<codeline lineno="1552"><highlight class="comment">*)<sp/>16<sp/>jun<sp/>2006:<sp/>Internally<sp/>changed<sp/>unsigned<sp/>into<sp/>unsigned<sp/>where</highlight></codeline>
<codeline lineno="1553"><highlight class="comment"><sp/><sp/><sp/><sp/>needed,<sp/>and<sp/>performed<sp/>some<sp/>optimizations.</highlight></codeline>
<codeline lineno="1554"><highlight class="comment">*)<sp/>07<sp/>jun<sp/>2006:<sp/>(!)<sp/>Renamed<sp/>functions<sp/>to<sp/>decodePNG<sp/>and<sp/>placed<sp/>them</highlight></codeline>
<codeline lineno="1555"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>LodePNG<sp/>namespace.<sp/>Changed<sp/>the<sp/>order<sp/>of<sp/>the<sp/>parameters.<sp/>Rewrote<sp/>the</highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/><sp/><sp/><sp/>documentation<sp/>in<sp/>the<sp/>header.<sp/>Renamed<sp/>files<sp/>to<sp/>lodepng.cpp<sp/>and<sp/>lodepng.h</highlight></codeline>
<codeline lineno="1557"><highlight class="comment">*)<sp/>22<sp/>apr<sp/>2006:<sp/>Optimized<sp/>and<sp/>improved<sp/>some<sp/>code</highlight></codeline>
<codeline lineno="1558"><highlight class="comment">*)<sp/>07<sp/>sep<sp/>2005:<sp/>(!)<sp/>Changed<sp/>to<sp/>std::vector<sp/>interface</highlight></codeline>
<codeline lineno="1559"><highlight class="comment">*)<sp/>12<sp/>aug<sp/>2005:<sp/>Initial<sp/>release</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"></highlight></codeline>
<codeline lineno="1561"><highlight class="comment"></highlight></codeline>
<codeline lineno="1562"><highlight class="comment">16.<sp/>contact<sp/>information</highlight></codeline>
<codeline lineno="1563"><highlight class="comment">-----------------------</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"></highlight></codeline>
<codeline lineno="1565"><highlight class="comment">Feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>with<sp/>suggestions,<sp/>problems,<sp/>comments,<sp/>...<sp/>concerning</highlight></codeline>
<codeline lineno="1566"><highlight class="comment">LodePNG.<sp/>If<sp/>you<sp/>encounter<sp/>a<sp/>PNG<sp/>image<sp/>that<sp/>doesn&apos;t<sp/>work<sp/>properly<sp/>with<sp/>this</highlight></codeline>
<codeline lineno="1567"><highlight class="comment">decoder,<sp/>feel<sp/>free<sp/>to<sp/>send<sp/>it<sp/>and<sp/>I&apos;ll<sp/>use<sp/>it<sp/>to<sp/>find<sp/>and<sp/>fix<sp/>the<sp/>problem.</highlight></codeline>
<codeline lineno="1568"><highlight class="comment"></highlight></codeline>
<codeline lineno="1569"><highlight class="comment">My<sp/>email<sp/>address<sp/>is<sp/>(puzzle<sp/>the<sp/>account<sp/>and<sp/>domain<sp/>together<sp/>with<sp/>an<sp/>@<sp/>symbol):</highlight></codeline>
<codeline lineno="1570"><highlight class="comment">Domain:<sp/>gmail<sp/>dot<sp/>com.</highlight></codeline>
<codeline lineno="1571"><highlight class="comment">Account:<sp/>lode<sp/>dot<sp/>vandevenne.</highlight></codeline>
<codeline lineno="1572"><highlight class="comment"></highlight></codeline>
<codeline lineno="1573"><highlight class="comment"></highlight></codeline>
<codeline lineno="1574"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2008<sp/>Lode<sp/>Vandevenne</highlight></codeline>
<codeline lineno="1575"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Mat/Projects/doxygraph/examples/doxygen-1.8.4/src/lodepng.h"/>
  </compounddef>
</doxygen>

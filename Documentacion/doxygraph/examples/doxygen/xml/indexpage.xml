<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Doxygen Internals</title>
    <detaileddescription>
<para><heading level="2">Introduction</heading>
</para><para>This page provides a high-level overview of the internals of doxygen, with links to the relevant parts of the code. This document is intended for developers who want to work on doxygen. Users of doxygen are referred to the <ulink url="http://www.doxygen.org/manual.html">User Manual</ulink>.</para><para>The generic starting point of the application is of cource the <ref refid="df/d0a/main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main()</ref> function.</para><para><heading level="2">Configuration options</heading>
</para><para>Configuration file data is stored in singleton class <ref refid="dd/d34/class_config" kindref="compound">Config</ref> and can be accessed using wrapper macros Config_getString(), Config_getInt(), Config_getList(), Config_getEnum(), and Config_getBool() depending on the type of the option.</para><para>The format of the configuration file (options and types) is defined by the file <computeroutput>config.xml</computeroutput>. As part of the build process, the python script <computeroutput>configgen.py</computeroutput> will create a file <ref refid="d5/dbd/configoptions_8cpp_source" kindref="compound">configoptions.cpp</ref> from this, which serves as the input for the configuration file parser that is invoked using <ref refid="dd/d34/class_config_1ad24d9fb4336f610c7c98cc4ddb9730e7" kindref="member">Config::parse()</ref></para><para><heading level="2">Gathering Input files</heading>
</para><para>After the configuration is known, the input files are searched using searchInputFiles() and any tag files are read using readTagFile()</para><para><heading level="2">Parsing Input files</heading>
</para><para>The function parseFiles() takes care of parsing all files. It uses the <ref refid="d4/d0d/class_parser_manager" kindref="compound">ParserManager</ref> singleton factory to create a suitable parser object for each file. Each parser implements the abstract interface <ref refid="d5/d84/class_parser_interface" kindref="compound">ParserInterface</ref>.</para><para>If the parser indicates it needs preprocessing via <ref refid="d5/d84/class_parser_interface_1a36c669b17b64a6e3847f27d70a5398d2" kindref="member">ParserInterface::needsPreprocessing()</ref>, doxygen will call preprocessFile() on the file.</para><para>A second step is to convert multiline C++-style comments into C style comments for easier processing later on. As side effect of this step also aliases (ALIASES option) are resolved. The function that performs these 2 tasks is called convertCppComments().</para><para><emphasis>Note:</emphasis> Alias resolution should better be done in a separate step as it is now coupled to C/C++ code and does not work automatically for other languages!</para><para>The third step is the actual language parsing and is done by calling <ref refid="d5/d84/class_parser_interface_1a09ced377e619d40b7339187bad88341e" kindref="member">ParserInterface::parseInput()</ref> on the parser interface returned by the <ref refid="d4/d0d/class_parser_manager" kindref="compound">ParserManager</ref>.</para><para>The result of parsing is a tree of <ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> objects. These <ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> objects are wrapped in a <ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> object and stored on disk using Entry::createNavigationIndex() on the root node of the tree.</para><para>Each <ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> object roughly contains the raw data for a symbol and is later converted into a <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> object.</para><para>When a parser finds a special comment block in the input, it will do a first pass parsing via <ref refid="db/d0d/commentscan_8h_1aca4d7871b4c0228f614cb1433ba15e86" kindref="member">parseCommentBlock()</ref>. During this pass the comment block is split into multiple parts if needed. Some data that is later needed is extracted like section labels, xref items, and formulas. Also Markdown markup is processed using processMarkdown() during this pass.</para><para><heading level="2">Resolving relations</heading>
</para><para>The <ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> objects created and filled during parsing are stored on disk (to keep memory needs low). The name, parent/child relation, and location on disk of each <ref refid="d4/dd7/class_entry" kindref="compound">Entry</ref> is stored as a tree of <ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> nodes, which is kept in memory.</para><para><ref refid="de/d6a/class_doxygen" kindref="compound">Doxygen</ref> does a number of tree walks over the <ref refid="da/dc6/class_entry_nav" kindref="compound">EntryNav</ref> nodes in the tree to build up the data structures needed to produce the output.</para><para>The resulting data structures are all children of the generic base class called <ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> which holds all non-specific data for a symbol definition.</para><para><ref refid="d5/dcc/class_definition" kindref="compound">Definition</ref> is an abstract base class. Concrete subclasses are<itemizedlist>
<listitem><para><ref refid="d1/dcf/class_class_def" kindref="compound">ClassDef</ref>: for storing class/struct/union related data</para></listitem><listitem><para><ref refid="d0/d07/class_namespace_def" kindref="compound">NamespaceDef</ref>: for storing namespace related data</para></listitem><listitem><para><ref refid="de/db0/class_file_def" kindref="compound">FileDef</ref>: for storing file related data</para></listitem><listitem><para><ref refid="d4/dd4/class_dir_def" kindref="compound">DirDef</ref>: for storing directory related data</para></listitem></itemizedlist>
</para><para>For doxygen specific concepts the following subclasses are available<itemizedlist>
<listitem><para><ref refid="d8/d09/class_group_def" kindref="compound">GroupDef</ref>: for storing grouping related data</para></listitem><listitem><para><ref refid="dd/d41/class_page_def" kindref="compound">PageDef</ref>: for storing page related data</para></listitem></itemizedlist>
</para><para>Finally the data for members of classes, namespaces, and files is stored in the subclass <ref refid="da/d09/class_member_def" kindref="compound">MemberDef</ref>.</para><para><heading level="2">Producing output</heading>
</para><para>TODO</para><para><heading level="2">Topics TODO</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="d7/d59/struct_grouping" kindref="compound">Grouping</ref> of files in Model / Parser / Generator categories</para></listitem><listitem><para>Index files based on <ref refid="d9/dd5/class_index_intf" kindref="compound">IndexIntf</ref><itemizedlist>
<listitem><para>HTML navigation</para></listitem><listitem><para>HTML Help (chm)</para></listitem><listitem><para>Documentation Sets (XCode)</para></listitem><listitem><para>Qt Help (qhp)</para></listitem><listitem><para>Eclipse Help</para></listitem></itemizedlist>
</para></listitem><listitem><para>Search index<itemizedlist>
<listitem><para>Javascript based</para></listitem><listitem><para>Server based</para></listitem><listitem><para>External</para></listitem></itemizedlist>
</para></listitem><listitem><para>Citations<itemizedlist>
<listitem><para>via bibtex</para></listitem></itemizedlist>
</para></listitem><listitem><para>Various processing steps for a comment block<itemizedlist>
<listitem><para>comment conversion</para></listitem><listitem><para>comment scanner</para></listitem><listitem><para>markdown processor</para></listitem><listitem><para>doc tokeninzer</para></listitem><listitem><para>doc parser</para></listitem><listitem><para>doc visitors</para></listitem></itemizedlist>
</para></listitem><listitem><para>Diagrams and Images<itemizedlist>
<listitem><para>builtin</para></listitem><listitem><para>via Graphviz dot</para></listitem><listitem><para>via mscgen</para></listitem><listitem><para>PNG generation</para></listitem></itemizedlist>
</para></listitem><listitem><para>Output formats: OutputGen, <ref refid="df/dc8/class_output_list" kindref="compound">OutputList</ref>, and <ref refid="d0/d78/class_doc_visitor" kindref="compound">DocVisitor</ref><itemizedlist>
<listitem><para>Html: <ref refid="d7/d41/class_html_generator" kindref="compound">HtmlGenerator</ref> and <ref refid="d5/d1b/class_html_doc_visitor" kindref="compound">HtmlDocVisitor</ref></para></listitem><listitem><para>Latex: <ref refid="d3/d77/class_latex_generator" kindref="compound">LatexGenerator</ref> and <ref refid="d3/df4/class_latex_doc_visitor" kindref="compound">LatexDocVisitor</ref></para></listitem><listitem><para>RTF: <ref refid="d0/da4/class_r_t_f_generator" kindref="compound">RTFGenerator</ref> and <ref refid="d1/d4b/class_r_t_f_doc_visitor" kindref="compound">RTFDocVisitor</ref></para></listitem><listitem><para>Man: <ref refid="de/da5/class_man_generator" kindref="compound">ManGenerator</ref> and <ref refid="d8/dcf/class_man_doc_visitor" kindref="compound">ManDocVisitor</ref></para></listitem><listitem><para>XML: generateXML() and <ref refid="d4/dc8/class_xml_doc_visitor" kindref="compound">XmlDocVisitor</ref></para></listitem><listitem><para>print: debugging via <ref refid="d3/d43/class_print_doc_visitor" kindref="compound">PrintDocVisitor</ref></para></listitem><listitem><para>text: <ref refid="d2/d63/class_text_doc_visitor" kindref="compound">TextDocVisitor</ref> for tooltips</para></listitem><listitem><para>perlmod</para></listitem></itemizedlist>
</para></listitem><listitem><para>i18n via <ref refid="d8/dfb/class_translator" kindref="compound">Translator</ref> and <ref refid="d2/d48/language_8cpp_source" kindref="compound">language.cpp</ref></para></listitem><listitem><para>Customizing the layout via <ref refid="dc/d1d/class_layout_doc_manager" kindref="compound">LayoutDocManager</ref></para></listitem><listitem><para>Parsers<itemizedlist>
<listitem><para>C Preprocessing<itemizedlist>
<listitem><para>const expression evaluation</para></listitem></itemizedlist>
</para></listitem><listitem><para>C link languages</para></listitem><listitem><para>Python</para></listitem><listitem><para>Fortran</para></listitem><listitem><para>VHDL</para></listitem><listitem><para>TCL</para></listitem><listitem><para>Tag files</para></listitem></itemizedlist>
</para></listitem><listitem><para>Marshaling to/from disk</para></listitem><listitem><para>Portability functions</para></listitem><listitem><para>Utility functions </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>

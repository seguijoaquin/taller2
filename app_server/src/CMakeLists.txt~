#Añade una librería llamada WebServer (libWbServer.a bajo linux) a partir del fichero fuente WebServer.cpp
ADD_LIBRARY(WebServer WebServer)

###### Main

if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-std=gnu++0x)
endif()


# rocksdb usa pthread agrego el flag -pthread a la compilacion y linkeo.
SET( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -pthread" )
SET( CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -pthread" )

#Asegurarse de que el compilador puede encontrar los ficheros de nuestra librería Hello
INCLUDE_DIRECTORIES(${APPSERVER_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${APPSERVER_SOURCE_DIR}/lib/mongoose)

INCLUDE_DIRECTORIES("${APPSERVER_SOURCE_DIR}/lib/rocksdb" "${APPSERVER_SOURCE_DIR}/lib/rocksdb/include" "/usr/local/lib" "/usr/local/include")
LINK_DIRECTORIES("${APPSERVER_SOURCE_DIR}/lib/rocksdb" "${APPSERVER_SOURCE_DIR}/lib/rocksdb/include" "/usr/local/lib" "/usr/local/include")

#Añade un binario llamado "helloWorld" que es construido del fichero fuente "main.cpp"
#La extensión se encuentra automáticamente
ADD_EXECUTABLE(helloWorld main)
 
#Enlaza el ejecutable con la librería Hello
TARGET_LINK_LIBRARIES(helloWorld WebServer)


TARGET_LINK_LIBRARIES(helloWorld librocksdb.a) 
TARGET_LINK_LIBRARIES(helloWorld gflags )
TARGET_LINK_LIBRARIES(helloWorld snappy )
TARGET_LINK_LIBRARIES(helloWorld bz2 )
TARGET_LINK_LIBRARIES(helloWorld z)



